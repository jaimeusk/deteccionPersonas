<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="19:MasterAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f775cf78470"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f775d302020"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f775d302020"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f775d2feaa0"/></to>
    </wire>
    <wire loc="20:MasterAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f775cf78ab0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f775d24c9a0"/></to>
    </wire>
    <wire loc="51:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f775d24c9a0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f775d249620"/></to>
    </wire>
    <wire loc="21:MasterAppC.nc">
      <from><interface-ref name="TimerTramaTDMA" scoped="" ref="0x7f775cf69e70"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775cebf980"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775cebf980"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f775ceb62c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="22:MasterAppC.nc">
      <from><interface-ref name="TimerLeds" scoped="" ref="0x7f775cf65360"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775cb90260"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775cb90260"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f775ceb62c0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="23:MasterAppC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f775cf07c30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f775bdd7c30"/></to>
    </wire>
    <wire loc="65:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f775bdd7c30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f775b48f8b0"/></to>
    </wire>
    <wire loc="24:MasterAppC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f775cef6be0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f775bdd68b0"/></to>
    </wire>
    <wire loc="66:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f775bdd68b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f775b48e590"/></to>
    </wire>
    <wire loc="25:MasterAppC.nc">
      <from><interface-ref name="AMControl" scoped="" ref="0x7f775cee3190"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f775cb8a680"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f775cb8a680"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f775cb59cc0"/></to>
    </wire>
    <wire loc="26:MasterAppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f775cef7020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f775bdd7020"/></to>
    </wire>
    <wire loc="64:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f775bdd7020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f775b490bc0"/></to>
    </wire>
    <wire loc="27:MasterAppC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f775cee7840"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f775bdd1910"/></to>
    </wire>
    <wire loc="54:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f775bdd1910"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f775cb86b20"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2ff4d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775bf3cdd0"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2ff4d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775bfc5b70"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2ff4d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775bfe3750"/></to>
    </wire>
    <wire loc="52:../../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2ff4d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775c004080"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2ff4d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775c155620"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2ff4d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775c243c60"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2ff4d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775c9dbc70"/></to>
    </wire>
    <wire loc="73:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2ff4d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775b617020"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateImplC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2ff4d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775c716020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2ff4d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775ca85510"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2ff4d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775cead080"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f775d263140"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f775d7ab1e0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f775d7ab1e0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f775d350140"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f775d263b60"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775d301410"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f775d301410"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775d2fc690"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2623a0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2ff4d0"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f775d2f35f0"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f775d2fcd00"/></to>
    </wire>
    <wire loc="50:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f775d2ef3b0"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f775d2bf020"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f775d2bf020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775d2bc020"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f775d2efa90"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775d2f2bc0"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f775d2ee1b0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775d221dd0"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f775d2bc020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775d2a6980"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f775d2b56c0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f775d2a4020"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f775d426c80"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f775d2a3320"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d34f040"/></to>
    </wire>
    <wire loc="56:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f775d34a490"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f775d5839a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f775d221dd0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775d249020"/></to>
    </wire>
    <wire loc="54:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f775d241b50"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f775d24a590"/></to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f775d24a590"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f775cfa39e0"/></to>
    </wire>
    <wire loc="55:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f775d247e30"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f775d223830"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f775d223830"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f775cf8d020"/></to>
    </wire>
    <wire loc="56:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f775d240020"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f775d222b50"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f775d222b50"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f775cf87630"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775cf92c50"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x7f775d1b4020"/></to>
    </wire>
    <wire loc="737:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f775d1b4020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d05d540"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775cf8b2f0"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x7f775d1b28a0"/></to>
    </wire>
    <wire loc="738:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f775d1b28a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d058b90"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775cf867a0"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x7f775d1af020"/></to>
    </wire>
    <wire loc="739:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f775d1af020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d052060"/></to>
    </wire>
    <wire loc="693:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f775d206d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d10db90"/></to>
    </wire>
    <wire loc="706:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f775d1ede50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0d5060"/></to>
    </wire>
    <wire loc="844:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f775d1623d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0c5060"/></to>
    </wire>
    <wire loc="864:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f775d1673e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d027b90"/></to>
    </wire>
    <wire loc="845:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f775d1903f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0c0540"/></to>
    </wire>
    <wire loc="711:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f775d1e8e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0cbb90"/></to>
    </wire>
    <wire loc="724:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f775d1cd020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d094060"/></to>
    </wire>
    <wire loc="748:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f775d19f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d031060"/></to>
    </wire>
    <wire loc="848:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f775d18b3f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0b4060"/></to>
    </wire>
    <wire loc="858:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f775d1773e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d048b90"/></to>
    </wire>
    <wire loc="870:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f775d1583f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d021060"/></to>
    </wire>
    <wire loc="696:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f775d1fe580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0fcb90"/></to>
    </wire>
    <wire loc="849:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f775d189bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0af540"/></to>
    </wire>
    <wire loc="701:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f775d1f9580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0f1540"/></to>
    </wire>
    <wire loc="714:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f775d1df710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0bbb90"/></to>
    </wire>
    <wire loc="727:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f775d1c68a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d083060"/></to>
    </wire>
    <wire loc="740:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f775d1ad8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d04d540"/></to>
    </wire>
    <wire loc="751:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f775d1988a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d021060"/></to>
    </wire>
    <wire loc="691:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f775d20bd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d117060"/></to>
    </wire>
    <wire loc="704:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f775d1f2d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0e06d0"/></to>
    </wire>
    <wire loc="717:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f775d1d8e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0aab90"/></to>
    </wire>
    <wire loc="843:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f775d193bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0c5060"/></to>
    </wire>
    <wire loc="861:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f775d170bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d037b90"/></to>
    </wire>
    <wire loc="868:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f775d15bbb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d021060"/></to>
    </wire>
    <wire loc="854:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f775d17fbc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d062060"/></to>
    </wire>
    <wire loc="722:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f775d1d3e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d09f740"/></to>
    </wire>
    <wire loc="735:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f775d1b9020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d069b90"/></to>
    </wire>
    <wire loc="746:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f775d1a4020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d03d540"/></to>
    </wire>
    <wire loc="862:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f775d16c3e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d031060"/></to>
    </wire>
    <wire loc="851:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f775d1863e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d073060"/></to>
    </wire>
    <wire loc="694:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f775d203580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d106060"/></to>
    </wire>
    <wire loc="707:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f775d1ea710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0d0540"/></to>
    </wire>
    <wire loc="744:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f775d1a9020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d048b90"/></to>
    </wire>
    <wire loc="712:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f775d1e5710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0c5060"/></to>
    </wire>
    <wire loc="725:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f775d1cb8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d08f540"/></to>
    </wire>
    <wire loc="749:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f775d19d8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d02c540"/></to>
    </wire>
    <wire loc="853:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f775d1813f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d069b90"/></to>
    </wire>
    <wire loc="689:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f775d20ecb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d122540"/></to>
    </wire>
    <wire loc="702:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f775d1f7d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0ecb90"/></to>
    </wire>
    <wire loc="715:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f775d1dde50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0b4060"/></to>
    </wire>
    <wire loc="728:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f775d1c3020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d07e540"/></to>
    </wire>
    <wire loc="855:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f775d17c3f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0aab90"/></to>
    </wire>
    <wire loc="859:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f775d175bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d042060"/></to>
    </wire>
    <wire loc="865:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f775d165bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d021060"/></to>
    </wire>
    <wire loc="733:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f775d1be020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d073060"/></to>
    </wire>
    <wire loc="856:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f775d17abc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0a4060"/></to>
    </wire>
    <wire loc="692:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f775d208580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d112540"/></to>
    </wire>
    <wire loc="705:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f775d1ef710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0dbb90"/></to>
    </wire>
    <wire loc="718:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f775d1d5710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0a4060"/></to>
    </wire>
    <wire loc="852:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f775d184bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d06e540"/></to>
    </wire>
    <wire loc="863:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f775d16abb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d02c540"/></to>
    </wire>
    <wire loc="723:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f775d1d08a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d09ab90"/></to>
    </wire>
    <wire loc="736:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f775d1b78a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d062060"/></to>
    </wire>
    <wire loc="747:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f775d1a28a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d037b90"/></to>
    </wire>
    <wire loc="695:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f775d201d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d101540"/></to>
    </wire>
    <wire loc="745:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f775d1a78a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d042060"/></to>
    </wire>
    <wire loc="700:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f775d1fcd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0f6060"/></to>
    </wire>
    <wire loc="713:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f775d1e2e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0c0540"/></to>
    </wire>
    <wire loc="726:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f775d1c8020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d089b90"/></to>
    </wire>
    <wire loc="750:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f775d19a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d027b90"/></to>
    </wire>
    <wire loc="690:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f775d20d580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d11db90"/></to>
    </wire>
    <wire loc="703:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f775d1f4580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0e6060"/></to>
    </wire>
    <wire loc="716:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f775d1da710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0af540"/></to>
    </wire>
    <wire loc="729:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f775d1c18a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d079b90"/></to>
    </wire>
    <wire loc="860:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f775d1723e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d03d540"/></to>
    </wire>
    <wire loc="847:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f775d160ba0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0bbb90"/></to>
    </wire>
    <wire loc="846:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f775d18ebc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0bbb90"/></to>
    </wire>
    <wire loc="734:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f775d1bc8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d06e540"/></to>
    </wire>
    <wire loc="867:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f775d15d3e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d027b90"/></to>
    </wire>
    <wire loc="871:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f775d156bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d04d540"/></to>
    </wire>
    <wire loc="842:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f775d195060"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f775d0cbb90"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f775ceb62c0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f775ceade20"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f775ceade20"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775cbb88e0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f775cead080"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775cc65020"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775cbb88e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775b803db0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f775cea3750"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f775cba8020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f775cc65020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775b9f9a10"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f775cbb0020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775cc392f0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f775cc34850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f775cc65870"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f775cc65870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f775b9f25f0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f775cb9e300"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f775ccde8c0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f775ccde8c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f775ccc2cf0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f775b9f9a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775b9dc360"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f775b9ecd20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f775b9f72a0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f775b9f72a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f775b9dcbf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f775b9ee9b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f775ccde8c0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f775b9d8dd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f775b9e1020"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f775b9e1020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f775ce71020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775b9d6440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775b9e0760"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775b9e0760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775ce70d60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f775b9d5760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f775b9dfa80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f775b9dfa80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f775ce6d690"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f775ce71020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f775ce5acd0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f775ce5acd0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775ce03260"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775ce70d60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f775ce585a0"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f775ce585a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f775cda16d0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f775ce6d690"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f775ce57a20"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f775ce57a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f775cda0ac0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f775ce71020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f775ce5acd0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775ce70d60"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f775ce51d40"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f775ce51d40"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f775cd91220"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f775ce6d690"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f775ce4f160"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f775ce4f160"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f775cd90610"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f775ce71020"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f775ce5acd0"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775ce70d60"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f775ce4d020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f775ce4d020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f775cd8a6d0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f775ce6d690"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f775ce4c570"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f775ce4c570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f775cd88ac0"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f775ce71020"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f775ce5acd0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775ce70d60"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f775ce4a410"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f775ce4a410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f775cd82b30"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f775ce6d690"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f775ce49890"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f775ce49890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f775cd80020"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f775ce71020"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f775ce5acd0"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775ce70d60"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f775ce478c0"/></to>
    </wire>
    <wire loc="175:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f775ce478c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f775cd7a220"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f775ce6d690"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f775ce46d40"/></to>
    </wire>
    <wire loc="176:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f775ce46d40"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f775cd78610"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f775ce71020"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f775ce5acd0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775ce70d60"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f775ce44a50"/></to>
    </wire>
    <wire loc="182:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f775ce44a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f775cd726d0"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f775ce6d690"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f775ce42020"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f775ce42020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f775cd71ac0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f775ce5da50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f775cda8220"/></to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f775ce5eae0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f775cdafcb0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f775ce4b3e0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f775cd877a0"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f775ce64d40"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f775cdaf020"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f775ce42da0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f775cd707a0"/></to>
    </wire>
    <wire loc="112:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f775ce685a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f775cdfd6d0"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f775ce52da0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f775cd97cb0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f775ce52020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f775cd97020"/></to>
    </wire>
    <wire loc="146:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f775ce54a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f775cd99b30"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f775ce5bda0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f775cda62f0"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f775ce48890"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f775cd80cb0"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f775ce5b020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f775cda7610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f775ce6cdb0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775ce0b3e0"/></to>
    </wire>
    <wire loc="119:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f775ce658c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f775cdb1b30"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f775ce5f8d0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f775cdb67a0"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f775ce4e020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f775cd8f2f0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f775ce67a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f775cdb7ac0"/></to>
    </wire>
    <wire loc="177:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f775ce45ae0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f775cd772f0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f775ce56a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f775cd9f7a0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f775ce092f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f775ce0abf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f775ce09940"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f775cd693f0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f775ce07020"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f775cd69b80"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775cdb5610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775ce0b3e0"/></to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f775cdb4c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f775ce0abf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775cdaeb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775ce0b3e0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f775cdac2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f775ce0abf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775cda5160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775ce0b3e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f775cda47a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f775ce0abf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f775ce01100"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f775ce02a60"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f775ce01750"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f775cd68430"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f775ce01da0"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f775cd68bc0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775cd9e610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775ce03260"/></to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f775cd9dc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f775ce02a60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775cd96b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775ce03260"/></to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f775cd942f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f775ce02a60"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775cd8e160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775ce03260"/></to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f775cd8d7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f775ce02a60"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775cd86610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775ce03260"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f775cd85c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f775ce02a60"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775cd7fb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775ce03260"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f775cd7d2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f775ce02a60"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775cd76160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775ce03260"/></to>
    </wire>
    <wire loc="179:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f775cd757a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f775ce02a60"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775cd6f610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f775ce03260"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f775cd6ec50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f775ce02a60"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f775cca40f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f775ccdc8e0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f775ccdc8e0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f775ccd6b80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f775ccc7c50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f775ce5acd0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f775cc309c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f775b7fc3d0"/></from>
      <to><interface-ref name="TimerFrom" scoped="" ref="0x7f775cbb0020"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimeSkew" scoped="" ref="0x7f775b7f5a40"/></from>
      <to><interface-ref name="TimeSkew" scoped="" ref="0x7f775cbab450"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f775b7f75d0"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f775d2f35f0"/></to>
    </wire>
    <wire loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f775b7f4100"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f775cb59cc0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f775cb35b70"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f775cb877f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f775cb58d20"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f775cb58d20"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f775befe020"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f775cb84880"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f775cb56c00"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f775cb56c00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f775befddf0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f775cb83020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f775cb538f0"/></to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f775cb538f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f775befaa80"/></to>
    </wire>
    <wire loc="89:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f775cb7f310"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f775c0d0550"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f775c0d0550"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f775c0c2a80"/></to>
    </wire>
    <wire loc="86:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f775cb65130"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f775cb48cb0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f775cb48cb0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f775cb1a080"/></to>
    </wire>
    <wire loc="81:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f775cb86b20"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f775cb56020"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f775cb56020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f775befd210"/></to>
    </wire>
    <wire loc="85:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f775cb80080"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f775cb51990"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f775cb51990"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f775cb1b020"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f775cb83c90"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f775cb542d0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f775cb542d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f775befb470"/></to>
    </wire>
    <wire loc="90:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f775cb703f0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f775c0cc660"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f775c0cc660"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f775c0beaf0"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f775cb35b70"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f775bf2fb80"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f775cb3fe30"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f775bef88b0"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f775cb32d20"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f775bef9ce0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f775cb4a9b0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f775cb1c020"/></to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f775cb1c020"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c0d5670"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f775cb1a080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f775bf2f080"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f775cb1b020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f775c0d26e0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f775cb3d020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f775cb1ab70"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f775cb1ab70"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f775bf1b020"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f775cb47c70"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f775cb1b9d0"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f775cb1b9d0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f775c0d1a70"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioResource" scoped="" ref="0x7f775beef0f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775cb2e210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f775bef7860"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f775cb27990"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f775cb27990"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f775bf98c90"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f775bef6690"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f775cb1f840"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f775cb1f840"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f775bf97a50"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f775bef24d0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f775c2fdb20"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f775bef6ce0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c0d5670"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c0d5670"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c0c7d20"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775bef5b70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c0d10c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c0d10c0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c0c3640"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f775bef4610"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f775ca8edc0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f775ca8edc0"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f775ca84970"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f775bef11f0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f775cb13330"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f775cb13330"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f775cb0e7e0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f775beefd30"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f775d24c9a0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f775bf2fb80"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f775bf2cd90"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f775c0d1a70"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f775c0c2020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f775bf1b020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f775bf19410"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f775bf98c90"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f775bf8da20"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f775bf2f080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f775bf282d0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f775cb28500"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f775bf985e0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f775bf985e0"/></from>
      <to><interface-ref name="BareReceive" scoped="" ref="0x7f775bf8d370"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f775c0d26e0"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f775c0c4c50"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775cb2e210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775bf9abe0"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775bf9abe0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775bf907b0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f775cb1e6f0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f775bf998e0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f775bf998e0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7f775bf8f4d0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f775cb28bc0"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f775bf96170"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f775bf96170"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f775bf8b020"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f775bf97a50"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f775bf8c840"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f775bf2cd90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f775cb16390"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f775cb16390"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f775cb12e70"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f775bf956b0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f775bfec220"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f775bfec220"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f775bfe6a10"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f775bfeb020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f775bf1e350"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f775bf1e350"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f775bf1bd70"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f775bf1bd70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f775bf33ce0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f775bf33ce0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f775bf2d860"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f775bf2d860"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f775cb16e80"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f775cb16e80"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f775cb0f990"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f775bf95020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f775bf30980"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f775bf30980"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f775bf2c690"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f775bf2c690"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f775bfccaa0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f775bfccaa0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f775bfc8e30"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f775bfc9950"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f775cb14b40"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f775cb14b40"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f775c15a7c0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f775c15a7c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f775c152020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775cb0d640"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775ca9e950"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775ca9e950"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775ca85b80"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f775cb05b50"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f775ca99bf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f775ca99bf0"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f775ca82740"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f775cb02760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f775c2536c0"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f775cb02760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f775c15d5c0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f775c15d5c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f775c155ca0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f775c2536c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f775c242320"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f775cafa2a0"/></from>
      <to><interface-ref name="CC2420Transmit" scoped="" ref="0x7f775c250020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f775c250020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f775c242bc0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f775cb01060"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f775c250cb0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f775c250cb0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f775c241970"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f775caf8330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c0d5670"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775caf0920"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c0d10c0"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f775caf7420"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f775c00aa20"/></to>
    </wire>
    <wire loc="56:../../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f775c00aa20"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f775c003a20"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControlState" scoped="" ref="0x7f775caf4110"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f775c00caa0"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f775c00caa0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f775c71a1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f775caf7bf0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f775d24c9a0"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="sendDone_task" scoped="" ref="0x7f775cae6b70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="stopDone_task" scoped="" ref="0x7f775cae7ba0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="startDone_task" scoped="" ref="0x7f775cae8c20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ReadRssi" scoped="" ref="0x7f775ca8b0c0"/></from>
      <to><interface-ref name="ReadRssi" scoped="" ref="0x7f775ca81b40"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="StartupTimer" scoped="" ref="0x7f775ca7ea10"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f775c9d8690"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f775c9d8690"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f775c9d22e0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f775ca7ac50"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f775c991370"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f775c991370"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f775c983da0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f775ca78e70"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7f775c98ece0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f775c98ece0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f775c972020"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f775ca760f0"/></from>
      <to><interface-ref name="VREN" scoped="" ref="0x7f775c98b380"/></to>
    </wire>
    <wire loc="77:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f775c98b380"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f775c967b00"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f775ca71c00"/></from>
      <to><interface-ref name="InterruptCCA" scoped="" ref="0x7f775c94d400"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f775c94d400"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f775c7ec680"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f775ca5e1d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c388e20"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775c388e20"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c79a4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f775ca5d2b0"/></from>
      <to><interface-ref name="SRXON" scoped="" ref="0x7f775c3857b0"/></to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f775c3857b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f775ca5d9c0"/></from>
      <to><interface-ref name="SRFOFF" scoped="" ref="0x7f775c384ae0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f775c384ae0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f775ca5fa40"/></from>
      <to><interface-ref name="SXOSCON" scoped="" ref="0x7f775c386ad0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f775c386ad0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f775ca5f120"/></from>
      <to><interface-ref name="SXOSCOFF" scoped="" ref="0x7f775c383160"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f775c383160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f775ca64be0"/></from>
      <to><interface-ref name="FSCTRL" scoped="" ref="0x7f775c37a870"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f775c37a870"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f775ca66550"/></from>
      <to><interface-ref name="IOCFG0" scoped="" ref="0x7f775c378880"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f775c378880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f775ca66e00"/></from>
      <to><interface-ref name="IOCFG1" scoped="" ref="0x7f775c3770a0"/></to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f775c3770a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f775ca65710"/></from>
      <to><interface-ref name="MDMCTRL0" scoped="" ref="0x7f775c37fe50"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f775c37fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775ca63020"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c37e670"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c37e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f775ca705e0"/></from>
      <to><interface-ref name="PANID" scoped="" ref="0x7f775c368500"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f775c368500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f775ca68c30"/></from>
      <to><interface-ref name="IEEEADR" scoped="" ref="0x7f775c369ce0"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f775c369ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f775ca638e0"/></from>
      <to><interface-ref name="RXCTRL1" scoped="" ref="0x7f775c37be50"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f775c37be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f775ca621c0"/></from>
      <to><interface-ref name="RSSI" scoped="" ref="0x7f775c37ee50"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f775c37ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f775ca62a70"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f775c37ce50"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f775c37ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SyncResource" scoped="" ref="0x7f775ca5cd90"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c356a80"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775c356a80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c79a4d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RssiResource" scoped="" ref="0x7f775ca5c020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c3299e0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775c3299e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c79a4d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f775ca6c390"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f775c2fdb20"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f775ca7e020"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f775c2fcd20"/></to>
    </wire>
    <wire loc="23:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f775c2fcd20"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f775c2e0310"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="syncDone" scoped="" ref="0x7f775ca51820"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="sync" scoped="" ref="0x7f775ca52940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f775c9dbc70"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775c9d3a20"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f775c9d3a20"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775b79edf0"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f775c9d22e0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f775b79c690"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f775b79edf0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775b795020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f775b79c690"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f775b78fa90"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f775b795020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775b779a30"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f775b788210"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f775b795870"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f775b795870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f775b778340"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f775b78be10"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f775c9bb650"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f775c9bb650"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f775c9b52e0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f775b7744c0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f775b77e570"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f775b77e570"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f775ce71020"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775b773a90"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775b77dc10"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775b77dc10"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775ce70d60"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f775b772da0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f775b77b020"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f775b77b020"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f775ce6d690"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f775c9b26d0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f775ccdc8e0"/></to>
    </wire>
    <wire loc="73:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f775c9906a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f775c97d4a0"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f775c98f9d0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f775c978b00"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f775c9920e0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f775c989710"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f775c98c020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f775c96c630"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c987930"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f775d206d50"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c981020"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f775d1cd020"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c97c610"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f775d208580"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c977c60"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f775d20ecb0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c9712f0"/></from>
      <to><interface-ref name="Port46" scoped="" ref="0x7f775d1c3020"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c96b7a0"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f775d1d08a0"/></to>
    </wire>
    <wire loc="69:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c966c60"/></from>
      <to><interface-ref name="Port45" scoped="" ref="0x7f775d1c68a0"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f775c94a700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f775c941c20"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f775c94c060"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f775c7ddb70"/></to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775c92f760"/></from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f775ce54a50"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430Capture" scoped="" ref="0x7f775c92ea80"/></from>
      <to><interface-ref name="CaptureB1" scoped="" ref="0x7f775ce52da0"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x7f775c92d930"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f775d1d08a0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f775c7eb2f0"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f775c91a3f0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f775c91a3f0"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f775c9043f0"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f775c7da7a0"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f775c91e620"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f775c91e620"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f775c90b7a0"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f775c90e3f0"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x7f775c8f73f0"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f775c917d50"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x7f775c900d50"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f775c9143f0"/></from>
      <to><interface-ref name="Port21" scoped="" ref="0x7f775c8fd3f0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f775c923bc0"/></from>
      <to><interface-ref name="Port12" scoped="" ref="0x7f775c907d50"/></to>
    </wire>
    <wire loc="80:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f775c911d50"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f775c8fad50"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f775c919710"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x7f775c903710"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f775c90d710"/></from>
      <to><interface-ref name="Port27" scoped="" ref="0x7f775c8f6710"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f775c913710"/></from>
      <to><interface-ref name="Port22" scoped="" ref="0x7f775c8fc710"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f775c91b020"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f775c905020"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f775c90f100"/></from>
      <to><interface-ref name="Port25" scoped="" ref="0x7f775c8f8100"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f775c918a30"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7f775c902a30"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f775c915020"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7f775c8fe020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f775c9248a0"/></from>
      <to><interface-ref name="Port11" scoped="" ref="0x7f775c908a30"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f775c912a30"/></from>
      <to><interface-ref name="Port23" scoped="" ref="0x7f775c8fba30"/></to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f775c385160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c379880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f775c3710a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f775c3780a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f775c363500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f775c365500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f775c384490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f775c36d880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f775c367500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f775c373880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f775c3740a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c387a90"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c799350"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c799350"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c791660"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f775c383e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f775c381490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f775c36ac80"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f775c381be0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f775c367ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f775c36d0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f775c37c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f775c36e0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f775c371880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f775c36e880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f775c364ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f775c365ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f775c374880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f775c3700a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f775c368ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f775c377880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f775c363ce0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f775c7972c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f775c386480"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f775c37f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f775c37b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f775c3720a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f775c372880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c3790a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f775c3802f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f775c37f020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f775c3837b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f775c369500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f775c364500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f775c3730a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f775c370880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f775c385e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f775c3760a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f775c380940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f775c376880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f775c36a0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f775c3629b0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f775c7972c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Fifo" scoped="" ref="0x7f775c7972c0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f775c78f890"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c78dba0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c78ca30"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775c79a4d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c790510"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c78b8b0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="WorkingState" scoped="" ref="0x7f775c77eb40"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f775c71f770"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f775c71f770"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f775c71a1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f775c789060"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c6fdc40"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775c6fdc40"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775b69d940"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f775c786c70"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f775c6fc8f0"/></to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f775c6fc8f0"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f775b69cd70"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f775c77e2e0"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f775c3ae020"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f775c3ae020"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f775b69a020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f775c787a70"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f775d24c9a0"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <from><interface-ref name="grant" scoped="" ref="0x7f775c77abd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/system/StateImplC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f775c71a1d0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f775c716b70"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f775b69a020"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f775c695850"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f775b69cd70"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f775c696110"/></to>
    </wire>
    <wire loc="105:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775b69d940"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c69bd80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f775b69c5d0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f775b692020"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f775b692020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f775c5172c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f775c696110"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f775c61aa10"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f775b69b410"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f775c696790"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f775c696790"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f775c619060"/></to>
    </wire>
    <wire loc="111:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f775c691a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f775b69a7c0"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775b684760"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775c6938e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f775c692690"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775b693340"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775b693340"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c518020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f775c68cb40"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f775b68dc10"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f775b68dc10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f775c51b4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775c6938e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775c61a250"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f775c695850"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f775c619c50"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775c69bd80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c61b470"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f775c6173e0"/></from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f775c691a40"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f775c6185b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f775c692690"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f775c612480"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f775c68cb40"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f775c617a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f775c607020"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f775c607020"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f775c5fe700"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f775c612c20"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f775d24c9a0"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <from><interface-ref name="signalDone_task" scoped="" ref="0x7f775c60f2f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f775c5ff2c0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f775c5f9c20"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f775c603d10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f775c5f92d0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f775c5cbbb0"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f775d193bc0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f775c5c83e0"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7f775d1903f0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f775c5c6bb0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f775d18ebc0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f775c5c33e0"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7f775d189bc0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f775c5c1bb0"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7f775d18b3f0"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7f775c5d0d10"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f775c46ed40"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f775b68b440"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f775c51a3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f775b68ba50"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f775c475020"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f775c475020"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f775c46ed40"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f775b691020"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f775c607020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f775b6927c0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f775c517ad0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f775c517ad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f775c480e80"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775c5168a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775b684760"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f775c5172c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f775c482a60"/></to>
    </wire>
    <wire loc="81:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f775c482a60"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f775b6136c0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f775c51b4d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f775c514d60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775c518020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c483ca0"/></to>
    </wire>
    <wire loc="80:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775c483ca0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775b614850"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7f775c51a3f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f775c513710"/></to>
    </wire>
    <wire loc="83:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f775c480e80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f775b612a70"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775c47f790"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775c5168a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f775c501bf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f775c480e80"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f775c513d80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f775c603d10"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f775c5015e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f775c5ff2c0"/></to>
    </wire>
    <wire loc="82:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f775c480270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f775b613e40"/></to>
    </wire>
    <wire loc="84:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775b6119d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775c47f790"/></to>
    </wire>
    <wire loc="85:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f775b6112d0"/></from>
      <to><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f775c47e020"/></to>
    </wire>
    <wire loc="87:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f775b6102b0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f775b617630"/></to>
    </wire>
    <wire loc="155:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f775b60e480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7f775c465bb0"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f775c5fe700"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f775c460700"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f775d193bc0"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f775c45ee40"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f775d18ebc0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f775c349c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f775c354da0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f775c34cb50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c346670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f775c33fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f775c346e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f775c3332f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f775c3352f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f775c351120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f775c33b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f775c3362f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f775c34bc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f775c34ac60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f775c341670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f775c343e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f775c345670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c355760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c799350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f775c350aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f775c34f120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f775c33aa70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f775c34f870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f775c336ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f775c351dc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f775c33ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f775c34a480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c34b480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f775c354750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f775c33de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f775c33e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f775c33c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f775c334ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f775c335ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f775c342670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f775c33ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f775c337ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f775c344670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f775c333ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f775c7972c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f775c354100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f775c34c370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f775c349480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f775c341e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f775c345e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f775c33f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f775c348670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f775c352450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c348e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f775c34e020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f775c34ecc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f775c3372f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f775c338ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f775c350450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f775c3382f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f775c3342f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f775c342e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f775c33d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f775c352aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f775c351770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f775c344e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f775c34e670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f775c343670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f775c33be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f775c3317a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f775c7972c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f775c31cc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f775c327da0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f775c320b50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c31a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f775c313e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f775c31ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f775c3062f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f775c3082f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f775c325120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f775c30e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f775c30a2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f775c31fc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f775c31dc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f775c314670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f775c316e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f775c319670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c328760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c799350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f775c323aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f775c322120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f775c30da70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f775c322870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f775c30aad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f775c325dc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f775c30fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f775c31d480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c31f480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f775c327750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f775c311e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f775c312670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f775c30f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f775c307ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f775c308ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f775c315670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f775c312e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f775c30bad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f775c318670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f775c306ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f775c7972c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f775c327100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f775c320370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f775c31c480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f775c314e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f775c319e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f775c313670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f775c31b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f775c326450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c31be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f775c321020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f775c321cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f775c30b2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f775c30cad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f775c323450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f775c30c2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f775c3072f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f775c315e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f775c311670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f775c326aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f775c325770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f775c318e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f775c321670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f775c316670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f775c30ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f775c3057a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f775c7972c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="21:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f775c2dd880"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f775c2d2020"/></to>
    </wire>
    <wire loc="20:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f775c2d2020"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f775c2cd140"/></to>
    </wire>
    <wire loc="16:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f775c2c9bd0"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f775c2d1c50"/></to>
    </wire>
    <wire loc="21:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f775c2d1c50"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f775c2b4150"/></to>
    </wire>
    <wire loc="17:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="PowerControl" scoped="" ref="0x7f775c2cc530"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f775c25f1b0"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f775c2b8540"/></from>
      <to><interface-ref name="Gpio" scoped="" ref="0x7f775c2b9590"/></to>
    </wire>
    <wire loc="11:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="Gpio" scoped="" ref="0x7f775c2b9590"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f775c2699e0"/></to>
    </wire>
    <wire loc="18:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f775c2af950"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f775c2b6ca0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f775c2b6ca0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f775c28ca90"/></to>
    </wire>
    <wire loc="19:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f775c2b49f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x7f775c2b8540"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f775c27c020"/></from>
      <to><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f775c276530"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f775c276530"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f775c273e50"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f775c26f020"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7f775ce6cdb0"/></to>
    </wire>
    <wire loc="9:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c268c50"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f775d1f2d50"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="EnergyIndicator" scoped="" ref="0x7f775c24a990"/></from>
      <to><interface-ref name="EnergyIndicator" scoped="" ref="0x7f775c240900"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ByteIndicator" scoped="" ref="0x7f775c24c150"/></from>
      <to><interface-ref name="ByteIndicator" scoped="" ref="0x7f775c23e0f0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="BackoffTimer" scoped="" ref="0x7f775c23eae0"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f775c9d8690"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f775c232500"/></from>
      <to><interface-ref name="CCA" scoped="" ref="0x7f775c9920e0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f775c22c820"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f775c991370"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f775c22bb40"/></from>
      <to><interface-ref name="SFD" scoped="" ref="0x7f775c98c020"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f775c233880"/></from>
      <to><interface-ref name="CaptureSFD" scoped="" ref="0x7f775c94a700"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f775c229020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c18dc30"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775c18dc30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c79a4d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c229d10"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c18c8f0"/></to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c18c8f0"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c799350"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f775c2256d0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f775c18b2f0"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f775c18b2f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f775c225de0"/></from>
      <to><interface-ref name="STXON" scoped="" ref="0x7f775c18acc0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f775c18acc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f775c224530"/></from>
      <to><interface-ref name="STXONCCA" scoped="" ref="0x7f775c189370"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f775c189370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f775c224c60"/></from>
      <to><interface-ref name="SFLUSHTX" scoped="" ref="0x7f775c187d00"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f775c187d00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f775c226e00"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f775c181c60"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f775c181c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f775c227780"/></from>
      <to><interface-ref name="TXFIFO" scoped="" ref="0x7f775c1697a0"/></to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f775c1697a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f775c7972c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f775c226550"/></from>
      <to><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f775c16e2f0"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f775c16e2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c2233e0"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c183480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c183480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c2225e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c17fe50"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c17fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c221020"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c17e670"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c17e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f775c223e80"/></from>
      <to><interface-ref name="STXENC" scoped="" ref="0x7f775c1857b0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f775c1857b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f775c2209c0"/></from>
      <to><interface-ref name="TXNONCE" scoped="" ref="0x7f775c16bad0"/></to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f775c16bad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f775c221890"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f775c16c2f0"/></to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f775c16c2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f775c220130"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f775c16cad0"/></to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f775c16cad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f775c21ad40"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f775c15ddf0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f775c15ddf0"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f775c153550"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c23bd00"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c0d5670"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c239bb0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c0d10c0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f775c238950"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f775c0d0550"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f775c22dbe0"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f775c0c8480"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f775c0c8480"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f775c0ba8b0"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f775c21e6c0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f775d24c9a0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f775c180c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f775c18a020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f775c184c70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f775c177e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f775c17ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f775c16a2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f775c172670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f775c183c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f775c178670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f775c17ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f775c17d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f775c186370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f775c171a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f775c186ac0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f775c16ead0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f775c187060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f775c173e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f775c181480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f775c18b940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f775c175e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f775c176670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f775c173670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f775c179670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f775c176e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f775c16fad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f775c17c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f775c16aad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f775c7972c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f775c184490"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f775c180480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f775c178e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f775c17de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f775c177670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f775c17f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f775c18a670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f775c185160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f775c185e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f775c16f2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f775c170ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f775c1876b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f775c1702f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f775c16b2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f775c179e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f775c175670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f775c1899c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f775c17ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f775c17a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f775c172e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketIndicator" scoped="" ref="0x7f775c159020"/></from>
      <to><interface-ref name="PacketIndicator" scoped="" ref="0x7f775c1527c0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f775c13d150"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f775d24c9a0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f775c151020"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f775c991370"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f775c150380"/></from>
      <to><interface-ref name="FIFO" scoped="" ref="0x7f775c9906a0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f775c14f6b0"/></from>
      <to><interface-ref name="FIFOP" scoped="" ref="0x7f775c98f9d0"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f775c14ea50"/></from>
      <to><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f775c94c060"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f775c14d6e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c058d00"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f775c058d00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f775c79a4d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f775c14c530"/></from>
      <to><interface-ref name="RXFIFO" scoped="" ref="0x7f775c034ad0"/></to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f775c034ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f775c7972c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f775c14bad0"/></from>
      <to><interface-ref name="SFLUSHRX" scoped="" ref="0x7f775c0526b0"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f775c0526b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f775c14b3a0"/></from>
      <to><interface-ref name="SACK" scoped="" ref="0x7f775c050370"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f775c050370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c14a330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c0d5670"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c1491e0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c0d10c0"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f775c147d70"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f775c0d0550"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f775c149b90"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f775ca8edc0"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c1423e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c049e50"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c049e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c142cb0"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c048670"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c048670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f775c143b10"/></from>
      <to><interface-ref name="SRXDEC" scoped="" ref="0x7f775c04f160"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f775c04f160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f775c1406d0"/></from>
      <to><interface-ref name="RXNONCE" scoped="" ref="0x7f775c0342f0"/></to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f775c0342f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f775c141590"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f775c0372f0"/></to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f775c0372f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f775c141e00"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f775c037ad0"/></to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f775c037ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f775c13f020"/></from>
      <to><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f775c038ad0"/></to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f775c038ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f775c13f8b0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f775c055300"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f775c055300"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <from><interface-ref name="receiveDone_task" scoped="" ref="0x7f775c1329d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f775c064300"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f775c9bb650"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTime32khz" scoped="" ref="0x7f775c0b83b0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f775c066020"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f775c0b76e0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f775cea3750"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f775c060450"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f775ceb62c0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f775c04bc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f775c054020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f775c04ec70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f775c041e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f775c048e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f775c053370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f775c03c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f775c0382f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f775c04dc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f775c04cc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f775c042670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f775c045e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f775c047670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c056970"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c799350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f775c052d00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f775c03ba70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f775c050ac0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f775c052060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f775c03ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f775c04c480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c04d480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f775c055950"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f775c03fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f775c040670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f775c03e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f775c035ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f775c043670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f775c040e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f775c039ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f775c046670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f775c04e490"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f775c04b480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f775c042e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f775c047e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f775c041670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f775c049670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f775c054670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f775c04fe00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f775c0392f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f775c03aad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f775c03a2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f775c0352f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f775c043e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f775c03f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f775c054cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f775c0539c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f775c046e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f775c04f7b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f775c045670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f775c03ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f775c0337a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f775c7972c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7f775c007920"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7f775c004940"/></to>
    </wire>
    <wire loc="54:../../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f775c00e990"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f775c004080"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f775bfe3e60"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f775bfeb020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f775bfe2ae0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f775bfe4690"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f775bfe4690"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f775c71a1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f775bfe18f0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f775c00aa20"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775bfe0170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c0d10c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="DuplicateReceive" scoped="" ref="0x7f775bfc9200"/></from>
      <to><interface-ref name="DuplicateReceive" scoped="" ref="0x7f775bfc5570"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f775bfc33f0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f775bfc9950"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775bfc3a70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c0d10c0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f775bf8bd70"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f775bf956b0"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f775bf8ab10"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f775bf95020"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f775bf892f0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c0d5670"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775bf88170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c0d10c0"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f775bf88b70"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f775bf3b410"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <from><interface-ref name="grantTask" scoped="" ref="0x7f775bf5cdb0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SendState" scoped="" ref="0x7f775bf2e800"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f775bf2a580"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f775bf2a580"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f775c71a1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f775bf161c0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f775cb1b020"/></to>
    </wire>
    <wire loc="63:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f775b490bc0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f775b483640"/></to>
    </wire>
    <wire loc="64:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f775b48f8b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f775cb83020"/></to>
    </wire>
    <wire loc="65:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f775b48e590"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f775cb83c90"/></to>
    </wire>
    <wire loc="67:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f775bdd4020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f775b48dc10"/></to>
    </wire>
    <wire loc="66:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f775b48dc10"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f775cb80080"/></to>
    </wire>
    <wire loc="60:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f775b4822e0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f775be3f930"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f775b481020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f775cb83c90"/></to>
    </wire>
    <wire loc="53:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f775be3f930"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f775bdeedf0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f775bdec400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f775cb877f0"/></to>
    </wire>
    <wire loc="55:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f775bdeb060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f775cb83c90"/></to>
    </wire>
    <wire loc="56:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f775bdea720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f775cb83020"/></to>
    </wire>
    <wire loc="184:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f775bde9480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f775bde9c60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f775bdca020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f775cb83020"/></to>
    </wire>
    <wire loc="56:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f775bdcac30"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f775cb83c90"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="41:../../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="35:../../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="200:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/x1xxx/McuSleepC.nc" safe="">
      <documentation loc="36:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="65:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="45:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="33:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="53:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../../tos/system/LedsC.nc">
      <documentation loc="34:../../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="37:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; Digital pin i/o abstraction, TI MSP430 processors.</short>
        <long>&#10; Digital pin i/o abstraction, TI MSP430 processors.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @author Joao Goncalves &#60;joao.m.goncalves@ist.utl.pt>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="79(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="79(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="79(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="79(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="79(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="79(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="79(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="79(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="79(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="79(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="79(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="79(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="79(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="79(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="79(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="79(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="79(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="79(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="79(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="79(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="79(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="79(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="79(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="79(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="79(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="79(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="79(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="79(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="79(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="79(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="79(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="79(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="79(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="79(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="79(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="79(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="79(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="79(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="79(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="79(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="79(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="79(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="79(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="79(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="79(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="79(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="79(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="79(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="MasterC" loc="8:MasterC.nc">
      <module/>
    </component>
    <component qname="MasterAppC.TimerTramaTDMA" loc="44(MasterAppC.TimerTramaTDMA):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC" loc="48:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <documentation loc="36:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="41(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="41(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="41(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="41(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="41(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="41(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="41(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="41(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="41(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="41(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="41(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="41(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="55(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC.VT" loc="61(HilTimerMilliC.VirtualizeTimerC.VT):../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerImplP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f775cc2b530"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MasterAppC.TimerLeds" loc="44(MasterAppC.TimerLeds):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="ActiveMessageC" loc="59:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <documentation loc="49:../../../tos/platforms/telosa/ActiveMessageC.nc">
        <short>&#10;&#10; The Active Message layer on the Telos platform.</short>
        <long>&#10;&#10; The Active Message layer on the Telos platform. This is a naming wrapper&#10; around the CC2420 Active Message layer.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.9 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ActiveMessageC" loc="53:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="CC2420RadioC" loc="41:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <documentation loc="24:../../../tos/chips/cc2420/CC2420RadioC.nc">
        <short>&#10; Radio wiring for the CC2420.</short>
        <long>&#10; Radio wiring for the CC2420.  This layer seperates the common&#10; wiring of the lower-layer components of the CC2420 stack and makes&#10; them available to clients like the AM stack and the IEEE802.15.4&#10; stack.&#10;&#10; This component provides the highest-level internal interface to&#10; other components of the CC2420 stack.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10; @author Stephen Dawson-Haggerty&#10; @version $Revision: 1.2 $ $Date: 2009/08/20 01:37:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaC" loc="42:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
        <short>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.</short>
        <long>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-05-14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaP" loc="37:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.12 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ControlC" loc="42:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
        <short>&#10; Implementation for configuring a ChipCon CC2420 radio.</short>
        <long>&#10; Implementation for configuring a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/05/14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ControlP" loc="42:../../../tos/chips/cc2420/control/CC2420ControlP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Urs Hunkeler (ReadRssi implementation)&#10; @version $Revision: 1.7 $ $Date: 2008/06/24 04:07:28 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="AlarmMultiplexC" loc="43:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
        <short>&#10; A component that multiplexes the use of an alarm.</short>
        <long>&#10; A component that multiplexes the use of an alarm. The assumption is&#10; that its use is mutually exclusive and users check whether the&#10; events are for them.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm" loc="40(AlarmMultiplexC.Alarm):../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420AlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C):../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer" loc="37(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm" loc="43(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="41:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
        <short>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Counter32khz32C.Transform" loc="54(Counter32khz32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform" loc="51(AlarmMultiplexC.Alarm.Alarm32khz32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
        <short>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420PinsC.CCAM" loc="42(HplCC2420PinsC.CCAM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.CSNM" loc="42(HplCC2420PinsC.CSNM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOM" loc="42(HplCC2420PinsC.FIFOM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOPM" loc="42(HplCC2420PinsC.FIFOPM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.RSTNM" loc="42(HplCC2420PinsC.RSTNM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.SFDM" loc="42(HplCC2420PinsC.SFDM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.VRENM" loc="42(HplCC2420PinsC.VRENM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
        <short>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420InterruptsC.CaptureSFDC" loc="47(HplCC2420InterruptsC.CaptureSFDC):../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="GpioCaptureC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430InterruptC" loc="39:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for GPIO interrupts.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptP" loc="51:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc" safe="">
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptCCAC" loc="50(HplCC2420InterruptsC.InterruptCCAC):../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptFIFOPC" loc="50(HplCC2420InterruptsC.InterruptFIFOPC):../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="CC2420ControlC.Spi" loc="39(CC2420ControlC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC" loc="37:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:16 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420SpiP" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Roman Lim&#10; @author Razvan Musaloie-E.&#10; @author Jeonggil Ko&#10; @version $Revision: 1.4 $ $Date: 2008-06-23 20:25:15 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.WorkingStateC" loc="65(CC2420SpiWireC.WorkingStateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="StateImplC" loc="64:../../../tos/system/StateImplC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="StateImplP" loc="64:../../../tos/system/StateImplP.nc" safe="">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC" loc="40(CC2420SpiWireC.HplCC2420SpiC):../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC" loc="79(CC2420SpiWireC.HplCC2420SpiC.SpiC):../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Spi0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P" loc="71:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P.SpiP" loc="73(Msp430SpiNoDma0P.SpiP):../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430SpiNoDmaP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
        <short>&#10; An HPL abstraction of USART0 on the MSP430.</short>
        <long>&#10; An HPL abstraction of USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="54:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC" loc="39(CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="56(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="96(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420ControlC.SyncSpiC" loc="39(CC2420ControlC.SyncSpiC):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ControlC.RssiResource" loc="39(CC2420ControlC.RssiResource):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LocalIeeeEui64C" loc="11:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <configuration/>
    </component>
    <component qname="LocalIeeeEui64P" loc="3:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <module/>
    </component>
    <component qname="Ds2411C" loc="7:../../../tos/chips/ds2411/Ds2411C.nc">
      <configuration/>
    </component>
    <component qname="Ds2411P" loc="9:../../../tos/chips/ds2411/Ds2411P.nc">
      <module/>
    </component>
    <component qname="OneWireMasterC" loc="6:../../../tos/lib/onewire/OneWireMasterC.nc">
      <documentation loc="1:../../../tos/lib/onewire/OneWireMasterC.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="OneWireMasterP" loc="9:../../../tos/lib/onewire/OneWireMasterP.nc">
      <documentation loc="2:../../../tos/lib/onewire/OneWireMasterP.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10; Only supports one device on the 1-wire bus.</short>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="39:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="BusyWaitMicroC.BusyWaitCounterC" loc="52(BusyWaitMicroC.BusyWaitCounterC):../../../tos/lib/timer/BusyWaitCounterC.nc">
      <documentation loc="36:../../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="BusyWaitCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30c640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f775d30c9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430CounterMicroC" loc="44:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
        <short>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.</short>
        <long>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.   If your base clock is in units of binary hertz then 1 uis, decimal&#10; hertz it will be 1us.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430CounterMicroC.Counter" loc="42(Msp430CounterMicroC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30c640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f775d30c9b0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplDs2411C" loc="1:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <configuration/>
    </component>
    <component qname="HplDs2411C.MspGpio" loc="42(HplDs2411C.MspGpio):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="Ds2411PowerControlC" loc="12:../../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <module/>
    </component>
    <component qname="CC2420TransmitC" loc="41:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
        <short>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TransmitP" loc="46:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420TransmitC.Spi" loc="39(CC2420TransmitC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC" loc="39:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
        <short>&#10; Implementation of the receive path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the receive path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveP" loc="45:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Jung Il Choi&#10; @author JeongGil Ko&#10; @author Razvan Musaloiu-E&#10; @version $Revision: 1.21 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC" loc="38:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420PacketP" loc="43:../../../tos/chips/cc2420/packet/CC2420PacketP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC.CounterToLocalTimeC" loc="46(CC2420PacketC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CC2420PacketC.DummyTimer" loc="44(CC2420PacketC.DummyTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC.Spi" loc="39(CC2420ReceiveC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RandomC" loc="43:../../../tos/system/RandomC.nc">
      <documentation loc="33:../../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420CsmaC.StateC" loc="65(CC2420CsmaC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueSendC" loc="38:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
        <short>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; </short>
        <long>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueSendP" loc="38:../../../tos/chips/cc2420/unique/UniqueSendP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
        <short>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.</short>
        <long>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UniqueSendC.StateC" loc="65(UniqueSendC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueReceiveC" loc="40:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
        <short>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; This should sit at the bottom of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueReceiveP" loc="41:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
        <short> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC" loc="62:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
        <short>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.</short>
        <long>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.  They do not include the network byte &#10; responsible for identifying the packing as being sourced from a TinyOS&#10; network.&#10;&#10; TinyOS I-Frames are interoperability packets that do include a network&#10; byte as defined by 6LowPAN specifications.  The I-Frame header type is&#10; the default packet header used in TinyOS networks.&#10;&#10; Since either packet header is acceptable, this layer must do some &#10; preprocessing (sorry) to figure out whether or not it needs to include &#10; the functionality to process I-frames.  If I-Frames are used, then&#10; the network byte is added on the way out and checked on the way in.&#10; If the packet came from a network different from a TinyOS network, the&#10; user may access it through the DispatchP's NonTinyosReceive[] Receive &#10; interface and process it in a different radio stack.&#10;&#10; If T-Frames are used instead, this layer is simply pass-through wiring to the&#10; layer beneath.  &#10;&#10; Define &#34;CC2420_IFRAME_TYPE&#34; to use the interoperability frame and &#10; this layer&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TinyosNetworkP" loc="44:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
        <short>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.</short>
        <long>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.  Filters incoming packets that are not&#10; TinyOS network compatible.  Provides the 6LowpanSnoop interface to&#10; sniff for packets that were not originated from TinyOS.&#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC.FcfsResourceQueueC" loc="42(CC2420TinyosNetworkC.FcfsResourceQueueC):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DummyLplC" loc="41:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Sleep interval is always 0, and duty cycle is always 100%&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="DummyLplP" loc="39:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Wakeup interval is always 0 (always on)&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DummyLplC.StateC" loc="65(DummyLplC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyC" loc="38:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
        <short>&#10; Dummy configuration for PacketLink Layer&#10; </short>
        <long>&#10; Dummy configuration for PacketLink Layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyP" loc="38:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <documentation loc="32:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
        <short>&#10; Dummy module for Packet Link layer&#10; </short>
        <long>&#10; Dummy module for Packet Link layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ActiveMessageP" loc="46:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc" safe="">
      <documentation loc="33:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
        <short>&#10; Active message implementation on top of the CC2420 radio.</short>
        <long>&#10; Active message implementation on top of the CC2420 radio. This&#10; implementation uses the 16-bit addressing mode of 802.15.4: the&#10; only additional byte it adds is the AM id byte, as the first byte&#10; of the data payload.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.22 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MasterAppC.AMSenderC" loc="47(MasterAppC.AMSenderC):../../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:17">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MasterAppC.AMSenderC.SenderC" loc="47(MasterAppC.AMSenderC.SenderC):../../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MasterAppC.AMSenderC.SenderC.AMQueueEntryP" loc="43(MasterAppC.AMSenderC.SenderC.AMQueueEntryP):../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MasterAppC.AMReceiverC" loc="43(MasterAppC.AMReceiverC):../../../tos/system/AMReceiverC.nc">
      <documentation loc="33:../../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:17">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f775d150810" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f775d150bc0" loc="81:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f775d14f020" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f775d14f3d0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f775d14f740" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430TimerP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f775ce3d930" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f775ce3dcd0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f775ce3c0d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f775ce3c450" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f775ce3c7d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f775ce3cb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f775ce3a020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f775ce3a3b0" loc="49:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f775ce3a780" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f775cdffc80" loc="42:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f775cdfc0d0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f775cd17cb0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f775cd17cb0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f775ccd7a40" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f775ccd7a40"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f775ccc1570" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f775ccc1570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f775ccc1d40" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f775ccc1d40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f775ccbf160" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f775ccbf160"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f775ccbf940" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f775ccbf940"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f775ccbfd10" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f775ccbe540" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f775ccbe540"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f775cce46d0" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f775cce46d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f775cc9d020" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f775cc9d020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f775cc9d410" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f775cc9d410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f775cc9dbf0" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f775cc9dbf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f775cc9b020" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f775cc61cc0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f775cc61cc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f775cc2b530" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f775cc2b530"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f775cc2b880" loc="56:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="VirtualizeTimerImplP" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f775cc1d980" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f775cc1d980"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f775cc1dcd0" loc="62:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f775cba7550" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f775cba7550"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="HplCC2420AlarmC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz32C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="GpioCaptureC" loc="47:../../../tos/chips/msp430/timer/GpioCaptureC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430InterruptC" loc="50:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="CC2420SpiC" loc="39:../../../tos/chips/cc2420/spi/CC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="StateC" loc="65:../../../tos/system/StateC.nc" abstract="">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplCC2420SpiC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Spi0C" loc="79:../../../tos/chips/msp430/usart/Msp430Spi0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDmaP" loc="73:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc" abstract="">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="56:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f775c4fc5e0" loc="56:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f775c4f09b0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="96:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f775c4d5cc0" loc="96:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="BusyWaitCounterC" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc" abstract="">
      <documentation loc="36:../../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f775c28a020" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f775c28a020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f775c28a7b0" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775c28a7b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f775be646a0" loc="47:../../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f775be5a3a0" loc="47:../../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f775be520d0" loc="43:../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f775be3ac80" loc="45:../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMReceiverC" loc="43:../../../tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="33:../../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f775bdd0330" loc="43:../../../tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f775d2ff4d0" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2ff4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d2ff850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f775d302020" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f775d302020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f775d3023a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775d301410" loc="42:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775d301410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d301790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f775d2f35f0" loc="43:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f775d2f35f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f775d2fd660"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f775d2fd7f0"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f775d2f3c90"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f775d2f3e20"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f775d2fd020"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f775d2fd1b0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f775d2fd340"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f775d2fd4d0"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f775d2f3970"/>
        <function-ref name="node_id" scoped="" ref="0x7f775d2f3b00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f775d2efa90" loc="7:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f775d2efa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d2efe10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775d2fc690" loc="4:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775d2fc690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d2fca10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f775d2ef3b0" loc="6:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f775d2ef3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d2ef730"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f775d2ee1b0" loc="8:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f775d2ee1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d2ee530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f775d2fcd00" loc="5:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f775d2fcd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f775d2f0d20"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f775d2ef020"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f775d2f03c0"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f775d2f0550"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f775d2f06e0"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f775d2f0870"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f775d2f0a00"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f775d2f0b90"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f775d2f00a0"/>
        <function-ref name="node_id" scoped="" ref="0x7f775d2f0230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775d2f2bc0" loc="2:../../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775d2f2bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d2d6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f775d2bf020" loc="39:../../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f775d2bf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d2bf3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f775d2b56c0" loc="40:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f775d2b56c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f775d2bb660"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f775d2b5bd0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f775d2b5d60"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f775d2bb020"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f775d2b5a40"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f775d2bb1b0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f775d2bb340"/>
        <function-ref name="initClocks" scoped="" ref="0x7f775d2bb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775d2bc020" loc="39:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775d2bc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d2bc3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f775d2a4020" loc="203:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f775d2a4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f775d2a3020"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f775d2a4530"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f775d2a46c0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f775d2a4850"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f775d2a43a0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f775d2a49e0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f775d2a4b70"/>
        <function-ref name="initClocks" scoped="" ref="0x7f775d2a4d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f775d2a3320" loc="204:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f775d2a3320"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f775d2a36a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775d2a6980" loc="202:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775d2a6980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d2a6d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f775d426c80" loc="55:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f775d426c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f775d6010a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f775d5839a0" loc="51:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f775d5839a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f775d583d20"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f775d69e020"/>
        <function-ref name="sleep" scoped="" ref="0x7f775d69e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f775d4c43d0" loc="52:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f775d4c43d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f775d4c4750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x7f775d270240" loc="39:../../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f775d270240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f775d26f1b0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f775d270750"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f775d2708e0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f775d270a70"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f775d2705c0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f775d270c00"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f775d270d90"/>
        <function-ref name="initClocks" scoped="" ref="0x7f775d26f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f775d2623a0" loc="69:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f775d2623a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d262720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f775d2feaa0" loc="66:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f775d2feaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f775d2fee20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f775d263b60" loc="68:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f775d263b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d262020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f775d263140" loc="67:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f775d263140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d2634c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f775d263650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f775d2637e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f775d79e940" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f775d79e940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775d79ecc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f775d79ee50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f775d7ab1e0" loc="46:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f775d7ab1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d7ab560"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f775d7ab6f0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f775d7ab880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f775d34f040" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f775d34f040"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775d34f3c0"/>
        <function-ref name="runTask" scoped="" ref="0x7f775d34f550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f775d34a490" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f775d34a490"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f775d34a810"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f775d34a9a0"/>
        <function-ref name="sleep" scoped="" ref="0x7f775d34ab30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f775d350140" loc="54:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f775d350140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d3504c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f775d350650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f775d3507e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f775d24c9a0" loc="46:../../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f775d24c9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f775d24cd20"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f775d257020"/>
        <function-ref name="led1On" scoped="" ref="0x7f775d2571b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f775d257340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f775d2574d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d257660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f775d2577f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f775d257e30"/>
        <function-ref name="set" scoped="" ref="0x7f775d257980"/>
        <function-ref name="led0On" scoped="" ref="0x7f775d257b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f775d257ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f775d241b50" loc="50:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f775d241b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d247020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d2471b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d247340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d2474d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d247660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d2477f0"/>
        <function-ref name="set" scoped="" ref="0x7f775d247980"/>
        <function-ref name="clr" scoped="" ref="0x7f775d247b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775d249020" loc="46:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775d249020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d2493a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f775d247e30" loc="51:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f775d247e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d2461e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d246370"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d246500"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d246690"/>
        <function-ref name="get" scoped="" ref="0x7f775d246820"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d2469b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d246b40"/>
        <function-ref name="clr" scoped="" ref="0x7f775d246cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f775d249620" loc="47:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f775d249620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f775d2499a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f775d249b30"/>
        <function-ref name="led1On" scoped="" ref="0x7f775d249cc0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f775d249e50"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f775d248020"/>
        <function-ref name="get" scoped="" ref="0x7f775d2481b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f775d248340"/>
        <function-ref name="led2Off" scoped="" ref="0x7f775d248980"/>
        <function-ref name="set" scoped="" ref="0x7f775d2484d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f775d248660"/>
        <function-ref name="led2On" scoped="" ref="0x7f775d2487f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f775d240020" loc="52:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f775d240020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d2403a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d240530"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d2406c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d240850"/>
        <function-ref name="get" scoped="" ref="0x7f775d2409e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d240b70"/>
        <function-ref name="set" scoped="" ref="0x7f775d240d00"/>
        <function-ref name="clr" scoped="" ref="0x7f775d23f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f775d24a590" loc="41:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f775d24a590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d24a910"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d24aaa0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d24ac30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d24adc0"/>
        <function-ref name="get" scoped="" ref="0x7f775d223020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d2231b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d223340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d2234d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f775d223830" loc="42:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f775d223830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d223bb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d223d40"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d222020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d2221b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d222340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d2224d0"/>
        <function-ref name="set" scoped="" ref="0x7f775d222660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d2227f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f775d221dd0" loc="44:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775d221dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775d220180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f775d222b50" loc="43:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f775d222b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d221020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d2211b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d221340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d2214d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d221660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d2217f0"/>
        <function-ref name="set" scoped="" ref="0x7f775d221980"/>
        <function-ref name="clr" scoped="" ref="0x7f775d221b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f775d206d50" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f775d206d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d205100"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d205290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d205420"/>
        <function-ref name="clr" scoped="" ref="0x7f775d2031b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d205740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d2058d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d205a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d205bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d205d80"/>
        <function-ref name="get" scoped="" ref="0x7f775d204020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d2041b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d204340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d2044d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d204760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d2048f0"/>
        <function-ref name="set" scoped="" ref="0x7f775d204a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d204c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d2055b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d204da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d203020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f775d1ede50" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f775d1ede50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1ec210"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1ec3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1ec530"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1ea340"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1ec850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1ec9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1ecb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1ecd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1eb020"/>
        <function-ref name="get" scoped="" ref="0x7f775d1eb1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1eb340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1eb4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1eb660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1eb8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1eba80"/>
        <function-ref name="set" scoped="" ref="0x7f775d1ebc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1ebda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1ec6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1ea020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1ea1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f775d1623d0" loc="205:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f775d1623d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d162750"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1628e0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d162a70"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1607f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d162d90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d161020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1611b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d161340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1614d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d161660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1617f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d161980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d161b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d161da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d160020"/>
        <function-ref name="set" scoped="" ref="0x7f775d1601b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d160340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d162c00"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1604d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d160660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f775d1673e0" loc="201:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f775d1673e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d167760"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1678f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d167a80"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1657f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d167da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d166020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1661b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d166340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1664d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d166660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1667f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d166980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d166b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d166da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d165020"/>
        <function-ref name="set" scoped="" ref="0x7f775d1651b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d165340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d167c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1654d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d165660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f775d1903f0" loc="183:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f775d1903f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d190770"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d190900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d190a90"/>
        <function-ref name="clr" scoped="" ref="0x7f775d18e7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d190db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d18f020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d18f1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d18f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d18f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d18f660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d18f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d18f980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d18fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d18fda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d18e020"/>
        <function-ref name="set" scoped="" ref="0x7f775d18e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d18e340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d190c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d18e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d18e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f775d1e8e50" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f775d1e8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1e7210"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1e73a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1e7530"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1e5340"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1e7850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1e79e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1e7b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1e7d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1e6020"/>
        <function-ref name="get" scoped="" ref="0x7f775d1e61b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1e6340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1e64d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1e6660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1e68f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1e6a80"/>
        <function-ref name="set" scoped="" ref="0x7f775d1e6c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1e6da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1e76c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1e5020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1e51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f775d1cd020" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f775d1cd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1cd3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1cd530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1cd6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1cb4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1cd9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1cdb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1cdd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1cc020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1cc1b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1cc340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1cc4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1cc660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1cc7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1cca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1ccc10"/>
        <function-ref name="set" scoped="" ref="0x7f775d1ccda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1cb020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1cd850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1cb1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1cb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f775d1b4020" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f775d1b4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1b43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1b4530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1b46c0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1b24d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1b49e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1b4b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1b4d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1b3020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1b31b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1b3340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1b34d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1b3660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1b37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1b3a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1b3c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d1b3da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1b2020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1b4850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1b21b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1b2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f775d19f020" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f775d19f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d19f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d19f530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d19f6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d19d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d19f9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d19fb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d19fd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d19e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d19e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d19e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d19e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d19e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d19e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d19ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d19ec10"/>
        <function-ref name="set" scoped="" ref="0x7f775d19eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d19d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d19f850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d19d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d19d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f775d18b3f0" loc="185:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f775d18b3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d18b770"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d18b900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d18ba90"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1897f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d18bdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d18a020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d18a1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d18a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d18a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d18a660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d18a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d18a980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d18ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d18ada0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d189020"/>
        <function-ref name="set" scoped="" ref="0x7f775d1891b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d189340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d18bc20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1894d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d189660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f775d1773e0" loc="195:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f775d1773e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d177760"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1778f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d177a80"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1757f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d177da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d176020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1761b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d176340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1764d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d176660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1767f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d176980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d176b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d176da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d175020"/>
        <function-ref name="set" scoped="" ref="0x7f775d1751b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d175340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d177c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1754d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d175660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f775d1583f0" loc="211:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f775d1583f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d158770"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d158900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d158a90"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1567f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d158db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d157020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1571b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d157340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1574d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d157660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1577f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d157980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d157b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d157da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d156020"/>
        <function-ref name="set" scoped="" ref="0x7f775d1561b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d156340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d158c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1564d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d156660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f775d1fe580" loc="57:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f775d1fe580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1fe900"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1fea90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1fec20"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1fc980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1fd020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1fd1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1fd340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1fd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1fd660"/>
        <function-ref name="get" scoped="" ref="0x7f775d1fd7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1fd980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1fdb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1fdca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1fc020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1fc1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d1fc340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1fc4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1fedb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1fc660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1fc7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f775d189bc0" loc="186:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f775d189bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d188020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1881b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d188340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d186020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d188660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1887f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d188980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d188b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d188ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d188e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d187020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1871b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d187340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1875d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d187760"/>
        <function-ref name="set" scoped="" ref="0x7f775d1878f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d187a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1884d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d187c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d187da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f775d1f9580" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f775d1f9580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1f9900"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1f9a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1f9c20"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1f7980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1f8020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1f81b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1f8340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1f84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1f8660"/>
        <function-ref name="get" scoped="" ref="0x7f775d1f87f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1f8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1f8b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1f8ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1f7020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1f71b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d1f7340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1f74d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1f9db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1f7660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1f77f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f775d1df710" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f775d1df710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1dfa90"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1dfc20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1dfdb0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1dda80"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1de1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1de340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1de4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1de660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1de7f0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1de980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1deb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1deca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1dee30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1dd120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1dd2b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d1dd440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1dd5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1de020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1dd760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1dd8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f775d1c68a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f775d1c68a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1c6c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1c6db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1c5020"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1c4c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1c5340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1c54d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1c5660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1c57f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1c5980"/>
        <function-ref name="get" scoped="" ref="0x7f775d1c5b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1c5ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1c5e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1c4020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1c42b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1c4440"/>
        <function-ref name="set" scoped="" ref="0x7f775d1c45d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1c4760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1c51b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1c48f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1c4a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f775d1ad8a0" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f775d1ad8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1adc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1addb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1ac020"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1abc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1ac340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1ac4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1ac660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1ac7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1ac980"/>
        <function-ref name="get" scoped="" ref="0x7f775d1acb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1acca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1ace30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1ab020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1ab2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1ab440"/>
        <function-ref name="set" scoped="" ref="0x7f775d1ab5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1ab760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1ac1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1ab8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1aba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f775d1988a0" loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f775d1988a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d198c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d198db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d197020"/>
        <function-ref name="clr" scoped="" ref="0x7f775d196c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d197340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1974d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d197660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1977f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d197980"/>
        <function-ref name="get" scoped="" ref="0x7f775d197b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d197ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d197e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d196020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1962b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d196440"/>
        <function-ref name="set" scoped="" ref="0x7f775d1965d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d196760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1971b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1968f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d196a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f775d20bd50" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f775d20bd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d20a100"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d20a290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d20a420"/>
        <function-ref name="clr" scoped="" ref="0x7f775d2081b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d20a740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d20a8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d20aa60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d20abf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d20ad80"/>
        <function-ref name="get" scoped="" ref="0x7f775d209020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d2091b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d209340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d2094d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d209760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d2098f0"/>
        <function-ref name="set" scoped="" ref="0x7f775d209a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d209c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d20a5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d209da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d208020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f775d1f2d50" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f775d1f2d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1f1210"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1f13a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1f1530"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1ef340"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1f1850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1f19e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1f1b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1f1d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1f0020"/>
        <function-ref name="get" scoped="" ref="0x7f775d1f01b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1f0340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1f04d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1f0660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1f08f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1f0a80"/>
        <function-ref name="set" scoped="" ref="0x7f775d1f0c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1f0da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1f16c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1ef020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1ef1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f775d1d8e50" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f775d1d8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1d7210"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1d73a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1d7530"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1d5340"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1d7850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1d79e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1d7b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1d7d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1d6020"/>
        <function-ref name="get" scoped="" ref="0x7f775d1d61b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1d6340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1d64d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1d6660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1d68f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1d6a80"/>
        <function-ref name="set" scoped="" ref="0x7f775d1d6c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1d6da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1d76c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1d5020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1d51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f775d193bc0" loc="182:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f775d193bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d192020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1921b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d192340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d190020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d192660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1927f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d192980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d192b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d192ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d192e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d191020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1911b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d191340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1915d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d191760"/>
        <function-ref name="set" scoped="" ref="0x7f775d1918f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d191a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1924d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d191c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d191da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f775d170bb0" loc="198:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f775d170bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d16e020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d16e1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d16e340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d16c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d16e660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d16e7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d16e980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d16eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d16eca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d16ee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d16d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d16d1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d16d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d16d5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d16d760"/>
        <function-ref name="set" scoped="" ref="0x7f775d16d8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d16da80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d16e4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d16dc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d16dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f775d15bbb0" loc="209:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f775d15bbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d15a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d15a1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d15a340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d158020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d15a660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d15a7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d15a980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d15ab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d15aca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d15ae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d159020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1591b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d159340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1595d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d159760"/>
        <function-ref name="set" scoped="" ref="0x7f775d1598f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d159a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d15a4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d159c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d159da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f775d17fbc0" loc="191:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f775d17fbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d17e020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d17e1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d17e340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d17c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d17e660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d17e7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d17e980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d17eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d17eca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d17ee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d17d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d17d1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d17d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d17d5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d17d760"/>
        <function-ref name="set" scoped="" ref="0x7f775d17d8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d17da80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d17e4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d17dc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d17dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f775d1d3e50" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f775d1d3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1d2410"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1d25a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1d2730"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1d04d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1d2a50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1d2be0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1d2d70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1d1020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1d11b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1d1340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1d14d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1d1660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1d17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1d1a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1d1c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d1d1da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1d0020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1d28c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1d01b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1d0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f775d1b9020" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f775d1b9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1b93a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1b9530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1b96c0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1b74d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1b99e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1b9b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1b9d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1b8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1b81b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1b8340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1b84d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1b8660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1b87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1b8a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1b8c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d1b8da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1b7020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1b9850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1b71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1b7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f775d1a4020" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f775d1a4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1a43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1a4530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1a46c0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1a24d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1a49e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1a4b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1a4d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1a3020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1a31b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1a3340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1a34d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1a3660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1a37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1a3a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1a3c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d1a3da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1a2020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1a4850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1a21b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1a2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f775d16c3e0" loc="199:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f775d16c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d16c760"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d16c8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d16ca80"/>
        <function-ref name="clr" scoped="" ref="0x7f775d16a7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d16cda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d16b020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d16b1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d16b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d16b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d16b660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d16b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d16b980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d16bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d16bda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d16a020"/>
        <function-ref name="set" scoped="" ref="0x7f775d16a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d16a340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d16cc10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d16a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d16a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f775d1863e0" loc="188:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f775d1863e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d186760"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1868f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d186a80"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1847f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d186da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d185020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1851b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d185340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1854d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d185660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1857f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d185980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d185b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d185da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d184020"/>
        <function-ref name="set" scoped="" ref="0x7f775d1841b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d184340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d186c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1844d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d184660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f775d203580" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f775d203580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d203900"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d203a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d203c20"/>
        <function-ref name="clr" scoped="" ref="0x7f775d201980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d202020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d2021b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d202340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d2024d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d202660"/>
        <function-ref name="get" scoped="" ref="0x7f775d2027f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d202980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d202b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d202ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d201020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d2011b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d201340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d2014d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d203db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d201660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d2017f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f775d1ea710" loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f775d1ea710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1eaa90"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1eac20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1eadb0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1e8a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1e91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1e9340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1e94d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1e9660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1e97f0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1e9980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1e9b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1e9ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1e9e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1e8120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1e82b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d1e8440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1e85d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1e9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1e8760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1e88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f775d1a9020" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f775d1a9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1a93a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1a9530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1a96c0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1a74d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1a99e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1a9b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1a9d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1a8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1a81b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1a8340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1a84d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1a8660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1a87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1a8a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1a8c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d1a8da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1a7020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1a9850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1a71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1a7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f775d1e5710" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f775d1e5710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1e5a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1e5c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1e5db0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1e2a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1e31b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1e3340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1e34d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1e3660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1e37f0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1e3980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1e3b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1e3ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1e3e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1e2120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1e22b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d1e2440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1e25d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1e3020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1e2760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1e28f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f775d1cb8a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f775d1cb8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1cbc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1cbdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1ca020"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1c9c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1ca340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1ca4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1ca660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1ca7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1ca980"/>
        <function-ref name="get" scoped="" ref="0x7f775d1cab10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1caca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1cae30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1c9020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1c92b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1c9440"/>
        <function-ref name="set" scoped="" ref="0x7f775d1c95d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1c9760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1ca1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1c98f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1c9a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f775d1b28a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f775d1b28a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1b2c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1b2db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1b1020"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1b0c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1b1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1b14d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1b1660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1b17f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1b1980"/>
        <function-ref name="get" scoped="" ref="0x7f775d1b1b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1b1ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1b1e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1b0020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1b02b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1b0440"/>
        <function-ref name="set" scoped="" ref="0x7f775d1b05d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1b0760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1b11b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1b08f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1b0a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f775d19d8a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f775d19d8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d19dc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d19ddb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d19c020"/>
        <function-ref name="clr" scoped="" ref="0x7f775d19bc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d19c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d19c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d19c660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d19c7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d19c980"/>
        <function-ref name="get" scoped="" ref="0x7f775d19cb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d19cca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d19ce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d19b020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d19b2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d19b440"/>
        <function-ref name="set" scoped="" ref="0x7f775d19b5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d19b760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d19c1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d19b8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d19ba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f775d1813f0" loc="190:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f775d1813f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d181770"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d181900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d181a90"/>
        <function-ref name="clr" scoped="" ref="0x7f775d17f7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d181db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d180020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1801b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d180340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1804d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d180660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1807f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d180980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d180b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d180da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d17f020"/>
        <function-ref name="set" scoped="" ref="0x7f775d17f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d17f340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d181c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d17f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d17f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f775d20ecb0" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f775d20ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d21c0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d21c230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d21c3c0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d20d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d21c6e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d21c870"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d21ca00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d21cb90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d21cd20"/>
        <function-ref name="get" scoped="" ref="0x7f775d21b020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d21b1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d21b340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d21b4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d21b760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d21b8f0"/>
        <function-ref name="set" scoped="" ref="0x7f775d21ba80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d21bc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d21c550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d21bda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d20d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f775d1f7d50" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f775d1f7d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1f6100"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1f6290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1f6420"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1f41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1f6740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1f68d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1f6a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1f6bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1f6d80"/>
        <function-ref name="get" scoped="" ref="0x7f775d1f5020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1f51b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1f5340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1f54d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1f5760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1f58f0"/>
        <function-ref name="set" scoped="" ref="0x7f775d1f5a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1f5c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1f65b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1f5da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1f4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f775d1dde50" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f775d1dde50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1dc210"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1dc3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1dc530"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1da340"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1dc850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1dc9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1dcb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1dcd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1db020"/>
        <function-ref name="get" scoped="" ref="0x7f775d1db1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1db340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1db4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1db660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1db8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1dba80"/>
        <function-ref name="set" scoped="" ref="0x7f775d1dbc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1dbda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1dc6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1da020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1da1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f775d1c3020" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f775d1c3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1c33a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1c3530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1c36c0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1c14d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1c39e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1c3b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1c3d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1c2020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1c21b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1c2340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1c24d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1c2660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1c27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1c2a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1c2c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d1c2da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1c1020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1c3850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1c11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1c1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f775d17c3f0" loc="192:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f775d17c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d17c770"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d17c900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d17ca90"/>
        <function-ref name="clr" scoped="" ref="0x7f775d17a7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d17cdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d17b020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d17b1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d17b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d17b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d17b660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d17b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d17b980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d17bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d17bda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d17a020"/>
        <function-ref name="set" scoped="" ref="0x7f775d17a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d17a340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d17cc20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d17a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d17a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f775d175bb0" loc="196:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f775d175bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d174020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1741b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d174340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d172020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d174660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1747f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d174980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d174b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d174ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d174e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d173020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1731b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d173340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1735d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d173760"/>
        <function-ref name="set" scoped="" ref="0x7f775d1738f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d173a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1744d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d173c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d173da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f775d165bb0" loc="202:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f775d165bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d164020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1641b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d164340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d162020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d164660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1647f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d164980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d164b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d164ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d164e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d163020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1631b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d163340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1635d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d163760"/>
        <function-ref name="set" scoped="" ref="0x7f775d1638f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d163a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1644d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d163c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d163da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f775d1be020" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f775d1be020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1be3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1be530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1be6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1bc4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1be9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1beb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1bed00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1bd020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1bd1b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1bd340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1bd4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1bd660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1bd7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1bda80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1bdc10"/>
        <function-ref name="set" scoped="" ref="0x7f775d1bdda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1bc020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1be850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1bc1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1bc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f775d17abc0" loc="193:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f775d17abc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d179020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1791b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d179340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d177020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d179660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1797f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d179980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d179b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d179ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d179e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d178020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1781b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d178340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1785d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d178760"/>
        <function-ref name="set" scoped="" ref="0x7f775d1788f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d178a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1794d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d178c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d178da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f775d208580" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f775d208580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d208900"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d208a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d208c20"/>
        <function-ref name="clr" scoped="" ref="0x7f775d206980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d207020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d2071b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d207340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d2074d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d207660"/>
        <function-ref name="get" scoped="" ref="0x7f775d2077f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d207980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d207b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d207ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d206020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d2061b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d206340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d2064d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d208db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d206660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d2067f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f775d1ef710" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f775d1ef710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1efa90"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1efc20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1efdb0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1eda80"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1ee1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1ee340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1ee4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1ee660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1ee7f0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1ee980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1eeb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1eeca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1eee30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1ed120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1ed2b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d1ed440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1ed5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1ee020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1ed760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1ed8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f775d1d5710" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f775d1d5710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1d5a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1d5c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1d5db0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1d3a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1d41b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1d4340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1d44d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1d4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1d47f0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1d4980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1d4b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1d4ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1d4e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1d3120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1d32b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d1d3440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1d35d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1d4020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1d3760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1d38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f775d184bc0" loc="189:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f775d184bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d183020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1831b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d183340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d181020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d183660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1837f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d183980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d183b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d183ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d183e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d182020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1821b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d182340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1825d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d182760"/>
        <function-ref name="set" scoped="" ref="0x7f775d1828f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d182a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1834d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d182c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d182da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f775d16abb0" loc="200:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f775d16abb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d169020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1691b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d169340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d167020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d169660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1697f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d169980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d169b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d169ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d169e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d168020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1681b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d168340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1685d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d168760"/>
        <function-ref name="set" scoped="" ref="0x7f775d1688f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d168a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1694d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d168c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d168da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f775d1d08a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f775d1d08a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1d0c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1d0db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1cf020"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1cec10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1cf340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1cf4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1cf660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1cf7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1cf980"/>
        <function-ref name="get" scoped="" ref="0x7f775d1cfb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1cfca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1cfe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1ce020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1ce2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1ce440"/>
        <function-ref name="set" scoped="" ref="0x7f775d1ce5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1ce760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1cf1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1ce8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1cea80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f775d1b78a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f775d1b78a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1b7c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1b7db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1b6020"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1b5c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1b6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1b64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1b6660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1b67f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1b6980"/>
        <function-ref name="get" scoped="" ref="0x7f775d1b6b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1b6ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1b6e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1b5020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1b52b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1b5440"/>
        <function-ref name="set" scoped="" ref="0x7f775d1b55d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1b5760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1b61b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1b58f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1b5a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f775d1a28a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f775d1a28a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1a2c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1a2db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1a1020"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1a0c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1a1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1a14d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1a1660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1a17f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1a1980"/>
        <function-ref name="get" scoped="" ref="0x7f775d1a1b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1a1ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1a1e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1a0020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1a02b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1a0440"/>
        <function-ref name="set" scoped="" ref="0x7f775d1a05d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1a0760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1a11b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1a08f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1a0a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f775d201d50" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f775d201d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d200100"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d200290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d200420"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1fe1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d200740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d2008d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d200a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d200bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d200d80"/>
        <function-ref name="get" scoped="" ref="0x7f775d1ff020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1ff1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1ff340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1ff4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1ff760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1ff8f0"/>
        <function-ref name="set" scoped="" ref="0x7f775d1ffa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1ffc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d2005b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1ffda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1fe020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f775d1a78a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f775d1a78a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1a7c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1a7db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1a6020"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1a5c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1a6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1a64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1a6660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1a67f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1a6980"/>
        <function-ref name="get" scoped="" ref="0x7f775d1a6b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1a6ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1a6e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1a5020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1a52b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1a5440"/>
        <function-ref name="set" scoped="" ref="0x7f775d1a55d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1a5760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1a61b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1a58f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1a5a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f775d1fcd50" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f775d1fcd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1fb100"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1fb290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1fb420"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1f91b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1fb740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1fb8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1fba60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1fbbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1fbd80"/>
        <function-ref name="get" scoped="" ref="0x7f775d1fa020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1fa1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1fa340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1fa4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1fa760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1fa8f0"/>
        <function-ref name="set" scoped="" ref="0x7f775d1faa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1fac10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1fb5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1fada0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1f9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f775d1e2e50" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f775d1e2e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1e1210"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1e13a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1e1530"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1df340"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1e1850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1e19e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1e1b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1e1d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1e0020"/>
        <function-ref name="get" scoped="" ref="0x7f775d1e01b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1e0340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1e04d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1e0660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1e08f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1e0a80"/>
        <function-ref name="set" scoped="" ref="0x7f775d1e0c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1e0da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1e16c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1df020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1df1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f775d1c8020" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f775d1c8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1c83a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1c8530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1c86c0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1c64d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1c89e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1c8b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1c8d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1c7020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1c71b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1c7340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1c74d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1c7660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1c77f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1c7a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1c7c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d1c7da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1c6020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1c8850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1c61b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1c6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f775d1af020" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f775d1af020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1af3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1af530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1af6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1ad4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1af9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1afb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1afd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1ae020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1ae1b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1ae340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1ae4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1ae660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1ae7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1aea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1aec10"/>
        <function-ref name="set" scoped="" ref="0x7f775d1aeda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1ad020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1af850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1ad1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1ad340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f775d19a020" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f775d19a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d19a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d19a530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d19a6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1984d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d19a9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d19ab70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d19ad00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d199020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1991b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d199340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1994d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d199660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1997f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d199a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d199c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d199da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d198020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d19a850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1981b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d198340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f775d20d580" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f775d20d580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d20d900"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d20da90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d20dc20"/>
        <function-ref name="clr" scoped="" ref="0x7f775d20b980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d20c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d20c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d20c340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d20c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d20c660"/>
        <function-ref name="get" scoped="" ref="0x7f775d20c7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d20c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d20cb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d20cca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d20b020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d20b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d20b340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d20b4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d20ddb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d20b660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d20b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f775d1f4580" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f775d1f4580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1f4900"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1f4a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1f4c20"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1f2980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1f3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1f31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1f3340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1f34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1f3660"/>
        <function-ref name="get" scoped="" ref="0x7f775d1f37f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1f3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1f3b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1f3ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1f2020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1f21b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d1f2340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1f24d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1f4db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1f2660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1f27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f775d1da710" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f775d1da710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1daa90"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1dac20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1dadb0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1d8a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1d91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1d9340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1d94d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1d9660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1d97f0"/>
        <function-ref name="get" scoped="" ref="0x7f775d1d9980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1d9b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1d9ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1d9e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1d8120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1d82b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d1d8440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1d85d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1d9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1d8760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1d88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f775d1c18a0" loc="90:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f775d1c18a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1c1c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1c1db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1c0020"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1bfc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1c0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1c04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1c0660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1c07f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1c0980"/>
        <function-ref name="get" scoped="" ref="0x7f775d1c0b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1c0ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1c0e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1bf020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1bf2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1bf440"/>
        <function-ref name="set" scoped="" ref="0x7f775d1bf5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1bf760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1c01b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1bf8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1bfa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f775d1723e0" loc="197:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f775d1723e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d172760"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1728f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d172a80"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1707f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d172da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d171020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1711b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d171340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1714d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d171660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1717f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d171980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d171b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d171da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d170020"/>
        <function-ref name="set" scoped="" ref="0x7f775d1701b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d170340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d172c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1704d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d170660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f775d160ba0" loc="206:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f775d160ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d15f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d15f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d15f340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d15d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d15f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d15f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d15f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d15fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d15fca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d15fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d15e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d15e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d15e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d15e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d15e760"/>
        <function-ref name="set" scoped="" ref="0x7f775d15e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d15ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d15f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d15ec10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d15eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f775d18ebc0" loc="184:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f775d18ebc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d18d020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d18d1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d18d340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d18b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d18d660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d18d7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d18d980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d18db10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d18dca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d18de30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d18c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d18c1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d18c340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d18c5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d18c760"/>
        <function-ref name="set" scoped="" ref="0x7f775d18c8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d18ca80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d18d4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d18cc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d18cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f775d1bc8a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f775d1bc8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1bcc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1bcdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d1bb020"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1bac10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d1bb340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1bb4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1bb660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1bb7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1bb980"/>
        <function-ref name="get" scoped="" ref="0x7f775d1bbb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1bbca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1bbe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1ba020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1ba2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1ba440"/>
        <function-ref name="set" scoped="" ref="0x7f775d1ba5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1ba760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1bb1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1ba8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1baa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f775d15d3e0" loc="208:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f775d15d3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d15d760"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d15d8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d15da80"/>
        <function-ref name="clr" scoped="" ref="0x7f775d15b7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d15dda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d15c020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d15c1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d15c340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d15c4d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d15c660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d15c7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d15c980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d15cb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d15cda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d15b020"/>
        <function-ref name="set" scoped="" ref="0x7f775d15b1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d15b340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d15dc10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d15b4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d15b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f775d156bc0" loc="212:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f775d156bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d155020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d1551b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d155340"/>
        <function-ref name="clr" scoped="" ref="0x7f775d153020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d155660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1557f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d155980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d155b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d155ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d155e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d154020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d1541b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d154340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d1545d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d154760"/>
        <function-ref name="set" scoped="" ref="0x7f775d1548f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d154a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1554d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d154c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d154da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f775d195060" loc="181:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f775d195060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1957e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d195970"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d195b00"/>
        <function-ref name="clr" scoped="" ref="0x7f775d1937f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d195e20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d194020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d1941b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d194340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1944d0"/>
        <function-ref name="get" scoped="" ref="0x7f775d194660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1947f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d194980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d194b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d194da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d193020"/>
        <function-ref name="set" scoped="" ref="0x7f775d1931b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d193340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d195c90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1934d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d193660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d122540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d122540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1228c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d122a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d122be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d120980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d121020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1211b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d121340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1214d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d121660"/>
        <function-ref name="get" scoped="" ref="0x7f775d1217f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d121980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d121b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d121ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d120020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1201b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d120340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1204d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d120660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d122d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1207f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d11db90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d11db90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d11c020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d11c1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d11c340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d11a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d11c660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d11c7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d11c980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d11cb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d11cca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d11ce30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d11b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d11b1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d11b340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d11b5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d11b760"/>
        <function-ref name="set" scoped="" ref="0x7f775d11b8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d11ba80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d11bc10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d11c4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d11bda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d117060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d117060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1173e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d117570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d117700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1154d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d117a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d117bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d117d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d116020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1161b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d116340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1164d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d116660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1167f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d116a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d116c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d116da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d115020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1151b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d117890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d115340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d112540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d112540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1128c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d112a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d112be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d110980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d111020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1111b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d111340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1114d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d111660"/>
        <function-ref name="get" scoped="" ref="0x7f775d1117f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d111980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d111b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d111ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d110020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d1101b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d110340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d1104d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d110660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d112d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d1107f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d10db90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d10db90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d10b020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d10b1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d10b340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d109020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d10b660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d10b7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d10b980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d10bb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d10bca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d10be30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d10a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d10a1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d10a340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d10a5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d10a760"/>
        <function-ref name="set" scoped="" ref="0x7f775d10a8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d10aa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d10ac10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d10b4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d10ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d106060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d106060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1063e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d106570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d106700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d1044d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d106a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d106bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d106d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d105020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d1051b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d105340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d1054d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d105660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d1057f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d105a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d105c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d105da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d104020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d1041b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d106890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d104340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d101540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d101540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d1018c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d101a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d101be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0ff980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d100020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d1001b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d100340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d1004d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d100660"/>
        <function-ref name="get" scoped="" ref="0x7f775d1007f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d100980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d100b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d100ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0ff020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0ff1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d0ff340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0ff4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0ff660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d101d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0ff7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0fcb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0fcb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0fb020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0fb1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0fb340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0f9020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0fb660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0fb7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0fb980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0fbb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0fbca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d0fbe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0fa020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0fa1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0fa340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0fa5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0fa760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0fa8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0faa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0fac10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0fb4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0fada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0f6060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0f6060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0f63e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0f6570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0f6700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0f44d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0f6a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0f6bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0f6d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0f5020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0f51b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d0f5340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0f54d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0f5660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0f57f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0f5a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0f5c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d0f5da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0f4020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0f41b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0f6890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0f4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0f1540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0f1540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0f18c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0f1a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0f1be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0ef980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0f0020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0f01b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0f0340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0f04d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0f0660"/>
        <function-ref name="get" scoped="" ref="0x7f775d0f07f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0f0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0f0b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0f0ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0ef020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0ef1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d0ef340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0ef4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0ef660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0f1d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0ef7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0ecb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0ecb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0eb020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0eb1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0eb340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0e9020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0eb660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0eb7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0eb980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0ebb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0ebca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d0ebe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0ea020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0ea1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0ea340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0ea5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0ea760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0ea8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0eaa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0eac10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0eb4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0eada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0e6060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0e6060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0e63e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0e6570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0e6700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0e44d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0e6a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0e6bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0e6d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0e5020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0e51b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d0e5340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0e54d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0e5660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0e57f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0e5a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0e5c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d0e5da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0e4020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0e41b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0e6890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0e4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0e06d0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0e06d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0e0a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0e0be0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0e0d70"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0dea80"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0df1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0df340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0df4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0df660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0df7f0"/>
        <function-ref name="get" scoped="" ref="0x7f775d0df980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0dfb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0dfca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0dfe30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0de120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0de2b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d0de440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0de5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0de760"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0df020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0de8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0dbb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0dbb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0da020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0da1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0da340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0d8020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0da660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0da7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0da980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0dab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0daca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d0dae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0d9020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0d91b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0d9340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0d95d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0d9760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0d98f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0d9a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0d9c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0da4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0d9da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0d5060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0d5060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0d53e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0d5570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0d5700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0d34d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0d5a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0d5bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0d5d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0d4020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0d41b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d0d4340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0d44d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0d4660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0d47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0d4a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0d4c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d0d4da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0d3020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0d31b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0d5890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0d3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0d0540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0d0540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0d08c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0d0a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0d0be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0ce980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0cf020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0cf1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0cf340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0cf4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0cf660"/>
        <function-ref name="get" scoped="" ref="0x7f775d0cf7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0cf980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0cfb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0cfca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0ce020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0ce1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d0ce340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0ce4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0ce660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0d0d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0ce7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0cbb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0cbb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0ca020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0ca1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0ca340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0c8020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0ca660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0ca7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0ca980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0cab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0caca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d0cae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0c9020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0c91b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0c9340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0c95d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0c9760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0c98f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0c9a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0c9c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0ca4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0c9da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0c5060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0c5060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0c53e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0c5570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0c5700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0c34d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0c5a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0c5bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0c5d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0c4020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0c41b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d0c4340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0c44d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0c4660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0c47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0c4a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0c4c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d0c4da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0c3020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0c31b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0c5890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0c3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0c0540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0c0540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0c08c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0c0a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0c0be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0be980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0bf020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0bf1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0bf340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0bf4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0bf660"/>
        <function-ref name="get" scoped="" ref="0x7f775d0bf7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0bf980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0bfb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0bfca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0be020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0be1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d0be340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0be4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0be660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0c0d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0be7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0bbb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0bbb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0b9020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0b91b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0b9340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0b7020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0b9660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0b97f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0b9980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0b9b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0b9ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d0b9e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0b8020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0b81b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0b8340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0b85d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0b8760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0b88f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0b8a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0b8c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0b94d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0b8da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0b4060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0b4060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0b43e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0b4570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0b4700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0b24d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0b4a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0b4bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0b4d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0b3020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0b31b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d0b3340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0b34d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0b3660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0b37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0b3a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0b3c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d0b3da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0b2020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0b21b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0b4890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0b2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0af540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0af540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0af8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0afa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0afbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0ad980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0ae020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0ae1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0ae340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0ae4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0ae660"/>
        <function-ref name="get" scoped="" ref="0x7f775d0ae7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0ae980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0aeb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0aeca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0ad020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0ad1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d0ad340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0ad4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0ad660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0afd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0ad7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0aab90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0aab90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0a9020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0a91b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0a9340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0a7020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0a9660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0a97f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0a9980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0a9b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0a9ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d0a9e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0a8020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0a81b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0a8340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0a85d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0a8760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0a88f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0a8a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0a8c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0a94d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0a8da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d0a4060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d0a4060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0a43e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0a4570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d0a4700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0a24d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d0a4a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0a4bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d0a4d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d0a3020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0a31b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d0a3340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0a34d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0a3660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0a37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0a3a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d0a3c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d0a3da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d0a2020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0a21b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0a4890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d0a2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d09f740" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d09f740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d09fac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d09fc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d09fde0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d09da80"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d09e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d09e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d09e4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d09e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d09e7f0"/>
        <function-ref name="get" scoped="" ref="0x7f775d09e980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d09eb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d09eca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d09ee30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d09d120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d09d2b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d09d440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d09d5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d09d760"/>
        <function-ref name="clr" scoped="" ref="0x7f775d09e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d09d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d09ab90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d09ab90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d099020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0991b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d099340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d097020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d099660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0997f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d099980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d099b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d099ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d099e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d098020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0981b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d098340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0985d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d098760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0988f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d098a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d098c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0994d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d098da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d094060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d094060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0943e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d094570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d094700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0924d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d094a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d094bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d094d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d093020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0931b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d093340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0934d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d093660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0937f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d093a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d093c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d093da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d092020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0921b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d094890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d092340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d08f540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d08f540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d08f8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d08fa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d08fbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d08c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d08d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d08d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d08d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d08d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d08d660"/>
        <function-ref name="get" scoped="" ref="0x7f775d08d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d08d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d08db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d08dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d08c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d08c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d08c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d08c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d08c660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d08fd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d08c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d089b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d089b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d088020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0881b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d088340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d086020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d088660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0887f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d088980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d088b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d088ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d088e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d087020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0871b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d087340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0875d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d087760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0878f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d087a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d087c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0884d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d087da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d083060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d083060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0833e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d083570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d083700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0814d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d083a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d083bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d083d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d082020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0821b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d082340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0824d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d082660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0827f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d082a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d082c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d082da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d081020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0811b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d083890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d081340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d07e540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d07e540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d07e8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d07ea50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d07ebe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d07c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d07d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d07d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d07d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d07d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d07d660"/>
        <function-ref name="get" scoped="" ref="0x7f775d07d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d07d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d07db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d07dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d07c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d07c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d07c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d07c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d07c660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d07ed70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d07c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d079b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d079b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d078020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0781b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d078340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d076020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d078660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0787f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d078980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d078b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d078ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d078e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d077020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0771b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d077340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0775d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d077760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0778f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d077a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d077c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0784d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d077da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d073060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d073060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0733e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d073570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d073700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0714d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d073a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d073bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d073d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d072020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0721b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d072340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0724d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d072660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0727f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d072a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d072c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d072da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d071020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0711b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d073890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d071340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d06e540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d06e540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d06e8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d06ea50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d06ebe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d06c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d06d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d06d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d06d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d06d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d06d660"/>
        <function-ref name="get" scoped="" ref="0x7f775d06d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d06d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d06db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d06dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d06c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d06c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d06c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d06c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d06c660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d06ed70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d06c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d069b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d069b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d068020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0681b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d068340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d066020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d068660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0687f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d068980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d068b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d068ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d068e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d067020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0671b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d067340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0675d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d067760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0678f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d067a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d067c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0684d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d067da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d062060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d062060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0623e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d062570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d062700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0604d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d062a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d062bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d062d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d061020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0611b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d061340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0614d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d061660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0617f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d061a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d061c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d061da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d060020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0601b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d062890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d060340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d05d540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d05d540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d05d8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d05da50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d05dbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d05b980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d05c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d05c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d05c340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d05c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d05c660"/>
        <function-ref name="get" scoped="" ref="0x7f775d05c7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d05c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d05cb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d05cca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d05b020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d05b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d05b340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d05b4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d05b660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d05dd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d05b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d058b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d058b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d057020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0571b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d057340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d055020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d057660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0577f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d057980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d057b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d057ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d057e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d056020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0561b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d056340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0565d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d056760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0568f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d056a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d056c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0574d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d056da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d052060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d052060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0523e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d052570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d052700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0504d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d052a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d052bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d052d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d051020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0511b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d051340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0514d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d051660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0517f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d051a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d051c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d051da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d050020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0501b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d052890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d050340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d04d540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d04d540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d04d8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d04da50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d04dbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d04b980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d04c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d04c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d04c340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d04c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d04c660"/>
        <function-ref name="get" scoped="" ref="0x7f775d04c7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d04c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d04cb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d04cca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d04b020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d04b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d04b340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d04b4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d04b660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d04dd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d04b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d048b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d048b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d047020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0471b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d047340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d045020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d047660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0477f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d047980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d047b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d047ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d047e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d046020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0461b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d046340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0465d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d046760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0468f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d046a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d046c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0474d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d046da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d042060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d042060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0423e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d042570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d042700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d0404d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d042a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d042bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d042d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d041020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0411b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d041340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0414d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d041660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0417f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d041a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d041c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d041da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d040020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d0401b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d042890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d040340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d03d540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d03d540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d03d8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d03da50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d03dbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d03a980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d03b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d03b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d03b340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d03b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d03b660"/>
        <function-ref name="get" scoped="" ref="0x7f775d03b7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d03b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d03bb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d03bca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d03a020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d03a1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d03a340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d03a4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d03a660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d03dd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d03a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d037b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d037b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d036020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0361b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d036340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d034020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d036660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0367f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d036980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d036b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d036ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d036e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d035020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0351b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d035340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0355d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d035760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0358f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d035a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d035c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0364d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d035da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d031060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d031060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0313e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d031570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d031700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d02f4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d031a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d031bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d031d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d030020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0301b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d030340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0304d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d030660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0307f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d030a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d030c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d030da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d02f020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d02f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d031890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d02f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d02c540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d02c540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d02c8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d02ca50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d02cbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d02a980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d02b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d02b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d02b340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d02b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d02b660"/>
        <function-ref name="get" scoped="" ref="0x7f775d02b7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d02b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d02bb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d02bca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d02a020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d02a1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775d02a340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d02a4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d02a660"/>
        <function-ref name="clr" scoped="" ref="0x7f775d02cd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d02a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d027b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d027b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d026020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d0261b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d026340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d024020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d026660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d0267f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d026980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d026b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d026ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775d026e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d025020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d0251b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d025340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d0255d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d025760"/>
        <function-ref name="set" scoped="" ref="0x7f775d0258f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d025a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d025c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775d0264d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d025da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f775d021060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f775d021060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775d0213e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775d021570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775d021700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775d01f4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775d021a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775d021bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775d021d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775d020020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775d0201b0"/>
        <function-ref name="get" scoped="" ref="0x7f775d020340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775d0204d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775d020660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775d0207f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775d020a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775d020c10"/>
        <function-ref name="set" scoped="" ref="0x7f775d020da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775d01f020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775d01f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775d021890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775d01f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f775cf92c50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775cf92c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775cf91020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775cf911b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775cf91340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775cf8f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775cf91660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775cf917f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775cf91980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775cf91b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775cf91ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775cf91e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775cf90020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775cf901b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775cf90340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775cf905d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775cf90760"/>
        <function-ref name="set" scoped="" ref="0x7f775cf908f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775cf90a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775cf90c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775cf914d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775cf90da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f775cfa39e0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f775cfa39e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775cfa3d60"/>
        <function-ref name="isInput" scoped="" ref="0x7f775cf92020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775cf921b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775cf92340"/>
        <function-ref name="get" scoped="" ref="0x7f775cf924d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775cf92660"/>
        <function-ref name="set" scoped="" ref="0x7f775cf927f0"/>
        <function-ref name="clr" scoped="" ref="0x7f775cf92980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f775cf8b2f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775cf8b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775cf8b670"/>
        <function-ref name="isInput" scoped="" ref="0x7f775cf8b800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775cf8b990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775cf89660"/>
        <function-ref name="toggle" scoped="" ref="0x7f775cf8bcb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775cf8be40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775cf8a020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775cf8a1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775cf8a340"/>
        <function-ref name="get" scoped="" ref="0x7f775cf8a4d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775cf8a660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775cf8a7f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775cf8a980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775cf8ac10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775cf8ada0"/>
        <function-ref name="set" scoped="" ref="0x7f775cf89020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775cf891b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775cf89340"/>
        <function-ref name="clr" scoped="" ref="0x7f775cf8bb20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775cf894d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f775cf8d020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f775cf8d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775cf8d3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775cf8d530"/>
        <function-ref name="toggle" scoped="" ref="0x7f775cf8d6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775cf8d850"/>
        <function-ref name="get" scoped="" ref="0x7f775cf8d9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775cf8db70"/>
        <function-ref name="set" scoped="" ref="0x7f775cf8dd00"/>
        <function-ref name="clr" scoped="" ref="0x7f775cf8b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f775cf867a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775cf867a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775cf86b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775cf86cb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775cf86e40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775cf84a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f775cf851b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775cf85340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775cf854d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775cf85660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775cf857f0"/>
        <function-ref name="get" scoped="" ref="0x7f775cf85980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775cf85b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775cf85ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775cf85e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775cf84120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775cf842b0"/>
        <function-ref name="set" scoped="" ref="0x7f775cf84440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775cf845d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775cf84760"/>
        <function-ref name="clr" scoped="" ref="0x7f775cf85020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775cf848f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f775cf87630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f775cf87630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775cf879b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775cf87b40"/>
        <function-ref name="toggle" scoped="" ref="0x7f775cf87cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775cf87e60"/>
        <function-ref name="get" scoped="" ref="0x7f775cf86020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775cf861b0"/>
        <function-ref name="set" scoped="" ref="0x7f775cf86340"/>
        <function-ref name="clr" scoped="" ref="0x7f775cf864d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMControl" ref="0x7f775cee3190" loc="17:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMControl" scoped="" ref="0x7f775cee3190"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f775cee3510"/>
        <function-ref name="stopDone" scoped="" ref="0x7f775cee36a0"/>
        <function-ref name="start" scoped="" ref="0x7f775cee3830"/>
        <function-ref name="stop" scoped="" ref="0x7f775cee39c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f775cf78470" loc="9:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f775cf78470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f775cf787f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerTramaTDMA" ref="0x7f775cf69e70" loc="11:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerTramaTDMA" scoped="" ref="0x7f775cf69e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775cf66390"/>
        <function-ref name="fired" scoped="" ref="0x7f775cf72970"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f775cf68720"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f775cf682a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f775cf66c90"/>
        <function-ref name="gett0" scoped="" ref="0x7f775cf66810"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775cf72df0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f775cf73a90"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f775cf68d30"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f775cf72020"/>
        <function-ref name="stop" scoped="" ref="0x7f775cf724f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f775cf07c30" loc="13:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f775cf07c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cf5f020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f775cf5f1b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775cf5f340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775cf5f4d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f775cf5f660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f775cef7020" loc="15:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f775cef7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775cef73a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775cef7530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775cef76c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775cef7850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775cef79e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7f775cee7840" loc="16:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f775cee7840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775cee7bc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f775cf78ab0" loc="10:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f775cf78ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f775cf78e30"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f775cf75020"/>
        <function-ref name="led1On" scoped="" ref="0x7f775cf751b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f775cf75340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f775cf754d0"/>
        <function-ref name="get" scoped="" ref="0x7f775cf75660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f775cf757f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f775cf75e30"/>
        <function-ref name="set" scoped="" ref="0x7f775cf75980"/>
        <function-ref name="led0On" scoped="" ref="0x7f775cf75b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f775cf75ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerLeds" ref="0x7f775cf65360" loc="12:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerLeds" scoped="" ref="0x7f775cf65360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775cf61870"/>
        <function-ref name="fired" scoped="" ref="0x7f775cf64e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f775cf63c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f775cf63780"/>
        <function-ref name="getdt" scoped="" ref="0x7f775cf601e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f775cf61cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775cf63300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f775cf64020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f775cf61260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f775cf644f0"/>
        <function-ref name="stop" scoped="" ref="0x7f775cf649c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f775cef6be0" loc="14:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f775cef6be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f775cf5e020"/>
        <function-ref name="source" scoped="" ref="0x7f775cf5e1b0"/>
        <function-ref name="address" scoped="" ref="0x7f775cf5e340"/>
        <function-ref name="destination" scoped="" ref="0x7f775cf5e4d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f775cf5e660"/>
        <function-ref name="setDestination" scoped="" ref="0x7f775cf5e7f0"/>
        <function-ref name="type" scoped="" ref="0x7f775cf5e980"/>
        <function-ref name="setType" scoped="" ref="0x7f775cf5eb10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f775cf5eca0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f775cf5ee30"/>
        <function-ref name="localGroup" scoped="" ref="0x7f775cf08020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f775cebf980" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="MasterAppC.TimerTramaTDMA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cebf980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775cb93e80"/>
        <function-ref name="fired" scoped="" ref="0x7f775cb954a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f775cb93260"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f775cb95da0"/>
        <function-ref name="getdt" scoped="" ref="0x7f775cb927a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f775cb92320"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775cb95920"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f775cb965a0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f775cb93870"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f775cb96a70"/>
        <function-ref name="stop" scoped="" ref="0x7f775cb95020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f775ceb62c0" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f775ceb62c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775ceb2870"/>
        <function-ref name="fired" scoped="" ref="0x7f775ceb5e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f775ceb4c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f775ceb4780"/>
        <function-ref name="getdt" scoped="" ref="0x7f775ceb11e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f775ceb2cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775ceb4300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f775ceb5020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f775ceb2260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f775ceb54f0"/>
        <function-ref name="stop" scoped="" ref="0x7f775ceb59c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f775ceade20" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f775ceade20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775cea9390"/>
        <function-ref name="fired" scoped="" ref="0x7f775ceab970"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f775ceaa720"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f775ceaa2a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f775cea9c90"/>
        <function-ref name="gett0" scoped="" ref="0x7f775cea9810"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775ceabdf0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f775ceaca80"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f775ceaad30"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f775ceab020"/>
        <function-ref name="stop" scoped="" ref="0x7f775ceab4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f775cea3750" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f775cea3750"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775cea63d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775cead080" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775cead080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775cead400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f775cc65870" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f775cc65870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775cc62090"/>
        <function-ref name="fired" scoped="" ref="0x7f775cc63090"/>
        <function-ref name="startAt" scoped="" ref="0x7f775cc63a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775cc63550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775cc62550"/>
        <function-ref name="start" scoped="" ref="0x7f775cc646a0"/>
        <function-ref name="stop" scoped="" ref="0x7f775cc64bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775cc65020" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775cc65020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775cc653a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f775b9f72a0" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f775b9f72a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775b9f5b30"/>
        <function-ref name="fired" scoped="" ref="0x7f775b9f6aa0"/>
        <function-ref name="startAt" scoped="" ref="0x7f775b9f54e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775b9f5020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775b9f4020"/>
        <function-ref name="start" scoped="" ref="0x7f775b9f60d0"/>
        <function-ref name="stop" scoped="" ref="0x7f775b9f65e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775b9f9a10" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775b9f9a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775b9f9d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f775b9dfa80" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f775b9dfa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775b9dfe00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775b9de020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775b9de1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775b9de340"/>
        <function-ref name="fired" scoped="" ref="0x7f775b9de4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f775b9e1020" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f775b9e1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775b9e13a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775b9e1530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775b9e16c0"/>
        <function-ref name="get" scoped="" ref="0x7f775b9e1850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775b9e19e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775b9e1b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f775b9e1d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775b9e0020"/>
        <function-ref name="overflow" scoped="" ref="0x7f775b9e01b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f775b9e0340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775b9e04d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f775b9e0760" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775b9e0760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775b9e0ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f775b9e0c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775b9e0e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775b9df020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775b9df1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775b9df340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775b9df4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775b9df660"/>
        <function-ref name="setControl" scoped="" ref="0x7f775b9df7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f775ce6d690" loc="52:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f775ce6d690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce6da10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775ce6dba0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775ce6dd30"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775ce6c020"/>
        <function-ref name="fired" scoped="" ref="0x7f775ce6c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f775ce71020" loc="50:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f775ce71020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775ce713a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775ce71530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce716c0"/>
        <function-ref name="get" scoped="" ref="0x7f775ce71850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce719e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce71b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f775ce71d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce70020"/>
        <function-ref name="overflow" scoped="" ref="0x7f775ce701b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f775ce70340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775ce704d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f775ce70d60" loc="51:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775ce70d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775ce6f180"/>
        <function-ref name="getControl" scoped="" ref="0x7f775ce6f310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce6f4a0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775ce6f630"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775ce6f7c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce6f950"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775ce6fae0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775ce6fc70"/>
        <function-ref name="setControl" scoped="" ref="0x7f775ce6fe00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f775ce5da50" loc="56:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f775ce5da50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775ce5ddd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f775ce5c020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce5c1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775ce5c340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775ce5c4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce5c660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775ce5c7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775ce5c980"/>
        <function-ref name="setControl" scoped="" ref="0x7f775ce5cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f775ce585a0" loc="61:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f775ce585a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775ce58920"/>
        <function-ref name="getControl" scoped="" ref="0x7f775ce58ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce58c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775ce58dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775ce57020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce571b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775ce57340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775ce574d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f775ce57660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f775ce5eae0" loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f775ce5eae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce5ee60"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775ce5d020"/>
        <function-ref name="captured" scoped="" ref="0x7f775ce5d1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce5d340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce5d4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775ce5d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f775ce4b3e0" loc="73:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f775ce4b3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce4b760"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775ce4b8f0"/>
        <function-ref name="captured" scoped="" ref="0x7f775ce4ba80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce4bc10"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce4bda0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775ce4a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f775ce64d40" loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f775ce64d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce5e0e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775ce5e270"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775ce5e400"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775ce5e590"/>
        <function-ref name="fired" scoped="" ref="0x7f775ce5e720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f775ce4c570" loc="72:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f775ce4c570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce4c8f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775ce4ca80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775ce4cc10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775ce4cda0"/>
        <function-ref name="fired" scoped="" ref="0x7f775ce4b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f775ce42da0" loc="82:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f775ce42da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce41180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775ce41310"/>
        <function-ref name="captured" scoped="" ref="0x7f775ce414a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce41630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce417c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775ce41950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f775ce4a410" loc="74:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f775ce4a410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775ce4a790"/>
        <function-ref name="getControl" scoped="" ref="0x7f775ce4a920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce4aab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775ce4ac40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775ce4add0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce49020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775ce491b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775ce49340"/>
        <function-ref name="setControl" scoped="" ref="0x7f775ce494d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f775ce685a0" loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f775ce685a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775ce68920"/>
        <function-ref name="getControl" scoped="" ref="0x7f775ce68ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce68c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775ce68dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775ce67020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce671b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775ce67340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775ce674d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f775ce67660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f775ce52da0" loc="66:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f775ce52da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce51180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775ce51310"/>
        <function-ref name="captured" scoped="" ref="0x7f775ce514a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce51630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce517c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775ce51950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f775ce52020" loc="65:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f775ce52020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce523a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775ce52530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775ce526c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775ce52850"/>
        <function-ref name="fired" scoped="" ref="0x7f775ce529e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f775ce54a50" loc="64:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f775ce54a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775ce54dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f775ce53020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce531b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775ce53340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775ce534d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce53660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775ce537f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775ce53980"/>
        <function-ref name="setControl" scoped="" ref="0x7f775ce53b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f775ce5bda0" loc="58:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f775ce5bda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce5a180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775ce5a310"/>
        <function-ref name="captured" scoped="" ref="0x7f775ce5a4a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce5a630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce5a7c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775ce5a950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f775ce48890" loc="76:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f775ce48890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce48c10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775ce48da0"/>
        <function-ref name="captured" scoped="" ref="0x7f775ce47020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce471b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce47340"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775ce474d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f775ce51d40" loc="67:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f775ce51d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775ce500e0"/>
        <function-ref name="getControl" scoped="" ref="0x7f775ce50270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce50400"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775ce50590"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775ce50720"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce508b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775ce50a40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775ce50bd0"/>
        <function-ref name="setControl" scoped="" ref="0x7f775ce50d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f775ce5b020" loc="57:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f775ce5b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce5b3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775ce5b530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775ce5b6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775ce5b850"/>
        <function-ref name="fired" scoped="" ref="0x7f775ce5b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f775ce6cdb0" loc="49:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f775ce6cdb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775ce69180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775ce69310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce694a0"/>
        <function-ref name="get" scoped="" ref="0x7f775ce69630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce697c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce69950"/>
        <function-ref name="getMode" scoped="" ref="0x7f775ce69ae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce69c70"/>
        <function-ref name="overflow" scoped="" ref="0x7f775ce69e00"/>
        <function-ref name="setMode" scoped="" ref="0x7f775ce68020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775ce681b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f775ce49890" loc="75:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f775ce49890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce49e10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775ce48020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775ce481b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775ce48340"/>
        <function-ref name="fired" scoped="" ref="0x7f775ce484d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f775ce658c0" loc="53:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f775ce658c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775ce65c40"/>
        <function-ref name="getControl" scoped="" ref="0x7f775ce65dd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce64020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775ce641b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775ce64340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce644d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775ce64660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775ce647f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f775ce64980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f775ce478c0" loc="77:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f775ce478c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775ce47c40"/>
        <function-ref name="getControl" scoped="" ref="0x7f775ce47dd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce46020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775ce461b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775ce46340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce464d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775ce46660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775ce467f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f775ce46980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f775ce5f8d0" loc="52:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f775ce5f8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce5fc50"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775ce5fde0"/>
        <function-ref name="captured" scoped="" ref="0x7f775ce65020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce651b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce65340"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775ce654d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f775ce4e020" loc="69:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f775ce4e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce4e3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775ce4e530"/>
        <function-ref name="captured" scoped="" ref="0x7f775ce4e6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce4e850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce4e9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775ce4eb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f775ce67a20" loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f775ce67a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce67da0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775ce66020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775ce661b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775ce66340"/>
        <function-ref name="fired" scoped="" ref="0x7f775ce664d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f775ce4f160" loc="68:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f775ce4f160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce4f4e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775ce4f670"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775ce4f800"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775ce4f990"/>
        <function-ref name="fired" scoped="" ref="0x7f775ce4fb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f775ce45ae0" loc="79:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f775ce45ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce45e60"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775ce44020"/>
        <function-ref name="captured" scoped="" ref="0x7f775ce441b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce44340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce444d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775ce44660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f775ce4d020" loc="71:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f775ce4d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775ce4d3a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f775ce4d530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce4d6c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775ce4d850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775ce4d9e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce4db70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775ce4dd00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775ce4c020"/>
        <function-ref name="setControl" scoped="" ref="0x7f775ce4c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f775ce5acd0" loc="60:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f775ce5acd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775ce590a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775ce59230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce593c0"/>
        <function-ref name="get" scoped="" ref="0x7f775ce59550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce596e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce59870"/>
        <function-ref name="getMode" scoped="" ref="0x7f775ce59a00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce59b90"/>
        <function-ref name="overflow" scoped="" ref="0x7f775ce59d20"/>
        <function-ref name="setMode" scoped="" ref="0x7f775ce58020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775ce581b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f775ce56a20" loc="63:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f775ce56a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce56da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775ce54020"/>
        <function-ref name="captured" scoped="" ref="0x7f775ce541b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce54340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce544d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775ce54660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f775ce46d40" loc="78:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f775ce46d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce450e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775ce45270"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775ce45400"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775ce45590"/>
        <function-ref name="fired" scoped="" ref="0x7f775ce45720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f775ce42020" loc="81:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f775ce42020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce423a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775ce42530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775ce426c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775ce42850"/>
        <function-ref name="fired" scoped="" ref="0x7f775ce429e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f775ce57a20" loc="62:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f775ce57a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775ce56020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775ce561b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775ce56340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775ce564d0"/>
        <function-ref name="fired" scoped="" ref="0x7f775ce56660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f775ce44a50" loc="80:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f775ce44a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775ce44dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f775ce43020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce431b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775ce43340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775ce434d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce43660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775ce437f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775ce43980"/>
        <function-ref name="setControl" scoped="" ref="0x7f775ce43b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f775ce09940" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f775ce09940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775ce09cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f775ce092f0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f775ce092f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775ce09670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f775ce07020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f775ce07020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775ce073a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f775ce0abf0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f775ce0abf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775ce09020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f775ce0b3e0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775ce0b3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775ce0b760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775ce0b8f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce0ba80"/>
        <function-ref name="get" scoped="" ref="0x7f775ce0bc10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce0bda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce0a020"/>
        <function-ref name="getMode" scoped="" ref="0x7f775ce0a1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce0a340"/>
        <function-ref name="overflow" scoped="" ref="0x7f775ce0a4d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f775ce0a660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775ce0a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f775ce01750" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f775ce01750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775ce01ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f775ce01100" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f775ce01100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775ce01480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f775ce01da0" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f775ce01da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775ce00180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f775ce02a60" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f775ce02a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775ce02e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f775ce03260" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775ce03260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775ce035e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775ce03770"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ce03900"/>
        <function-ref name="get" scoped="" ref="0x7f775ce03a90"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ce03c20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ce03db0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775ce02020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ce021b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f775ce02340"/>
        <function-ref name="setMode" scoped="" ref="0x7f775ce024d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775ce02660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f775cdb67a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f775cdb67a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cdb6b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775cdb6cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f775cdb6e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cdb5020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cdb51b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775cdb5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f775cdfd6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f775cdfd6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775cdfda50"/>
        <function-ref name="getControl" scoped="" ref="0x7f775cdfdbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cdfdd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775cdb7020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775cdb71b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cdb7340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775cdb74d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775cdb7660"/>
        <function-ref name="setControl" scoped="" ref="0x7f775cdb77f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f775cdb4c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f775cdb4c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cdb3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f775cdb7ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f775cdb7ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cdb7e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775cdb6020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775cdb61b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775cdb6340"/>
        <function-ref name="fired" scoped="" ref="0x7f775cdb64d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f775cdb5610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cdb5610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cdb5990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775cdb5b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cdb5cb0"/>
        <function-ref name="get" scoped="" ref="0x7f775cdb5e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cdb4020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cdb41b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775cdb4340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cdb44d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cdb4660"/>
        <function-ref name="setMode" scoped="" ref="0x7f775cdb47f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775cdb4980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f775cdafcb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f775cdafcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cdae0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775cdae230"/>
        <function-ref name="captured" scoped="" ref="0x7f775cdae3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cdae550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cdae6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775cdae870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f775cdb1b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f775cdb1b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775cdb0020"/>
        <function-ref name="getControl" scoped="" ref="0x7f775cdb01b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cdb0340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775cdb04d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775cdb0660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cdb07f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775cdb0980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775cdb0b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f775cdb0ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f775cdac2f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f775cdac2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cdac670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f775cdaf020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f775cdaf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cdaf3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775cdaf530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775cdaf6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775cdaf850"/>
        <function-ref name="fired" scoped="" ref="0x7f775cdaf9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f775cdaeb40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cdaeb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cdad020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775cdad1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cdad340"/>
        <function-ref name="get" scoped="" ref="0x7f775cdad4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cdad660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cdad7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775cdad980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cdadb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cdadca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f775cdade30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775cdac020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f775cda62f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f775cda62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cda6670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775cda6800"/>
        <function-ref name="captured" scoped="" ref="0x7f775cda6990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cda6b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cda6cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775cda6e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f775cda8220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f775cda8220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775cda85a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f775cda8730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cda88c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775cda8a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775cda8be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cda8d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775cda7020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775cda71b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f775cda7340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f775cda47a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f775cda47a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cda4b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f775cda7610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f775cda7610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cda7990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775cda7b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775cda7cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775cda7e40"/>
        <function-ref name="fired" scoped="" ref="0x7f775cda6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f775cda5160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cda5160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cda54e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775cda5670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cda5800"/>
        <function-ref name="get" scoped="" ref="0x7f775cda5990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cda5b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cda5cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775cda5e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cda4020"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cda41b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f775cda4340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775cda44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f775cd9f7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f775cd9f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cd9fb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775cd9fcb0"/>
        <function-ref name="captured" scoped="" ref="0x7f775cd9fe40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd9e020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd9e1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775cd9e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f775cda16d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f775cda16d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775cda1a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f775cda1be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cda1d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775cda0020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775cda01b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cda0340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775cda04d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775cda0660"/>
        <function-ref name="setControl" scoped="" ref="0x7f775cda07f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f775cd9dc50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f775cd9dc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cd9c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f775cda0ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f775cda0ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cda0e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775cd9f020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775cd9f1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775cd9f340"/>
        <function-ref name="fired" scoped="" ref="0x7f775cd9f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f775cd9e610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cd9e610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cd9e990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775cd9eb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cd9ecb0"/>
        <function-ref name="get" scoped="" ref="0x7f775cd9ee40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cd9d020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd9d1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775cd9d340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd9d4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cd9d660"/>
        <function-ref name="setMode" scoped="" ref="0x7f775cd9d7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775cd9d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f775cd97cb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f775cd97cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cd960a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775cd96230"/>
        <function-ref name="captured" scoped="" ref="0x7f775cd963c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd96550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd966e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775cd96870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f775cd99b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f775cd99b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775cd98020"/>
        <function-ref name="getControl" scoped="" ref="0x7f775cd981b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cd98340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775cd984d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775cd98660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cd987f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775cd98980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775cd98b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f775cd98ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f775cd942f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f775cd942f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cd94670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f775cd97020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f775cd97020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cd973a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775cd97530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775cd976c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775cd97850"/>
        <function-ref name="fired" scoped="" ref="0x7f775cd979e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f775cd96b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cd96b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cd95020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775cd951b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cd95340"/>
        <function-ref name="get" scoped="" ref="0x7f775cd954d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cd95660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd957f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775cd95980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd95b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cd95ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f775cd95e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775cd94020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f775cd8f2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f775cd8f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cd8f670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775cd8f800"/>
        <function-ref name="captured" scoped="" ref="0x7f775cd8f990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd8fb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd8fcb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775cd8fe40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f775cd91220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f775cd91220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775cd915a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f775cd91730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cd918c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775cd91a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775cd91be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cd91d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775cd90020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775cd901b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f775cd90340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f775cd8d7a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f775cd8d7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cd8db20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f775cd90610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f775cd90610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cd90990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775cd90b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775cd90cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775cd90e40"/>
        <function-ref name="fired" scoped="" ref="0x7f775cd8f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f775cd8e160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cd8e160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cd8e4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775cd8e670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cd8e800"/>
        <function-ref name="get" scoped="" ref="0x7f775cd8e990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cd8eb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd8ecb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775cd8ee40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd8d020"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cd8d1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f775cd8d340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775cd8d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f775cd877a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f775cd877a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cd87b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775cd87cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f775cd87e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd86020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd861b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775cd86340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f775cd8a6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f775cd8a6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775cd8aa50"/>
        <function-ref name="getControl" scoped="" ref="0x7f775cd8abe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cd8ad70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775cd88020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775cd881b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cd88340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775cd884d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775cd88660"/>
        <function-ref name="setControl" scoped="" ref="0x7f775cd887f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f775cd85c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f775cd85c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cd84020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f775cd88ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f775cd88ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cd88e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775cd87020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775cd871b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775cd87340"/>
        <function-ref name="fired" scoped="" ref="0x7f775cd874d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f775cd86610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cd86610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cd86990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775cd86b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cd86cb0"/>
        <function-ref name="get" scoped="" ref="0x7f775cd86e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cd85020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd851b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775cd85340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd854d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cd85660"/>
        <function-ref name="setMode" scoped="" ref="0x7f775cd857f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775cd85980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f775cd80cb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f775cd80cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cd7f0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775cd7f230"/>
        <function-ref name="captured" scoped="" ref="0x7f775cd7f3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd7f550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd7f6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775cd7f870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f775cd82b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f775cd82b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775cd81020"/>
        <function-ref name="getControl" scoped="" ref="0x7f775cd811b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cd81340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775cd814d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775cd81660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cd817f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775cd81980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775cd81b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f775cd81ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f775cd7d2f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f775cd7d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cd7d670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f775cd80020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f775cd80020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cd803a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775cd80530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775cd806c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775cd80850"/>
        <function-ref name="fired" scoped="" ref="0x7f775cd809e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f775cd7fb40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cd7fb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cd7e020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775cd7e1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cd7e340"/>
        <function-ref name="get" scoped="" ref="0x7f775cd7e4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cd7e660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd7e7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775cd7e980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd7eb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cd7eca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f775cd7ee30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775cd7d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f775cd772f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f775cd772f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cd77670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775cd77800"/>
        <function-ref name="captured" scoped="" ref="0x7f775cd77990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd77b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd77cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775cd77e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f775cd7a220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f775cd7a220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775cd7a5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f775cd7a730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cd7a8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775cd7aa50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775cd7abe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cd7ad70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775cd78020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775cd781b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f775cd78340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f775cd757a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f775cd757a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cd75b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f775cd78610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f775cd78610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cd78990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775cd78b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775cd78cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775cd78e40"/>
        <function-ref name="fired" scoped="" ref="0x7f775cd77020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f775cd76160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cd76160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cd764e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775cd76670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cd76800"/>
        <function-ref name="get" scoped="" ref="0x7f775cd76990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cd76b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd76cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775cd76e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd75020"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cd751b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f775cd75340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775cd754d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f775cd707a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f775cd707a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cd70b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775cd70cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f775cd70e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd6f020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd6f1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775cd6f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f775cd726d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f775cd726d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775cd72a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f775cd72be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cd72d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775cd71020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775cd711b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cd71340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775cd714d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775cd71660"/>
        <function-ref name="setControl" scoped="" ref="0x7f775cd717f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f775cd6ec50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f775cd6ec50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cd6d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f775cd71ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f775cd71ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775cd71e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775cd70020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775cd701b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775cd70340"/>
        <function-ref name="fired" scoped="" ref="0x7f775cd704d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f775cd6f610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cd6f610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cd6f990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775cd6fb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775cd6fcb0"/>
        <function-ref name="get" scoped="" ref="0x7f775cd6fe40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775cd6e020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cd6e1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775cd6e340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cd6e4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cd6e660"/>
        <function-ref name="setMode" scoped="" ref="0x7f775cd6e7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775cd6e980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f775cd68bc0" loc="7:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f775cd68bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cd66020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f775cd693f0" loc="4:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f775cd693f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cd69770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f775cd69b80" loc="5:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f775cd69b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cd68020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f775cd68430" loc="6:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f775cd68430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775cd687b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f775b9d5760" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f775b9d5760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775b9d5ae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775b9d5c70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775b9d5e00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775b9d4020"/>
        <function-ref name="fired" scoped="" ref="0x7f775b9d41b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f775b9d8dd0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f775b9d8dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775b9d7180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775b9d7310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775b9d74a0"/>
        <function-ref name="get" scoped="" ref="0x7f775b9d7630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775b9d77c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775b9d7950"/>
        <function-ref name="getMode" scoped="" ref="0x7f775b9d7ae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775b9d7c70"/>
        <function-ref name="overflow" scoped="" ref="0x7f775b9d7e00"/>
        <function-ref name="setMode" scoped="" ref="0x7f775b9d6020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775b9d61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f775b9dcbf0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f775b9dcbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775b9d84e0"/>
        <function-ref name="fired" scoped="" ref="0x7f775b9da4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f775b9dae60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775b9da9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775b9d89a0"/>
        <function-ref name="start" scoped="" ref="0x7f775b9dba80"/>
        <function-ref name="stop" scoped="" ref="0x7f775b9da020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775b9dc360" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775b9dc360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775b9dc6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f775b9d6440" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775b9d6440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775b9d67c0"/>
        <function-ref name="getControl" scoped="" ref="0x7f775b9d6950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775b9d6ae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775b9d6c70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775b9d6e00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775b9d5020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775b9d51b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775b9d5340"/>
        <function-ref name="setControl" scoped="" ref="0x7f775b9d54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f775ccde8c0" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f775ccde8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775cce3700"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cce20d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cce3bc0"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cce2590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f775ccdc8e0" loc="43:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f775ccdc8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775ccd9780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ccd8150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ccd9c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f775ccd8610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f775ccc7c50" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f775ccc7c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775ccc6020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775ccc61b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775ccc6340"/>
        <function-ref name="get" scoped="" ref="0x7f775ccc64d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775ccc6660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ccc67f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775ccc6980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ccc6b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f775ccc6ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f775ccc6e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775ccc5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f775ccd6b80" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f775ccd6b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775ccc89b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775ccc7360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775ccc8e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f775ccc7820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f775cca40f0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f775cca40f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775cca2020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cca29a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cca24e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cca2e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f775ccc2cf0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f775ccc2cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775cca6b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cca5550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cca5090"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cca5a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f775b9f25f0" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f775b9f25f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775b9efe50"/>
        <function-ref name="fired" scoped="" ref="0x7f775b9f1e00"/>
        <function-ref name="startAt" scoped="" ref="0x7f775b9ef800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775b9ef340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775b9ee340"/>
        <function-ref name="start" scoped="" ref="0x7f775b9f1430"/>
        <function-ref name="stop" scoped="" ref="0x7f775b9f1940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f775b9ecd20" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f775b9ecd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775b9e8670"/>
        <function-ref name="fired" scoped="" ref="0x7f775b9e9550"/>
        <function-ref name="startAt" scoped="" ref="0x7f775b9e8020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775b9e9a10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775b9e8b30"/>
        <function-ref name="start" scoped="" ref="0x7f775b9ebb60"/>
        <function-ref name="stop" scoped="" ref="0x7f775b9e9090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f775b9ee9b0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f775b9ee9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775b9ed7e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775b9ec1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775b9edca0"/>
        <function-ref name="overflow" scoped="" ref="0x7f775b9ec670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f775cc309c0" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f775cc309c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775cc30d40"/>
        <function-ref name="runTask" scoped="" ref="0x7f775cc2f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f775cc34850" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f775cc34850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775cc30090"/>
        <function-ref name="fired" scoped="" ref="0x7f775cc32090"/>
        <function-ref name="startAt" scoped="" ref="0x7f775cc32a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775cc32550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775cc30550"/>
        <function-ref name="start" scoped="" ref="0x7f775cc336a0"/>
        <function-ref name="stop" scoped="" ref="0x7f775cc33bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f775cc392f0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cc392f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775cc35870"/>
        <function-ref name="fired" scoped="" ref="0x7f775cc38e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f775cc37c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f775cc37780"/>
        <function-ref name="getdt" scoped="" ref="0x7f775cc341e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f775cc35cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775cc37300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f775cc38020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f775cc35260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f775cc384f0"/>
        <function-ref name="stop" scoped="" ref="0x7f775cc389c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f775cbb0020" loc="58:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f775cbb0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775cbad630"/>
        <function-ref name="fired" scoped="" ref="0x7f775cbafa60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f775cbae920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f775cbae4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f775cbab020"/>
        <function-ref name="gett0" scoped="" ref="0x7f775cbadab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775cbae020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f775cbb0c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f775cbad020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f775cbaf110"/>
        <function-ref name="stop" scoped="" ref="0x7f775cbaf5e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f775cbab450" loc="59:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f775cbab450"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f775cbab7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f775cbb88e0" loc="57:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cbb88e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775cbb2020"/>
        <function-ref name="fired" scoped="" ref="0x7f775cbb54c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f775cbb3300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f775cbb5e00"/>
        <function-ref name="getdt" scoped="" ref="0x7f775cbb2960"/>
        <function-ref name="gett0" scoped="" ref="0x7f775cbb24c0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775cbb5960"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f775cbb6560"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f775cbb3930"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f775cbb6a50"/>
        <function-ref name="stop" scoped="" ref="0x7f775cbb5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f775b7f4100" loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f775b7f4100"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775b7f4480"/>
        <function-ref name="runTask" scoped="" ref="0x7f775b7f4610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f775b7fc3d0" loc="65:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f775b7fc3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775b7f8870"/>
        <function-ref name="fired" scoped="" ref="0x7f775b7fae40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f775b7f9c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f775b7f9780"/>
        <function-ref name="getdt" scoped="" ref="0x7f775b7f71e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f775b7f8cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775b7f9300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f775b7fa020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f775b7f8260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f775b7fa4f0"/>
        <function-ref name="stop" scoped="" ref="0x7f775b7fa9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f775b7f5a40" loc="67:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f775b7f5a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f775b7f5dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Platform" ref="0x7f775b7f75d0" loc="66:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f775b7f75d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f775b7f5660"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f775b7f57f0"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f775b7f7c70"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f775b7f7e00"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f775b7f5020"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f775b7f51b0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f775b7f5340"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f775b7f54d0"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f775b7f7950"/>
        <function-ref name="node_id" scoped="" ref="0x7f775b7f7ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f775b803db0" loc="63:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775b803db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775b7fd470"/>
        <function-ref name="fired" scoped="" ref="0x7f775b8009b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f775b7ff7c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f775b7ff320"/>
        <function-ref name="getdt" scoped="" ref="0x7f775b7fddb0"/>
        <function-ref name="gett0" scoped="" ref="0x7f775b7fd910"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775b800e50"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f775b802a80"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f775b7ffdf0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f775b800020"/>
        <function-ref name="stop" scoped="" ref="0x7f775b800510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f775cba8020" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f775cba8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775cba8c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f775cb9e300" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f775cb9e300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775cb9d150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775cb9dad0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775cb9d610"/>
        <function-ref name="overflow" scoped="" ref="0x7f775cb9c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f775cb90260" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="MasterAppC.TimerLeds"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775cb90260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775cb8c6e0"/>
        <function-ref name="fired" scoped="" ref="0x7f775cb8fca0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f775cb8da70"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f775cb8d5f0"/>
        <function-ref name="getdt" scoped="" ref="0x7f775cb8b020"/>
        <function-ref name="gett0" scoped="" ref="0x7f775cb8cb60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775cb8d170"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f775cb90e50"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f775cb8c0d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f775cb8f350"/>
        <function-ref name="stop" scoped="" ref="0x7f775cb8f820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f775cb8a680" loc="61:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f775cb8a680"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f775cb8aa00"/>
        <function-ref name="stopDone" scoped="" ref="0x7f775cb8ab90"/>
        <function-ref name="start" scoped="" ref="0x7f775cb8ad20"/>
        <function-ref name="stop" scoped="" ref="0x7f775cb87020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f775cb877f0" loc="63:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f775cb877f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775cb87b70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775cb87d00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775cb86020"/>
        <function-ref name="cancel" scoped="" ref="0x7f775cb861b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775cb86340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f775cb84880" loc="65:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f775cb84880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775cb84c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f775cb83020" loc="67:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f775cb83020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cb833a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f775cb83530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775cb836c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775cb83850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f775cb839e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f775cb7f310" loc="70:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f775cb7f310"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f775cb7a880"/>
        <function-ref name="clear" scoped="" ref="0x7f775cb72020"/>
        <function-ref name="isValid" scoped="" ref="0x7f775cb7a150"/>
        <function-ref name="set" scoped="" ref="0x7f775cb72750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f775cb65130" loc="72:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f775cb65130"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f775cb654b0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f775cb65640"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f775cb657d0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f775cb65960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f775cb86b20" loc="64:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f775cb86b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775cb84020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f775cb80080" loc="69:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f775cb80080"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f775cb80400"/>
        <function-ref name="noAck" scoped="" ref="0x7f775cb80590"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f775cb80720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f775cb83c90" loc="68:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f775cb83c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f775cb820a0"/>
        <function-ref name="source" scoped="" ref="0x7f775cb82230"/>
        <function-ref name="address" scoped="" ref="0x7f775cb823c0"/>
        <function-ref name="destination" scoped="" ref="0x7f775cb82550"/>
        <function-ref name="setSource" scoped="" ref="0x7f775cb826e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f775cb82870"/>
        <function-ref name="type" scoped="" ref="0x7f775cb82a00"/>
        <function-ref name="setType" scoped="" ref="0x7f775cb82b90"/>
        <function-ref name="isForMe" scoped="" ref="0x7f775cb82d20"/>
        <function-ref name="setGroup" scoped="" ref="0x7f775cb81020"/>
        <function-ref name="localGroup" scoped="" ref="0x7f775cb811b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f775cb703f0" loc="71:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f775cb703f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f775cb6f970"/>
        <function-ref name="clear" scoped="" ref="0x7f775cb6e0d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f775cb6f240"/>
        <function-ref name="set" scoped="" ref="0x7f775cb6e800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f775cb59cc0" loc="55:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f775cb59cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f775cb580a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f775cb58230"/>
        <function-ref name="start" scoped="" ref="0x7f775cb583c0"/>
        <function-ref name="stop" scoped="" ref="0x7f775cb58550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f775cb3fe30" loc="64:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f775cb3fe30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f775cb481e0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f775cb48370"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f775cb48500"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f775cb48690"/>
        <function-ref name="setCca" scoped="" ref="0x7f775cb48820"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f775cb489b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f775cb32d20" loc="67:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f775cb32d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f775cb3c1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f775cb538f0" loc="60:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f775cb538f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cb53c70"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f775cb53e00"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775cb52020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775cb521b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f775cb52340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f775cb58d20" loc="56:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f775cb58d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775cb570e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775cb57270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775cb57400"/>
        <function-ref name="cancel" scoped="" ref="0x7f775cb57590"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775cb57720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f775cb56c00" loc="58:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f775cb56c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775cb54020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f775cb4a9b0" loc="61:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f775cb4a9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f775cb4ad30"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f775cb51020"/>
        <function-ref name="getRssi" scoped="" ref="0x7f775cb511b0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f775cb51340"/>
        <function-ref name="getPower" scoped="" ref="0x7f775cb514d0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f775cb51660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f775cb48cb0" loc="65:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f775cb48cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f775cb3e0a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f775cb3e230"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f775cb3e3c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f775cb3e550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f775cb56020" loc="57:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f775cb56020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775cb563a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f775cb51990" loc="62:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f775cb51990"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f775cb51d10"/>
        <function-ref name="noAck" scoped="" ref="0x7f775cb50020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f775cb501b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f775cb3d020" loc="66:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f775cb3d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f775cb3d3a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f775cb3d530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f775cb3d6c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f775cb3d850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f775cb3d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f775cb542d0" loc="59:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f775cb542d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f775cb54650"/>
        <function-ref name="source" scoped="" ref="0x7f775cb547e0"/>
        <function-ref name="address" scoped="" ref="0x7f775cb54970"/>
        <function-ref name="destination" scoped="" ref="0x7f775cb54b00"/>
        <function-ref name="setSource" scoped="" ref="0x7f775cb54c90"/>
        <function-ref name="setDestination" scoped="" ref="0x7f775cb54e20"/>
        <function-ref name="type" scoped="" ref="0x7f775cb53020"/>
        <function-ref name="setType" scoped="" ref="0x7f775cb531b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f775cb53340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f775cb534d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f775cb53660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f775cb47c70" loc="63:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f775cb47c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f775cb49020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f775cb35b70" loc="43:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f775cb35b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f775cb2f020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f775cb2f1b0"/>
        <function-ref name="start" scoped="" ref="0x7f775cb2f340"/>
        <function-ref name="stop" scoped="" ref="0x7f775cb2f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f775cb1b9d0" loc="55:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f775cb1b9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f775cb1bd50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f775cb1ab70" loc="57:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f775cb1ab70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f775cb19020"/>
        <function-ref name="setRetries" scoped="" ref="0x7f775cb191b0"/>
        <function-ref name="getRetries" scoped="" ref="0x7f775cb19340"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f775cb194d0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f775cb19660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f775cb1c020" loc="53:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f775cb1c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f775cb1c3a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f775cb1c530"/>
        <function-ref name="getRssi" scoped="" ref="0x7f775cb1c6c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f775cb1c850"/>
        <function-ref name="getPower" scoped="" ref="0x7f775cb1c9e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f775cb1cb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f775cb27990" loc="50:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f775cb27990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775cb27d10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775cb1f020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775cb1f1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775cb1f340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775cb1f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f775cb1a080" loc="56:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f775cb1a080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f775cb1a400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f775cb1a590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f775cb1a720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f775cb1a8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f775cb28500" loc="47:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f775cb28500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775cb28880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f775cb1b020" loc="54:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f775cb1b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f775cb1b3a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f775cb1b530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f775cb1b6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775cb2e210" loc="45:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775cb2e210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775cb2e590"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775cb2e720"/>
        <function-ref name="request" scoped="" ref="0x7f775cb2e8b0"/>
        <function-ref name="granted" scoped="" ref="0x7f775cb2ea40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775cb2ebd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f775cb1e6f0" loc="46:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f775cb1e6f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775cb1ea70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775cb1ec00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775cb1ed90"/>
        <function-ref name="cancel" scoped="" ref="0x7f775cb28020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775cb281b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f775cb28bc0" loc="48:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f775cb28bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775cb27020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f775cb271b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775cb27340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775cb274d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f775cb27660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f775cb1f840" loc="51:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f775cb1f840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775cb1fbc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f775cb16390" loc="44:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f775cb16390"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f775cb16710"/>
        <function-ref name="stopDone" scoped="" ref="0x7f775cb168a0"/>
        <function-ref name="start" scoped="" ref="0x7f775cb16a30"/>
        <function-ref name="stop" scoped="" ref="0x7f775cb16bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f775cb13330" loc="47:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f775cb13330"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f775cb136b0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f775cb13840"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f775cb139d0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f775cb13b60"/>
        <function-ref name="setCca" scoped="" ref="0x7f775cb13cf0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f775cb13e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f775cb16e80" loc="45:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f775cb16e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775cb14220"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775cb143b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775cb14540"/>
        <function-ref name="cancel" scoped="" ref="0x7f775cb146d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775cb14860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f775cb14b40" loc="46:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f775cb14b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775cb13020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f775cb12e70" loc="39:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f775cb12e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f775cb0f220"/>
        <function-ref name="stopDone" scoped="" ref="0x7f775cb0f3b0"/>
        <function-ref name="start" scoped="" ref="0x7f775cb0f540"/>
        <function-ref name="stop" scoped="" ref="0x7f775cb0f6d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f775cb0e7e0" loc="41:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f775cb0e7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f775cb0eb60"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f775cb0ecf0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f775cb0ee80"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f775cb0d030"/>
        <function-ref name="setCca" scoped="" ref="0x7f775cb0d1c0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f775cb0d350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f775cb01060" loc="47:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f775cb01060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f775cb013e0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f775cb01570"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f775cb01700"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f775cb01890"/>
        <function-ref name="setCca" scoped="" ref="0x7f775cb01a20"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f775cb01bb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f775caf8330" loc="50:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f775caf8330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f775caf86b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f775caf8840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f775caf89d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f775caf8b60"/>
        <function-ref name="getPower" scoped="" ref="0x7f775caf8cf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f775caf8e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Transmit" ref="0x7f775cafa2a0" loc="46:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f775cafa2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775cafa620"/>
        <function-ref name="cancel" scoped="" ref="0x7f775cafa7b0"/>
        <function-ref name="modify" scoped="" ref="0x7f775cafa940"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775cafaad0"/>
        <function-ref name="resend" scoped="" ref="0x7f775cafac60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f775cb0f990" loc="40:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f775cb0f990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775cb0fd10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775cb0e020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775cb0e1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775cb0e340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775cb0e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f775caf7420" loc="48:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f775caf7420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f775caf77a0"/>
        <function-ref name="rand32" scoped="" ref="0x7f775caf7930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f775cb02760" loc="45:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f775cb02760"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f775cb02ae0"/>
        <function-ref name="stop" scoped="" ref="0x7f775cb02c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f775caf0920" loc="51:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775caf0920"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f775caf0ca0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f775caf0e30"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f775caf5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Power" ref="0x7f775cb05b50" loc="44:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f775cb05b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f775cb0b020"/>
        <function-ref name="rfOff" scoped="" ref="0x7f775cb0b1b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7f775cb0b340"/>
        <function-ref name="startVReg" scoped="" ref="0x7f775cb0b4d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f775cb0b660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f775cb0b7f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f775cb0b980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f775cb0bb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f775caf7bf0" loc="49:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f775caf7bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f775caf9020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f775caf91b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f775caf9340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f775caf94d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f775caf9660"/>
        <function-ref name="get" scoped="" ref="0x7f775caf97f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f775caf9980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f775caf8020"/>
        <function-ref name="set" scoped="" ref="0x7f775caf9b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f775caf9ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f775caf9e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f775cb0d640" loc="43:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775cb0d640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775cb0d9c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775cb0db50"/>
        <function-ref name="request" scoped="" ref="0x7f775cb0dce0"/>
        <function-ref name="granted" scoped="" ref="0x7f775cb0de70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775cb0c030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControlState" ref="0x7f775caf4110" loc="52:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControlState" scoped="" ref="0x7f775caf4110"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f775caf4590"/>
        <function-ref name="toIdle" scoped="" ref="0x7f775caf4720"/>
        <function-ref name="isState" scoped="" ref="0x7f775caf48b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f775caf4a40"/>
        <function-ref name="requestState" scoped="" ref="0x7f775caf4bd0"/>
        <function-ref name="forceState" scoped="" ref="0x7f775caf4d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendDone_task" ref="0x7f775cae6b70" loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendDone_task" scoped="" ref="0x7f775cae6b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775cae5020"/>
        <function-ref name="runTask" scoped="" ref="0x7f775cae51b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDone_task" ref="0x7f775cae7ba0" loc="75:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDone_task" scoped="" ref="0x7f775cae7ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775cae6020"/>
        <function-ref name="runTask" scoped="" ref="0x7f775cae61b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDone_task" ref="0x7f775cae8c20" loc="74:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDone_task" scoped="" ref="0x7f775cae8c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775cae7020"/>
        <function-ref name="runTask" scoped="" ref="0x7f775cae71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f775ca8edc0" loc="45:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f775ca8edc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f775ca9a180"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f775ca9a310"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f775ca9a4a0"/>
        <function-ref name="syncDone" scoped="" ref="0x7f775ca9a630"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f775ca9a7c0"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f775ca9a950"/>
        <function-ref name="setChannel" scoped="" ref="0x7f775ca9aae0"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f775ca9ac70"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f775ca9ae00"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f775ca99020"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f775ca991b0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f775ca99340"/>
        <function-ref name="sync" scoped="" ref="0x7f775ca994d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f775ca99760"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f775ca998f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f775ca8b0c0" loc="47:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f775ca8b0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775ca8bcb0"/>
        <function-ref name="readDone" scoped="" ref="0x7f775ca88170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f775ca99bf0" loc="46:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f775ca99bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f775ca8d020"/>
        <function-ref name="rfOff" scoped="" ref="0x7f775ca8d1b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7f775ca8d340"/>
        <function-ref name="startVReg" scoped="" ref="0x7f775ca8d4d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f775ca8d660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f775ca8d7f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f775ca8d980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f775ca8db10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775ca9e950" loc="44:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775ca9e950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775ca9ecd0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775ca9ee60"/>
        <function-ref name="request" scoped="" ref="0x7f775ca9b020"/>
        <function-ref name="granted" scoped="" ref="0x7f775ca9b1b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775ca9b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f775ca84970" loc="46:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f775ca84970"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f775ca84cf0"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f775ca84e80"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f775ca83030"/>
        <function-ref name="syncDone" scoped="" ref="0x7f775ca831c0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f775ca83350"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f775ca834e0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f775ca83670"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f775ca83800"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f775ca83990"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f775ca83b20"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f775ca83cb0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f775ca83e40"/>
        <function-ref name="sync" scoped="" ref="0x7f775ca82020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f775ca822b0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f775ca82440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXCTRL1" ref="0x7f775ca638e0" loc="66:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f775ca638e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775ca63c60"/>
        <function-ref name="write" scoped="" ref="0x7f775ca63df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalIeeeEui64" ref="0x7f775ca7e020" loc="50:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f775ca7e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f775ca7e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StartupTimer" ref="0x7f775ca7ea10" loc="52:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StartupTimer" scoped="" ref="0x7f775ca7ea10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775ca7a2a0"/>
        <function-ref name="fired" scoped="" ref="0x7f775ca7b2a0"/>
        <function-ref name="startAt" scoped="" ref="0x7f775ca7bc20"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775ca7b760"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775ca7a760"/>
        <function-ref name="start" scoped="" ref="0x7f775ca7c890"/>
        <function-ref name="stop" scoped="" ref="0x7f775ca7cda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL0" ref="0x7f775ca65710" loc="64:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f775ca65710"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775ca65a90"/>
        <function-ref name="write" scoped="" ref="0x7f775ca65c20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7f775ca78e70" loc="54:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f775ca78e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775ca77220"/>
        <function-ref name="isInput" scoped="" ref="0x7f775ca773b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775ca77540"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775ca776d0"/>
        <function-ref name="get" scoped="" ref="0x7f775ca77860"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775ca779f0"/>
        <function-ref name="set" scoped="" ref="0x7f775ca77b80"/>
        <function-ref name="clr" scoped="" ref="0x7f775ca77d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f775ca81b40" loc="48:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f775ca81b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775ca80750"/>
        <function-ref name="readDone" scoped="" ref="0x7f775ca80bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="syncDone" ref="0x7f775ca51820" loc="126:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="syncDone" scoped="" ref="0x7f775ca51820"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775ca51ba0"/>
        <function-ref name="runTask" scoped="" ref="0x7f775ca51d30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSI" ref="0x7f775ca621c0" loc="67:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f775ca621c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775ca62540"/>
        <function-ref name="write" scoped="" ref="0x7f775ca626d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f775ca62a70" loc="68:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f775ca62a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775ca62df0"/>
        <function-ref name="write" scoped="" ref="0x7f775ca61020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG0" ref="0x7f775ca66550" loc="62:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f775ca66550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775ca668d0"/>
        <function-ref name="write" scoped="" ref="0x7f775ca66a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f775ca6c390" loc="57:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f775ca6c390"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f775ca6c710"/>
        <function-ref name="changed" scoped="" ref="0x7f775ca6c8a0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f775ca6ca30"/>
        <function-ref name="setAddress" scoped="" ref="0x7f775ca6cbc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f775ca7ac50" loc="53:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f775ca7ac50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775ca78020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775ca781b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775ca78340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775ca784d0"/>
        <function-ref name="get" scoped="" ref="0x7f775ca78660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775ca787f0"/>
        <function-ref name="set" scoped="" ref="0x7f775ca78980"/>
        <function-ref name="clr" scoped="" ref="0x7f775ca78b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCOFF" ref="0x7f775ca5f120" loc="71:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f775ca5f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775ca5f6a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VREN" ref="0x7f775ca760f0" loc="55:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f775ca760f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775ca76470"/>
        <function-ref name="isInput" scoped="" ref="0x7f775ca76600"/>
        <function-ref name="toggle" scoped="" ref="0x7f775ca76790"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775ca76920"/>
        <function-ref name="get" scoped="" ref="0x7f775ca76ab0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775ca76c40"/>
        <function-ref name="set" scoped="" ref="0x7f775ca76dd0"/>
        <function-ref name="clr" scoped="" ref="0x7f775ca75020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775ca85510" loc="44:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775ca85510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775ca85890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f775ca63020" loc="65:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775ca63020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775ca633a0"/>
        <function-ref name="write" scoped="" ref="0x7f775ca63530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCON" ref="0x7f775ca5fa40" loc="72:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f775ca5fa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775ca5fdc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f775ca5e1d0" loc="74:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f775ca5e1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775ca5e550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775ca5e6e0"/>
        <function-ref name="request" scoped="" ref="0x7f775ca5e870"/>
        <function-ref name="granted" scoped="" ref="0x7f775ca5ea00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775ca5eb90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SyncResource" ref="0x7f775ca5cd90" loc="76:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SyncResource" scoped="" ref="0x7f775ca5cd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775ca5b180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775ca5b310"/>
        <function-ref name="request" scoped="" ref="0x7f775ca5b4a0"/>
        <function-ref name="granted" scoped="" ref="0x7f775ca5b630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775ca5b7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f775ca82740" loc="47:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f775ca82740"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f775ca82ac0"/>
        <function-ref name="rfOff" scoped="" ref="0x7f775ca82c50"/>
        <function-ref name="rxOn" scoped="" ref="0x7f775ca82de0"/>
        <function-ref name="startVReg" scoped="" ref="0x7f775ca81020"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f775ca811b0"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f775ca81340"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f775ca814d0"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f775ca81660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG1" ref="0x7f775ca66e00" loc="63:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f775ca66e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775ca651c0"/>
        <function-ref name="write" scoped="" ref="0x7f775ca65350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FSCTRL" ref="0x7f775ca64be0" loc="61:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f775ca64be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775ca66020"/>
        <function-ref name="write" scoped="" ref="0x7f775ca661b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXON" ref="0x7f775ca5d2b0" loc="69:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f775ca5d2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775ca5d630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f775ca5ba80" loc="78:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f775ca5ba80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f775ca5be00"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f775ca5a020"/>
        <function-ref name="led1On" scoped="" ref="0x7f775ca5a1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f775ca5a340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f775ca5a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f775ca5a660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f775ca5a7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f775ca5ae30"/>
        <function-ref name="set" scoped="" ref="0x7f775ca5a980"/>
        <function-ref name="led0On" scoped="" ref="0x7f775ca5ab10"/>
        <function-ref name="led2On" scoped="" ref="0x7f775ca5aca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sync" ref="0x7f775ca52940" loc="125:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sync" scoped="" ref="0x7f775ca52940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775ca52cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f775ca52e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775ca85b80" loc="45:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775ca85b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775ca84020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775ca841b0"/>
        <function-ref name="request" scoped="" ref="0x7f775ca84340"/>
        <function-ref name="granted" scoped="" ref="0x7f775ca844d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775ca84660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PANID" ref="0x7f775ca705e0" loc="60:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f775ca705e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775ca70960"/>
        <function-ref name="write" scoped="" ref="0x7f775ca70af0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IEEEADR" ref="0x7f775ca68c30" loc="59:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f775ca68c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775ca700e0"/>
        <function-ref name="write" scoped="" ref="0x7f775ca70270"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptCCA" ref="0x7f775ca71c00" loc="56:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f775ca71c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775ca74020"/>
        <function-ref name="disable" scoped="" ref="0x7f775ca741b0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f775ca74340"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f775ca744d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiResource" ref="0x7f775ca5c020" loc="75:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RssiResource" scoped="" ref="0x7f775ca5c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775ca5c3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775ca5c530"/>
        <function-ref name="request" scoped="" ref="0x7f775ca5c6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f775ca5c850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775ca5c9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRFOFF" ref="0x7f775ca5d9c0" loc="70:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f775ca5d9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775ca5dd40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775c9dbc70" loc="45:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775c9dbc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775c9d8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f775c9d8690" loc="46:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f775c9d8690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775c9d4020"/>
        <function-ref name="fired" scoped="" ref="0x7f775c9d5020"/>
        <function-ref name="startAt" scoped="" ref="0x7f775c9d59a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775c9d54e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775c9d44e0"/>
        <function-ref name="start" scoped="" ref="0x7f775c9d75b0"/>
        <function-ref name="stop" scoped="" ref="0x7f775c9d7ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775c9d3a20" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775c9d3a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775c9d3da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f775c9d22e0" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f775c9d22e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775c996b30"/>
        <function-ref name="fired" scoped="" ref="0x7f775c998ae0"/>
        <function-ref name="startAt" scoped="" ref="0x7f775c9964e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775c996020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775c995020"/>
        <function-ref name="start" scoped="" ref="0x7f775c998110"/>
        <function-ref name="stop" scoped="" ref="0x7f775c998620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f775b79c690" loc="44:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f775b79c690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775b799020"/>
        <function-ref name="fired" scoped="" ref="0x7f775b79a020"/>
        <function-ref name="startAt" scoped="" ref="0x7f775b79a9a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775b79a4e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775b7994e0"/>
        <function-ref name="start" scoped="" ref="0x7f775b79b5b0"/>
        <function-ref name="stop" scoped="" ref="0x7f775b79bac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775b79edf0" loc="43:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775b79edf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775b79c1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f775b795870" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f775b795870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775b791090"/>
        <function-ref name="fired" scoped="" ref="0x7f775b792090"/>
        <function-ref name="startAt" scoped="" ref="0x7f775b792a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775b792550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775b791550"/>
        <function-ref name="start" scoped="" ref="0x7f775b7936a0"/>
        <function-ref name="stop" scoped="" ref="0x7f775b793bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775b795020" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775b795020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775b7953a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f775b77b020" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f775b77b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775b77b3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775b77b530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775b77b6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775b77b850"/>
        <function-ref name="fired" scoped="" ref="0x7f775b77b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f775b77e570" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f775b77e570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775b77e8f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775b77ea80"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775b77ec10"/>
        <function-ref name="get" scoped="" ref="0x7f775b77eda0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775b77d020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775b77d1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775b77d340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775b77d4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f775b77d660"/>
        <function-ref name="setMode" scoped="" ref="0x7f775b77d7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775b77d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f775b77dc10" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775b77dc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775b77c020"/>
        <function-ref name="getControl" scoped="" ref="0x7f775b77c1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775b77c340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775b77c4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775b77c660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775b77c7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775b77c980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775b77cb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f775b77cca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f775b772da0" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f775b772da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775b771180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f775b771310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f775b7714a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f775b771630"/>
        <function-ref name="fired" scoped="" ref="0x7f775b7717c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f775b7744c0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f775b7744c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775b774840"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775b7749d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775b774b60"/>
        <function-ref name="get" scoped="" ref="0x7f775b774cf0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775b774e80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775b773030"/>
        <function-ref name="getMode" scoped="" ref="0x7f775b7731c0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775b773350"/>
        <function-ref name="overflow" scoped="" ref="0x7f775b7734e0"/>
        <function-ref name="setMode" scoped="" ref="0x7f775b773670"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775b773800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f775b778340" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f775b778340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775b776ba0"/>
        <function-ref name="fired" scoped="" ref="0x7f775b777b80"/>
        <function-ref name="startAt" scoped="" ref="0x7f775b776550"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775b776090"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775b774090"/>
        <function-ref name="start" scoped="" ref="0x7f775b7771b0"/>
        <function-ref name="stop" scoped="" ref="0x7f775b7776c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775b779a30" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775b779a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775b779db0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f775b773a90" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775b773a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775b773e10"/>
        <function-ref name="getControl" scoped="" ref="0x7f775b772020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775b7721b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775b772340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775b7724d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775b772660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775b7727f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775b772980"/>
        <function-ref name="setControl" scoped="" ref="0x7f775b772b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f775c9bb650" loc="43:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f775c9bb650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775c9ba5b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775c9b8020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775c9baa70"/>
        <function-ref name="overflow" scoped="" ref="0x7f775c9b84e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f775c9b26d0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f775c9b26d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775c9b15b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775c9af020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775c9b1a70"/>
        <function-ref name="overflow" scoped="" ref="0x7f775c9af4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f775c9b52e0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f775c9b52e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775c9b3110"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775c9b3a90"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775c9b35d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f775c9b2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f775b78fa90" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f775b78fa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775b78b2e0"/>
        <function-ref name="fired" scoped="" ref="0x7f775b78d2e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f775b78dc60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775b78d7a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775b78b7a0"/>
        <function-ref name="start" scoped="" ref="0x7f775b78e8d0"/>
        <function-ref name="stop" scoped="" ref="0x7f775b78ede0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f775b788210" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f775b788210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775b785b30"/>
        <function-ref name="fired" scoped="" ref="0x7f775b787a60"/>
        <function-ref name="startAt" scoped="" ref="0x7f775b7854e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775b785020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775b784020"/>
        <function-ref name="start" scoped="" ref="0x7f775b787090"/>
        <function-ref name="stop" scoped="" ref="0x7f775b7875a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f775b78be10" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f775b78be10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775b78aca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775b789670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775b7891b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f775b789b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFO" ref="0x7f775c9906a0" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f775c9906a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c990a20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c990bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c990d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c98f020"/>
        <function-ref name="get" scoped="" ref="0x7f775c98f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c98f340"/>
        <function-ref name="set" scoped="" ref="0x7f775c98f4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c98f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFOP" ref="0x7f775c98f9d0" loc="45:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f775c98f9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c98fd50"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c98e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c98e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c98e340"/>
        <function-ref name="get" scoped="" ref="0x7f775c98e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c98e660"/>
        <function-ref name="set" scoped="" ref="0x7f775c98e7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c98e980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7f775c98ece0" loc="46:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f775c98ece0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c98d0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c98d230"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c98d3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c98d550"/>
        <function-ref name="get" scoped="" ref="0x7f775c98d6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c98d870"/>
        <function-ref name="set" scoped="" ref="0x7f775c98da00"/>
        <function-ref name="clr" scoped="" ref="0x7f775c98db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CSN" ref="0x7f775c991370" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f775c991370"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c9916f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c991880"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c991a10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c991ba0"/>
        <function-ref name="get" scoped="" ref="0x7f775c991d30"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c990020"/>
        <function-ref name="set" scoped="" ref="0x7f775c9901b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c990340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VREN" ref="0x7f775c98b380" loc="48:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f775c98b380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c98b700"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c98b890"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c98ba20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c98bbb0"/>
        <function-ref name="get" scoped="" ref="0x7f775c98bd40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c98a020"/>
        <function-ref name="set" scoped="" ref="0x7f775c98a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c98a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CCA" ref="0x7f775c9920e0" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f775c9920e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c992460"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c9925f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c992780"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c992910"/>
        <function-ref name="get" scoped="" ref="0x7f775c992aa0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c992c30"/>
        <function-ref name="set" scoped="" ref="0x7f775c992dc0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c991020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFD" ref="0x7f775c98c020" loc="47:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f775c98c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c98c3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c98c530"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c98c6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c98c850"/>
        <function-ref name="get" scoped="" ref="0x7f775c98c9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c98cb70"/>
        <function-ref name="set" scoped="" ref="0x7f775c98cd00"/>
        <function-ref name="clr" scoped="" ref="0x7f775c98b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f775c987930" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c987930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c987cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c987e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c986020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c985c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c986340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c9864d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c986660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c9867f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c986980"/>
        <function-ref name="get" scoped="" ref="0x7f775c986b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c986ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c986e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c985020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c9852b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c985440"/>
        <function-ref name="set" scoped="" ref="0x7f775c9855d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c985760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c9858f0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c9861b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c985a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f775c989710" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f775c989710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c989a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c989c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c989db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c987020"/>
        <function-ref name="get" scoped="" ref="0x7f775c9871b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c987340"/>
        <function-ref name="set" scoped="" ref="0x7f775c9874d0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c987660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f775c981020" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c981020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c9813a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c981530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c9816c0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c97f4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c9819e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c981b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c981d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c980020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c9801b0"/>
        <function-ref name="get" scoped="" ref="0x7f775c980340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c9804d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c980660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c9807f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c980a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c980c10"/>
        <function-ref name="set" scoped="" ref="0x7f775c980da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c97f020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c97f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c981850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c97f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f775c983da0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f775c983da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c982180"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c982310"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c9824a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c982630"/>
        <function-ref name="get" scoped="" ref="0x7f775c9827c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c982950"/>
        <function-ref name="set" scoped="" ref="0x7f775c982ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c982c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f775c97c610" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c97c610"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c97c990"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c97cb20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c97ccb0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c97a980"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c97b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c97b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c97b340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c97b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c97b660"/>
        <function-ref name="get" scoped="" ref="0x7f775c97b7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c97b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c97bb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c97bca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c97a020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c97a1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775c97a340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c97a4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c97a660"/>
        <function-ref name="clr" scoped="" ref="0x7f775c97ce40"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c97a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f775c97d4a0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f775c97d4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c97d820"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c97d9b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c97db40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c97dcd0"/>
        <function-ref name="get" scoped="" ref="0x7f775c97de60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c97c020"/>
        <function-ref name="set" scoped="" ref="0x7f775c97c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c97c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f775c977c60" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c977c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c976020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c9761b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c976340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c974020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c976660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c9767f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c976980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c976b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c976ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775c976e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c975020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c9751b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c975340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c9755d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c975760"/>
        <function-ref name="set" scoped="" ref="0x7f775c9758f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c975a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c975c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775c9764d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c975da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f775c978b00" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f775c978b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c978e80"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c977030"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c9771c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c977350"/>
        <function-ref name="get" scoped="" ref="0x7f775c9774e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c977670"/>
        <function-ref name="set" scoped="" ref="0x7f775c977800"/>
        <function-ref name="clr" scoped="" ref="0x7f775c977990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f775c9712f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c9712f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c971670"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c971800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c971990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c96e660"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c971cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c971e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c96f020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c96f1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c96f340"/>
        <function-ref name="get" scoped="" ref="0x7f775c96f4d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c96f660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c96f7f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c96f980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c96fc10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c96fda0"/>
        <function-ref name="set" scoped="" ref="0x7f775c96e020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c96e1b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c96e340"/>
        <function-ref name="clr" scoped="" ref="0x7f775c971b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c96e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f775c972020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f775c972020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c9723a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c972530"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c9726c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c972850"/>
        <function-ref name="get" scoped="" ref="0x7f775c9729e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c972b70"/>
        <function-ref name="set" scoped="" ref="0x7f775c972d00"/>
        <function-ref name="clr" scoped="" ref="0x7f775c971020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f775c96b7a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c96b7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c96bb20"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c96bcb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c96be40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c969a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c96a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c96a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c96a4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c96a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c96a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f775c96a980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c96ab10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c96aca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c96ae30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c969120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c9692b0"/>
        <function-ref name="set" scoped="" ref="0x7f775c969440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c9695d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c969760"/>
        <function-ref name="clr" scoped="" ref="0x7f775c96a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c9698f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f775c96c630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f775c96c630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c96c9b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c96cb40"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c96ccd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c96ce60"/>
        <function-ref name="get" scoped="" ref="0x7f775c96b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c96b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775c96b340"/>
        <function-ref name="clr" scoped="" ref="0x7f775c96b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f775c966c60" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c966c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c965020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c9651b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c965340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c963020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c965660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c9657f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c965980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c965b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c965ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775c965e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c964020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c9641b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c964340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c9645d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c964760"/>
        <function-ref name="set" scoped="" ref="0x7f775c9648f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c964a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c964c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775c9654d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c964da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f775c967b00" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f775c967b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c967e80"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c966030"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c9661c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c966350"/>
        <function-ref name="get" scoped="" ref="0x7f775c9664e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c966670"/>
        <function-ref name="set" scoped="" ref="0x7f775c966800"/>
        <function-ref name="clr" scoped="" ref="0x7f775c966990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureSFD" ref="0x7f775c94a700" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f775c94a700"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f775c94aa80"/>
        <function-ref name="disable" scoped="" ref="0x7f775c94ac10"/>
        <function-ref name="captured" scoped="" ref="0x7f775c94ada0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f775c94d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptCCA" ref="0x7f775c94d400" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f775c94d400"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775c94d780"/>
        <function-ref name="disable" scoped="" ref="0x7f775c94d910"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f775c94daa0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f775c94dc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptFIFOP" ref="0x7f775c94c060" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f775c94c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775c94c3e0"/>
        <function-ref name="disable" scoped="" ref="0x7f775c94c570"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f775c94c700"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f775c94c890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Capture" ref="0x7f775c92ea80" loc="50:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Capture" scoped="" ref="0x7f775c92ea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f775c92ee00"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f775c92d020"/>
        <function-ref name="captured" scoped="" ref="0x7f775c92d1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775c92d340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775c92d4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f775c92d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f775c941c20" loc="48:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f775c941c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f775c92f020"/>
        <function-ref name="disable" scoped="" ref="0x7f775c92f1b0"/>
        <function-ref name="captured" scoped="" ref="0x7f775c92f340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f775c92f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f775c92f760" loc="49:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f775c92f760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f775c92fae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f775c92fc70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775c92fe00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f775c92e020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f775c92e1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775c92e340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f775c92e4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f775c92e660"/>
        <function-ref name="setControl" scoped="" ref="0x7f775c92e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x7f775c92d930" loc="51:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f775c92d930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c92dcb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c92de40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c92c020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c92bc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c92c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c92c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c92c660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c92c7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c92c980"/>
        <function-ref name="get" scoped="" ref="0x7f775c92cb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c92cca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c92ce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c92b020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c92b2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c92b440"/>
        <function-ref name="set" scoped="" ref="0x7f775c92b5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c92b760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c92b8f0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c92c1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c92ba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f775c91a3f0" loc="46:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f775c91a3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c91a770"/>
        <function-ref name="fired" scoped="" ref="0x7f775c91a900"/>
        <function-ref name="disable" scoped="" ref="0x7f775c91aa90"/>
        <function-ref name="edge" scoped="" ref="0x7f775c91ac20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c91adb0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c919020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c9191b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c919340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f775c90e3f0" loc="58:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f775c90e3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c90e770"/>
        <function-ref name="fired" scoped="" ref="0x7f775c90e900"/>
        <function-ref name="disable" scoped="" ref="0x7f775c90ea90"/>
        <function-ref name="edge" scoped="" ref="0x7f775c90ec20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c90edb0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c90d020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c90d1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c90d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f775c917d50" loc="49:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f775c917d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c916100"/>
        <function-ref name="fired" scoped="" ref="0x7f775c916290"/>
        <function-ref name="disable" scoped="" ref="0x7f775c916420"/>
        <function-ref name="edge" scoped="" ref="0x7f775c9165b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c916740"/>
        <function-ref name="enable" scoped="" ref="0x7f775c9168d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c916a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c916bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f775c9143f0" loc="53:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f775c9143f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c914770"/>
        <function-ref name="fired" scoped="" ref="0x7f775c914900"/>
        <function-ref name="disable" scoped="" ref="0x7f775c914a90"/>
        <function-ref name="edge" scoped="" ref="0x7f775c914c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c914db0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c913020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c9131b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c913340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f775c923bc0" loc="44:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f775c923bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c91c020"/>
        <function-ref name="fired" scoped="" ref="0x7f775c91c1b0"/>
        <function-ref name="disable" scoped="" ref="0x7f775c91c340"/>
        <function-ref name="edge" scoped="" ref="0x7f775c91c4d0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c91c660"/>
        <function-ref name="enable" scoped="" ref="0x7f775c91c7f0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c91c980"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c91cb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f775c911d50" loc="56:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f775c911d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c910210"/>
        <function-ref name="fired" scoped="" ref="0x7f775c9103a0"/>
        <function-ref name="disable" scoped="" ref="0x7f775c910530"/>
        <function-ref name="edge" scoped="" ref="0x7f775c9106c0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c910850"/>
        <function-ref name="enable" scoped="" ref="0x7f775c9109e0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c910b70"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c910d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f775c919710" loc="47:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f775c919710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c919a90"/>
        <function-ref name="fired" scoped="" ref="0x7f775c919c20"/>
        <function-ref name="disable" scoped="" ref="0x7f775c919db0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c918020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c9181b0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c918340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c9184d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c918660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f775c90d710" loc="59:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f775c90d710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c90da90"/>
        <function-ref name="fired" scoped="" ref="0x7f775c90dc20"/>
        <function-ref name="disable" scoped="" ref="0x7f775c90ddb0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c90c020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c90c1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c90c340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c90c4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c90c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f775c91e620" loc="42:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f775c91e620"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c91e9a0"/>
        <function-ref name="fired" scoped="" ref="0x7f775c91eb30"/>
        <function-ref name="disable" scoped="" ref="0x7f775c91ecc0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c91ee50"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c924020"/>
        <function-ref name="enable" scoped="" ref="0x7f775c9241b0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c924340"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c9244d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f775c913710" loc="54:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f775c913710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c913a90"/>
        <function-ref name="fired" scoped="" ref="0x7f775c913c20"/>
        <function-ref name="disable" scoped="" ref="0x7f775c913db0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c912020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c9121b0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c912340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c9124d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c912660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f775c91b020" loc="45:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f775c91b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c91b3a0"/>
        <function-ref name="fired" scoped="" ref="0x7f775c91b530"/>
        <function-ref name="disable" scoped="" ref="0x7f775c91b6c0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c91b850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c91b9e0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c91bb70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c91bd00"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c91a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f775c90f100" loc="57:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f775c90f100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c90f480"/>
        <function-ref name="fired" scoped="" ref="0x7f775c90f610"/>
        <function-ref name="disable" scoped="" ref="0x7f775c90f7a0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c90f930"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c90fac0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c90fc50"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c90fde0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c90e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f775c918a30" loc="48:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f775c918a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c918db0"/>
        <function-ref name="fired" scoped="" ref="0x7f775c917020"/>
        <function-ref name="disable" scoped="" ref="0x7f775c9171b0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c917340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c9174d0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c917660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c9177f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c917980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f775c915020" loc="52:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f775c915020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c9153a0"/>
        <function-ref name="fired" scoped="" ref="0x7f775c915530"/>
        <function-ref name="disable" scoped="" ref="0x7f775c9156c0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c915850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c9159e0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c915b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c915d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c914020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f775c9248a0" loc="43:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f775c9248a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c924c20"/>
        <function-ref name="fired" scoped="" ref="0x7f775c924db0"/>
        <function-ref name="disable" scoped="" ref="0x7f775c923020"/>
        <function-ref name="edge" scoped="" ref="0x7f775c9231b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c923340"/>
        <function-ref name="enable" scoped="" ref="0x7f775c9234d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c923660"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c9237f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f775c912a30" loc="55:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f775c912a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c912db0"/>
        <function-ref name="fired" scoped="" ref="0x7f775c911020"/>
        <function-ref name="disable" scoped="" ref="0x7f775c9111b0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c911340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c9114d0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c911660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c9117f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c911980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f775c9043f0" loc="58:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f775c9043f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c904770"/>
        <function-ref name="fired" scoped="" ref="0x7f775c904900"/>
        <function-ref name="disable" scoped="" ref="0x7f775c904a90"/>
        <function-ref name="edge" scoped="" ref="0x7f775c904c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c904db0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c903020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c9031b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c903340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f775c8f73f0" loc="70:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f775c8f73f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c8f7770"/>
        <function-ref name="fired" scoped="" ref="0x7f775c8f7900"/>
        <function-ref name="disable" scoped="" ref="0x7f775c8f7a90"/>
        <function-ref name="edge" scoped="" ref="0x7f775c8f7c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c8f7db0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c8f6020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c8f61b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c8f6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f775c900d50" loc="61:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f775c900d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c8ff100"/>
        <function-ref name="fired" scoped="" ref="0x7f775c8ff290"/>
        <function-ref name="disable" scoped="" ref="0x7f775c8ff420"/>
        <function-ref name="edge" scoped="" ref="0x7f775c8ff5b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c8ff740"/>
        <function-ref name="enable" scoped="" ref="0x7f775c8ff8d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c8ffa60"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c8ffbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f775c8fd3f0" loc="65:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f775c8fd3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c8fd770"/>
        <function-ref name="fired" scoped="" ref="0x7f775c8fd900"/>
        <function-ref name="disable" scoped="" ref="0x7f775c8fda90"/>
        <function-ref name="edge" scoped="" ref="0x7f775c8fdc20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c8fddb0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c8fc020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c8fc1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c8fc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f775c907d50" loc="56:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f775c907d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c906100"/>
        <function-ref name="fired" scoped="" ref="0x7f775c906290"/>
        <function-ref name="disable" scoped="" ref="0x7f775c906420"/>
        <function-ref name="edge" scoped="" ref="0x7f775c9065b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c906740"/>
        <function-ref name="enable" scoped="" ref="0x7f775c9068d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c906a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c906bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f775c8fad50" loc="68:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f775c8fad50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c8f9210"/>
        <function-ref name="fired" scoped="" ref="0x7f775c8f93a0"/>
        <function-ref name="disable" scoped="" ref="0x7f775c8f9530"/>
        <function-ref name="edge" scoped="" ref="0x7f775c8f96c0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c8f9850"/>
        <function-ref name="enable" scoped="" ref="0x7f775c8f99e0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c8f9b70"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c8f9d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f775c903710" loc="59:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f775c903710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c903a90"/>
        <function-ref name="fired" scoped="" ref="0x7f775c903c20"/>
        <function-ref name="disable" scoped="" ref="0x7f775c903db0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c902020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c9021b0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c902340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c9024d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c902660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f775c8f6710" loc="71:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f775c8f6710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c8f6a90"/>
        <function-ref name="fired" scoped="" ref="0x7f775c8f6c20"/>
        <function-ref name="disable" scoped="" ref="0x7f775c8f6db0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c8f5020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c8f51b0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c8f5340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c8f54d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c8f5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f775c90b7a0" loc="54:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f775c90b7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c90bb20"/>
        <function-ref name="fired" scoped="" ref="0x7f775c90bcb0"/>
        <function-ref name="disable" scoped="" ref="0x7f775c90be40"/>
        <function-ref name="edge" scoped="" ref="0x7f775c908020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c9081b0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c908340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c9084d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c908660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f775c8fc710" loc="66:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f775c8fc710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c8fca90"/>
        <function-ref name="fired" scoped="" ref="0x7f775c8fcc20"/>
        <function-ref name="disable" scoped="" ref="0x7f775c8fcdb0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c8fb020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c8fb1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c8fb340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c8fb4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c8fb660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f775c905020" loc="57:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f775c905020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c9053a0"/>
        <function-ref name="fired" scoped="" ref="0x7f775c905530"/>
        <function-ref name="disable" scoped="" ref="0x7f775c9056c0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c905850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c9059e0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c905b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c905d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c904020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f775c8f8100" loc="69:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f775c8f8100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c8f8480"/>
        <function-ref name="fired" scoped="" ref="0x7f775c8f8610"/>
        <function-ref name="disable" scoped="" ref="0x7f775c8f87a0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c8f8930"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c8f8ac0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c8f8c50"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c8f8de0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c8f7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f775c902a30" loc="60:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f775c902a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c902db0"/>
        <function-ref name="fired" scoped="" ref="0x7f775c900020"/>
        <function-ref name="disable" scoped="" ref="0x7f775c9001b0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c900340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c9004d0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c900660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c9007f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c900980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f775c8fe020" loc="64:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f775c8fe020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c8fe3a0"/>
        <function-ref name="fired" scoped="" ref="0x7f775c8fe530"/>
        <function-ref name="disable" scoped="" ref="0x7f775c8fe6c0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c8fe850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c8fe9e0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c8feb70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c8fed00"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c8fd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f775c908a30" loc="55:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f775c908a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c908db0"/>
        <function-ref name="fired" scoped="" ref="0x7f775c907020"/>
        <function-ref name="disable" scoped="" ref="0x7f775c9071b0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c907340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c9074d0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c907660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c9077f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c907980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f775c8fba30" loc="67:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f775c8fba30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c8fbdb0"/>
        <function-ref name="fired" scoped="" ref="0x7f775c8fa020"/>
        <function-ref name="disable" scoped="" ref="0x7f775c8fa1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f775c8fa340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c8fa4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c8fa660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c8fa7f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c8fa980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f775c7eb2f0" loc="52:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f775c7eb2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c7eb670"/>
        <function-ref name="fired" scoped="" ref="0x7f775c7eb800"/>
        <function-ref name="disable" scoped="" ref="0x7f775c7eb990"/>
        <function-ref name="edge" scoped="" ref="0x7f775c7ebb20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c7ebcb0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c7ebe40"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c7de020"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c7de1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f775c7ec680" loc="51:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f775c7ec680"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775c7eca00"/>
        <function-ref name="disable" scoped="" ref="0x7f775c7ecb90"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f775c7ecd20"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f775c7eb020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f775c7da7a0" loc="52:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f775c7da7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c7dab20"/>
        <function-ref name="fired" scoped="" ref="0x7f775c7dacb0"/>
        <function-ref name="disable" scoped="" ref="0x7f775c7dae40"/>
        <function-ref name="edge" scoped="" ref="0x7f775c7d9020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f775c7d91b0"/>
        <function-ref name="enable" scoped="" ref="0x7f775c7d9340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f775c7d94d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f775c7d9660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f775c7ddb70" loc="51:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f775c7ddb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775c7da020"/>
        <function-ref name="disable" scoped="" ref="0x7f775c7da1b0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f775c7da340"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f775c7da4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f775c37be50" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f775c37be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c37a410"/>
        <function-ref name="write" scoped="" ref="0x7f775c37a5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f775c385160" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f775c385160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3854e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f775c37fe50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f775c37fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c37e210"/>
        <function-ref name="write" scoped="" ref="0x7f775c37e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f775c379880" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c379880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c379c00"/>
        <function-ref name="write" scoped="" ref="0x7f775c379d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f775c3710a0" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f775c3710a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c371420"/>
        <function-ref name="write" scoped="" ref="0x7f775c3715b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f775c3780a0" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f775c3780a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c378420"/>
        <function-ref name="write" scoped="" ref="0x7f775c3785b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f775c363500" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f775c363500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c363880"/>
        <function-ref name="write" scoped="" ref="0x7f775c363a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f775c365500" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f775c365500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c365880"/>
        <function-ref name="write" scoped="" ref="0x7f775c365a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f775c384490" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f775c384490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c384810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f775c36d880" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f775c36d880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c36dc00"/>
        <function-ref name="write" scoped="" ref="0x7f775c36dd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f775c367500" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f775c367500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c367880"/>
        <function-ref name="write" scoped="" ref="0x7f775c367a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f775c37ee50" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f775c37ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c37c210"/>
        <function-ref name="write" scoped="" ref="0x7f775c37c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f775c37ce50" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f775c37ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c37b210"/>
        <function-ref name="write" scoped="" ref="0x7f775c37b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f775c373880" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f775c373880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c373c00"/>
        <function-ref name="write" scoped="" ref="0x7f775c373d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f775c3740a0" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f775c3740a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c374420"/>
        <function-ref name="write" scoped="" ref="0x7f775c3745b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f775c378880" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f775c378880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c378c00"/>
        <function-ref name="write" scoped="" ref="0x7f775c378d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f775c387a90" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c387a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f775c387e10"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f775c386020"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f775c3861b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f775c383e00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f775c383e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3811c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f775c381490" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f775c381490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c381910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f775c36ac80" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f775c36ac80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3690a0"/>
        <function-ref name="write" scoped="" ref="0x7f775c369230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f775c381be0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f775c381be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c380020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f775c367ce0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f775c367ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3650a0"/>
        <function-ref name="write" scoped="" ref="0x7f775c365230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f775c383160" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f775c383160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3834e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f775c36d0a0" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f775c36d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c36d420"/>
        <function-ref name="write" scoped="" ref="0x7f775c36d5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f775c37c670" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f775c37c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c37c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c37cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f775c37e670" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c37e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c37e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c37eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f775c386ad0" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f775c386ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c386e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f775c36e0a0" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f775c36e0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c36e420"/>
        <function-ref name="write" scoped="" ref="0x7f775c36e5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f775c371880" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f775c371880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c371c00"/>
        <function-ref name="write" scoped="" ref="0x7f775c371d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f775c36e880" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f775c36e880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c36ec00"/>
        <function-ref name="write" scoped="" ref="0x7f775c36ed90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f775c364ce0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f775c364ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3630a0"/>
        <function-ref name="write" scoped="" ref="0x7f775c363230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f775c365ce0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f775c365ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3640a0"/>
        <function-ref name="write" scoped="" ref="0x7f775c364230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f775c374880" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f775c374880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c374c00"/>
        <function-ref name="write" scoped="" ref="0x7f775c374d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f775c3700a0" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f775c3700a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c370420"/>
        <function-ref name="write" scoped="" ref="0x7f775c3705b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f775c368ce0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f775c368ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3670a0"/>
        <function-ref name="write" scoped="" ref="0x7f775c367230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f775c377880" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f775c377880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c377c00"/>
        <function-ref name="write" scoped="" ref="0x7f775c377d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f775c363ce0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f775c363ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c3620a0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c362230"/>
        <function-ref name="write" scoped="" ref="0x7f775c3623c0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c362550"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c3626e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f775c386480" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f775c386480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c386800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f775c37f670" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f775c37f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c37f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c37fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f775c37b670" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f775c37b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c37b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c37bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f775c3720a0" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f775c3720a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c372420"/>
        <function-ref name="write" scoped="" ref="0x7f775c3725b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f775c3770a0" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f775c3770a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c377420"/>
        <function-ref name="write" scoped="" ref="0x7f775c3775b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f775c372880" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f775c372880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c372c00"/>
        <function-ref name="write" scoped="" ref="0x7f775c372d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f775c37a870" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f775c37a870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c37abf0"/>
        <function-ref name="write" scoped="" ref="0x7f775c37ad80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f775c3857b0" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f775c3857b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c385b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f775c3790a0" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c3790a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c379420"/>
        <function-ref name="write" scoped="" ref="0x7f775c3795b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775c388e20" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775c388e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c3871c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c387350"/>
        <function-ref name="request" scoped="" ref="0x7f775c3874e0"/>
        <function-ref name="granted" scoped="" ref="0x7f775c387670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c387800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f775c3802f0" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f775c3802f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c380670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f775c37f020" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f775c37f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c37f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f775c368500" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f775c368500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c368880"/>
        <function-ref name="write" scoped="" ref="0x7f775c368a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f775c369ce0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f775c369ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3680a0"/>
        <function-ref name="write" scoped="" ref="0x7f775c368230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f775c3837b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f775c3837b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c383b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f775c369500" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f775c369500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c369880"/>
        <function-ref name="write" scoped="" ref="0x7f775c369a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f775c364500" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f775c364500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c364880"/>
        <function-ref name="write" scoped="" ref="0x7f775c364a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f775c3730a0" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f775c3730a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c373420"/>
        <function-ref name="write" scoped="" ref="0x7f775c3735b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f775c370880" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f775c370880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c370c00"/>
        <function-ref name="write" scoped="" ref="0x7f775c370d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f775c385e00" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f775c385e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3841c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f775c384ae0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f775c384ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c384e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f775c3760a0" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f775c3760a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c376420"/>
        <function-ref name="write" scoped="" ref="0x7f775c3765b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f775c380940" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f775c380940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c380cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f775c376880" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f775c376880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c376c00"/>
        <function-ref name="write" scoped="" ref="0x7f775c376d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f775c36a0a0" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f775c36a0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c36a820"/>
        <function-ref name="write" scoped="" ref="0x7f775c36a9b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f775c3629b0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f775c3629b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c362d30"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c361020"/>
        <function-ref name="write" scoped="" ref="0x7f775c3611b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c361340"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c3614d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f775c7972c0" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f775c7972c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c797640"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c7977d0"/>
        <function-ref name="write" scoped="" ref="0x7f775c797960"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c797af0"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c797c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f775c799350" loc="40:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c799350"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f775c7996d0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f775c799860"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f775c7999f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f775c796540" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f775c796540"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c7968c0"/>
        <function-ref name="write" scoped="" ref="0x7f775c796a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f775c795370" loc="43:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f775c795370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c7956f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c795880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775c79a4d0" loc="39:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775c79a4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c79a850"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c79a9e0"/>
        <function-ref name="request" scoped="" ref="0x7f775c79ab70"/>
        <function-ref name="granted" scoped="" ref="0x7f775c79ad00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c799020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f775c7941d0" loc="44:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f775c7941d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c794550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiPacket" ref="0x7f775c77e2e0" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f775c77e2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775c77e660"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775c77e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f775c78f890" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f775c78f890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c78fc10"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c78fda0"/>
        <function-ref name="write" scoped="" ref="0x7f775c78d020"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c78d1b0"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c78d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f775c791660" loc="44:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c791660"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f775c7919e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f775c791b70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f775c791d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiByte" ref="0x7f775c786c70" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f775c786c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f775c788020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WorkingState" ref="0x7f775c77eb40" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="WorkingState" scoped="" ref="0x7f775c77eb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f775c787020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f775c7871b0"/>
        <function-ref name="isState" scoped="" ref="0x7f775c787340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f775c7874d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f775c787660"/>
        <function-ref name="forceState" scoped="" ref="0x7f775c7877f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f775c789060" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f775c789060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c7893e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c789570"/>
        <function-ref name="request" scoped="" ref="0x7f775c789700"/>
        <function-ref name="granted" scoped="" ref="0x7f775c789890"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c789a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f775c78dba0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f775c78dba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c78c020"/>
        <function-ref name="write" scoped="" ref="0x7f775c78c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f775c78ca30" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f775c78ca30"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c78cdb0"/>
        <function-ref name="write" scoped="" ref="0x7f775c78b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f775c787a70" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f775c787a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f775c787df0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f775c785020"/>
        <function-ref name="led1On" scoped="" ref="0x7f775c7851b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f775c785340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f775c7854d0"/>
        <function-ref name="get" scoped="" ref="0x7f775c785660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f775c7857f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f775c785e30"/>
        <function-ref name="set" scoped="" ref="0x7f775c785980"/>
        <function-ref name="led0On" scoped="" ref="0x7f775c785b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f775c785ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775c790510" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775c790510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c790890"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c790a20"/>
        <function-ref name="request" scoped="" ref="0x7f775c790bb0"/>
        <function-ref name="granted" scoped="" ref="0x7f775c790d40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c78f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grant" ref="0x7f775c77abd0" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grant" scoped="" ref="0x7f775c77abd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775c779020"/>
        <function-ref name="runTask" scoped="" ref="0x7f775c7791b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f775c78b8b0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f775c78b8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c78bc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f775c71f770" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="CC2420SpiWireC.WorkingStateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f775c71f770"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f775c71faf0"/>
        <function-ref name="toIdle" scoped="" ref="0x7f775c71fc80"/>
        <function-ref name="isState" scoped="" ref="0x7f775c71fe10"/>
        <function-ref name="isIdle" scoped="" ref="0x7f775c717020"/>
        <function-ref name="requestState" scoped="" ref="0x7f775c7171b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f775c717340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f775c71a1d0" loc="66:../../../tos/system/StateImplC.nc">
      <component-ref qname="StateImplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f775c71a1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f775c71a550"/>
        <function-ref name="toIdle" scoped="" ref="0x7f775c71a6e0"/>
        <function-ref name="isState" scoped="" ref="0x7f775c71a870"/>
        <function-ref name="isIdle" scoped="" ref="0x7f775c71aa00"/>
        <function-ref name="requestState" scoped="" ref="0x7f775c71ab90"/>
        <function-ref name="forceState" scoped="" ref="0x7f775c71ad20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775c716020" loc="66:../../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775c716020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775c7163a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f775c716b70" loc="67:../../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f775c716b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f775c715020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f775c7151b0"/>
        <function-ref name="isState" scoped="" ref="0x7f775c715340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f775c7154d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f775c715660"/>
        <function-ref name="forceState" scoped="" ref="0x7f775c7157f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f775c3ae020" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f775c3ae020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775c3ae3a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775c3ae530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f775c6fc8f0" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f775c6fc8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f775c6fcc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775c6fdc40" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775c6fdc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c6fc020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c6fc1b0"/>
        <function-ref name="request" scoped="" ref="0x7f775c6fc340"/>
        <function-ref name="granted" scoped="" ref="0x7f775c6fc4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c6fc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f775b69c5d0" loc="82:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f775b69c5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f775b69c950"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f775b69cae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f775b69a020" loc="87:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f775b69a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775b69a3a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775b69a530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f775b69a7c0" loc="89:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f775b69a7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f775b69ab40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f775b69cd70" loc="83:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f775b69cd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f775b69b180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775b69d940" loc="81:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775b69d940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775b69dcc0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775b69de50"/>
        <function-ref name="request" scoped="" ref="0x7f775b69c020"/>
        <function-ref name="granted" scoped="" ref="0x7f775b69c1b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775b69c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f775b69b410" loc="85:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f775b69b410"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f775b69b790"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f775b69b920"/>
        <function-ref name="splitRead" scoped="" ref="0x7f775b69bab0"/>
        <function-ref name="write" scoped="" ref="0x7f775b69bc40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f775c6938e0" loc="74:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775c6938e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f775c693c60"/>
        <function-ref name="configure" scoped="" ref="0x7f775c693df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f775c695850" loc="77:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f775c695850"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775c695bd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775c695d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f775c691a40" loc="80:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f775c691a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f775c691dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f775c696110" loc="75:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f775c696110"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f775c696490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f775c692690" loc="79:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f775c692690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c692a10"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c692ba0"/>
        <function-ref name="request" scoped="" ref="0x7f775c692d30"/>
        <function-ref name="granted" scoped="" ref="0x7f775c691020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c6911b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775c69bd80" loc="73:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775c69bd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c698180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c698310"/>
        <function-ref name="request" scoped="" ref="0x7f775c6984a0"/>
        <function-ref name="granted" scoped="" ref="0x7f775c698630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c6987c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f775c696790" loc="76:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f775c696790"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f775c696b10"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f775c696ca0"/>
        <function-ref name="splitRead" scoped="" ref="0x7f775c696e30"/>
        <function-ref name="write" scoped="" ref="0x7f775c695020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f775c68cb40" loc="81:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f775c68cb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f775c68e020"/>
        <function-ref name="txDone" scoped="" ref="0x7f775c68e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f775c61a250" loc="76:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775c61a250"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f775c61a5f0"/>
        <function-ref name="configure" scoped="" ref="0x7f775c61a780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f775c619c50" loc="79:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f775c619c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775c618020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775c6181b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f775c6173e0" loc="82:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f775c6173e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f775c617780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f775c61aa10" loc="77:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f775c61aa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f775c61ad90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f775c617a50" loc="83:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f775c617a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f775c617dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f775c616020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f775c6161b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f775c616340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f775c6164d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f775c616660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f775c6167f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f775c616980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f775c616b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f775c616ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f775c616e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f775c615020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f775c6151b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f775c615440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f775c6155d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f775c615760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f775c6158f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f775c615a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f775c615c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f775c615da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f775c614020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f775c6141b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f775c614340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f775c6144d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775c614660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f775c6149f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f775c614b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f775c614d10"/>
        <function-ref name="tx" scoped="" ref="0x7f775c613020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f775c6131b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f775c613340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f775c6134d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f775c613660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f775c6137f0"/>
        <function-ref name="rx" scoped="" ref="0x7f775c613980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f775c613b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f775c613ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f775c613e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f775c612020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f775c6121b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f775c612c20" loc="85:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f775c612c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f775c610020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f775c6101b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f775c610340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f775c6104d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f775c610660"/>
        <function-ref name="get" scoped="" ref="0x7f775c6107f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f775c610980"/>
        <function-ref name="led2On" scoped="" ref="0x7f775c60f020"/>
        <function-ref name="set" scoped="" ref="0x7f775c610ca0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f775c610b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f775c610e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f775c6185b0" loc="81:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f775c6185b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c618950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c618ae0"/>
        <function-ref name="request" scoped="" ref="0x7f775c618c70"/>
        <function-ref name="granted" scoped="" ref="0x7f775c618e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c617020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775c61b470" loc="75:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775c61b470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c61b810"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c61b9a0"/>
        <function-ref name="request" scoped="" ref="0x7f775c61bb30"/>
        <function-ref name="granted" scoped="" ref="0x7f775c61bcc0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c61be50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f775c619060" loc="78:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f775c619060"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f775c6193e0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f775c619570"/>
        <function-ref name="splitRead" scoped="" ref="0x7f775c619700"/>
        <function-ref name="write" scoped="" ref="0x7f775c619890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f775c612480" loc="84:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f775c612480"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f775c612800"/>
        <function-ref name="txDone" scoped="" ref="0x7f775c612990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalDone_task" ref="0x7f775c60f2f0" loc="102:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalDone_task" scoped="" ref="0x7f775c60f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775c60f670"/>
        <function-ref name="runTask" scoped="" ref="0x7f775c60f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f775c5ff2c0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f775c5ff2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775c5ff640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f775c603d10" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f775c603d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f775c6020e0"/>
        <function-ref name="txDone" scoped="" ref="0x7f775c602270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f775c607020" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f775c607020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f775c6073a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f775c607530"/>
        <function-ref name="setUctl" scoped="" ref="0x7f775c6076c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f775c607850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f775c6079e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f775c607b70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f775c607d00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f775c606020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f775c6061b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f775c606340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f775c6064d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f775c606660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f775c6067f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f775c606a80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f775c606c10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f775c606da0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f775c605020"/>
        <function-ref name="isUart" scoped="" ref="0x7f775c6051b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f775c605340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f775c6054d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f775c605660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f775c6057f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f775c605980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f775c605b10"/>
        <function-ref name="getMode" scoped="" ref="0x7f775c605ca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f775c604220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f775c6043b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f775c604540"/>
        <function-ref name="tx" scoped="" ref="0x7f775c6046d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f775c604860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f775c6049f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f775c604b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f775c604d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f775c603020"/>
        <function-ref name="rx" scoped="" ref="0x7f775c6031b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f775c603340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f775c6034d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f775c603660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f775c6037f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f775c603980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f775c5c6bb0" loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f775c5c6bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c5c5020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c5c51b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c5c5340"/>
        <function-ref name="clr" scoped="" ref="0x7f775c5c3020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c5c5660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c5c57f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c5c5980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c5c5b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c5c5ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775c5c5e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c5c4020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c5c41b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c5c4340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c5c45d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c5c4760"/>
        <function-ref name="set" scoped="" ref="0x7f775c5c48f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c5c4a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c5c54d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c5c4c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c5c4da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f775c5f92d0" loc="56:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f775c5f92d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f775c5f9650"/>
        <function-ref name="txDone" scoped="" ref="0x7f775c5f97e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f775c5c33e0" loc="63:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f775c5c33e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c5c3760"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c5c38f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c5c3a80"/>
        <function-ref name="clr" scoped="" ref="0x7f775c5c17f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c5c3da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c5c2020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c5c21b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c5c2340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c5c24d0"/>
        <function-ref name="get" scoped="" ref="0x7f775c5c2660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c5c27f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c5c2980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c5c2b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c5c2da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c5c1020"/>
        <function-ref name="set" scoped="" ref="0x7f775c5c11b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c5c1340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c5c3c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c5c14d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c5c1660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f775c5c1bb0" loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f775c5c1bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c5bf020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c5bf1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c5bf340"/>
        <function-ref name="clr" scoped="" ref="0x7f775c5bd020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c5bf660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c5bf7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c5bf980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c5bfb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c5bfca0"/>
        <function-ref name="get" scoped="" ref="0x7f775c5bfe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c5be020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c5be1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c5be340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c5be5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c5be760"/>
        <function-ref name="set" scoped="" ref="0x7f775c5be8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c5bea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c5bf4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c5bec10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c5beda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f775c5fe700" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f775c5fe700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f775c5fea80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f775c5fec10"/>
        <function-ref name="setUctl" scoped="" ref="0x7f775c5feda0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f775c5fd020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f775c5fd1b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f775c5fd340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f775c5fd4d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f775c5fd660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f775c5fd7f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f775c5fd980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f775c5fdb10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f775c5fdca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f775c5fde30"/>
        <function-ref name="getUbr" scoped="" ref="0x7f775c5fc120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f775c5fc2b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f775c5fc440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f775c5fc5d0"/>
        <function-ref name="isUart" scoped="" ref="0x7f775c5fc760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f775c5fc8f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f775c5fca80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f775c5fcc10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f775c5fcda0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f775c5fb020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f775c5fb1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f775c5fb340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f775c5fb6d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f775c5fb860"/>
        <function-ref name="setUbr" scoped="" ref="0x7f775c5fb9f0"/>
        <function-ref name="tx" scoped="" ref="0x7f775c5fbb80"/>
        <function-ref name="getUctl" scoped="" ref="0x7f775c5fbd10"/>
        <function-ref name="disableUart" scoped="" ref="0x7f775c5fa020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f775c5fa1b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f775c5fa340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f775c5fa4d0"/>
        <function-ref name="rx" scoped="" ref="0x7f775c5fa660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f775c5fa7f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f775c5fa980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f775c5fab10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f775c5faca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f775c5fae30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7f775c5d0d10" loc="59:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f775c5d0d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f775c5f70e0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f775c5f7270"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f775c5f7400"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f775c5f7590"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f775c5f7720"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f775c5f78b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f775c5f7a40"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f775c5f7bd0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775c5f7d60"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f775c5f6020"/>
        <function-ref name="getData" scoped="" ref="0x7f775c5f61b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f775c5f6340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f775c5f64d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f775c5f6760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f775c5f68f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f775c5f6a80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f775c5f6c10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f775c5f6da0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f775c5cf020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f775c5cf1b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f775c5cf340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f775c5cf4d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f775c5cf660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f775c5cf7f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f775c5cf980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f775c5cfd10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f775c5ce020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f775c5ce1b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f775c5ce340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f775c5ce4d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f775c5ce660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f775c5ce7f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f775c5ce980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f775c5ceb10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f775c5ceca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f775c5cee30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f775c5cd020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f775c5cd1b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f775c5cd340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f775c5cd4d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f775c5cd660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f775c5cd7f0"/>
        <function-ref name="setData" scoped="" ref="0x7f775c5cd980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f775c5cdb10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f775c5cdca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f775c5cde30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f775c5cc020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f775c5cc1b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f775c5cc340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f775c5cc8d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f775c5cca60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f775c5ccbf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f775c5ccd80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f775c5cb020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f775c5cb1b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f775c5cb340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f775c5cb4d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f775c5cb660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f775c5cb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f775c5c83e0" loc="61:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f775c5c83e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c5c8760"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c5c88f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c5c8a80"/>
        <function-ref name="clr" scoped="" ref="0x7f775c5c67f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c5c8da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c5c7020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c5c71b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c5c7340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c5c74d0"/>
        <function-ref name="get" scoped="" ref="0x7f775c5c7660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c5c77f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c5c7980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c5c7b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c5c7da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c5c6020"/>
        <function-ref name="set" scoped="" ref="0x7f775c5c61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c5c6340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c5c8c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c5c64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c5c6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f775c5f9c20" loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f775c5f9c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775c5f8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f775c5cbbb0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f775c5cbbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c5ca020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c5ca1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c5ca340"/>
        <function-ref name="clr" scoped="" ref="0x7f775c5c8020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c5ca660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c5ca7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c5ca980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c5cab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c5caca0"/>
        <function-ref name="get" scoped="" ref="0x7f775c5cae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c5c9020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c5c91b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c5c9340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c5c95d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c5c9760"/>
        <function-ref name="set" scoped="" ref="0x7f775c5c98f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c5c9a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c5ca4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c5c9c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c5c9da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f775b692020" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f775b692020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f775b6923a0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f775b692530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f775b68b440" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f775b68b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775b68b7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f775b684760" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775b684760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f775b684ae0"/>
        <function-ref name="configure" scoped="" ref="0x7f775b684c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f775b68ba50" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f775b68ba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f775b68bdd0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f775b68a020"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f775b68a1b0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f775b68a340"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f775b68a4d0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f775b68a660"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f775b68a7f0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f775b68a980"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775b68ab10"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f775b68aca0"/>
        <function-ref name="getData" scoped="" ref="0x7f775b68ae30"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f775b689020"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f775b6891b0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f775b689440"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f775b6895d0"/>
        <function-ref name="getIV" scoped="" ref="0x7f775b689760"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f775b6898f0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f775b689a80"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f775b689c10"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f775b689da0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f775b688020"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f775b6881b0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f775b688340"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f775b6884d0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f775b688660"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f775b6889f0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f775b688b80"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f775b688d10"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f775b687020"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f775b6871b0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f775b687340"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f775b6874d0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f775b687660"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f775b6877f0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f775b687980"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f775b687b10"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f775b687ca0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f775b687e30"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f775b686020"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f775b6861b0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f775b686340"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f775b6864d0"/>
        <function-ref name="setData" scoped="" ref="0x7f775b686660"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f775b6867f0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f775b686980"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f775b686b10"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f775b686ca0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f775b686e30"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f775b685020"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f775b6855b0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f775b685740"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f775b6858d0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f775b685a60"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f775b685bf0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f775b685d80"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f775b684020"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f775b6841b0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f775b684340"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f775b6844d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f775b68dc10" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f775b68dc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f775b68b020"/>
        <function-ref name="txDone" scoped="" ref="0x7f775b68b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775b693340" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775b693340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775b6936c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775b693850"/>
        <function-ref name="request" scoped="" ref="0x7f775b6939e0"/>
        <function-ref name="granted" scoped="" ref="0x7f775b693b70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775b693d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f775b691020" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f775b691020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f775b6913a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f775b691530"/>
        <function-ref name="setUctl" scoped="" ref="0x7f775b6916c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f775b691850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f775b6919e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f775b691b70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f775b691d00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f775b690020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f775b6901b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f775b690340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f775b6904d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f775b690660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f775b6907f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f775b690a80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f775b690c10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f775b690da0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f775b68f020"/>
        <function-ref name="isUart" scoped="" ref="0x7f775b68f1b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f775b68f340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f775b68f4d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f775b68f660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f775b68f7f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f775b68f980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f775b68fb10"/>
        <function-ref name="getMode" scoped="" ref="0x7f775b68fca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f775b68e220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f775b68e3b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f775b68e540"/>
        <function-ref name="tx" scoped="" ref="0x7f775b68e6d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f775b68e860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f775b68e9f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f775b68eb80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f775b68ed10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f775b68d020"/>
        <function-ref name="rx" scoped="" ref="0x7f775b68d1b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f775b68d340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f775b68d4d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f775b68d660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f775b68d7f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f775b68d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f775b6927c0" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f775b6927c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f775b692b40"/>
        <function-ref name="userId" scoped="" ref="0x7f775b692cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f775c5172c0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f775c5172c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f775c517640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f775c5177d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f775c5168a0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775c5168a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f775c516c20"/>
        <function-ref name="configure" scoped="" ref="0x7f775c516db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f775c51b4d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f775c51b4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f775c51b850"/>
        <function-ref name="txDone" scoped="" ref="0x7f775c51b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775c518020" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775c518020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c5183a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c518530"/>
        <function-ref name="request" scoped="" ref="0x7f775c5186c0"/>
        <function-ref name="granted" scoped="" ref="0x7f775c518850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c5189e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f775c51a3f0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f775c51a3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775c51a770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f775c517ad0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f775c517ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f775c517e50"/>
        <function-ref name="userId" scoped="" ref="0x7f775c516020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f775c501bf0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f775c501bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f775c500020"/>
        <function-ref name="userId" scoped="" ref="0x7f775c5001b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f775c514d60" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f775c514d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f775c513180"/>
        <function-ref name="txDone" scoped="" ref="0x7f775c513310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f775c5015e0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f775c5015e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775c501960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f775c513710" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f775c513710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775c513ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f775c513d80" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f775c513d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f775c501180"/>
        <function-ref name="txDone" scoped="" ref="0x7f775c501310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f775c482a60" loc="59:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f775c482a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f775c482e00"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f775c480020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f775c47f790" loc="64:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775c47f790"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f775c47fb30"/>
        <function-ref name="configure" scoped="" ref="0x7f775c47fcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f775c480270" loc="60:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f775c480270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c4805f0"/>
        <function-ref name="requested" scoped="" ref="0x7f775c480780"/>
        <function-ref name="granted" scoped="" ref="0x7f775c480910"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c480aa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f775c480c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775c483ca0" loc="58:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775c483ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c4820a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c482230"/>
        <function-ref name="request" scoped="" ref="0x7f775c4823c0"/>
        <function-ref name="granted" scoped="" ref="0x7f775c482550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c4826e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f775c47e020" loc="65:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f775c47e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f775c47e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f775c480e80" loc="61:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f775c480e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f775c47f220"/>
        <function-ref name="userId" scoped="" ref="0x7f775c47f3b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775b617020" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775b617020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775b6173a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f775b617630" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f775b617630"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f775b6179b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f775b617b40"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f775b617cd0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f775b617e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f775b6136c0" loc="99:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f775b6136c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f775b613a60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f775b613bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f775b6119d0" loc="105:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f775b6119d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f775b611d70"/>
        <function-ref name="configure" scoped="" ref="0x7f775b610020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f775b6102b0" loc="106:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f775b6102b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f775b610630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f775b6107c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f775b610950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f775b610ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f775b613e40" loc="100:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f775b613e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775b6121e0"/>
        <function-ref name="requested" scoped="" ref="0x7f775b612370"/>
        <function-ref name="granted" scoped="" ref="0x7f775b612500"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775b612690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f775b612820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f775b610d30" loc="107:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f775b610d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f775b60f0e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f775b60f270"/>
        <function-ref name="led1On" scoped="" ref="0x7f775b60f400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f775b60f590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f775b60f720"/>
        <function-ref name="get" scoped="" ref="0x7f775b60f8b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f775b60fa40"/>
        <function-ref name="led0On" scoped="" ref="0x7f775b60e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775b60fd60"/>
        <function-ref name="led2On" scoped="" ref="0x7f775b60fbd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f775b60e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775b614850" loc="98:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775b614850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775b614bf0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775b614d80"/>
        <function-ref name="request" scoped="" ref="0x7f775b613020"/>
        <function-ref name="granted" scoped="" ref="0x7f775b6131b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775b613340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f775b6112d0" loc="104:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f775b6112d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f775b611650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f775b612a70" loc="101:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f775b612a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f775b612df0"/>
        <function-ref name="userId" scoped="" ref="0x7f775b611020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f775b60e480" loc="155:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f775b60e480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775b60e800"/>
        <function-ref name="runTask" scoped="" ref="0x7f775b60e990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f775c475020" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f775c475020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f775c4753a0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f775c475530"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f775c4756c0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f775c475850"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f775c4759e0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f775c475b70"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f775c475d00"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f775c474020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775c4741b0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f775c474340"/>
        <function-ref name="getData" scoped="" ref="0x7f775c4744d0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f775c474660"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f775c4747f0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f775c474a80"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f775c474c10"/>
        <function-ref name="getIV" scoped="" ref="0x7f775c474da0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f775c473020"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f775c4731b0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f775c473340"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f775c4734d0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f775c473660"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f775c4737f0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f775c473980"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f775c473b10"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f775c473ca0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f775c472220"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f775c4723b0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f775c472540"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f775c4726d0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f775c472860"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f775c4729f0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f775c472b80"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f775c472d10"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f775c471020"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f775c4711b0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f775c471340"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f775c4714d0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f775c471660"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f775c4717f0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f775c471980"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f775c471b10"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f775c471ca0"/>
        <function-ref name="setData" scoped="" ref="0x7f775c471e30"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f775c470020"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f775c4701b0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f775c470340"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f775c4704d0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f775c470660"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f775c4707f0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f775c470d80"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f775c46f020"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f775c46f1b0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f775c46f340"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f775c46f4d0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f775c46f660"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f775c46f7f0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f775c46f980"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f775c46fb10"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f775c46fca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7f775c465bb0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7f775c465bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f775c464020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f775c4641b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f775c464340"/>
        <function-ref name="enableUart" scoped="" ref="0x7f775c4644d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f775c464660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f775c4647f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f775c464980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f775c464b10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f775c464ca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f775c464e30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f775c463020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f775c4631b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f775c463340"/>
        <function-ref name="getUbr" scoped="" ref="0x7f775c4635d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f775c463760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f775c4638f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f775c463a80"/>
        <function-ref name="isUart" scoped="" ref="0x7f775c463c10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f775c463da0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f775c462020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f775c4621b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f775c462340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f775c4624d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f775c462660"/>
        <function-ref name="getMode" scoped="" ref="0x7f775c4627f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f775c462b80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f775c462d10"/>
        <function-ref name="setUbr" scoped="" ref="0x7f775c461020"/>
        <function-ref name="tx" scoped="" ref="0x7f775c4611b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f775c461340"/>
        <function-ref name="disableUart" scoped="" ref="0x7f775c4614d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f775c461660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f775c4617f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f775c461980"/>
        <function-ref name="rx" scoped="" ref="0x7f775c461b10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f775c461ca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f775c461e30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f775c460020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f775c4601b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f775c460340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f775c45ee40" loc="52:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f775c45ee40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c45d1e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c45d370"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c45d500"/>
        <function-ref name="clr" scoped="" ref="0x7f775c45b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c45d820"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c45d9b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c45db40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c45dcd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c45de60"/>
        <function-ref name="get" scoped="" ref="0x7f775c45c020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c45c1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c45c340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c45c4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c45c760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c45c8f0"/>
        <function-ref name="set" scoped="" ref="0x7f775c45ca80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c45cc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c45d690"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c45cda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c45b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7f775c46ed40" loc="48:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f775c46ed40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f775c46b0e0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f775c46b270"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f775c46b400"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f775c46b590"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f775c46b720"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f775c46b8b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f775c46ba40"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f775c46bbd0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775c46bd60"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f775c46a020"/>
        <function-ref name="getData" scoped="" ref="0x7f775c46a1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f775c46a340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f775c46a4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f775c46a760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f775c46a8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f775c46aa80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f775c46ac10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f775c46ada0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f775c469020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f775c4691b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f775c469340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f775c4694d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f775c469660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f775c4697f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f775c469980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f775c469d10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f775c468020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f775c4681b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f775c468340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f775c4684d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f775c468660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f775c4687f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f775c468980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f775c468b10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f775c468ca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f775c468e30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f775c467020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f775c4671b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f775c467340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f775c4674d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f775c467660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f775c4677f0"/>
        <function-ref name="setData" scoped="" ref="0x7f775c467980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f775c467b10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f775c467ca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f775c467e30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f775c466020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f775c4661b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f775c466340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f775c4668d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f775c466a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f775c466bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f775c466d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f775c465020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f775c4651b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f775c465340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f775c4654d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f775c465660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f775c4657f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f775c460700" loc="51:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f775c460700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c460a80"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c460c10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c460da0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c45ea80"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c45f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c45f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c45f4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c45f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c45f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f775c45f980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c45fb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c45fca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c45fe30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c45e120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c45e2b0"/>
        <function-ref name="set" scoped="" ref="0x7f775c45e440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c45e5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c45f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c45e760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c45e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f775c349c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f775c349c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c348210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3483a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f775c354da0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f775c354da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c352180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f775c34cb50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f775c34cb50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c34b020"/>
        <function-ref name="write" scoped="" ref="0x7f775c34b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f775c346670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c346670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3469f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c346b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f775c33fe50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f775c33fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c33e210"/>
        <function-ref name="write" scoped="" ref="0x7f775c33e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f775c346e50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f775c346e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c345210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3453a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f775c3332f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f775c3332f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c333670"/>
        <function-ref name="write" scoped="" ref="0x7f775c333800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f775c3352f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f775c3352f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c335670"/>
        <function-ref name="write" scoped="" ref="0x7f775c335800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f775c351120" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f775c351120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3514a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f775c33b670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f775c33b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c33b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c33bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f775c3362f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f775c3362f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c336670"/>
        <function-ref name="write" scoped="" ref="0x7f775c336800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f775c34bc60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f775c34bc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c34a020"/>
        <function-ref name="write" scoped="" ref="0x7f775c34a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f775c34ac60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f775c34ac60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c349020"/>
        <function-ref name="write" scoped="" ref="0x7f775c3491b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f775c341670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f775c341670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3419f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c341b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f775c343e50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f775c343e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c342210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3423a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f775c345670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f775c345670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3459f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c345b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f775c355760" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c355760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f775c355ae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f775c355c70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f775c355e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f775c350aa0" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f775c350aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c350e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f775c34f120" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f775c34f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c34f5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f775c33aa70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f775c33aa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c33adf0"/>
        <function-ref name="write" scoped="" ref="0x7f775c338020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f775c34f870" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f775c34f870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c34fbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f775c336ad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f775c336ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c336e50"/>
        <function-ref name="write" scoped="" ref="0x7f775c335020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f775c351dc0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f775c351dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c350180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f775c33ce50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f775c33ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c33b210"/>
        <function-ref name="write" scoped="" ref="0x7f775c33b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f775c34a480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f775c34a480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c34a800"/>
        <function-ref name="write" scoped="" ref="0x7f775c34a990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f775c34b480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c34b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c34b800"/>
        <function-ref name="write" scoped="" ref="0x7f775c34b990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f775c354750" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f775c354750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c354ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f775c33de50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f775c33de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c33c210"/>
        <function-ref name="write" scoped="" ref="0x7f775c33c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f775c33e670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f775c33e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c33e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c33eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f775c33c670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f775c33c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c33c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c33cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f775c334ad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f775c334ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c334e50"/>
        <function-ref name="write" scoped="" ref="0x7f775c333020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f775c335ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f775c335ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c335e50"/>
        <function-ref name="write" scoped="" ref="0x7f775c334020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f775c342670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f775c342670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3429f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c342b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f775c33ee50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f775c33ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c33d210"/>
        <function-ref name="write" scoped="" ref="0x7f775c33d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f775c337ad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f775c337ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c337e50"/>
        <function-ref name="write" scoped="" ref="0x7f775c336020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f775c344670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f775c344670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3449f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c344b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f775c333ad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f775c333ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c333e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c331020"/>
        <function-ref name="write" scoped="" ref="0x7f775c3311b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c331340"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c3314d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f775c354100" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f775c354100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c354480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f775c34c370" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f775c34c370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c34c6f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c34c880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f775c349480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f775c349480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c349800"/>
        <function-ref name="write" scoped="" ref="0x7f775c349990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f775c341e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f775c341e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c33f210"/>
        <function-ref name="write" scoped="" ref="0x7f775c33f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f775c345e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f775c345e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c344210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3443a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f775c33f670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f775c33f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c33f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c33fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f775c348670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f775c348670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3489f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c348b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f775c352450" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f775c352450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3527d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f775c348e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c348e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c346210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3463a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775c356a80" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775c356a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c356e00"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c355020"/>
        <function-ref name="request" scoped="" ref="0x7f775c3551b0"/>
        <function-ref name="granted" scoped="" ref="0x7f775c355340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c3554d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f775c34e020" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f775c34e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c34e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f775c34ecc0" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f775c34ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c34c0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f775c3372f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f775c3372f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c337670"/>
        <function-ref name="write" scoped="" ref="0x7f775c337800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f775c338ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f775c338ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c338e50"/>
        <function-ref name="write" scoped="" ref="0x7f775c337020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f775c350450" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f775c350450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3507d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f775c3382f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f775c3382f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c338670"/>
        <function-ref name="write" scoped="" ref="0x7f775c338800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f775c3342f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f775c3342f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c334670"/>
        <function-ref name="write" scoped="" ref="0x7f775c334800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f775c342e50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f775c342e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c341210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3413a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f775c33d670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f775c33d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c33d9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c33db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f775c352aa0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f775c352aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c352e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f775c351770" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f775c351770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c351af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f775c344e50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f775c344e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c343210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3433a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f775c34e670" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f775c34e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c34e9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f775c343670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f775c343670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3439f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c343b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f775c33be50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f775c33be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c33a610"/>
        <function-ref name="write" scoped="" ref="0x7f775c33a7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f775c3317a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f775c3317a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c331b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c331cb0"/>
        <function-ref name="write" scoped="" ref="0x7f775c331e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c330020"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c3301b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f775c31cc60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f775c31cc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c31b210"/>
        <function-ref name="write" scoped="" ref="0x7f775c31b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f775c327da0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f775c327da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c326180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f775c320b50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f775c320b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c31f020"/>
        <function-ref name="write" scoped="" ref="0x7f775c31f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f775c31a670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c31a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c31a9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c31ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f775c313e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f775c313e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c312210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3123a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f775c31ae50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f775c31ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c319210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3193a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f775c3062f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f775c3062f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c306670"/>
        <function-ref name="write" scoped="" ref="0x7f775c306800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f775c3082f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f775c3082f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c308670"/>
        <function-ref name="write" scoped="" ref="0x7f775c308800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f775c325120" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f775c325120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3254a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f775c30e670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f775c30e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c30e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c30eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f775c30a2f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f775c30a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c30a670"/>
        <function-ref name="write" scoped="" ref="0x7f775c30a800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f775c31fc60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f775c31fc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c31d020"/>
        <function-ref name="write" scoped="" ref="0x7f775c31d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f775c31dc60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f775c31dc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c31c020"/>
        <function-ref name="write" scoped="" ref="0x7f775c31c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f775c314670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f775c314670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3149f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c314b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f775c316e50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f775c316e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c315210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3153a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f775c319670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f775c319670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3199f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c319b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f775c328760" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c328760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f775c328ae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f775c328c70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f775c328e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f775c323aa0" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f775c323aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c323e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f775c322120" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f775c322120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3225a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f775c30da70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f775c30da70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c30ddf0"/>
        <function-ref name="write" scoped="" ref="0x7f775c30c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f775c322870" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f775c322870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c322bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f775c30aad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f775c30aad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c30ae50"/>
        <function-ref name="write" scoped="" ref="0x7f775c308020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f775c325dc0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f775c325dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c323180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f775c30fe50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f775c30fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c30e210"/>
        <function-ref name="write" scoped="" ref="0x7f775c30e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f775c31d480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f775c31d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c31d800"/>
        <function-ref name="write" scoped="" ref="0x7f775c31d990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f775c31f480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c31f480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c31f800"/>
        <function-ref name="write" scoped="" ref="0x7f775c31f990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f775c327750" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f775c327750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c327ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f775c311e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f775c311e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c30f210"/>
        <function-ref name="write" scoped="" ref="0x7f775c30f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f775c312670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f775c312670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3129f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c312b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f775c30f670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f775c30f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c30f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c30fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f775c307ad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f775c307ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c307e50"/>
        <function-ref name="write" scoped="" ref="0x7f775c306020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f775c308ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f775c308ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c308e50"/>
        <function-ref name="write" scoped="" ref="0x7f775c307020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f775c315670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f775c315670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3159f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c315b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f775c312e50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f775c312e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c311210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3113a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f775c30bad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f775c30bad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c30be50"/>
        <function-ref name="write" scoped="" ref="0x7f775c30a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f775c318670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f775c318670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3189f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c318b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f775c306ad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f775c306ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c306e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c305020"/>
        <function-ref name="write" scoped="" ref="0x7f775c3051b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c305340"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c3054d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f775c327100" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f775c327100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c327480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f775c320370" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f775c320370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3206f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c320880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f775c31c480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f775c31c480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c31c800"/>
        <function-ref name="write" scoped="" ref="0x7f775c31c990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f775c314e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f775c314e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c313210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3133a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f775c319e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f775c319e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c318210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3183a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f775c313670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f775c313670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3139f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c313b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f775c31b670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f775c31b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c31b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c31bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f775c326450" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f775c326450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3267d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f775c31be50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c31be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c31a210"/>
        <function-ref name="write" scoped="" ref="0x7f775c31a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775c3299e0" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775c3299e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c329d60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c328020"/>
        <function-ref name="request" scoped="" ref="0x7f775c3281b0"/>
        <function-ref name="granted" scoped="" ref="0x7f775c328340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c3284d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f775c321020" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f775c321020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3213a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f775c321cc0" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f775c321cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3200a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f775c30b2f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f775c30b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c30b670"/>
        <function-ref name="write" scoped="" ref="0x7f775c30b800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f775c30cad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f775c30cad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c30ce50"/>
        <function-ref name="write" scoped="" ref="0x7f775c30b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f775c323450" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f775c323450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3237d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f775c30c2f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f775c30c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c30c670"/>
        <function-ref name="write" scoped="" ref="0x7f775c30c800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f775c3072f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f775c3072f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c307670"/>
        <function-ref name="write" scoped="" ref="0x7f775c307800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f775c315e50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f775c315e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c314210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3143a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f775c311670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f775c311670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3119f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c311b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f775c326aa0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f775c326aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c326e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f775c325770" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f775c325770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c325af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f775c318e50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f775c318e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c316210"/>
        <function-ref name="write" scoped="" ref="0x7f775c3163a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f775c321670" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f775c321670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c3219f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f775c316670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f775c316670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c3169f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c316b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f775c30ee50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f775c30ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c30d610"/>
        <function-ref name="write" scoped="" ref="0x7f775c30d7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f775c3057a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f775c3057a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c305b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c305cb0"/>
        <function-ref name="write" scoped="" ref="0x7f775c305e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c304020"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c3041b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7f775c2fdb20" loc="54:../../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f775c2fdb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f775c2fa020"/>
        <function-ref name="changed" scoped="" ref="0x7f775c2fa1b0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f775c2fa340"/>
        <function-ref name="setAddress" scoped="" ref="0x7f775c2fa4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f775c2fcd20" loc="13:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <component-ref qname="LocalIeeeEui64C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f775c2fcd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f775c2e40e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f775c2e0310" loc="5:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f775c2e0310"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f775c2e0690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReadId48" ref="0x7f775c2dd880" loc="8:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f775c2dd880"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c2ddc00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f775c2d2020" loc="8:../../../tos/chips/ds2411/Ds2411C.nc">
      <component-ref qname="Ds2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f775c2d2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c2d23a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="OneWire" ref="0x7f775c2c9bd0" loc="14:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f775c2c9bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c2cc020"/>
        <function-ref name="write" scoped="" ref="0x7f775c2cc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerControl" ref="0x7f775c2cc530" loc="15:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerControl" scoped="" ref="0x7f775c2cc530"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f775c2cc8b0"/>
        <function-ref name="stop" scoped="" ref="0x7f775c2cca40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f775c2cd140" loc="11:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f775c2cd140"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c2cd4c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f775c2d1c50" loc="8:../../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f775c2d1c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c2b8020"/>
        <function-ref name="write" scoped="" ref="0x7f775c2b81b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f775c2b8540" loc="11:../../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f775c2b8540"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c2b88c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c2b8a50"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c2b8be0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c2b8d70"/>
        <function-ref name="get" scoped="" ref="0x7f775c2b7020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c2b71b0"/>
        <function-ref name="set" scoped="" ref="0x7f775c2b7340"/>
        <function-ref name="clr" scoped="" ref="0x7f775c2b74d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f775c2af950" loc="15:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f775c2af950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30c640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f775d30c9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f775c2b2780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f775c2b4150" loc="11:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f775c2b4150"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c2b44d0"/>
        <function-ref name="write" scoped="" ref="0x7f775c2b4660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f775c2b49f0" loc="14:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f775c2b49f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c2b4d70"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c2b3020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c2b31b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c2b3340"/>
        <function-ref name="get" scoped="" ref="0x7f775c2b34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c2b3660"/>
        <function-ref name="set" scoped="" ref="0x7f775c2b37f0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c2b3980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f775c2b6ca0" loc="41:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f775c2b6ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30c640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f775d30c9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f775c28fae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f775c28ca90" loc="54:../../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f775c28ca90"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30c640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f775d30c9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f775c27d8d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f775c27c020" loc="55:../../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f775c27c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30c640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f775d30c9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775c27ce30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775c27b800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775c27b340"/>
        <function-ref name="overflow" scoped="" ref="0x7f775c27bcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430CounterMicro" ref="0x7f775c276530" loc="46:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <component-ref qname="Msp430CounterMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f775c276530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30c640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f775d30c9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775c2753d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775c275d50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775c275890"/>
        <function-ref name="overflow" scoped="" ref="0x7f775c274260"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f775c26f020" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f775c26f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c26f3a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f775c26f530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f775c26f6c0"/>
        <function-ref name="get" scoped="" ref="0x7f775c26f850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f775c26f9e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775c26fb70"/>
        <function-ref name="getMode" scoped="" ref="0x7f775c26fd00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775c26e020"/>
        <function-ref name="overflow" scoped="" ref="0x7f775c26e1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f775c26e340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f775c26e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f775c273e50" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f775c273e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30c640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f775d30c9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775c271ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775c270670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775c2701b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f775c270b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Gpio" ref="0x7f775c2b9590" loc="3:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <component-ref qname="HplDs2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Gpio" scoped="" ref="0x7f775c2b9590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c2b9910"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c2b9aa0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c2b9c30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c2b9dc0"/>
        <function-ref name="get" scoped="" ref="0x7f775c26a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c26a1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775c26a340"/>
        <function-ref name="clr" scoped="" ref="0x7f775c26a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f775c268c50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f775c268c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c267020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c2671b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f775c267340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f775c265020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c267660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c2677f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f775c267980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f775c267b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c267ca0"/>
        <function-ref name="get" scoped="" ref="0x7f775c267e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f775c266020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f775c2661b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f775c266340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f775c2665d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f775c266760"/>
        <function-ref name="set" scoped="" ref="0x7f775c2668f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f775c266a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f775c266c10"/>
        <function-ref name="clr" scoped="" ref="0x7f775c2674d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f775c266da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f775c2699e0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f775c2699e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c269d60"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c268020"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c2681b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c268340"/>
        <function-ref name="get" scoped="" ref="0x7f775c2684d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c268660"/>
        <function-ref name="set" scoped="" ref="0x7f775c2687f0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c268980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f775c25f1b0" loc="14:../../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <component-ref qname="Ds2411PowerControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f775c25f1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f775c25f530"/>
        <function-ref name="stop" scoped="" ref="0x7f775c25f6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f775c250cb0" loc="46:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f775c250cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f775c24f0a0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f775c24f230"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f775c24f3c0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f775c24f550"/>
        <function-ref name="setCca" scoped="" ref="0x7f775c24f6e0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f775c24f870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f775c24a990" loc="47:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f775c24a990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f775c24ad10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Transmit" ref="0x7f775c250020" loc="45:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f775c250020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775c2503a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775c250530"/>
        <function-ref name="modify" scoped="" ref="0x7f775c2506c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775c250850"/>
        <function-ref name="resend" scoped="" ref="0x7f775c2509e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f775c2536c0" loc="44:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f775c2536c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f775c253a40"/>
        <function-ref name="stop" scoped="" ref="0x7f775c253bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f775c24c150" loc="48:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f775c24c150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f775c24c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f775c241970" loc="51:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f775c241970"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f775c241cf0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f775c241e80"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f775c240030"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f775c2401c0"/>
        <function-ref name="setCca" scoped="" ref="0x7f775c240350"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f775c2404e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f775c238950" loc="58:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f775c238950"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f775c236020"/>
        <function-ref name="clear" scoped="" ref="0x7f775c236750"/>
        <function-ref name="isValid" scoped="" ref="0x7f775c237780"/>
        <function-ref name="set" scoped="" ref="0x7f775c236e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f775c221020" loc="78:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c221020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c2213a0"/>
        <function-ref name="write" scoped="" ref="0x7f775c221530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f775c221890" loc="79:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f775c221890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c221c10"/>
        <function-ref name="write" scoped="" ref="0x7f775c221da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f775c240900" loc="52:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f775c240900"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f775c240c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXONCCA" ref="0x7f775c224530" loc="72:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f775c224530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c2248b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CaptureSFD" ref="0x7f775c233880" loc="60:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f775c233880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f775c233c00"/>
        <function-ref name="disable" scoped="" ref="0x7f775c233d90"/>
        <function-ref name="captured" scoped="" ref="0x7f775c232020"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f775c2321b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BackoffTimer" ref="0x7f775c23eae0" loc="55:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BackoffTimer" scoped="" ref="0x7f775c23eae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775c23b390"/>
        <function-ref name="fired" scoped="" ref="0x7f775c23c360"/>
        <function-ref name="startAt" scoped="" ref="0x7f775c23cce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775c23c820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f775c23b850"/>
        <function-ref name="start" scoped="" ref="0x7f775c23d970"/>
        <function-ref name="stop" scoped="" ref="0x7f775c23de80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f775c23bd00" loc="56:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c23bd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f775c2390a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f775c239230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f775c2393c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f775c239550"/>
        <function-ref name="getPower" scoped="" ref="0x7f775c2396e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f775c239870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO_RAM" ref="0x7f775c226550" loc="68:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f775c226550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c2268d0"/>
        <function-ref name="write" scoped="" ref="0x7f775c226a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f775c226e00" loc="69:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f775c226e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c2251c0"/>
        <function-ref name="write" scoped="" ref="0x7f775c225350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Receive" ref="0x7f775c21ad40" loc="83:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f775c21ad40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775c21e0e0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f775c21e270"/>
        <function-ref name="sfd" scoped="" ref="0x7f775c21e400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f775c242bc0" loc="50:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f775c242bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775c241020"/>
        <function-ref name="cancel" scoped="" ref="0x7f775c2411b0"/>
        <function-ref name="modify" scoped="" ref="0x7f775c241340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775c2414d0"/>
        <function-ref name="resend" scoped="" ref="0x7f775c241660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ChipSpiResource" ref="0x7f775c229d10" loc="66:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c229d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f775c2270e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f775c227270"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f775c227400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHTX" ref="0x7f775c224c60" loc="73:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f775c224c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c223020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f775c22c820" loc="62:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f775c22c820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c22cba0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c22cd30"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c22b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c22b1b0"/>
        <function-ref name="get" scoped="" ref="0x7f775c22b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c22b4d0"/>
        <function-ref name="set" scoped="" ref="0x7f775c22b660"/>
        <function-ref name="clr" scoped="" ref="0x7f775c22b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775c243c60" loc="48:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775c243c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775c242020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f775c239bb0" loc="57:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c239bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f775c238020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f775c2381b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f775c238340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7f775c22dbe0" loc="59:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f775c22dbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775c233020"/>
        <function-ref name="isSet" scoped="" ref="0x7f775c2331b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775c233340"/>
        <function-ref name="set" scoped="" ref="0x7f775c2334d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f775c2233e0" loc="74:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c2233e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c223960"/>
        <function-ref name="write" scoped="" ref="0x7f775c223af0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f775c229020" loc="65:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f775c229020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c2293a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c229530"/>
        <function-ref name="request" scoped="" ref="0x7f775c2296c0"/>
        <function-ref name="granted" scoped="" ref="0x7f775c229850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c2299e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CCA" ref="0x7f775c232500" loc="61:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f775c232500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c232980"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c232b10"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c232ca0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c232e30"/>
        <function-ref name="get" scoped="" ref="0x7f775c22c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c22c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775c22c340"/>
        <function-ref name="clr" scoped="" ref="0x7f775c22c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f775c220130" loc="80:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f775c220130"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c2204b0"/>
        <function-ref name="write" scoped="" ref="0x7f775c220640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXNONCE" ref="0x7f775c2209c0" loc="81:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f775c2209c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c220d40"/>
        <function-ref name="write" scoped="" ref="0x7f775c21f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f775c2256d0" loc="70:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f775c2256d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c225a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFD" ref="0x7f775c22bb40" loc="63:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f775c22bb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c22a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c22a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c22a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c22a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f775c22a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c22a7f0"/>
        <function-ref name="set" scoped="" ref="0x7f775c22a980"/>
        <function-ref name="clr" scoped="" ref="0x7f775c22ab10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f775c21e6c0" loc="84:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f775c21e6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f775c21ea40"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f775c21ebd0"/>
        <function-ref name="led1On" scoped="" ref="0x7f775c21ed60"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f775c21d020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f775c21d1b0"/>
        <function-ref name="get" scoped="" ref="0x7f775c21d340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f775c21d4d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f775c21db10"/>
        <function-ref name="set" scoped="" ref="0x7f775c21d660"/>
        <function-ref name="led0On" scoped="" ref="0x7f775c21d7f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f775c21d980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f775c2225e0" loc="77:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c2225e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c222960"/>
        <function-ref name="write" scoped="" ref="0x7f775c222af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f775c242320" loc="49:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f775c242320"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f775c2426a0"/>
        <function-ref name="stop" scoped="" ref="0x7f775c242830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO" ref="0x7f775c227780" loc="67:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f775c227780"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c227b00"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c227c90"/>
        <function-ref name="write" scoped="" ref="0x7f775c227e20"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c226020"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c2261b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXON" ref="0x7f775c225de0" loc="71:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f775c225de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c224180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXENC" ref="0x7f775c223e80" loc="76:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f775c223e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c222220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f775c23e0f0" loc="53:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f775c23e0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f775c23e470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f775c180c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f775c180c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c17f210"/>
        <function-ref name="write" scoped="" ref="0x7f775c17f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f775c18a020" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f775c18a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c18a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f775c184c70" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f775c184c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c183020"/>
        <function-ref name="write" scoped="" ref="0x7f775c1831b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f775c17e670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c17e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c17e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c17eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f775c177e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f775c177e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c176210"/>
        <function-ref name="write" scoped="" ref="0x7f775c1763a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f775c17ee50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f775c17ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c17d210"/>
        <function-ref name="write" scoped="" ref="0x7f775c17d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f775c16a2f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f775c16a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c16a670"/>
        <function-ref name="write" scoped="" ref="0x7f775c16a800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f775c16c2f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f775c16c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c16c670"/>
        <function-ref name="write" scoped="" ref="0x7f775c16c800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f775c189370" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f775c189370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c1896f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f775c172670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f775c172670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c1729f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c172b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f775c16e2f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f775c16e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c16e670"/>
        <function-ref name="write" scoped="" ref="0x7f775c16e800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f775c183c60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f775c183c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c181020"/>
        <function-ref name="write" scoped="" ref="0x7f775c1811b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f775c181c60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f775c181c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c180020"/>
        <function-ref name="write" scoped="" ref="0x7f775c1801b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f775c178670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f775c178670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c1789f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c178b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f775c17ae50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f775c17ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c179210"/>
        <function-ref name="write" scoped="" ref="0x7f775c1793a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f775c17d670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f775c17d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c17d9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c17db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f775c18c8f0" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c18c8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f775c18cc70"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f775c18ce00"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f775c18b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f775c187d00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f775c187d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c1860a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f775c186370" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f775c186370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c1867f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f775c171a70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f775c171a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c171df0"/>
        <function-ref name="write" scoped="" ref="0x7f775c170020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f775c186ac0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f775c186ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c186e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f775c16ead0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f775c16ead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c16ee50"/>
        <function-ref name="write" scoped="" ref="0x7f775c16c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f775c187060" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f775c187060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c1873e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f775c173e50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f775c173e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c172210"/>
        <function-ref name="write" scoped="" ref="0x7f775c1723a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f775c181480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f775c181480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c181800"/>
        <function-ref name="write" scoped="" ref="0x7f775c181990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f775c183480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c183480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c183800"/>
        <function-ref name="write" scoped="" ref="0x7f775c183990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f775c18b940" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f775c18b940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c18bcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f775c175e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f775c175e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c173210"/>
        <function-ref name="write" scoped="" ref="0x7f775c1733a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f775c176670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f775c176670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c1769f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c176b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f775c173670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f775c173670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c1739f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c173b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f775c16bad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f775c16bad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c16be50"/>
        <function-ref name="write" scoped="" ref="0x7f775c16a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f775c16cad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f775c16cad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c16ce50"/>
        <function-ref name="write" scoped="" ref="0x7f775c16b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f775c179670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f775c179670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c1799f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c179b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f775c176e50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f775c176e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c175210"/>
        <function-ref name="write" scoped="" ref="0x7f775c1753a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f775c16fad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f775c16fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c16fe50"/>
        <function-ref name="write" scoped="" ref="0x7f775c16e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f775c17c670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f775c17c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c17c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c17cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f775c16aad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f775c16aad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c16ae50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c169020"/>
        <function-ref name="write" scoped="" ref="0x7f775c1691b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c169340"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c1694d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f775c18b2f0" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f775c18b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c18b670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f775c184490" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f775c184490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c184810"/>
        <function-ref name="write" scoped="" ref="0x7f775c1849a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f775c180480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f775c180480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c180800"/>
        <function-ref name="write" scoped="" ref="0x7f775c180990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f775c178e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f775c178e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c177210"/>
        <function-ref name="write" scoped="" ref="0x7f775c1773a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f775c17de50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f775c17de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c17c210"/>
        <function-ref name="write" scoped="" ref="0x7f775c17c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f775c177670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f775c177670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c1779f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c177b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f775c17f670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f775c17f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c17f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c17fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f775c18a670" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f775c18a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c18a9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f775c17fe50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c17fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c17e210"/>
        <function-ref name="write" scoped="" ref="0x7f775c17e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775c18dc30" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775c18dc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c18c020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c18c1b0"/>
        <function-ref name="request" scoped="" ref="0x7f775c18c340"/>
        <function-ref name="granted" scoped="" ref="0x7f775c18c4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c18c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f775c185160" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f775c185160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c1854e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f775c185e00" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f775c185e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c1841c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f775c16f2f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f775c16f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c16f670"/>
        <function-ref name="write" scoped="" ref="0x7f775c16f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f775c170ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f775c170ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c170e50"/>
        <function-ref name="write" scoped="" ref="0x7f775c16f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f775c1876b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f775c1876b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c187a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f775c1702f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f775c1702f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c170670"/>
        <function-ref name="write" scoped="" ref="0x7f775c170800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f775c16b2f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f775c16b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c16b670"/>
        <function-ref name="write" scoped="" ref="0x7f775c16b800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f775c179e50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f775c179e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c178210"/>
        <function-ref name="write" scoped="" ref="0x7f775c1783a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f775c175670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f775c175670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c1759f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c175b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f775c18acc0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f775c18acc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c1890a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f775c1899c0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f775c1899c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c189d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f775c17ce50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f775c17ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c17a210"/>
        <function-ref name="write" scoped="" ref="0x7f775c17a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f775c1857b0" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f775c1857b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c185b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f775c17a670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f775c17a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c17a9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c17ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f775c172e50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f775c172e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c171610"/>
        <function-ref name="write" scoped="" ref="0x7f775c1717a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f775c1697a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f775c1697a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c169b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c169cb0"/>
        <function-ref name="write" scoped="" ref="0x7f775c169e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c168020"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c1681b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f775c15ddf0" loc="42:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f775c15ddf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775c15a1c0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f775c15a350"/>
        <function-ref name="sfd" scoped="" ref="0x7f775c15a4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f775c15a7c0" loc="43:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f775c15a7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775c15ab40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f775c159020" loc="44:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f775c159020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f775c1593a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f775c15d5c0" loc="41:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f775c15d5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f775c15d940"/>
        <function-ref name="stop" scoped="" ref="0x7f775c15dad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFO" ref="0x7f775c150380" loc="54:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f775c150380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c150700"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c150890"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c150a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c150bb0"/>
        <function-ref name="get" scoped="" ref="0x7f775c150d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c14f020"/>
        <function-ref name="set" scoped="" ref="0x7f775c14f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c14f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f775c149b90" loc="64:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f775c149b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f775c148020"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f775c1481b0"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f775c148340"/>
        <function-ref name="syncDone" scoped="" ref="0x7f775c1484d0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f775c148660"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f775c1487f0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f775c148980"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f775c148b10"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f775c148ca0"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f775c148e30"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f775c147020"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f775c1471b0"/>
        <function-ref name="sync" scoped="" ref="0x7f775c147340"/>
        <function-ref name="getChannel" scoped="" ref="0x7f775c1475d0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f775c147760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveDone_task" ref="0x7f775c1329d0" loc="148:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveDone_task" scoped="" ref="0x7f775c1329d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775c132d50"/>
        <function-ref name="runTask" scoped="" ref="0x7f775c131020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f775c147d70" loc="65:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f775c147d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f775c144330"/>
        <function-ref name="clear" scoped="" ref="0x7f775c144a60"/>
        <function-ref name="isValid" scoped="" ref="0x7f775c146ba0"/>
        <function-ref name="set" scoped="" ref="0x7f775c143210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFOP" ref="0x7f775c14f6b0" loc="55:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f775c14f6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c14fa30"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c14fbc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c14fd50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c14e020"/>
        <function-ref name="get" scoped="" ref="0x7f775c14e1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c14e340"/>
        <function-ref name="set" scoped="" ref="0x7f775c14e4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f775c14e660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f775c142cb0" loc="69:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c142cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c1410a0"/>
        <function-ref name="write" scoped="" ref="0x7f775c141230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f775c141590" loc="70:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f775c141590"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c141910"/>
        <function-ref name="write" scoped="" ref="0x7f775c141aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXNONCE" ref="0x7f775c1406d0" loc="72:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f775c1406d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c140a50"/>
        <function-ref name="write" scoped="" ref="0x7f775c140be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f775c14a330" loc="62:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c14a330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f775c14a6b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f775c14a840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f775c14a9d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f775c14ab60"/>
        <function-ref name="getPower" scoped="" ref="0x7f775c14acf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f775c14ae80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f775c153550" loc="49:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f775c153550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775c1538d0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f775c153a60"/>
        <function-ref name="sfd" scoped="" ref="0x7f775c153bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SACK" ref="0x7f775c14b3a0" loc="60:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f775c14b3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c14b720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f775c151020" loc="53:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f775c151020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f775c1513a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f775c151530"/>
        <function-ref name="toggle" scoped="" ref="0x7f775c1516c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f775c151850"/>
        <function-ref name="get" scoped="" ref="0x7f775c1519e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f775c151b70"/>
        <function-ref name="set" scoped="" ref="0x7f775c151d00"/>
        <function-ref name="clr" scoped="" ref="0x7f775c150020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO_RAM" ref="0x7f775c13f020" loc="73:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f775c13f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c13f3a0"/>
        <function-ref name="write" scoped="" ref="0x7f775c13f530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775c155620" loc="47:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775c155620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775c1559a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f775c1491e0" loc="63:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c1491e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f775c149560"/>
        <function-ref name="getHeader" scoped="" ref="0x7f775c1496f0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f775c149880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f775c152020" loc="50:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f775c152020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775c1523a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f775c14d6e0" loc="58:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f775c14d6e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c14da60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c14dbf0"/>
        <function-ref name="request" scoped="" ref="0x7f775c14dd80"/>
        <function-ref name="granted" scoped="" ref="0x7f775c14c020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c14c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f775c141e00" loc="71:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f775c141e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c1401c0"/>
        <function-ref name="write" scoped="" ref="0x7f775c140350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO" ref="0x7f775c14c530" loc="59:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f775c14c530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c14c8b0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c14ca40"/>
        <function-ref name="write" scoped="" ref="0x7f775c14cbd0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c14cd60"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c14b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f775c13f8b0" loc="74:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f775c13f8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c13fe30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f775c1527c0" loc="51:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f775c1527c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f775c152b40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f775c13d150" loc="76:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f775c13d150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f775c13d4d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f775c13d660"/>
        <function-ref name="led1On" scoped="" ref="0x7f775c13d7f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f775c13d980"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f775c13db10"/>
        <function-ref name="get" scoped="" ref="0x7f775c13dca0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f775c13de30"/>
        <function-ref name="led2Off" scoped="" ref="0x7f775c13c4d0"/>
        <function-ref name="set" scoped="" ref="0x7f775c13c020"/>
        <function-ref name="led0On" scoped="" ref="0x7f775c13c1b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f775c13c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f775c1423e0" loc="68:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c1423e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c142760"/>
        <function-ref name="write" scoped="" ref="0x7f775c1428f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXDEC" ref="0x7f775c143b10" loc="67:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f775c143b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c142020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptFIFOP" ref="0x7f775c14ea50" loc="56:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f775c14ea50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f775c14edd0"/>
        <function-ref name="disable" scoped="" ref="0x7f775c14d020"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f775c14d1b0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f775c14d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHRX" ref="0x7f775c14bad0" loc="61:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f775c14bad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c14a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f775c155ca0" loc="48:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f775c155ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f775c1530a0"/>
        <function-ref name="stop" scoped="" ref="0x7f775c153230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f775c0d1a70" loc="44:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f775c0d1a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f775c0d1df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f775c0d5670" loc="41:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c0d5670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f775c0d59f0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f775c0d5b80"/>
        <function-ref name="getRssi" scoped="" ref="0x7f775c0d5d10"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f775c0d2020"/>
        <function-ref name="getPower" scoped="" ref="0x7f775c0d21b0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f775c0d2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f775c0d0550" loc="46:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f775c0d0550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f775c0cfb00"/>
        <function-ref name="clear" scoped="" ref="0x7f775c0cd2a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f775c0cf3d0"/>
        <function-ref name="set" scoped="" ref="0x7f775c0cd9d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f775c0d10c0" loc="43:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c0d10c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f775c0d1440"/>
        <function-ref name="getHeader" scoped="" ref="0x7f775c0d15d0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f775c0d1760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f775c0c8480" loc="48:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f775c0c8480"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775c0c8800"/>
        <function-ref name="isSet" scoped="" ref="0x7f775c0c8990"/>
        <function-ref name="cancel" scoped="" ref="0x7f775c0c8b20"/>
        <function-ref name="set" scoped="" ref="0x7f775c0c8cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f775c0cc660" loc="47:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f775c0cc660"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f775c0cbce0"/>
        <function-ref name="clear" scoped="" ref="0x7f775c0c9460"/>
        <function-ref name="isValid" scoped="" ref="0x7f775c0cb5b0"/>
        <function-ref name="set" scoped="" ref="0x7f775c0c9b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f775c0d26e0" loc="42:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f775c0d26e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f775c0d2a60"/>
        <function-ref name="noAck" scoped="" ref="0x7f775c0d2bf0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f775c0d2d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f775c0c2020" loc="49:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f775c0c2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f775c0c23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f775c0c7d20" loc="46:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f775c0c7d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f775c0c40e0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f775c0c4270"/>
        <function-ref name="getRssi" scoped="" ref="0x7f775c0c4400"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f775c0c4590"/>
        <function-ref name="getPower" scoped="" ref="0x7f775c0c4720"/>
        <function-ref name="getLqi" scoped="" ref="0x7f775c0c48b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f775c0b94a0" loc="56:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f775c0b94a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775c0b9820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f775c0b99b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775c0b9b40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775c0b9cd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f775c0b9e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f775c0c2a80" loc="51:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f775c0c2a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f775c0bf020"/>
        <function-ref name="clear" scoped="" ref="0x7f775c0bf750"/>
        <function-ref name="isValid" scoped="" ref="0x7f775c0c18d0"/>
        <function-ref name="set" scoped="" ref="0x7f775c0bfe80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f775c0c3640" loc="48:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775c0c3640"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f775c0c39c0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f775c0c3b50"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f775c0c3ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f775c0ba8b0" loc="53:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f775c0ba8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775c0bac30"/>
        <function-ref name="isSet" scoped="" ref="0x7f775c0badc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775c0b9020"/>
        <function-ref name="set" scoped="" ref="0x7f775c0b91b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime32khz" ref="0x7f775c0b83b0" loc="57:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime32khz" scoped="" ref="0x7f775c0b83b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775c0b7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f775c0b76e0" loc="58:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f775c0b76e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775c0b53d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f775c0beaf0" loc="52:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f775c0beaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f775c0bb0d0"/>
        <function-ref name="clear" scoped="" ref="0x7f775c0bb800"/>
        <function-ref name="isValid" scoped="" ref="0x7f775c0bd970"/>
        <function-ref name="set" scoped="" ref="0x7f775c0ba020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f775c0c4c50" loc="47:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f775c0c4c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f775c0c3020"/>
        <function-ref name="noAck" scoped="" ref="0x7f775c0c31b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f775c0c3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f775c066020" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f775c066020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775c066c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f775c064300" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f775c064300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30de30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f775d30c200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f775c063150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f775c063ad0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f775c063610"/>
        <function-ref name="overflow" scoped="" ref="0x7f775c062020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f775c060450" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="CC2420PacketC.DummyTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f775c060450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f775d30d680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f775d30d9f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f775c05ca20"/>
        <function-ref name="fired" scoped="" ref="0x7f775c05d020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f775c05dda0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f775c05d920"/>
        <function-ref name="getdt" scoped="" ref="0x7f775c05b4a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f775c05b020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f775c05d4a0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f775c05f090"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f775c05c410"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f775c05f560"/>
        <function-ref name="stop" scoped="" ref="0x7f775c05fa30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f775c04bc60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f775c04bc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c049210"/>
        <function-ref name="write" scoped="" ref="0x7f775c0493a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f775c054020" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f775c054020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c0543a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f775c04ec70" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f775c04ec70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c04d020"/>
        <function-ref name="write" scoped="" ref="0x7f775c04d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f775c048670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f775c048670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c0489f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c048b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f775c041e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f775c041e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c040210"/>
        <function-ref name="write" scoped="" ref="0x7f775c0403a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f775c048e50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f775c048e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c047210"/>
        <function-ref name="write" scoped="" ref="0x7f775c0473a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f775c0342f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f775c0342f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c034670"/>
        <function-ref name="write" scoped="" ref="0x7f775c034800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f775c0372f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f775c0372f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c037670"/>
        <function-ref name="write" scoped="" ref="0x7f775c037800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f775c053370" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f775c053370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c0536f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f775c03c670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f775c03c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c03c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c03cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f775c0382f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f775c0382f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c038670"/>
        <function-ref name="write" scoped="" ref="0x7f775c038800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f775c04dc60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f775c04dc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c04c020"/>
        <function-ref name="write" scoped="" ref="0x7f775c04c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f775c04cc60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f775c04cc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c04b020"/>
        <function-ref name="write" scoped="" ref="0x7f775c04b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f775c042670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f775c042670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c0429f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c042b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f775c045e50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f775c045e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c043210"/>
        <function-ref name="write" scoped="" ref="0x7f775c0433a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f775c047670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f775c047670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c0479f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c047b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f775c056970" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f775c056970"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f775c056cf0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f775c056e80"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f775c055030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f775c052d00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f775c052d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c0500a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f775c050370" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f775c050370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c0507f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f775c03ba70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f775c03ba70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c03bdf0"/>
        <function-ref name="write" scoped="" ref="0x7f775c03a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f775c050ac0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f775c050ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c050e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f775c038ad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f775c038ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c038e50"/>
        <function-ref name="write" scoped="" ref="0x7f775c037020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f775c052060" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f775c052060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c0523e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f775c03ee50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f775c03ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c03c210"/>
        <function-ref name="write" scoped="" ref="0x7f775c03c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f775c04c480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f775c04c480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c04c800"/>
        <function-ref name="write" scoped="" ref="0x7f775c04c990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f775c04d480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f775c04d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c04d800"/>
        <function-ref name="write" scoped="" ref="0x7f775c04d990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f775c055950" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f775c055950"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c055cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f775c03fe50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f775c03fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c03e210"/>
        <function-ref name="write" scoped="" ref="0x7f775c03e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f775c040670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f775c040670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c0409f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c040b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f775c03e670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f775c03e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c03e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c03eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f775c035ad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f775c035ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c035e50"/>
        <function-ref name="write" scoped="" ref="0x7f775c034020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f775c037ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f775c037ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c037e50"/>
        <function-ref name="write" scoped="" ref="0x7f775c035020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f775c043670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f775c043670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c0439f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c043b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f775c040e50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f775c040e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c03f210"/>
        <function-ref name="write" scoped="" ref="0x7f775c03f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f775c039ad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f775c039ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c039e50"/>
        <function-ref name="write" scoped="" ref="0x7f775c038020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f775c046670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f775c046670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c0469f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c046b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f775c034ad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f775c034ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c034e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c033020"/>
        <function-ref name="write" scoped="" ref="0x7f775c0331b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c033340"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c0334d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f775c055300" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f775c055300"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c055680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f775c04e490" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f775c04e490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c04e810"/>
        <function-ref name="write" scoped="" ref="0x7f775c04e9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f775c04b480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f775c04b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c04b800"/>
        <function-ref name="write" scoped="" ref="0x7f775c04b990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f775c042e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f775c042e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c041210"/>
        <function-ref name="write" scoped="" ref="0x7f775c0413a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f775c047e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f775c047e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c046210"/>
        <function-ref name="write" scoped="" ref="0x7f775c0463a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f775c041670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f775c041670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c0419f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c041b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f775c049670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f775c049670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c0499f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c049b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f775c054670" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f775c054670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c0549f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f775c049e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f775c049e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c048210"/>
        <function-ref name="write" scoped="" ref="0x7f775c0483a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775c058d00" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775c058d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775c0560a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775c056230"/>
        <function-ref name="request" scoped="" ref="0x7f775c0563c0"/>
        <function-ref name="granted" scoped="" ref="0x7f775c056550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775c0566e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f775c04f160" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f775c04f160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c04f4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f775c04fe00" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f775c04fe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c04e1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f775c0392f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f775c0392f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c039670"/>
        <function-ref name="write" scoped="" ref="0x7f775c039800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f775c03aad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f775c03aad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c03ae50"/>
        <function-ref name="write" scoped="" ref="0x7f775c039020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f775c0526b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f775c0526b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c052a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f775c03a2f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f775c03a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c03a670"/>
        <function-ref name="write" scoped="" ref="0x7f775c03a800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f775c0352f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f775c0352f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c035670"/>
        <function-ref name="write" scoped="" ref="0x7f775c035800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f775c043e50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f775c043e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c042210"/>
        <function-ref name="write" scoped="" ref="0x7f775c0423a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f775c03f670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f775c03f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c03f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c03fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f775c054cc0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f775c054cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c0530a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f775c0539c0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f775c0539c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c053d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f775c046e50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f775c046e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c045210"/>
        <function-ref name="write" scoped="" ref="0x7f775c0453a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f775c04f7b0" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f775c04f7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f775c04fb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f775c045670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f775c045670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c0459f0"/>
        <function-ref name="write" scoped="" ref="0x7f775c045b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f775c03ce50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f775c03ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f775c03b610"/>
        <function-ref name="write" scoped="" ref="0x7f775c03b7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f775c0337a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f775c0337a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f775c033b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f775c033cb0"/>
        <function-ref name="write" scoped="" ref="0x7f775c033e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f775c032020"/>
        <function-ref name="readDone" scoped="" ref="0x7f775c0321b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f775c00aa20" loc="46:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f775c00aa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f775c00ada0"/>
        <function-ref name="rand32" scoped="" ref="0x7f775c009020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f775c007920" loc="45:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f775c007920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775c00a560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775c00e990" loc="44:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775c00e990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775c00ed10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f775c003a20" loc="48:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f775c003a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f775c003da0"/>
        <function-ref name="rand32" scoped="" ref="0x7f775c002020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f775c004940" loc="47:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f775c004940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775c003560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775c004080" loc="46:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775c004080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775c004400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f775c00caa0" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="CC2420CsmaC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f775c00caa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f775c00ce20"/>
        <function-ref name="toIdle" scoped="" ref="0x7f775bff5020"/>
        <function-ref name="isState" scoped="" ref="0x7f775bff51b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f775bff5340"/>
        <function-ref name="requestState" scoped="" ref="0x7f775bff54d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f775bff5660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f775bfeb020" loc="44:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f775bfeb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bfeb3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bfeb530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bfeb6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bfeb850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bfeb9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f775bfec220" loc="40:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f775bfec220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bfec5a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bfec730"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bfec8c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bfeca50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bfecbe0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f775bfe3e60" loc="45:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f775bfe3e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bfe2210"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bfe23a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bfe2530"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bfe26c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bfe2850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f775bfe6a10" loc="40:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f775bfe6a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bfe6d90"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bfe3020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bfe31b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bfe3340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bfe34d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f775bfe18f0" loc="47:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f775bfe18f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f775bfe1c70"/>
        <function-ref name="rand32" scoped="" ref="0x7f775bfe1e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775bfe3750" loc="41:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775bfe3750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775bfe3ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f775bfe0170" loc="48:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775bfe0170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f775bfe04f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f775bfe0680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f775bfe0810"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="State" ref="0x7f775bfe2ae0" loc="46:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f775bfe2ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f775bfe2e60"/>
        <function-ref name="toIdle" scoped="" ref="0x7f775bfe1020"/>
        <function-ref name="isState" scoped="" ref="0x7f775bfe11b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f775bfe1340"/>
        <function-ref name="requestState" scoped="" ref="0x7f775bfe14d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f775bfe1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f775bfe4690" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="UniqueSendC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f775bfe4690"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f775bfe4a10"/>
        <function-ref name="toIdle" scoped="" ref="0x7f775bfe4ba0"/>
        <function-ref name="isState" scoped="" ref="0x7f775bfe4d30"/>
        <function-ref name="isIdle" scoped="" ref="0x7f775bfcf020"/>
        <function-ref name="requestState" scoped="" ref="0x7f775bfcf1b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f775bfcf340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f775bfc9950" loc="47:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f775bfc9950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bfc9cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f775bfccaa0" loc="42:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f775bfccaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bfcce20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f775bfc9200" loc="43:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f775bfc9200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bfc9580"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f775bfc33f0" loc="49:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f775bfc33f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bfc3770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775bfc5b70" loc="45:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775bfc5b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775bfc3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f775bfc8e30" loc="43:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f775bfc8e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bfc51e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f775bfc3a70" loc="50:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775bfc3a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f775bfc3df0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f775bfc2020"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f775bfc21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f775bfc5570" loc="44:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f775bfc5570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bfc58f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f775bf95020" loc="75:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f775bf95020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bf953a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f775bf956b0" loc="76:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f775bf956b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bf95a30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bf95bc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bf95d50"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bf94020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bf941b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f775bf998e0" loc="65:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f775bf998e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bf99c60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bf99df0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bf98020"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bf981b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bf98340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f775bf98c90" loc="68:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f775bf98c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bf970a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bf97230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bf973c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bf97550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bf976e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f775bf985e0" loc="66:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f775bf985e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bf98960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775bf9abe0" loc="64:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775bf9abe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775bf99020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775bf991b0"/>
        <function-ref name="request" scoped="" ref="0x7f775bf99340"/>
        <function-ref name="granted" scoped="" ref="0x7f775bf994d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775bf99660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f775bf97a50" loc="69:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f775bf97a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bf97dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f775bf96170" loc="71:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f775bf96170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775bf964f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f775bf96680"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bf96810"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bf969a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f775bf96b30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f775bf8bd70" loc="58:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f775bf8bd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bf8a180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bf8a310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bf8a4a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bf8a630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bf8a7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f775bf8ab10" loc="59:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f775bf8ab10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bf89020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantTask" ref="0x7f775bf5cdb0" loc="184:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantTask" scoped="" ref="0x7f775bf5cdb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775bf5b180"/>
        <function-ref name="runTask" scoped="" ref="0x7f775bf5b310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f775bf892f0" loc="60:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f775bf892f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f775bf89670"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f775bf89800"/>
        <function-ref name="getRssi" scoped="" ref="0x7f775bf89990"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f775bf89b20"/>
        <function-ref name="getPower" scoped="" ref="0x7f775bf89cb0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f775bf89e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f775bf8da20" loc="51:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f775bf8da20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bf8dda0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bf8c020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bf8c1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bf8c340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bf8c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f775bf88b70" loc="62:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f775bf88b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f775bf87020"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f775bf871b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f775bf87340"/>
        <function-ref name="dequeue" scoped="" ref="0x7f775bf874d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f775bf88170" loc="61:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775bf88170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f775bf884f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f775bf88680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f775bf88810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f775bf8d370" loc="49:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f775bf8d370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bf8d6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f775bf907b0" loc="46:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f775bf907b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775bf90b30"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775bf90cc0"/>
        <function-ref name="request" scoped="" ref="0x7f775bf90e50"/>
        <function-ref name="granted" scoped="" ref="0x7f775bf8f020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775bf8f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f775bf8f4d0" loc="48:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f775bf8f4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bf8f850"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bf8f9e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bf8fb70"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bf8fd00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bf8d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f775bf8c840" loc="52:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f775bf8c840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bf8cbc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f775bf8b020" loc="54:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f775bf8b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775bf8b3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f775bf8b530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bf8b6c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bf8b850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f775bf8b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f775bf3cdd0" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f775bf3cdd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f775bf3b180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f775bf3b410" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f775bf3b410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f775bf3b790"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f775bf3b920"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f775bf3bab0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f775bf3bc40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f775bf2fb80" loc="46:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f775bf2fb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f775bf2e020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f775bf2e1b0"/>
        <function-ref name="start" scoped="" ref="0x7f775bf2e340"/>
        <function-ref name="stop" scoped="" ref="0x7f775bf2e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f775bf2d860" loc="51:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f775bf2d860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bf2dbe0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bf2dd70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bf2c020"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bf2c1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bf2c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f775bf2c690" loc="52:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f775bf2c690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bf2ca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f775bf33ce0" loc="43:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f775bf33ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bf300a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bf30230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bf303c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bf30550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bf306e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f775bf2f080" loc="45:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f775bf2f080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f775bf2f400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f775bf2f590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f775bf2f720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f775bf2f8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendState" ref="0x7f775bf2e800" loc="47:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendState" scoped="" ref="0x7f775bf2e800"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f775bf2eb80"/>
        <function-ref name="toIdle" scoped="" ref="0x7f775bf2ed10"/>
        <function-ref name="isState" scoped="" ref="0x7f775bf2d020"/>
        <function-ref name="isIdle" scoped="" ref="0x7f775bf2d1b0"/>
        <function-ref name="requestState" scoped="" ref="0x7f775bf2d340"/>
        <function-ref name="forceState" scoped="" ref="0x7f775bf2d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f775bf2cd90" loc="53:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f775bf2cd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f775bf2b180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f775bf2b310"/>
        <function-ref name="start" scoped="" ref="0x7f775bf2b4a0"/>
        <function-ref name="stop" scoped="" ref="0x7f775bf2b630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f775bf30980" loc="44:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f775bf30980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bf30d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f775bf282d0" loc="41:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <component-ref qname="DummyLplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f775bf282d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f775bf28650"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f775bf287e0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f775bf28970"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f775bf28b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f775bf2a580" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="DummyLplC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f775bf2a580"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f775bf2a900"/>
        <function-ref name="toIdle" scoped="" ref="0x7f775bf2aa90"/>
        <function-ref name="isState" scoped="" ref="0x7f775bf2ac20"/>
        <function-ref name="isIdle" scoped="" ref="0x7f775bf2adb0"/>
        <function-ref name="requestState" scoped="" ref="0x7f775bf29020"/>
        <function-ref name="forceState" scoped="" ref="0x7f775bf291b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f775bf1bd70" loc="45:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f775bf1bd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bf1a180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bf1a310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bf1a4a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bf1a630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bf1a7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f775bf1e350" loc="40:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f775bf1e350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bf1e6d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bf1e860"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bf1e9f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bf1eb80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bf1ed10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f775bf1b020" loc="41:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f775bf1b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f775bf1b3a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f775bf1b530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f775bf1b6c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f775bf1b850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f775bf1b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f775bf161c0" loc="44:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f775bf161c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f775bf16540"/>
        <function-ref name="noAck" scoped="" ref="0x7f775bf166d0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f775bf16860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f775bf19410" loc="40:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f775bf19410"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f775bf19790"/>
        <function-ref name="setRetries" scoped="" ref="0x7f775bf19920"/>
        <function-ref name="getRetries" scoped="" ref="0x7f775bf19ab0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f775bf19c40"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f775bf19dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f775bef6690" loc="59:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f775bef6690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bef6a10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f775bef7860" loc="58:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f775bef7860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bef7be0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bef7d70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bef6020"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bef61b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bef6340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f775bef4610" loc="62:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f775bef4610"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f775bef4990"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f775bef4b20"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f775bef4cb0"/>
        <function-ref name="syncDone" scoped="" ref="0x7f775bef4e40"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f775bef3020"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f775bef31b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f775bef3340"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f775bef34d0"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f775bef3660"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f775bef37f0"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f775bef3980"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f775bef3b10"/>
        <function-ref name="sync" scoped="" ref="0x7f775bef3ca0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f775bef2020"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f775bef21b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f775bef88b0" loc="54:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f775bef88b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f775bef8c30"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f775bef8dc0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f775bef7020"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f775bef71b0"/>
        <function-ref name="setCca" scoped="" ref="0x7f775bef7340"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f775bef74d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f775bef9ce0" loc="53:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f775bef9ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f775bef80a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f775bef11f0" loc="64:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f775bef11f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f775bef1570"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f775bef1700"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f775bef1890"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f775bef1a20"/>
        <function-ref name="setCca" scoped="" ref="0x7f775bef1bb0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f775bef1d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f775befaa80" loc="52:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f775befaa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775befae00"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f775bef9020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bef91b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bef9340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f775bef94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f775befe020" loc="48:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f775befe020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775befe3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775befe530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775befe6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775befe850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775befe9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f775befddf0" loc="50:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f775befddf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775befb1c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f775bef6ce0" loc="60:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f775bef6ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f775bef50a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f775bef5230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f775bef53c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f775bef5550"/>
        <function-ref name="getPower" scoped="" ref="0x7f775bef56e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f775bef5870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f775bef24d0" loc="63:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f775bef24d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f775bef2950"/>
        <function-ref name="changed" scoped="" ref="0x7f775bef2ae0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f775bef2c70"/>
        <function-ref name="setAddress" scoped="" ref="0x7f775bef2e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f775bef5b70" loc="61:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f775bef5b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f775bef4020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f775bef41b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f775bef4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f775befd210" loc="49:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f775befd210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775befd590"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f775beefd30" loc="67:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f775beefd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f775beee0e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f775beee270"/>
        <function-ref name="led1On" scoped="" ref="0x7f775beee400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f775beee590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f775beee720"/>
        <function-ref name="get" scoped="" ref="0x7f775beee8b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f775beeea40"/>
        <function-ref name="led2Off" scoped="" ref="0x7f775beed1b0"/>
        <function-ref name="set" scoped="" ref="0x7f775beeebd0"/>
        <function-ref name="led0On" scoped="" ref="0x7f775beeed60"/>
        <function-ref name="led2On" scoped="" ref="0x7f775beed020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f775befb470" loc="51:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f775befb470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f775befb7f0"/>
        <function-ref name="source" scoped="" ref="0x7f775befb980"/>
        <function-ref name="address" scoped="" ref="0x7f775befbb10"/>
        <function-ref name="destination" scoped="" ref="0x7f775befbca0"/>
        <function-ref name="setSource" scoped="" ref="0x7f775befbe30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f775befa020"/>
        <function-ref name="type" scoped="" ref="0x7f775befa1b0"/>
        <function-ref name="setType" scoped="" ref="0x7f775befa340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f775befa4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f775befa660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f775befa7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioResource" ref="0x7f775beef0f0" loc="66:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioResource" scoped="" ref="0x7f775beef0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f775beef470"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f775beef600"/>
        <function-ref name="request" scoped="" ref="0x7f775beef790"/>
        <function-ref name="granted" scoped="" ref="0x7f775beef920"/>
        <function-ref name="isOwner" scoped="" ref="0x7f775beefab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f775bdd7020" loc="49:../../../tos/system/AMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f775bdd7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bdd73a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bdd7530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bdd76c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bdd7850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bdd79e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f775bdd7c30" loc="50:../../../tos/system/AMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f775bdd7c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775bdd6020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f775bdd61b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bdd6340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bdd64d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f775bdd6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f775bdd68b0" loc="51:../../../tos/system/AMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f775bdd68b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f775bdd6c30"/>
        <function-ref name="source" scoped="" ref="0x7f775bdd6dc0"/>
        <function-ref name="address" scoped="" ref="0x7f775bdd5020"/>
        <function-ref name="destination" scoped="" ref="0x7f775bdd51b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f775bdd5340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f775bdd54d0"/>
        <function-ref name="type" scoped="" ref="0x7f775bdd5660"/>
        <function-ref name="setType" scoped="" ref="0x7f775bdd57f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f775bdd5980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f775bdd5b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f775bdd5ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f775bdd4020" loc="52:../../../tos/system/AMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f775bdd4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f775bdd43a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f775bdd4530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f775bdd46c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f775b490bc0" loc="49:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f775b490bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775b48f020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775b48f1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775b48f340"/>
        <function-ref name="cancel" scoped="" ref="0x7f775b48f4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775b48f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f775b48f8b0" loc="50:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f775b48f8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775b48fc30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f775b48fdc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775b48e020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775b48e1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f775b48e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f775b48e590" loc="51:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f775b48e590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f775b48e910"/>
        <function-ref name="source" scoped="" ref="0x7f775b48eaa0"/>
        <function-ref name="address" scoped="" ref="0x7f775b48ec30"/>
        <function-ref name="destination" scoped="" ref="0x7f775b48edc0"/>
        <function-ref name="setSource" scoped="" ref="0x7f775b48d020"/>
        <function-ref name="setDestination" scoped="" ref="0x7f775b48d1b0"/>
        <function-ref name="type" scoped="" ref="0x7f775b48d340"/>
        <function-ref name="setType" scoped="" ref="0x7f775b48d4d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f775b48d660"/>
        <function-ref name="setGroup" scoped="" ref="0x7f775b48d7f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f775b48d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f775b48dc10" loc="52:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f775b48dc10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f775b48c020"/>
        <function-ref name="noAck" scoped="" ref="0x7f775b48c1b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f775b48c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f775b483640" loc="44:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f775b483640"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775b4839c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775b483b50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775b483ce0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775b483e70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775b482030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f775b4822e0" loc="46:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f775b4822e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775b482660"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775b4827f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775b482980"/>
        <function-ref name="cancel" scoped="" ref="0x7f775b482b10"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775b482ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f775b481020" loc="47:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f775b481020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f775b4813a0"/>
        <function-ref name="source" scoped="" ref="0x7f775b481530"/>
        <function-ref name="address" scoped="" ref="0x7f775b4816c0"/>
        <function-ref name="destination" scoped="" ref="0x7f775b481850"/>
        <function-ref name="setSource" scoped="" ref="0x7f775b4819e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f775b481b70"/>
        <function-ref name="type" scoped="" ref="0x7f775b481d00"/>
        <function-ref name="setType" scoped="" ref="0x7f775b47f020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f775b47f1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f775b47f340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f775b47f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f775be3f930" loc="43:../../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f775be3f930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775be3fcb0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775be3fe40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775be3c020"/>
        <function-ref name="cancel" scoped="" ref="0x7f775be3c1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775be3c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f775bdec400" loc="51:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f775bdec400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bdec7a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bdec930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bdecac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bdecc50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bdecde0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f775bdeedf0" loc="47:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f775bdeedf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f775bded1c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bded350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bded4e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f775bded670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f775bded800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f775bdea720" loc="53:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f775bdea720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775bdeaaa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f775bdeac30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bdeadc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bde9020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f775bde91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBusy" ref="0x7f775bdedb80" loc="48:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBusy" scoped="" ref="0x7f775bdedb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBusy"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="busy" scoped="" ref="0x7f775bdec020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f775bde9480" loc="184:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7f775bde9480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775bde9800"/>
        <function-ref name="runTask" scoped="" ref="0x7f775bde9990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f775bde9c60" loc="140:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7f775bde9c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f775bde8020"/>
        <function-ref name="runTask" scoped="" ref="0x7f775bde81b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f775bdeb060" loc="52:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f775bdeb060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f775bdeb3e0"/>
        <function-ref name="source" scoped="" ref="0x7f775bdeb570"/>
        <function-ref name="address" scoped="" ref="0x7f775bdeb700"/>
        <function-ref name="destination" scoped="" ref="0x7f775bdeb890"/>
        <function-ref name="setSource" scoped="" ref="0x7f775bdeba20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f775bdebbb0"/>
        <function-ref name="type" scoped="" ref="0x7f775bdebd40"/>
        <function-ref name="setType" scoped="" ref="0x7f775bdea020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f775bdea1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f775bdea340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f775bdea4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f775bdca020" loc="46:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="MasterAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f775bdca020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f775bdca3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f775bdca530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f775bdca6c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f775bdca850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f775bdca9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f775bdd1910" loc="45:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="MasterAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f775bdd1910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f775bdd1c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f775bdcac30" loc="47:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="MasterAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f775bdcac30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f775bdc9020"/>
        <function-ref name="source" scoped="" ref="0x7f775bdc91b0"/>
        <function-ref name="address" scoped="" ref="0x7f775bdc9340"/>
        <function-ref name="destination" scoped="" ref="0x7f775bdc94d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f775bdc9660"/>
        <function-ref name="setDestination" scoped="" ref="0x7f775bdc97f0"/>
        <function-ref name="type" scoped="" ref="0x7f775bdc9980"/>
        <function-ref name="setType" scoped="" ref="0x7f775bdc9b10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f775bdc9ca0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f775bdc9e30"/>
        <function-ref name="localGroup" scoped="" ref="0x7f775bdc8020"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f775d2ff020" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f775d303b80" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Platform" loc="51:../../../tos/interfaces/Platform.nc">
      <function command="" provided="0" name="jiffiesRawSize" ref="0x7f775d2f7270" loc="109:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="node_id" ref="0x7f775d2f30f0" loc="182:../../../tos/interfaces/Platform.nc">
        <documentation loc="164:../../../tos/interfaces/Platform.nc">
          <short>&#10; Platform dependent node id.</short>
          <long>&#10; Platform dependent node id.&#10;&#10; Get a Platform defined node id.  This will typically be a serial number&#10; or mac address.&#10;&#10; Platform define PLATFORM_SERIAL_NUM_SIZE determines the&#10; size.  If not defined defaults to 4 bytes (uint32_t).  But platforms&#10; really should define it to be clear.  (see platform.h)&#10;&#10; input:  *lenp      pointer where to place the length of the number.&#10;&#10; output: *lenp      length filled in if non-null.&#10; return: *uint8_t   pointer to the serial_num or NULL.&#10;&#10; a Node Id is assumed to be a sequence of bytes starting with the&#10; msb first.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lenp" ref="0x7f775d2f4de0" loc="182:../../../tos/interfaces/Platform.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRawSize" ref="0x7f775d2f9390" loc="79:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRaw" ref="0x7f775d2fbbb0" loc="78:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesExpired" ref="0x7f775d2f6050" loc="126:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f775d2f7a30" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f775d2f7d90" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIntPriority" ref="0x7f775d2f44c0" loc="162:../../../tos/interfaces/Platform.nc">
        <documentation loc="153:../../../tos/interfaces/Platform.nc">
          <short>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.</short>
          <long>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.&#10;   modern computer hardware allows the assignment of different priorities&#10;   to interrupt sources.  This is inherently a platform thing.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="irq_number" ref="0x7f775d2f4240" loc="162:../../../tos/interfaces/Platform.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set_unaligned_traps" ref="0x7f775d2f6a80" loc="150:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on_off" ref="0x7f775d2f6800" loc="150:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesRaw" ref="0x7f775d2f8a50" loc="108:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="localTime" ref="0x7f775d2fb420" loc="64:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsExpired" ref="0x7f775d2f82b0" loc="95:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f775d2f9b40" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f775d2f8020" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f775d2b5420" loc="48:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f775d2b8700" loc="43:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f775d2b7ce0" loc="47:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f775d2b8020" loc="42:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f775d2b8e70" loc="45:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f775d2b90e0" loc="40:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f775d2b97c0" loc="41:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f775d2b75c0" loc="46:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f775d4267e0" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f775d6ee700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f775d34ca80" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f775d34a1f0" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f775d34c2b0" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f775d4c4020" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f775de64e80" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f775d7ace20" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f775d7ac610" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f775d7a0770" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event.&#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f775d79e020" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f775d252a00" loc="61:../../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f775d2511f0" loc="67:../../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f775d2519d0" loc="72:../../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f775d250940" loc="83:../../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f775d24d120" loc="100:../../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f775d24d930" loc="117:../../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f775d250190" loc="77:../../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f775d24c4c0" loc="134:../../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f775d24c240" loc="134:../../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f775d252270" loc="56:../../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f775d24f190" loc="89:../../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f775d24f920" loc="94:../../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f775d242270" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f775d2429a0" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f775d244420" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f775d241820" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f775d244b20" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f775d2410e0" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f775d245610" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f775d245ce0" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f775d217070" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f775d2177c0" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f775d2122e0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f775d212060" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullUp" ref="0x7f775d211d30" loc="126:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f775d21a870" loc="59:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f775d216780" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f775d210520" loc="134:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="129:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDriveStrength" ref="0x7f775d20e020" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="136:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short> &#10; Set port drive strength.</short>
          <long> &#10; Set port drive strength.&#10; @param mode: MSP430_PORT_DRIVE_STRENGTH_*&#10; @return EINVAL if invalid mode or pin doesn't support drive&#10;     strength config.&#10; FAIL if pin is not an output&#10; SUCCESS if pin supports it, is an output, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f775d210d70" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f775d216020" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f775d218870" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getDriveStrength" ref="0x7f775d20e910" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get drive strength.</short>
          <long>&#10; Get drive strength.&#10; @return MSP430_PORT_DRIVE_STRENGTH_*&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f775d213020" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullDown" ref="0x7f775d2115f0" loc="125:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f775d218070" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorOff" ref="0x7f775d212b80" loc="124:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; set resistor mode directly.</short>
          <long>&#10; set resistor mode directly.&#10;&#10; You have to know what you are doing when you use these.  These routines&#10; assume that the port is set for input (PxDIR).  The routines explicitly&#10; change the value of the bits setting in PxOUT.&#10;&#10; The advantage of using these routines is efficiency because there is no&#10; mode checking.  In addition, no error check is done to make sure that the&#10; port is in input mode.  The thing is, first, this is something that you&#10; get right once and then it doesn't change so why check and, second no&#10; one actually checks the error return because there really isn't any&#10; point to doing the check because this isn't something you actually need&#10; to check the return code for.  So why have one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f775d21d9c0" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f775d215020" loc="91:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f775d2137c0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f775d2157e0" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f775d21a120" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f775cee57f0" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f775cee5570" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f775cee4cd0" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f775cee4a50" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f775ceecb60" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f775cee4070" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f775cf748c0" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f775cf748c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f775cf6b7c0" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f775cf6e020" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f775cf6dda0" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f775cf6d7d0" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f775cf6db10" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f775cf6d020" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f775cf698a0" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f775cf69020" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f775cf6e800" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f775cf714d0" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f775cf71250" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f775cf6cdc0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f775cf6c7f0" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f775cf6cb30" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f775cf70020" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f775cf71d10" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f775cf70820" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <function command="" provided="0" name="clear" ref="0x7f775cf0f6c0" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cf0f440" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f775cf0d750" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cf0d4d0" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f775cf0cab0" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cf0c4b0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f775cf0c7e0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f775cf0ab60" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f775cf0bbf0" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cf0b630" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f775cf0b960" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f775cef4630" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f775cf08c80" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f775cef4060" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f775cef4390" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f775ceed020" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775ceee890" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f775ceeebc0" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f775ceee020" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f775cef19c0" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cef1740" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f775ceef020" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cef0900" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f775cef0c50" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f775cee90d0" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
              <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775ceea700" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f775ceeaa50" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f775ceead80" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f775cefa560" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f775cf215f0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f775cefa2e0" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f775cf03110" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f775cf04e30" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f775cf06510" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f775cf04020" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f775cf06d50" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f775cf00b10" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f775cf00530" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f775cf00880" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f775cf02600" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f775cf02020" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f775cf02370" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f775cefd040" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f775ceffda0" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f775cefb3a0" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f775cefddc0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f775cefb110" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f775cf21210"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f775cefeda0" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f775cefeb20" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f775cef8a30" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f775cf215f0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f775cef8450" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f775cef87a0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f775cf215f0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f775cef6890" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f775cf215f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f775cea7910" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f775cea7910"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f775cea3270" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f775ce9d400" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f775ce9d400"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f775ce9d640" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775ce9d640"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f775ce982d0" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775ce9d640"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f775ce9b2b0" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f775ce9a900" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775ce9d640"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775ce9d640"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f775ce9a330" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775ce9d640"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f775ce9a670" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775ce9d640"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f775ce9ba90" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f775ce98ac0" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775ce9d640"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f775ce9c2a0" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775ce9d640"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f775ce9c020" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775ce9d640"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f775ce9cad0" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f775ce7f7e0" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f775ce762a0" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f775ce76020" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f775ce76c80" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f775ce76a00" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f775ce756a0" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f775ce75420" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f775ce75d90" loc="46:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f775ce840e0" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f775ce83a10" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f775ce83790" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f775ce84810" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f775ce88270" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f775ce83020" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f775ce87190" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f775ce869a0" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f775ce88a00" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f775ce878a0" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f775ce862a0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f775ce86020" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f775ce82450" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f775ce821d0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f775ce7c9c0" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10;&#10; It has a predefined idea of what mode that capture should occur in.&#10; If that doesn't work for you, use setControl.&#10;&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; @param ccis configures which input channel to use.&#10;&#10; Msp430Timer.h has convenience definitions:&#10;&#10;     MSP430TIMER_CM_NONE,            MSP430TIMER_CCI_A&#10;     MSP430TIMER_CM_RISING,          MSP430TIMER_CCI_B&#10;     MSP430TIMER_CM_FALLING,         MSP430TIMER_CCI_GND&#10;     MSP430TIMER_CM_BOTH             MSP430TIMER_CCI_VCC&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f775ce7c3f0" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
          <variable name="ccis" ref="0x7f775ce7c730" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f775ce81980" loc="41:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f775d2add40"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f775d2ac7c0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f775ce7b390" loc="76:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f775ce792b0" loc="78:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f775ce7db20" loc="56:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short>&#10; Sets the time in compare mode.</short>
          <long>&#10; Sets the time in compare mode.&#10;&#10; setControlAsCompare has a predefined, hardcoded idea of&#10; how the control register should be set for doing a compare.&#10;&#10; Your mileage may vary and this may not work for you.   In&#10; which case you set use setControl.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f775ce7bad0" loc="77:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f775ce7e190" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f775ce7e920" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f775ce7d390" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f775d2add40"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f775d2ac7c0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f775ce7d110" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f775d2add40"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f775d2ac7c0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f775ce63270" loc="45:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="42:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f775ce608c0" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="76:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f775ce60640" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f775ce5f4e0" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="87:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f775ce5f260" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f775ce62e40" loc="74:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="71:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f775ce62580" loc="69:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="59:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f775ce63c20" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f775ce639a0" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f775ce351f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f775cce6e10" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f775cce6e10"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f775cce1070" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775cce1070"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f775cce1990" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return counter value.</short>
          <long>&#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775cce1070"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f775ccdfad0" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f775ccdf270" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f775ccde270" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSkew" loc="51:../../../tos/lib/timer/TimeSkew.nc">
      <documentation loc="35:../../../tos/lib/timer/TimeSkew.nc">
        <short>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.</short>
        <long>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.  Under various circumstances&#10; adjustments may be made by this underlying timing that can result&#10; in time skew.&#10;&#10; Typically this can occur when the RTC (Real Time Clock) subsystem&#10; has had its time adjusted for example via a GPS providing synchronized&#10; time.  If this skew is below a reasonable threshold (platform dependent)&#10; TimeSkew.skew(skew_val) will be signalled.  Beyond that threshold&#10; it might be better to reboot and reestablish reasonable time via&#10; those mechanisms.&#10;&#10; @author Eric B.Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function event="" provided="0" name="skew" ref="0x7f775cc1ee80" loc="62:../../../tos/lib/timer/TimeSkew.nc">
        <documentation loc="52:../../../tos/lib/timer/TimeSkew.nc">
          <short>&#10; Signaled when the underlying timing system has detected timing&#10; skew.</short>
          <long>&#10; Signaled when the underlying timing system has detected timing&#10; skew.&#10;&#10; @param skew    estimated skew computed.  in millisecs (units platform&#10;                dependent, typically binary millisecs).&#10;                > 0, time has been moved into the future (we were slow).&#10;                &#60; 0, time has been shifted backwards, (we were fast).&#10;                = 0, skew is beyond platform limits.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSkew"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f775de58930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skew" ref="0x7f775cc1ec00" loc="62:../../../tos/lib/timer/TimeSkew.nc">
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f775de58930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f775cb79020" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f775cb79020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f775cb79260" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775cb79260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7f775cb760b0" loc="63:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775cb79260"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb77e00" loc="63:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f775cb752a0" loc="70:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb75020" loc="70:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7f775cb79e20" loc="49:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb79ba0" loc="49:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f775cb73610" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775cb79260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb73020" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f775cb73380" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775cb79260"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7f775cb68680" loc="65:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb68060" loc="65:../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7f775cb683f0" loc="65:../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7f775cb67850" loc="71:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb675d0" loc="71:../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7f775cb69810" loc="57:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7f775cb6cd60" loc="52:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7f775cb6cae0" loc="52:../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f775cb7e2e0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb7e060" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f775cb7d510" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb7d290" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f775cb7b680" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb7b400" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioBackoff" loc="54:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <short>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.</short>
        <long>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.  &#10; &#10; This is because of fan-out issues with multiple components wanting to&#10; affect backoffs for whatever they're interested in:&#10; If you signal out an *event* to request an initial backoff and&#10; several components happen to be listening, then those components&#10; would be required to return a backoff value.  We don't want that&#10; behavior.&#10; With this strategy, components can listen for the requests and then&#10; decide if they want to affect the behavior.  If the component wants to&#10; affect the behavior, it calls back using the setXYZBackoff(..) command.&#10; If several components call back, then the last component to get its &#10; word in has the final say. &#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="requestCca" ref="0x7f775cb3f520" loc="95:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="90:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on whether or not to use CCA on the outbound packet.</short>
          <long>&#10; Request for input on whether or not to use CCA on the outbound packet.&#10; Replies should come in the form of setCca(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb3f2a0" loc="95:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestInitialBackoff" ref="0x7f775cb42780" loc="81:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="76:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; </short>
          <long>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb42500" loc="81:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCongestionBackoff" ref="0x7f775cb44e70" loc="66:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="62:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestCongestionBackoff event&#10; </short>
          <long>&#10; Must be called within a requestCongestionBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f775cb44bf0" loc="66:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInitialBackoff" ref="0x7f775cb44350" loc="60:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="56:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestInitialBackoff event&#10; </short>
          <long>&#10; Must be called within a requestInitialBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f775cb440d0" loc="60:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCca" ref="0x7f775cb438d0" loc="73:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="68:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Enable CCA for the outbound packet.</short>
          <long>&#10; Enable CCA for the outbound packet.  Must be called within a requestCca&#10; event&#10; @param ccaOn TRUE to enable CCA, which is the default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ccaOn" ref="0x7f775cb43650" loc="73:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestCongestionBackoff" ref="0x7f775cb40690" loc="88:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="83:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; </short>
          <long>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb40410" loc="88:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7f775cb33e60" loc="59:../../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7f775cb33850" loc="59:../../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f775cb33bd0" loc="59:../../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Packet" loc="40:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <function command="" provided="0" name="setPower" ref="0x7f775cb4e120" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="49:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Set transmission power for a given packet.</short>
          <long>&#10; Set transmission power for a given packet. Valid ranges are&#10; between 0 and 31.&#10;&#10; @param p_msg the message.&#10; @param power transmission power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f775cb4fae0" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="power" ref="0x7f775cb4fe30" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setNetwork" ref="0x7f775cb4a710" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f775cb4a110" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="networkId" ref="0x7f775cb4a480" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRssi" ref="0x7f775cb4ec00" loc="64:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="58:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get rssi value for a given packet.</short>
          <long>&#10; Get rssi value for a given packet. For received packets, it is&#10; the received signal strength when receiving that packet. For sent&#10; packets, it is the received signal strength of the ack if an ack&#10; was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="signed char" size="I:1" alignment="I:1">
            <typename><typedef-ref name="int8_t" ref="0x7f775de58110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f775cb4e980" loc="64:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNetwork" ref="0x7f775cb4b620" loc="75:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f775cb4b3a0" loc="75:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPower" ref="0x7f775cb4f2e0" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="42:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get transmission power setting for current packet.</short>
          <long>&#10; Get transmission power setting for current packet.&#10;&#10; @param the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f775cb4f060" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLqi" ref="0x7f775cb4d760" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="66:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get lqi value for a given packet.</short>
          <long>&#10; Get lqi value for a given packet. For received packets, it is the&#10; link quality indicator value when receiving that packet. For sent&#10; packets, it is the link quality indicator value of the ack if an&#10; ack was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f775cb4d4e0" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7f775cb376c0" loc="65:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb37440" loc="65:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7f775cb3b790" loc="46:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb3b170" loc="46:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7f775cb3b500" loc="46:../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7f775cb39680" loc="59:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb39400" loc="59:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7f775cb3ab90" loc="53:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb3a570" loc="53:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7f775cb3a900" loc="53:../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7f775cb366c0" loc="71:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb36440" loc="71:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7f775cb472a0" loc="47:../../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb47020" loc="47:../../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f775cb2de00" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb2d840" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f775cb2db70" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f775cb22620" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb22020" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f775cb22350" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f775cb21660" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f775cb242a0" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb24020" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f775cb23750" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775cb23170" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f775cb234c0" loc="100:../../../tos/interfaces/Send.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f775cb2acc0" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.&#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource&#10;&#10; @note This command should never be called between putting in a request&#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event,&#10;       we have opted to keep thing simple and warn you about the potential&#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f775cb2ccc0" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f775cb2c350" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f775cb2a4f0" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f775cb298a0" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Transmit" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <short>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f775caff3a0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send a message&#10;&#10; </short>
          <long>&#10; Send a message&#10;&#10; @param p_msg message to send.&#10; @param useCca TRUE if this Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f775cb03dc0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="useCca" ref="0x7f775caff110" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f775cafe6a0" loc="65:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="60:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Cancel sending of the message.</short>
          <long>&#10; Cancel sending of the message.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="modify" ref="0x7f775cafbe70" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="75:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Modify the contents of a packet.</short>
          <long>&#10; Modify the contents of a packet. This command can only be used&#10; when an SFD capture event for the sending packet is signalled.&#10;&#10; @param offset in the message to start modifying.&#10; @param buf to data to write&#10; @param len of bytes to write&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f775cafb060" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f775cafb8a0" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f775cafbbd0" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f775cafd840" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="67:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Signal that a message has been sent&#10;&#10; </short>
          <long>&#10; Signal that a message has been sent&#10;&#10; @param p_msg message to send.&#10; @param error notifaction of how the operation went.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f775cafd260" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f775cafd5b0" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resend" ref="0x7f775caffe30" loc="58:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send the previous message again&#10; </short>
          <long>&#10; Send the previous message again&#10; @param useCca TRUE if this re-Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="useCca" ref="0x7f775caffbb0" loc="58:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../../tos/interfaces/Random.nc">
      <documentation loc="34:../../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7f775caf70e0" loc="52:../../../tos/interfaces/Random.nc">
        <documentation loc="48:../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7f775cb00870" loc="46:../../../tos/interfaces/Random.nc">
        <documentation loc="42:../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f775cb0aa40" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f775cb02270" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420PacketBody" loc="37:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <short>&#10; Internal interface for the CC2420 to get portions of a packet.</short>
        <long>&#10; Internal interface for the CC2420 to get portions of a packet.&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="getPayload" ref="0x7f775caf12e0" loc="49:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="45:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the payload region of the message, after any headers&#10;    works with extended addressing mode&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775caf1020" loc="49:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getHeader" ref="0x7f775caf3710" loc="42:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="39:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_header_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_header" ref="0x7f775cf5ca10"/>
              <typename><typedef-ref name="cc2420_header_t" ref="0x7f775cf59440"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775caf3410" loc="42:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMetadata" ref="0x7f775caf0620" loc="53:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="50:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_metadata_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_metadata" ref="0x7f775cf58020"/>
              <typename><typedef-ref name="cc2420_metadata_t" ref="0x7f775cf578c0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775caf0320" loc="53:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Power" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio power operations (e.g. voltage&#10; regulator, oscillator, etc). However, it does not include&#10; transmission power, see the CC2420Config interface.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="startOscillator" ref="0x7f775cb076e0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="65:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the oscillator.</short>
          <long>&#10; Start the oscillator. On SUCCESS, &#60;code>startOscillator&#60;/code>&#10; will be signalled when the oscillator has been started.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rfOff" ref="0x7f775cb05840" loc="97:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="92:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Disable RX.</short>
          <long>&#10; Disable RX.&#10;&#10; @return SUCCESS if receive mode has been disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxOn" ref="0x7f775cb05070" loc="90:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="85:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Enable RX.</short>
          <long>&#10; Enable RX.&#10;&#10; @return SUCCESS if receive mode has been enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startVReg" ref="0x7f775cb0ce20" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the voltage regulator on the CC2420.</short>
          <long>&#10; Start the voltage regulator on the CC2420. On SUCCESS,&#10; &#60;code>startVReg()&#60;/code> will be signalled when the voltage&#10; regulator is fully on.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopVReg" ref="0x7f775cb09e80" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="58:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the voltage regulator immediately.</short>
          <long>&#10; Stop the voltage regulator immediately.&#10;&#10; @return SUCCESS always&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startOscillatorDone" ref="0x7f775cb06020" loc="76:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="73:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the oscillator has been started.</short>
          <long>&#10; Signals that the oscillator has been started.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopOscillator" ref="0x7f775cb06840" loc="83:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="78:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the oscillator.</short>
          <long>&#10; Stop the oscillator.&#10;&#10; @return SUCCESS if the oscillator was stopped, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startVRegDone" ref="0x7f775cb096c0" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the voltage regulator has been started.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="State" loc="38:../../../tos/interfaces/State.nc">
      <documentation loc="33:../../../tos/interfaces/State.nc">
        <short>&#10; State machine interface&#10; </short>
        <long>&#10; State machine interface&#10; @author David Moss - dmm@rincon.com&#10;</long>
      </documentation>
      <function command="" provided="0" name="getState" ref="0x7f775caebd00" loc="71:../../../tos/interfaces/State.nc">
        <documentation loc="68:../../../tos/interfaces/State.nc">
          <short>&#10; Get the current state&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toIdle" ref="0x7f775caec350" loc="56:../../../tos/interfaces/State.nc">
        <documentation loc="53:../../../tos/interfaces/State.nc">
          <short>&#10; Set the current state back to S_IDLE&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isState" ref="0x7f775caeb530" loc="66:../../../tos/interfaces/State.nc">
        <documentation loc="63:../../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in the given state&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="myState" ref="0x7f775caeb2b0" loc="66:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isIdle" ref="0x7f775caecac0" loc="61:../../../tos/interfaces/State.nc">
        <documentation loc="58:../../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in S_IDLE&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requestState" ref="0x7f775caed020" loc="45:../../../tos/interfaces/State.nc">
        <documentation loc="40:../../../tos/interfaces/State.nc">
          <short>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.</short>
          <long>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.&#10; @return SUCCESS if the state is change, FAIL if it isn't&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f775caf5c90" loc="45:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="forceState" ref="0x7f775caedad0" loc="51:../../../tos/interfaces/State.nc">
        <documentation loc="47:../../../tos/interfaces/State.nc">
          <short>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.</short>
          <long>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f775caed850" loc="51:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Config" loc="46:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio configurations. All get() and set()&#10; commands are single-phase. After setting some values, a call to&#10; sync() is required for the changes to propagate to the cc2420&#10; hardware chip. This interface allows setting multiple parameters&#10; before calling sync().&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/06/16 15:33:32 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setAutoAck" ref="0x7f775ca90870" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="100:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync must be called for acknowledgement changes to take effect&#10; </short>
          <long>&#10; Sync must be called for acknowledgement changes to take effect&#10; @param enableAutoAck TRUE to enable auto acknowledgements&#10; @param hwAutoAck TRUE to default to hardware auto acks, FALSE to&#10;     default to software auto acknowledgements&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAutoAck" ref="0x7f775ca90290" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </variable>
          <variable name="hwAutoAck" ref="0x7f775ca905e0" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAddressRecognitionEnabled" ref="0x7f775ca911f0" loc="93:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="90:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddressRecognition" ref="0x7f775ca92880" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="81:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @param enableAddressRecognition TRUE to turn address recognition on&#10; @param useHwAddressRecognition TRUE to perform address recognition first&#10;     in hardware. This doesn't affect software address recognition. The&#10;     driver must sync with the chip after changing this value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAddressRecognition" ref="0x7f775ca92210" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </variable>
          <variable name="useHwAddressRecognition" ref="0x7f775ca925f0" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="syncDone" ref="0x7f775ca98c10" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f775ca98990" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAddressRecognitionDefault" ref="0x7f775ca91a70" loc="98:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="95:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is performed first in hardware.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShortAddr" ref="0x7f775ca94730" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f775ca944b0" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f775ca97d30" loc="61:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f775ca97ab0" loc="61:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAutoAckEnabled" ref="0x7f775ca8eae0" loc="117:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="114:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if auto acks are enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPanAddr" ref="0x7f775ca939c0" loc="78:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f775ca93740" loc="78:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAutoAckDefault" ref="0x7f775ca8e2b0" loc="112:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="108:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if hardware auto acks are the default, FALSE if software&#10;     acks are the default&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getExtAddr" ref="0x7f775ca964d0" loc="66:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="63:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Get the long address of the radio: set in hardware&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f775cb6bac0"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f775cb63240"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShortAddr" ref="0x7f775ca96cc0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="68:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the short address of the radio.</short>
          <long>&#10; Change the short address of the radio.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sync" ref="0x7f775ca981f0" loc="54:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="48:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync configuration changes with the radio hardware.</short>
          <long>&#10; Sync configuration changes with the radio hardware. This only&#10; applies to set commands below.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f775ca97390" loc="60:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the channel of the radio, between 11 and 26&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPanAddr" ref="0x7f775ca93020" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="74:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the PAN address of the radio.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../../tos/interfaces/Read.nc">
      <documentation loc="33:../../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10;&#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f775ca8c4a0" loc="49:../../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f775ca8c4a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f775ca8cd60" loc="55:../../../tos/interfaces/Read.nc">
        <documentation loc="50:../../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10;&#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f775ca89ac0" loc="63:../../../tos/interfaces/Read.nc">
        <documentation loc="57:../../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f775ca8c4a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f775ca89510" loc="63:../../../tos/interfaces/Read.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </variable>
          <variable name="val" ref="0x7f775ca89830" loc="63:../../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f775ca8c4a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Register" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
      <documentation loc="33:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <short>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio.</short>
        <long>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio. The return values (when appropriate) refer to the&#10; status byte returned on the CC2420 SO pin. A full list of RW&#10; registers can be found on page 61 of the CC2420 datasheet (rev&#10; 1.2). Page 25 of the same document describes the protocol for&#10; interacting with these registers over the CC2420 SPI bus.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f775ca6bce0" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="49:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Read a 16-bit data word from the register.</short>
          <long>&#10; Read a 16-bit data word from the register.&#10;&#10; @param data pointer to place the register value.&#10; @return status byte from the read.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f775cf60bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f775ca6ba60" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f775ca647f0" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Write a 16-bit data word to the register.</short>
          <long>&#10; Write a 16-bit data word to the register.&#10; &#10; @param data value to write to register.&#10; @return status byte from the write.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f775cf60bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f775ca64570" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalIeeeEui64" loc="43:../../../tos/interfaces/LocalIeeeEui64.nc">
      <documentation loc="39:../../../tos/interfaces/LocalIeeeEui64.nc">
        <short>&#10; Interface to read the 64-bit IEEE EUI.</short>
        <long>&#10; Interface to read the 64-bit IEEE EUI.&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="getId" ref="0x7f775ca7fc50" loc="48:../../../tos/interfaces/LocalIeeeEui64.nc">
        <documentation loc="44:../../../tos/interfaces/LocalIeeeEui64.nc">
          <short>&#10; Get the 64-bit IEEE EUI.</short>
          <long>&#10; Get the 64-bit IEEE EUI.&#10; @returns the 64-bit IEEE EUI type, defined in tos/types/IeeeEui64.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalIeeeEui64"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f775cb6bac0"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f775cb63240"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7f775ca6d0e0" loc="50:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7f775ca6c070" loc="60:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7f775ca6d8c0" loc="55:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f775cf215f0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7f775ca6f860" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f775cf215f0"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7f775ca6f280" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f775cf215f0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7f775ca6f5d0" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f775cf219d0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Strobe" loc="44:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
      <documentation loc="33:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <short>&#10; Interface representing one of the CC2420 command strobe registers.</short>
        <long>&#10; Interface representing one of the CC2420 command strobe registers.&#10; Writing to one of these registers enacts a command on the CC2420,&#10; such as power-up, transmission, or clear a FIFO.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="strobe" ref="0x7f775ca61e40" loc="53:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <documentation loc="46:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
          <short>&#10; Send a command strobe to the register.</short>
          <long>&#10; Send a command strobe to the register. The return value is the&#10; CC2420 status register. Table 5 on page 27 of the CC2420&#10; datasheet (v1.2) describes the contents of this register.&#10; &#10; @return Status byte from the CC2420.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Strobe"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f775cf60bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Ram" loc="41:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <short>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f775ca69060" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="43:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Read data from a RAM.</short>
          <long>&#10; Read data from a RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f775cf60bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f775ca6a1e0" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f775ca6aa50" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f775ca6ada0" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f775ca687b0" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="54:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Write data to RAM.</short>
          <long>&#10; Write data to RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f775cf60bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f775ca69930" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f775ca681c0" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f775ca68510" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:../../../tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:../../../tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f775ca717e0" loc="68:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:../../../tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f775ca71020" loc="61:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:../../../tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x7f775ca72720" loc="54:../../../tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x7f775ca75db0" loc="53:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:../../../tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7f775c94b190" loc="54:../../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f775c94a350" loc="66:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f775c94bb30" loc="61:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f775c94b8b0" loc="61:../../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7f775c94e8f0" loc="53:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Interrupt" loc="39:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
      <documentation loc="34:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f775c921800" loc="54:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.</short>
          <long> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f775c91e270" loc="85:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port.</short>
          <long>&#10; Signalled when an interrupt occurs on a port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f775c921070" loc="49:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Disables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Disables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x7f775c91f9a0" loc="80:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets whether the edge should be high to low or low to high.</short>
          <long>&#10; Sets whether the edge should be high to low or low to high.&#10;&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition.&#10;&#10; DEPRECATED.&#10;&#10; The if generates extra code that doesn't need to be there.   Replaced&#10; by edge{Rising,Falling}();&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x7f775c91f720" loc="80:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeFalling" ref="0x7f775c91f020" loc="67:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7f775c925870" loc="44:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Enables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Enables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeRising" ref="0x7f775c920810" loc="66:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="63:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets rising or falling edge for the interrupt generation&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x7f775c920030" loc="61:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Gets the current input value of a port.</short>
          <long> &#10; Gets the current input value of a port.&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ChipSpiResource" loc="17:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
      <documentation loc="2:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <short>&#10; Interface for the SPI resource for an entire chip.</short>
        <long>&#10; Interface for the SPI resource for an entire chip.  The chip accesses&#10; the platform SPI resource one time, but can have multiple clients &#10; using the SPI bus on top.  When all of the clients are released, the&#10; chip will normally try to release itself from the platforms SPI bus.&#10; In some cases, this isn't desirable - so even though upper components&#10; aren't actively using the SPI bus, they can tell the chip to hold onto&#10; it so they can have immediate access when they need. &#10;&#10; Any component that aborts a release MUST attempt the release at a later&#10; time if they don't acquire and release the SPI bus naturally after the&#10; abort.&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="releasing" ref="0x7f775c7cc810" loc="24:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="19:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; The SPI bus is about to be automatically released.</short>
          <long>&#10; The SPI bus is about to be automatically released.  Modules that aren't&#10; using the SPI bus but still want the SPI bus to stick around must call&#10; abortRelease() within the event.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="abortRelease" ref="0x7f775c7cb0e0" loc="31:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="27:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Abort the release of the SPI bus.</short>
          <long>&#10; Abort the release of the SPI bus.  This must be called only with the&#10; releasing() event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="attemptRelease" ref="0x7f775c7cb920" loc="39:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="33:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Release the SPI bus if there are no objections&#10; </short>
          <long>&#10; Release the SPI bus if there are no objections&#10; @return SUCCESS if the SPI bus is released from the chip.&#10;      FAIL if the SPI bus is already in use.&#10;      EBUSY if some component aborted the release.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Fifo" loc="40:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <short>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="continueRead" ref="0x7f775c7a3420" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Continue reading from the FIFO without having to send the address&#10; byte again.</short>
          <long>&#10; Continue reading from the FIFO without having to send the address&#10; byte again. The &#60;code>readDone&#60;/code> event will be signalled&#10; upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f775c7a5e10" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f775c7a3190" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7f775c79e700" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="84:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a write operation.</short>
          <long>&#10; Signals the completion of a write operation.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes written.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f775c79fd90" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f775c79e110" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f775c79e460" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f775c79f020" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="73:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start writing the FIFO.</short>
          <long>&#10; Start writing the FIFO. The &#60;code>writeDone&#60;/code> event will be&#10; signalled upon completion.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f775cf60bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f775c7a1970" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f775c7a1cc0" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="beginRead" ref="0x7f775c7a5020" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="42:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start reading from the FIFO.</short>
          <long>&#10; Start reading from the FIFO. The &#60;code>readDone&#60;/code> event will&#10; be signalled upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f775cf60bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f775c7a69d0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f775c7a6d20" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f775c7a2b90" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="64:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a read operation.</short>
          <long>&#10; Signals the completion of a read operation.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes read.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f775c7a2250" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f775c7a25a0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f775c7a28f0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f775c784a40" loc="76:../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f775c7840d0" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f775c784460" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f775c7847a0" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f775c780020" loc="88:../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f775c7832a0" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f775c783630" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f775c783970" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f775c783ce0" loc="89:../../../tos/interfaces/SpiPacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
              <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7f775c7868f0" loc="45:../../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7f775c786670" loc="45:../../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f775c6a6b70" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f775c6a34e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430SpiConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <short>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; </short>
        <long>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f775c6a1aa0" loc="39:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <interfacedef-ref qname="Msp430SpiConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f775c6d72b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f775c6d9e00"/></type-tag>
            </type-qualified>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7f775c6a06f0" loc="62:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f775c6a0470" loc="62:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7f775c69eb30" loc="74:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f775c69e8b0" loc="74:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7f775c69e020" loc="68:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f775c69d5f0" loc="81:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f775c69d370" loc="81:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f775c693020" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f775c694750" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART. &#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information.&#10;&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f775c68c740" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f775c68c4c0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f775c68fcd0" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART.&#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information. I.e. calling &#60;code>tx&#60;/done> will transmit a byte of&#10; data in the mode (SPI or UART) the USART has been set to before.&#10;&#10; @author Vlado Handziski (handzisk@tkn.tu-berlin.de)&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f775c6677c0" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f775c6732d0" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f775c67f020" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f775c6f4020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f775c6f4860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f775c683cf0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f775c6f4020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f775c6f4860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f775c6753b0" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f775c67d530" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f775c6ef020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f775c6ef860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f775c67d2b0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f775c6ef020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f775c6ef860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f775c66d9e0" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f775c669020" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f775c67ea90" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f775c6f2ec0"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f775c6f1680"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f775c67dd20" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f775c6ef020"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f775c6ef860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f775c679b90" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f775c679910" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f775c6791f0" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f775c66d2b0" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f775c67e2a0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f775c6f2ec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f775c6f1680"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f775c67e020" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f775c6f2ec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f775c6f1680"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f775c67a020" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f775c66b190" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f775c67aa00" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f775c67a780" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f775c677480" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f775c677c00" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f775c66e420" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f775c670190" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f775c674350" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f775c66eb60" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f775c673ab0" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f775c66b8b0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f775c678390" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f775c6fad80"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f775c6f64d0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f775c66a070" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f775c667020" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f775c67c700" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f775c67c480" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f775c6662a0" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f775c666020" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f775c67f800" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f775c6f4020"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f775c6f4860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f775c675b20" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f775c672270" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f775c66fba0" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f775c6c4b50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f775c6c4730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f775c66f920" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f775c6c4b50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f775c6c4730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f775c670ca0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f775c6d72b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f775c6d9e00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f775c670a20" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f775c6d72b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f775c6d9e00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f775c666ac0" loc="227:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="222:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return byte received&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f775c66a860" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f775c678ba0" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f775c669780" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f775c6729e0" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f775c674b30" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f775c5ff020" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <function command="" provided="0" name="disableOwnAddress" ref="0x7f775c5d99d0" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7f775c5ea020" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7f775c5df620" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f775c5df3a0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7f775c5f35b0" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7f775c5ddc50" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7f775c5e45e0" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7f775c5ec070" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7f775c5e9020" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f775c5ed020" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7f775c5eed30" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7f775c5f04b0" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7f775c5e7020" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7f775c5de550" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7f775c5d9270" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7f775c5e0c30" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7f775c5d4350" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7f775c5d09d0" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7f775c5f2420" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7f775c5e8740" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7f775c5e51f0" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7f775c5ed8e0" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7f775c5f5350" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7f775c5e0460" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f775c5e01e0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7f775c5f8c00" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7f775c5dd4d0" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7f775c5d8190" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7f775c5d2b00" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7f775c5d0270" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7f775c5dbb90" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7f775c5d88c0" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7f775c5dfdb0" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7f775c5d5390" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7f775c5f2b40" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7f775c5e37e0" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7f775c5d67b0" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7f775c5daac0" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7f775c5e5de0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7f775c5e5b60" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7f775c5d12d0" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7f775c5e2a60" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7f775c5db420" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7f775c5f5e10" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f775c6b04a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f775c6b0080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f775c5f5b90" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f775c6b04a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f775c6b0080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7f775c5e8020" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7f775c5f1cb0" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f775c5f1a30" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7f775c5e7980" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f775c5e7700" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7f775c5d5b60" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7f775c5ee620" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7f775c5f1350" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7f775c5e22a0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7f775c5e2020" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f775de57520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7f775c5f3ce0" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7f775c5d6020" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7f775c5da350" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7f775c5decc0" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7f775c5e3020" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7f775c5e4d30" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7f775c5e9740" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7f775c5ec7b0" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7f775c5d1a40" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7f775c5f0e30" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f775c5f0bb0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7f775c5d4b10" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7f775c5ea750" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7f775c5d2350" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f775c52b020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f775c52b880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="38:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f775c4f6dc0" loc="54:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f775c4f4020" loc="71:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f775c4f6530" loc="44:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="39:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f775c4f56d0" loc="63:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f775c4f4950" loc="79:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwnerInfo" loc="2:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
      <function command="" provided="0" name="inUse" ref="0x7f775c4f2b20" loc="9:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
        <documentation loc="3:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
          <short>&#10; Check whether a DefaultOwner has an active client.</short>
          <long>&#10; Check whether a DefaultOwner has an active client.&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f775c4e74c0" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f775c4f0490"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f775c4e7240" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f775c4f0490"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f775c4ea420" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f775c4e8020" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f775c4f0490"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f775c4eaca0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f775c4f0490"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f775c4e8930" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f775c4f0490"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadId48" loc="8:../../../tos/chips/ds2411/ReadId48.nc">
      <documentation loc="4:../../../tos/chips/ds2411/ReadId48.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f775c2dd5e0" loc="13:../../../tos/chips/ds2411/ReadId48.nc">
        <interfacedef-ref qname="ReadId48"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f775c2dd360" loc="13:../../../tos/chips/ds2411/ReadId48.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="OneWireReadWrite" loc="9:../../../tos/lib/onewire/OneWireReadWrite.nc">
      <documentation loc="5:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f775c2cab00" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f775c2ca1c0" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f775c2ca530" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f775c2ca860" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f775c2c9880" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f775c2c92c0" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f775c2c95f0" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f775c2b0530" loc="59:../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f775c2b0530"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f775c2b0770" loc="59:../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775c2b0770"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7f775c2af2e0" loc="66:../../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775c2b0770"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f775c2af060" loc="66:../../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f775c2b0770"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveIndicator" loc="37:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <short>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; </short>
        <long>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="isReceiving" ref="0x7f775c24a580" loc="43:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <documentation loc="39:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the indicator is showing we are actively receiving at this&#10; level&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveIndicator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Receive" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <short>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2008-06-17 07:28:24 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f775c21a9e0" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Signals that a message has been received.</short>
          <long>&#10; Signals that a message has been received.&#10;&#10; @param type of the message received.&#10; @param message pointer to message received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0x7f775c21a020" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
            </type-int>
          </variable>
          <variable name="message" ref="0x7f775c21a750" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd_dropped" ref="0x7f775c21c7f0" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="51:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that the packet has been dropped by the radio&#10; (e.g.</short>
          <long>&#10; Notification that the packet has been dropped by the radio&#10; (e.g. due to address rejection).&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd" ref="0x7f775c21c020" loc="49:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that an SFD capture has occured.</short>
          <long>&#10; Notification that an SFD capture has occured.&#10;&#10; @param time at which the capture happened.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f775c21fd30" loc="49:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f775de57920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeSyncOffset" loc="43:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
      <function command="" provided="0" name="get" ref="0x7f775c2303d0" loc="58:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="52:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns the offset of where the timesync timestamp is sotred in a&#10; CC2420 packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f775de57160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775c230150" loc="58:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7f775c2313d0" loc="50:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="45:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns TRUE if the current message should be timestamped.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775c231150" loc="50:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f775c22d350" loc="72:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="67:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10; Cancels any pending requests to timestamp the message in MAC.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775c22d0d0" loc="72:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f775c22f390" loc="65:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="60:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10;  Sets the current message to be timestamped in the MAC layer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f775c22f110" loc="65:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f775cf115e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f775cf10c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7f775c00b5e0" loc="53:../../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f775c00b5e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7f775c0072a0" loc="64:../../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f775d7aa020"/>
            <typename><typedef-ref name="error_t" ref="0x7f775d7a21b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f775c00b5e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7f775c007020" loc="64:../../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f775c00b5e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBusy" loc="2:../../../tos/interfaces/SendBusy.nc">
      <function command="" provided="0" name="busy" ref="0x7f775be331f0" loc="9:../../../tos/interfaces/SendBusy.nc">
        <documentation loc="3:../../../tos/interfaces/SendBusy.nc">
          <short>&#10; Check whether send queue entry is in use&#10;&#10; </short>
          <long>&#10; Check whether send queue entry is in use&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBusy"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f775d7b0090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
