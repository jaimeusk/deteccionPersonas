<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="19:MasterAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f07bcca1cd0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f07bd02bca0"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f07bd02bca0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f07bcf8c110"/></to>
    </wire>
    <wire loc="20:MasterAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f07bcc9e360"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f07bcf740d0"/></to>
    </wire>
    <wire loc="51:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f07bcf740d0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f07bcf72c40"/></to>
    </wire>
    <wire loc="21:MasterAppC.nc">
      <from><interface-ref name="TimerTramaTDMA" scoped="" ref="0x7f07bcc91840"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bcbe7980"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bcbe7980"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f07bcbde050"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="22:MasterAppC.nc">
      <from><interface-ref name="TimerLeds" scoped="" ref="0x7f07bcc8ecd0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bc8b8260"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bc8b8260"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f07bcbde050"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="23:MasterAppC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f07bcc2f910"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f07bbaffc30"/></to>
    </wire>
    <wire loc="65:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f07bbaffc30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f07bb1b78b0"/></to>
    </wire>
    <wire loc="24:MasterAppC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f07bcc1f8d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f07bbafe8b0"/></to>
    </wire>
    <wire loc="66:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f07bbafe8b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f07bb1b6590"/></to>
    </wire>
    <wire loc="25:MasterAppC.nc">
      <from><interface-ref name="AMControl" scoped="" ref="0x7f07bcc0ca50"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f07bc8b2680"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f07bc8b2680"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f07bc881cc0"/></to>
    </wire>
    <wire loc="26:MasterAppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f07bcc148f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f07bbaff020"/></to>
    </wire>
    <wire loc="64:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f07bbaff020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f07bb1b8bc0"/></to>
    </wire>
    <wire loc="27:MasterAppC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f07bcc0f180"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f07bbaf3910"/></to>
    </wire>
    <wire loc="54:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f07bbaf3910"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f07bc8adb20"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bd0271d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bbc64dd0"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bd0271d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bbcecb70"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bd0271d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bbd0b750"/></to>
    </wire>
    <wire loc="52:../../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bd0271d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bbd2c080"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bd0271d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bbe7c620"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bd0271d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bbf6bc60"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bd0271d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bc703c70"/></to>
    </wire>
    <wire loc="73:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bd0271d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bb33f020"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateImplC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bd0271d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bc43e020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bd0271d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bc7ad510"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bd0271d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bcbd9e50"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f07bcf8c780"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f07bd4d31e0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f07bd4d31e0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f07bd078140"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f07bcf8b1d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bd026110"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f07bd026110"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bd0191a0"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bcf8b8d0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bd0271d0"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f07bd01b130"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f07bd019810"/></to>
    </wire>
    <wire loc="50:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f07bd017020"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f07bd000900"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f07bd000900"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bcfe7850"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f07bd017700"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bd01a640"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f07bd017de0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bcf49600"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f07bcfe7850"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bcfcd1c0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f07bcfdede0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f07bcfcd830"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f07bd14ec80"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f07bcfccaf0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd077040"/></to>
    </wire>
    <wire loc="56:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f07bd072490"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f07bd2ab9a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f07bcf49600"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bcf72640"/></to>
    </wire>
    <wire loc="54:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f07bcf691d0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f07bcf73d80"/></to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f07bcf73d80"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f07bcccc480"/></to>
    </wire>
    <wire loc="55:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f07bcf6f4d0"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f07bcf4b020"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f07bcf4b020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f07bccb6b20"/></to>
    </wire>
    <wire loc="56:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f07bcf6e7f0"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f07bcf4a380"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f07bcf4a380"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f07bccaf1b0"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bccba610"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x7f07bcedd8a0"/></to>
    </wire>
    <wire loc="737:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f07bcedd8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd86b90"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bccb5de0"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x7f07bceda020"/></to>
    </wire>
    <wire loc="738:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f07bceda020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd80060"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bccae480"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x7f07bced88a0"/></to>
    </wire>
    <wire loc="739:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f07bced88a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd7b540"/></to>
    </wire>
    <wire loc="693:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f07bcf2e580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce35060"/></to>
    </wire>
    <wire loc="706:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f07bcf15710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdfe740"/></to>
    </wire>
    <wire loc="844:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f07bce8bd30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdee540"/></to>
    </wire>
    <wire loc="864:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f07bce90d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd4f060"/></to>
    </wire>
    <wire loc="845:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f07bceb9d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcde9b90"/></to>
    </wire>
    <wire loc="711:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f07bcf10710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdf3060"/></to>
    </wire>
    <wire loc="724:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f07bcef68a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdbd740"/></to>
    </wire>
    <wire loc="748:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f07bcec88a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd5a540"/></to>
    </wire>
    <wire loc="848:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f07bceb4d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcddd540"/></to>
    </wire>
    <wire loc="858:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f07bcea0d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd70060"/></to>
    </wire>
    <wire loc="870:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f07bce81d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd4a540"/></to>
    </wire>
    <wire loc="696:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f07bcf27d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce24060"/></to>
    </wire>
    <wire loc="849:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f07bceb1580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdd8b90"/></to>
    </wire>
    <wire loc="701:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f07bcf22d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce1ab90"/></to>
    </wire>
    <wire loc="714:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f07bcf08e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcde3060"/></to>
    </wire>
    <wire loc="727:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f07bceee020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdac540"/></to>
    </wire>
    <wire loc="740:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f07bced5020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd76b90"/></to>
    </wire>
    <wire loc="751:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f07bcec0020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd4a540"/></to>
    </wire>
    <wire loc="691:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f07bcf33580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce40740"/></to>
    </wire>
    <wire loc="704:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f07bcf1a580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce0ad10"/></to>
    </wire>
    <wire loc="717:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f07bcf00710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdd2060"/></to>
    </wire>
    <wire loc="843:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f07bcebb580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdee540"/></to>
    </wire>
    <wire loc="861:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f07bce98570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd5f060"/></to>
    </wire>
    <wire loc="868:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f07bce83570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd4a540"/></to>
    </wire>
    <wire loc="854:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f07bcea7580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd8c540"/></to>
    </wire>
    <wire loc="722:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f07bcefb710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdc8dc0"/></to>
    </wire>
    <wire loc="735:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f07bcee28a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd91060"/></to>
    </wire>
    <wire loc="746:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f07bcecd8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd66b90"/></to>
    </wire>
    <wire loc="862:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f07bce96d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd5a540"/></to>
    </wire>
    <wire loc="851:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f07bceafd40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd9c540"/></to>
    </wire>
    <wire loc="694:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f07bcf2cd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce2f540"/></to>
    </wire>
    <wire loc="707:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f07bcf13e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdf9b90"/></to>
    </wire>
    <wire loc="744:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f07bced38a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd70060"/></to>
    </wire>
    <wire loc="712:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f07bcf0ee50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdee540"/></to>
    </wire>
    <wire loc="725:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f07bcef3020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdb8b90"/></to>
    </wire>
    <wire loc="749:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f07bcec5020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd55b90"/></to>
    </wire>
    <wire loc="853:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f07bceaad50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd91060"/></to>
    </wire>
    <wire loc="689:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f07bcf36530"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce79d10"/></to>
    </wire>
    <wire loc="702:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f07bcf1f580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce14060"/></to>
    </wire>
    <wire loc="715:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f07bcf05710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcddd540"/></to>
    </wire>
    <wire loc="728:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f07bceec8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcda7b90"/></to>
    </wire>
    <wire loc="855:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f07bcea5d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdd2060"/></to>
    </wire>
    <wire loc="859:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f07bce9d570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd6b540"/></to>
    </wire>
    <wire loc="865:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f07bce8d570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd4a540"/></to>
    </wire>
    <wire loc="733:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f07bcee78a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd9c540"/></to>
    </wire>
    <wire loc="856:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f07bcea2580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdcd540"/></to>
    </wire>
    <wire loc="692:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f07bcf31d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce3bb90"/></to>
    </wire>
    <wire loc="705:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f07bcf18e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce03260"/></to>
    </wire>
    <wire loc="718:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f07bcefee50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdcd540"/></to>
    </wire>
    <wire loc="852:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f07bceac580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd97b90"/></to>
    </wire>
    <wire loc="863:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f07bce92570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd55b90"/></to>
    </wire>
    <wire loc="723:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f07bcef8020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdc2260"/></to>
    </wire>
    <wire loc="736:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f07bcedf020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd8c540"/></to>
    </wire>
    <wire loc="747:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f07bceca020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd5f060"/></to>
    </wire>
    <wire loc="695:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f07bcf29580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce2ab90"/></to>
    </wire>
    <wire loc="745:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f07bcecf020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd6b540"/></to>
    </wire>
    <wire loc="700:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f07bcf24580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce1f540"/></to>
    </wire>
    <wire loc="713:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f07bcf0b710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcde9b90"/></to>
    </wire>
    <wire loc="726:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f07bcef18a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdb1060"/></to>
    </wire>
    <wire loc="750:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f07bcec38a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd4f060"/></to>
    </wire>
    <wire loc="690:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f07bcf44d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce45260"/></to>
    </wire>
    <wire loc="703:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f07bcf1dd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bce0f540"/></to>
    </wire>
    <wire loc="716:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f07bcf03e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdd8b90"/></to>
    </wire>
    <wire loc="729:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f07bcee9020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcda1060"/></to>
    </wire>
    <wire loc="860:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f07bce9bd40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd66b90"/></to>
    </wire>
    <wire loc="847:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f07bce88560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcde3060"/></to>
    </wire>
    <wire loc="846:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f07bceb6580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcde3060"/></to>
    </wire>
    <wire loc="734:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f07bcee4020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd97b90"/></to>
    </wire>
    <wire loc="867:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f07bce86d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd4f060"/></to>
    </wire>
    <wire loc="871:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f07bce7e580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcd76b90"/></to>
    </wire>
    <wire loc="842:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f07bcebe8f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f07bcdf3060"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f07bcbde050"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f07bcbd5c30"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f07bcbd5c30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bc8df8e0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f07bcbd9e50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bc98d020"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bc8df8e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bb52bdb0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f07bcbca500"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f07bc8d0020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f07bc98d020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bb720a10"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f07bc8d8020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bc9612f0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f07bc95c850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f07bc98d870"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f07bc98d870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f07bb71a5f0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f07bc8c6300"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f07bca068c0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f07bca068c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f07bc9e9cf0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f07bb720a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bb704360"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f07bb714d20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f07bb71f2a0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f07bb71f2a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f07bb704bf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f07bb7169b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f07bca068c0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bb700dd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bb709020"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bb709020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bcb9ab00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bb6fe440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bb708760"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bb708760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bcb98720"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bb6fd760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bb707a80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bb707a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bcb951d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bcb9ab00"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f07bcb829e0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f07bcb829e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bcb2b260"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bcb98720"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f07bcb7f280"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f07bcb7f280"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f07bcac96d0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bcb951d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f07bcb7e700"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f07bcb7e700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f07bcac8ac0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bcb9ab00"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f07bcb829e0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bcb98720"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f07bcb79a50"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f07bcb79a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f07bcab9220"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bcb951d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f07bcb77020"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f07bcb77020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f07bcab8610"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bcb9ab00"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f07bcb829e0"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bcb98720"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f07bcb76d40"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f07bcb76d40"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f07bcab16d0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bcb951d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f07bcb74160"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f07bcb74160"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f07bcab0ac0"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bcb9ab00"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f07bcb829e0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bcb98720"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f07bcb72020"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f07bcb72020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f07bcaaab30"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bcb951d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f07bcb71570"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f07bcb71570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f07bcaa8020"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bcb9ab00"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f07bcb829e0"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bcb98720"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f07bcb6f5a0"/></to>
    </wire>
    <wire loc="175:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f07bcb6f5a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f07bcaa1220"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bcb951d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f07bcb6ea20"/></to>
    </wire>
    <wire loc="176:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f07bcb6ea20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f07bcaa0610"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bcb9ab00"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f07bcb829e0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bcb98720"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f07bcb6c8c0"/></to>
    </wire>
    <wire loc="182:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f07bcb6c8c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f07bca9a6d0"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bcb951d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f07bcb6bd40"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f07bcb6bd40"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f07bca99ac0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f07bcb85730"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f07bcad0220"/></to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f07bcb86700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f07bcad7cb0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f07bcb73020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f07bcaaf7a0"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f07bcb8c890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f07bcad7020"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f07bcb6aae0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f07bca987a0"/></to>
    </wire>
    <wire loc="112:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f07bcb900c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f07bcb256d0"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f07bcb7aa20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f07bcabfcb0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f07bcb7bbb0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f07bcabf020"/></to>
    </wire>
    <wire loc="146:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f07bcb7c730"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f07bcac1b30"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f07bcb83a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f07bcace2f0"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f07bcb70570"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f07bcaa8cb0"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f07bcb84bb0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f07bcacf610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f07bcb94830"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bcb333e0"/></to>
    </wire>
    <wire loc="119:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f07bcb8d410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f07bcad9b30"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f07bcb87410"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f07bcade7a0"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f07bcb77da0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f07bcab72f0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f07bcb8f570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f07bcadfac0"/></to>
    </wire>
    <wire loc="177:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f07bcb6d890"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f07bca9f2f0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f07bcb7d700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f07bcac77a0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f07bcb312f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f07bcb32bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f07bcb31940"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f07bca903f0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f07bcb2f020"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f07bca90b80"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bcadd610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bcb333e0"/></to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f07bcadcc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f07bcb32bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bcad6b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bcb333e0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f07bcad32f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f07bcb32bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bcacd160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bcb333e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f07bcacc7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f07bcb32bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f07bcb29100"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f07bcb2aa60"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f07bcb29750"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f07bca8f430"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f07bcb29da0"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f07bca8fbc0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bcac6610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bcb2b260"/></to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f07bcac4c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f07bcb2aa60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bcabeb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bcb2b260"/></to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f07bcabc2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f07bcb2aa60"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bcab6160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bcb2b260"/></to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f07bcab57a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f07bcb2aa60"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bcaae610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bcb2b260"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f07bcaadc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f07bcb2aa60"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bcaa7b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bcb2b260"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f07bcaa52f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f07bcb2aa60"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bca9e160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bcb2b260"/></to>
    </wire>
    <wire loc="179:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f07bca9d7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f07bcb2aa60"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bca97610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f07bcb2b260"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f07bca96c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f07bcb2aa60"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f07bc9cc0f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f07bca048e0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f07bca048e0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f07bc9feb80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bc9efc50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f07bcb829e0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f07bc9589c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f07bb5243d0"/></from>
      <to><interface-ref name="TimerFrom" scoped="" ref="0x7f07bc8d8020"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimeSkew" scoped="" ref="0x7f07bb51da40"/></from>
      <to><interface-ref name="TimeSkew" scoped="" ref="0x7f07bc8d3450"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f07bb51e5d0"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f07bd01b130"/></to>
    </wire>
    <wire loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f07bb51c100"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f07bc881cc0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f07bc85db70"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f07bc8af7f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f07bc880d20"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f07bc880d20"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f07bbc26020"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f07bc8ac880"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f07bc87dc00"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f07bc87dc00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f07bbc24df0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f07bc8ab020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f07bc87b8f0"/></to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f07bc87b8f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f07bbc22a80"/></to>
    </wire>
    <wire loc="89:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f07bc8a7310"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f07bbdf8550"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f07bbdf8550"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f07bbdeaa80"/></to>
    </wire>
    <wire loc="86:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f07bc88d130"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f07bc86fcb0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f07bc86fcb0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f07bc842080"/></to>
    </wire>
    <wire loc="81:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f07bc8adb20"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f07bc87d020"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f07bc87d020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f07bbc24210"/></to>
    </wire>
    <wire loc="85:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f07bc8a8080"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f07bc879990"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f07bc879990"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f07bc843020"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f07bc8abc90"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f07bc87c2d0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f07bc87c2d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f07bbc23470"/></to>
    </wire>
    <wire loc="90:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f07bc8983f0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f07bbdf4660"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f07bbdf4660"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f07bbde6af0"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f07bc85db70"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f07bbc57b80"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bc867e30"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bbc208b0"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f07bc85ad20"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f07bbc21ce0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bc8729b0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bc844020"/></to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bc844020"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbdfd670"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f07bc842080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f07bbc57080"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f07bc843020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f07bbdfa6e0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f07bc865020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f07bc842b70"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f07bc842b70"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f07bbc43020"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f07bc86ec70"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f07bc8439d0"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f07bc8439d0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f07bbdf9a70"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioResource" scoped="" ref="0x7f07bbc170f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc856210"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f07bbc1f860"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f07bc847990"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f07bc847990"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f07bbcc0c90"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f07bbc1e690"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f07bc845840"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f07bc845840"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f07bbcbfa50"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f07bbc194d0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f07bc025b20"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbc1ece0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbdfd670"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbdfd670"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbdefd20"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbc1db70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbdf90c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbdf90c0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbdeb640"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f07bbc1c610"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f07bc7b6dc0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f07bc7b6dc0"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f07bc7ac970"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f07bbc181f0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bc83b330"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bc83b330"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bc8367e0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f07bbc17d30"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f07bcf740d0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f07bbc57b80"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f07bbc54d90"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f07bbdf9a70"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f07bbdea020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f07bbc43020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f07bbc40410"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f07bbcc0c90"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f07bbcb5a20"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f07bbc57080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f07bbc502d0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f07bc850500"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f07bbcc05e0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f07bbcc05e0"/></from>
      <to><interface-ref name="BareReceive" scoped="" ref="0x7f07bbcb5370"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f07bbdfa6e0"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f07bbdecc50"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bc856210"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bbcc2be0"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bbcc2be0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bbcb77b0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f07bc8466f0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f07bbcc18e0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f07bbcc18e0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7f07bbcb64d0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f07bc850bc0"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f07bbcbe170"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f07bbcbe170"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f07bbcb3020"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f07bbcbfa50"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f07bbcb4840"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f07bbc54d90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f07bc83e390"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f07bc83e390"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f07bc83ae70"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f07bbcbd6b0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f07bbd14220"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f07bbd14220"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f07bbd0ea10"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f07bbd13020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f07bbc46350"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f07bbc46350"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f07bbc43d70"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f07bbc43d70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f07bbc5bce0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f07bbc5bce0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f07bbc55860"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f07bbc55860"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f07bc83ee80"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f07bc83ee80"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f07bc837990"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f07bbcbd020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f07bbc58980"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f07bbc58980"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f07bbc54690"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f07bbc54690"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f07bbcf4aa0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f07bbcf4aa0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f07bbcefe30"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f07bbcf1950"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f07bc83cb40"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f07bc83cb40"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f07bbe827c0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f07bbe827c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f07bbe7a020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bc835640"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc7c6950"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bc7c6950"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc7adb80"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f07bc82db50"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f07bc7c1bf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f07bc7c1bf0"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f07bc7aa740"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f07bc82a760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f07bbf7b6c0"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f07bc82a760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f07bbe855c0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f07bbe855c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f07bbe7cca0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f07bbf7b6c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f07bbf6a320"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f07bc8222a0"/></from>
      <to><interface-ref name="CC2420Transmit" scoped="" ref="0x7f07bbf78020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f07bbf78020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f07bbf6abc0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f07bc82b060"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bbf78cb0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bbf78cb0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bbf68970"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bc820330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbdfd670"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bc818920"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbdf90c0"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f07bc81f420"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f07bbd31a20"/></to>
    </wire>
    <wire loc="56:../../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f07bbd31a20"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f07bbd2ba20"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControlState" scoped="" ref="0x7f07bc81b110"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f07bbd33aa0"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f07bbd33aa0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f07bc4421d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f07bc81fbf0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f07bcf740d0"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="sendDone_task" scoped="" ref="0x7f07bc80eb70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="stopDone_task" scoped="" ref="0x7f07bc80fba0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="startDone_task" scoped="" ref="0x7f07bc810c20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ReadRssi" scoped="" ref="0x7f07bc7b30c0"/></from>
      <to><interface-ref name="ReadRssi" scoped="" ref="0x7f07bc7a9b40"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="StartupTimer" scoped="" ref="0x7f07bc7a6a10"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f07bc700690"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f07bc700690"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f07bc6fa2e0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f07bc7a2c50"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f07bc6b9370"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f07bc6b9370"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc6abda0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f07bc7a0e70"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7f07bc6b6ce0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f07bc6b6ce0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc69a020"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f07bc79e0f0"/></from>
      <to><interface-ref name="VREN" scoped="" ref="0x7f07bc6b3380"/></to>
    </wire>
    <wire loc="77:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f07bc6b3380"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc68fb00"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f07bc799c00"/></from>
      <to><interface-ref name="InterruptCCA" scoped="" ref="0x7f07bc675400"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f07bc675400"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f07bc514680"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f07bc7861d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc0b0e20"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bc0b0e20"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc4c24d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f07bc7852b0"/></from>
      <to><interface-ref name="SRXON" scoped="" ref="0x7f07bc0ad7b0"/></to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f07bc0ad7b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f07bc7859c0"/></from>
      <to><interface-ref name="SRFOFF" scoped="" ref="0x7f07bc0acae0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f07bc0acae0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f07bc787a40"/></from>
      <to><interface-ref name="SXOSCON" scoped="" ref="0x7f07bc0aead0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f07bc0aead0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f07bc787120"/></from>
      <to><interface-ref name="SXOSCOFF" scoped="" ref="0x7f07bc0aa160"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f07bc0aa160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f07bc78cbe0"/></from>
      <to><interface-ref name="FSCTRL" scoped="" ref="0x7f07bc0a2870"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f07bc0a2870"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f07bc78e550"/></from>
      <to><interface-ref name="IOCFG0" scoped="" ref="0x7f07bc0a0880"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f07bc0a0880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f07bc78ee00"/></from>
      <to><interface-ref name="IOCFG1" scoped="" ref="0x7f07bc09f0a0"/></to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f07bc09f0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f07bc78d710"/></from>
      <to><interface-ref name="MDMCTRL0" scoped="" ref="0x7f07bc0a7e50"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f07bc0a7e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bc78b020"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bc0a6670"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bc0a6670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f07bc7985e0"/></from>
      <to><interface-ref name="PANID" scoped="" ref="0x7f07bc090500"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f07bc090500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f07bc78fc30"/></from>
      <to><interface-ref name="IEEEADR" scoped="" ref="0x7f07bc091ce0"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f07bc091ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f07bc78b8e0"/></from>
      <to><interface-ref name="RXCTRL1" scoped="" ref="0x7f07bc0a3e50"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f07bc0a3e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f07bc7891c0"/></from>
      <to><interface-ref name="RSSI" scoped="" ref="0x7f07bc0a6e50"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f07bc0a6e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f07bc789a70"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f07bc0a4e50"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f07bc0a4e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SyncResource" scoped="" ref="0x7f07bc784d90"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc07ea80"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bc07ea80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc4c24d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RssiResource" scoped="" ref="0x7f07bc784020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc0519e0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bc0519e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc4c24d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f07bc794390"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f07bc025b20"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f07bc7a6020"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f07bc024d20"/></to>
    </wire>
    <wire loc="23:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f07bc024d20"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f07bc008310"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="syncDone" scoped="" ref="0x7f07bc779820"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="sync" scoped="" ref="0x7f07bc77a940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f07bc703c70"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bc6fba20"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f07bc6fba20"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bb4c6df0"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f07bc6fa2e0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f07bb4c4690"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f07bb4c6df0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bb4bd020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f07bb4c4690"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f07bb4b7a90"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f07bb4bd020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bb4a1a30"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f07bb4b0210"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f07bb4bd870"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f07bb4bd870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f07bb4a0340"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f07bb4b3e10"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f07bc6e3650"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f07bc6e3650"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f07bc6dc2e0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bb49c4c0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bb4a6570"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bb4a6570"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bcb9ab00"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bb49ba90"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bb4a5c10"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bb4a5c10"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bcb98720"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bb49ada0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bb4a3020"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bb4a3020"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bcb951d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f07bc6da6d0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f07bca048e0"/></to>
    </wire>
    <wire loc="73:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f07bc6b86a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc6a54a0"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f07bc6b79d0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc6a0b00"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f07bc6ba0e0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc6b0710"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f07bc6b4020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc694630"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc6af930"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f07bcf2e580"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc6a9020"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f07bcef68a0"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc6a4610"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f07bcf31d50"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc69fc60"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f07bcf36530"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc6982f0"/></from>
      <to><interface-ref name="Port46" scoped="" ref="0x7f07bceec8a0"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc6937a0"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f07bcef8020"/></to>
    </wire>
    <wire loc="69:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc68ec60"/></from>
      <to><interface-ref name="Port45" scoped="" ref="0x7f07bceee020"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f07bc66c700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f07bc669c20"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f07bc674060"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f07bc505b70"/></to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bc657760"/></from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f07bcb7c730"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430Capture" scoped="" ref="0x7f07bc656a80"/></from>
      <to><interface-ref name="CaptureB1" scoped="" ref="0x7f07bcb7aa20"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc655930"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f07bcef8020"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f07bc5132f0"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f07bc6423f0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f07bc6423f0"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f07bc62b3f0"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f07bc5027a0"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f07bc645620"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f07bc645620"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f07bc6337a0"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f07bc6363f0"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x7f07bc61f3f0"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f07bc63fd50"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x7f07bc628d50"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f07bc63c3f0"/></from>
      <to><interface-ref name="Port21" scoped="" ref="0x7f07bc6253f0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f07bc64abc0"/></from>
      <to><interface-ref name="Port12" scoped="" ref="0x7f07bc62fd50"/></to>
    </wire>
    <wire loc="80:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f07bc639d50"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f07bc622d50"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f07bc641710"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x7f07bc62a710"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f07bc635710"/></from>
      <to><interface-ref name="Port27" scoped="" ref="0x7f07bc61e710"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f07bc63b710"/></from>
      <to><interface-ref name="Port22" scoped="" ref="0x7f07bc624710"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f07bc643020"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f07bc62c020"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f07bc637100"/></from>
      <to><interface-ref name="Port25" scoped="" ref="0x7f07bc620100"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f07bc640a30"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7f07bc629a30"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f07bc63d020"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7f07bc626020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f07bc64b8a0"/></from>
      <to><interface-ref name="Port11" scoped="" ref="0x7f07bc630a30"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f07bc63aa30"/></from>
      <to><interface-ref name="Port23" scoped="" ref="0x7f07bc623a30"/></to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f07bc0ad160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bc0a1880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f07bc0990a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f07bc0a00a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f07bc08b500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f07bc08d500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f07bc0ac490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f07bc095880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f07bc08e500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f07bc09b880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f07bc09c0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc0afa90"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc4c1350"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc4c1350"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc4b9660"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f07bc0aae00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f07bc0a9490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f07bc092c80"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f07bc0a9be0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f07bc08ece0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f07bc0950a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f07bc0a4670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f07bc0960a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f07bc099880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f07bc096880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f07bc08cce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f07bc08dce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f07bc09c880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f07bc0980a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f07bc090ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f07bc09f880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f07bc08bce0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f07bc4bf2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f07bc0ae480"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f07bc0a7670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f07bc0a3670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f07bc09a0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f07bc09a880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bc0a10a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f07bc0a82f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f07bc0a7020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f07bc0aa7b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f07bc091500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f07bc08c500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f07bc09b0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f07bc098880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f07bc0ade00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f07bc09d0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f07bc0a8940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f07bc09d880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f07bc0920a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f07bc08a9b0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f07bc4bf2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Fifo" scoped="" ref="0x7f07bc4bf2c0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f07bc4b6890"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4b5ba0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4b4a30"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bc4c24d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc4b7510"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4b38b0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="WorkingState" scoped="" ref="0x7f07bc4a6b40"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f07bc447770"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f07bc447770"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f07bc4421d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f07bc4b1060"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc425c40"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bc425c40"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bb3c5940"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f07bc4aec70"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f07bc4248f0"/></to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f07bc4248f0"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f07bb3c4d70"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f07bc4a62e0"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f07bc0d6020"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f07bc0d6020"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f07bb3c2020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f07bc4afa70"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f07bcf740d0"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <from><interface-ref name="grant" scoped="" ref="0x7f07bc4a2bd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/system/StateImplC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f07bc4421d0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f07bc43eb70"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f07bb3c2020"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f07bc3bd850"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f07bb3c4d70"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f07bc3be110"/></to>
    </wire>
    <wire loc="105:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bb3c5940"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc3c2d80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f07bb3c45d0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f07bb3ba020"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f07bb3ba020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f07bc23f2c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f07bc3be110"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f07bc342a10"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f07bb3c3410"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f07bc3be790"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f07bc3be790"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f07bc341060"/></to>
    </wire>
    <wire loc="111:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f07bc3b8a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f07bb3c27c0"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bb3ac760"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bc3bb8e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f07bc3b9690"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bb3bb340"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bb3bb340"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc240020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f07bc3b4b40"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f07bb3b4c10"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f07bb3b4c10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f07bc2434d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bc3bb8e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bc342250"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f07bc3bd850"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f07bc341c50"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bc3c2d80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc343470"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f07bc33f3e0"/></from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f07bc3b8a40"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f07bc3405b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f07bc3b9690"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f07bc339480"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f07bc3b4b40"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f07bc33fa50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f07bc32f020"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f07bc32f020"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f07bc326700"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f07bc339c20"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f07bcf740d0"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <from><interface-ref name="signalDone_task" scoped="" ref="0x7f07bc3372f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f07bc3272c0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f07bc321c20"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f07bc32bd10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f07bc3212d0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f07bc2f3bb0"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f07bcebb580"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f07bc2f03e0"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7f07bceb9d50"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f07bc2edbb0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f07bceb6580"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f07bc2ea3e0"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7f07bceb1580"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f07bc2e8bb0"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7f07bceb4d50"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7f07bc2f8d10"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f07bc196d40"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f07bb3b3440"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f07bc2413f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f07bb3b3a50"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f07bc19d020"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f07bc19d020"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f07bc196d40"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f07bb3b8020"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f07bc32f020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f07bb3ba7c0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f07bc23fad0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f07bc23fad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f07bc1a8e80"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bc23e8a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bb3ac760"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f07bc23f2c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f07bc1a9a60"/></to>
    </wire>
    <wire loc="81:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f07bc1a9a60"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f07bb33b6c0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f07bc2434d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f07bc23cd60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bc240020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc1abca0"/></to>
    </wire>
    <wire loc="80:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bc1abca0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bb33c850"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7f07bc2413f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f07bc23b710"/></to>
    </wire>
    <wire loc="83:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f07bc1a8e80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f07bb33aa70"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bc1a7790"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bc23e8a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f07bc229bf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f07bc1a8e80"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f07bc23bd80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f07bc32bd10"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f07bc2295e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f07bc3272c0"/></to>
    </wire>
    <wire loc="82:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f07bc1a8270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f07bb33be40"/></to>
    </wire>
    <wire loc="84:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bb3399d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bc1a7790"/></to>
    </wire>
    <wire loc="85:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f07bb3392d0"/></from>
      <to><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f07bc1a6020"/></to>
    </wire>
    <wire loc="87:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f07bb3382b0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f07bb33f630"/></to>
    </wire>
    <wire loc="155:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f07bb336480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7f07bc18dbb0"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f07bc326700"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f07bc188700"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f07bcebb580"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f07bc185e40"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f07bceb6580"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f07bc071c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f07bc07bda0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f07bc074b50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bc06e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f07bc067e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f07bc06ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f07bc05a2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f07bc05d2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f07bc079120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f07bc063670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f07bc05e2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f07bc073c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f07bc072c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f07bc068670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f07bc06be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f07bc06d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc07d760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc4c1350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f07bc078aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f07bc077120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f07bc061a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f07bc077870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f07bc05ead0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f07bc079dc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f07bc064e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f07bc072480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bc073480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f07bc07b750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f07bc065e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f07bc066670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f07bc064670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f07bc05cad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f07bc05dad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f07bc06a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f07bc066e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f07bc05fad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f07bc06c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f07bc05aad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f07bc4bf2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f07bc07b100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f07bc074370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f07bc071480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f07bc068e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f07bc06de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f07bc067670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f07bc06f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f07bc07a450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bc06fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f07bc075020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f07bc075cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f07bc05f2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f07bc060ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f07bc078450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f07bc0602f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f07bc05c2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f07bc06ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f07bc065670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f07bc07aaa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f07bc079770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f07bc06ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f07bc075670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f07bc06b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f07bc063e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f07bc0597a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f07bc4bf2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f07bc044c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f07bc04fda0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f07bc048b50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bc042670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f07bc03be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f07bc042e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f07bc02e2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f07bc0302f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f07bc04d120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f07bc036670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f07bc0312f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f07bc046c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f07bc045c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f07bc03c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f07bc03ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f07bc041670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc050760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc4c1350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f07bc04baa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f07bc04a120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f07bc035a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f07bc04a870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f07bc031ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f07bc04ddc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f07bc037e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f07bc045480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bc046480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f07bc04f750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f07bc038e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f07bc03a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f07bc037670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f07bc02fad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f07bc030ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f07bc03d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f07bc03ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f07bc033ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f07bc03f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f07bc02ead0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f07bc4bf2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f07bc04f100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f07bc048370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f07bc044480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f07bc03ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f07bc041e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f07bc03b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f07bc043670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f07bc04e450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bc043e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f07bc049020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f07bc049cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f07bc0332f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f07bc034ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f07bc04b450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f07bc0342f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f07bc02f2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f07bc03de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f07bc038670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f07bc04eaa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f07bc04d770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f07bc03fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f07bc049670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f07bc03e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f07bc036e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f07bc02d7a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f07bc4bf2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="21:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f07bc005880"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f07bbffa020"/></to>
    </wire>
    <wire loc="20:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f07bbffa020"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f07bbff5140"/></to>
    </wire>
    <wire loc="16:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f07bbff1bd0"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f07bbff9c50"/></to>
    </wire>
    <wire loc="21:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f07bbff9c50"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f07bbfdc150"/></to>
    </wire>
    <wire loc="17:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="PowerControl" scoped="" ref="0x7f07bbff4530"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f07bbf871b0"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f07bbfe0540"/></from>
      <to><interface-ref name="Gpio" scoped="" ref="0x7f07bbfe1590"/></to>
    </wire>
    <wire loc="11:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="Gpio" scoped="" ref="0x7f07bbfe1590"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f07bbf919e0"/></to>
    </wire>
    <wire loc="18:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f07bbfd7950"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f07bbfdeca0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f07bbfdeca0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f07bbfb4a90"/></to>
    </wire>
    <wire loc="19:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f07bbfdc9f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x7f07bbfe0540"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f07bbfa4020"/></from>
      <to><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f07bbf9e530"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f07bbf9e530"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f07bbf9be50"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bbf97020"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7f07bcb94830"/></to>
    </wire>
    <wire loc="9:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bbf90c50"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f07bcf1a580"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="EnergyIndicator" scoped="" ref="0x7f07bbf72990"/></from>
      <to><interface-ref name="EnergyIndicator" scoped="" ref="0x7f07bbf67900"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ByteIndicator" scoped="" ref="0x7f07bbf74150"/></from>
      <to><interface-ref name="ByteIndicator" scoped="" ref="0x7f07bbf660f0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="BackoffTimer" scoped="" ref="0x7f07bbf66ae0"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f07bc700690"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f07bbf5a500"/></from>
      <to><interface-ref name="CCA" scoped="" ref="0x7f07bc6ba0e0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f07bbf54820"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f07bc6b9370"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f07bbf52b40"/></from>
      <to><interface-ref name="SFD" scoped="" ref="0x7f07bc6b4020"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f07bbf5b880"/></from>
      <to><interface-ref name="CaptureSFD" scoped="" ref="0x7f07bc66c700"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f07bbf50020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bbeb5c30"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bbeb5c30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc4c24d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bbf50d10"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bbeb48f0"/></to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bbeb48f0"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc4c1350"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f07bbf4d6d0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f07bbeb32f0"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f07bbeb32f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f07bbf4dde0"/></from>
      <to><interface-ref name="STXON" scoped="" ref="0x7f07bbeb2cc0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f07bbeb2cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f07bbf4c530"/></from>
      <to><interface-ref name="STXONCCA" scoped="" ref="0x7f07bbeb1370"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f07bbeb1370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f07bbf4cc60"/></from>
      <to><interface-ref name="SFLUSHTX" scoped="" ref="0x7f07bbeafd00"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f07bbeafd00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f07bbf4ee00"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f07bbea9c60"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f07bbea9c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f07bbf4f780"/></from>
      <to><interface-ref name="TXFIFO" scoped="" ref="0x7f07bbe917a0"/></to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f07bbe917a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f07bc4bf2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f07bbf4e550"/></from>
      <to><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f07bbe952f0"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f07bbe952f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bbf4b3e0"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bbeaa480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bbeaa480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bbf4a5e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bbea7e50"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bbea7e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bbf49020"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bbea6670"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bbea6670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f07bbf4be80"/></from>
      <to><interface-ref name="STXENC" scoped="" ref="0x7f07bbead7b0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f07bbead7b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f07bbf489c0"/></from>
      <to><interface-ref name="TXNONCE" scoped="" ref="0x7f07bbe93ad0"/></to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f07bbe93ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f07bbf49890"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f07bbe942f0"/></to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f07bbe942f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f07bbf48130"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f07bbe94ad0"/></to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f07bbe94ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f07bbf42d40"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f07bbe85df0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f07bbe85df0"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f07bbe7b550"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbf63d00"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbdfd670"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbf61bb0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbdf90c0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f07bbf60950"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f07bbdf8550"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f07bbf55be0"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f07bbdf0480"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f07bbdf0480"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f07bbde28b0"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f07bbf466c0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f07bcf740d0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f07bbea8c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f07bbeb2020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f07bbeacc70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f07bbe9fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f07bbea6e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f07bbe922f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f07bbe9a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f07bbeaac60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f07bbea0670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f07bbea2e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f07bbea5670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f07bbeae370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f07bbe99a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f07bbeaeac0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f07bbe95ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f07bbeaf060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f07bbe9be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f07bbea9480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f07bbeb3940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f07bbe9ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f07bbe9e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f07bbe9b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f07bbea1670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f07bbe9ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f07bbe97ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f07bbea3670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f07bbe92ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f07bc4bf2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f07bbeac490"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f07bbea8480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f07bbea0e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f07bbea5e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f07bbe9f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f07bbea7670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f07bbeb2670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f07bbead160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f07bbeade00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f07bbe972f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f07bbe98ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f07bbeaf6b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f07bbe982f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f07bbe932f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f07bbea1e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f07bbe9c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f07bbeb19c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f07bbea3e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f07bbea2670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f07bbe9ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketIndicator" scoped="" ref="0x7f07bbe80020"/></from>
      <to><interface-ref name="PacketIndicator" scoped="" ref="0x7f07bbe7a7c0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f07bbe65150"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f07bcf740d0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f07bbe79020"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f07bc6b9370"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f07bbe78380"/></from>
      <to><interface-ref name="FIFO" scoped="" ref="0x7f07bc6b86a0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f07bbe776b0"/></from>
      <to><interface-ref name="FIFOP" scoped="" ref="0x7f07bc6b79d0"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f07bbe76a50"/></from>
      <to><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f07bc674060"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f07bbe756e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bbd7fd00"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f07bbd7fd00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f07bc4c24d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f07bbe74530"/></from>
      <to><interface-ref name="RXFIFO" scoped="" ref="0x7f07bbd5cad0"/></to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f07bbd5cad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f07bc4bf2c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f07bbe73ad0"/></from>
      <to><interface-ref name="SFLUSHRX" scoped="" ref="0x7f07bbd7a6b0"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f07bbd7a6b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f07bbe733a0"/></from>
      <to><interface-ref name="SACK" scoped="" ref="0x7f07bbd78370"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f07bbd78370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbe72330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbdfd670"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbe711e0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbdf90c0"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f07bbe6fd70"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f07bbdf8550"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f07bbe71b90"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f07bc7b6dc0"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bbe6a3e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bbd71e50"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bbd71e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bbe6acb0"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bbd70670"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bbd70670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f07bbe6bb10"/></from>
      <to><interface-ref name="SRXDEC" scoped="" ref="0x7f07bbd77160"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f07bbd77160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f07bbe676d0"/></from>
      <to><interface-ref name="RXNONCE" scoped="" ref="0x7f07bbd5c2f0"/></to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f07bbd5c2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f07bbe69590"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f07bbd5f2f0"/></to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f07bbd5f2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f07bbe69e00"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f07bbd5fad0"/></to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f07bbd5fad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f07bbe66020"/></from>
      <to><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f07bbd60ad0"/></to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f07bbd60ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f07bbe668b0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f07bbd7d300"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f07bbd7d300"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <from><interface-ref name="receiveDone_task" scoped="" ref="0x7f07bbe5a9d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f07bbd8c300"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f07bc6e3650"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTime32khz" scoped="" ref="0x7f07bbddf3b0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f07bbd8d020"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f07bbdde6e0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f07bcbca500"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f07bbd88450"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f07bcbde050"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f07bbd72c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f07bbd7c020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f07bbd76c70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f07bbd69e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f07bbd70e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f07bbd7b370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f07bbd64670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f07bbd602f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f07bbd75c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f07bbd74c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f07bbd6a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f07bbd6de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f07bbd6f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bbd7e970"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc4c1350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f07bbd7ad00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f07bbd63a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f07bbd78ac0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f07bbd7a060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f07bbd65e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f07bbd74480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bbd75480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f07bbd7d950"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f07bbd67e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f07bbd68670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f07bbd65670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f07bbd5dad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f07bbd6b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f07bbd68e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f07bbd61ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f07bbd6e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f07bbd76490"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f07bbd72480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f07bbd6ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f07bbd6fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f07bbd69670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f07bbd71670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f07bbd7c670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f07bbd77e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f07bbd612f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f07bbd62ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f07bbd622f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f07bbd5d2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f07bbd6be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f07bbd67670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f07bbd7ccc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f07bbd7b9c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f07bbd6ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f07bbd777b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f07bbd6d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f07bbd64e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f07bbd5b7a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f07bc4bf2c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7f07bbd2f920"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7f07bbd2c940"/></to>
    </wire>
    <wire loc="54:../../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f07bbd35990"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f07bbd2c080"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f07bbd0be60"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f07bbd13020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f07bbd0aae0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f07bbd0c690"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f07bbd0c690"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f07bc4421d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f07bbd098f0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f07bbd31a20"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbd08170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbdf90c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="DuplicateReceive" scoped="" ref="0x7f07bbcf1200"/></from>
      <to><interface-ref name="DuplicateReceive" scoped="" ref="0x7f07bbcec570"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f07bbceb3f0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f07bbcf1950"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbceba70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbdf90c0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f07bbcb3d70"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f07bbcbd6b0"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f07bbcb2b10"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f07bbcbd020"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbcb12f0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbdfd670"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbcb0170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbdf90c0"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f07bbcb0b70"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f07bbc63410"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <from><interface-ref name="grantTask" scoped="" ref="0x7f07bbc84db0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SendState" scoped="" ref="0x7f07bbc56800"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f07bbc52580"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f07bbc52580"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f07bc4421d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f07bbc3d1c0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f07bc843020"/></to>
    </wire>
    <wire loc="63:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f07bb1b8bc0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f07bb1ab640"/></to>
    </wire>
    <wire loc="64:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f07bb1b78b0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f07bc8ab020"/></to>
    </wire>
    <wire loc="65:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f07bb1b6590"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f07bc8abc90"/></to>
    </wire>
    <wire loc="67:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f07bbafc020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f07bb1b5c10"/></to>
    </wire>
    <wire loc="66:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f07bb1b5c10"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f07bc8a8080"/></to>
    </wire>
    <wire loc="60:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f07bb1a92e0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f07bbb66930"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f07bb1a8020"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f07bc8abc90"/></to>
    </wire>
    <wire loc="53:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f07bbb66930"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f07bbb16df0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f07bbb14400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f07bc8af7f0"/></to>
    </wire>
    <wire loc="55:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f07bbb13060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f07bc8abc90"/></to>
    </wire>
    <wire loc="56:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f07bbb12720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f07bc8ab020"/></to>
    </wire>
    <wire loc="184:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f07bbb11480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f07bbb11c60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f07bbaf2020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f07bc8ab020"/></to>
    </wire>
    <wire loc="56:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f07bbaf2c30"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f07bc8abc90"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="41:../../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="35:../../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="200:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/x1xxx/McuSleepC.nc" safe="">
      <documentation loc="36:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="65:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="45:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="33:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="53:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../../tos/system/LedsC.nc">
      <documentation loc="34:../../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="37:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; Digital pin i/o abstraction, TI MSP430 processors.</short>
        <long>&#10; Digital pin i/o abstraction, TI MSP430 processors.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @author Joao Goncalves &#60;joao.m.goncalves@ist.utl.pt>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="79(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="79(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="79(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="79(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="79(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="79(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="79(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="79(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="79(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="79(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="79(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="79(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="79(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="79(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="79(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="79(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="79(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="79(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="79(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="79(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="79(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="79(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="79(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="79(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="79(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="79(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="79(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="79(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="79(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="79(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="79(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="79(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="79(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="79(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="79(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="79(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="79(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="79(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="79(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="79(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="79(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="79(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="79(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="79(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="79(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="79(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="79(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="79(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="MasterC" loc="8:MasterC.nc">
      <module/>
    </component>
    <component qname="MasterAppC.TimerTramaTDMA" loc="44(MasterAppC.TimerTramaTDMA):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC" loc="48:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <documentation loc="36:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="41(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="41(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="41(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="41(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="41(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="41(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="41(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="41(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="41(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="41(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="41(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="41(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="55(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC.VT" loc="61(HilTimerMilliC.VirtualizeTimerC.VT):../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerImplP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f07bc953530"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MasterAppC.TimerLeds" loc="44(MasterAppC.TimerLeds):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="ActiveMessageC" loc="59:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <documentation loc="49:../../../tos/platforms/telosa/ActiveMessageC.nc">
        <short>&#10;&#10; The Active Message layer on the Telos platform.</short>
        <long>&#10;&#10; The Active Message layer on the Telos platform. This is a naming wrapper&#10; around the CC2420 Active Message layer.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.9 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ActiveMessageC" loc="53:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="CC2420RadioC" loc="41:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <documentation loc="24:../../../tos/chips/cc2420/CC2420RadioC.nc">
        <short>&#10; Radio wiring for the CC2420.</short>
        <long>&#10; Radio wiring for the CC2420.  This layer seperates the common&#10; wiring of the lower-layer components of the CC2420 stack and makes&#10; them available to clients like the AM stack and the IEEE802.15.4&#10; stack.&#10;&#10; This component provides the highest-level internal interface to&#10; other components of the CC2420 stack.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10; @author Stephen Dawson-Haggerty&#10; @version $Revision: 1.2 $ $Date: 2009/08/20 01:37:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaC" loc="42:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
        <short>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.</short>
        <long>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-05-14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaP" loc="37:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.12 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ControlC" loc="42:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
        <short>&#10; Implementation for configuring a ChipCon CC2420 radio.</short>
        <long>&#10; Implementation for configuring a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/05/14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ControlP" loc="42:../../../tos/chips/cc2420/control/CC2420ControlP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Urs Hunkeler (ReadRssi implementation)&#10; @version $Revision: 1.7 $ $Date: 2008/06/24 04:07:28 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="AlarmMultiplexC" loc="43:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
        <short>&#10; A component that multiplexes the use of an alarm.</short>
        <long>&#10; A component that multiplexes the use of an alarm. The assumption is&#10; that its use is mutually exclusive and users check whether the&#10; events are for them.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm" loc="40(AlarmMultiplexC.Alarm):../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420AlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C):../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer" loc="37(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm" loc="43(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="41:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
        <short>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Counter32khz32C.Transform" loc="54(Counter32khz32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform" loc="51(AlarmMultiplexC.Alarm.Alarm32khz32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
        <short>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420PinsC.CCAM" loc="42(HplCC2420PinsC.CCAM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.CSNM" loc="42(HplCC2420PinsC.CSNM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOM" loc="42(HplCC2420PinsC.FIFOM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOPM" loc="42(HplCC2420PinsC.FIFOPM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.RSTNM" loc="42(HplCC2420PinsC.RSTNM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.SFDM" loc="42(HplCC2420PinsC.SFDM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.VRENM" loc="42(HplCC2420PinsC.VRENM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
        <short>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420InterruptsC.CaptureSFDC" loc="47(HplCC2420InterruptsC.CaptureSFDC):../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="GpioCaptureC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430InterruptC" loc="39:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for GPIO interrupts.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptP" loc="51:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc" safe="">
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptCCAC" loc="50(HplCC2420InterruptsC.InterruptCCAC):../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptFIFOPC" loc="50(HplCC2420InterruptsC.InterruptFIFOPC):../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="CC2420ControlC.Spi" loc="39(CC2420ControlC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC" loc="37:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:16 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420SpiP" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Roman Lim&#10; @author Razvan Musaloie-E.&#10; @author Jeonggil Ko&#10; @version $Revision: 1.4 $ $Date: 2008-06-23 20:25:15 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.WorkingStateC" loc="65(CC2420SpiWireC.WorkingStateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="StateImplC" loc="64:../../../tos/system/StateImplC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="StateImplP" loc="64:../../../tos/system/StateImplP.nc" safe="">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC" loc="40(CC2420SpiWireC.HplCC2420SpiC):../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC" loc="79(CC2420SpiWireC.HplCC2420SpiC.SpiC):../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Spi0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P" loc="71:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P.SpiP" loc="73(Msp430SpiNoDma0P.SpiP):../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430SpiNoDmaP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
        <short>&#10; An HPL abstraction of USART0 on the MSP430.</short>
        <long>&#10; An HPL abstraction of USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="54:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC" loc="39(CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="56(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="96(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420ControlC.SyncSpiC" loc="39(CC2420ControlC.SyncSpiC):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ControlC.RssiResource" loc="39(CC2420ControlC.RssiResource):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LocalIeeeEui64C" loc="11:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <configuration/>
    </component>
    <component qname="LocalIeeeEui64P" loc="3:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <module/>
    </component>
    <component qname="Ds2411C" loc="7:../../../tos/chips/ds2411/Ds2411C.nc">
      <configuration/>
    </component>
    <component qname="Ds2411P" loc="9:../../../tos/chips/ds2411/Ds2411P.nc">
      <module/>
    </component>
    <component qname="OneWireMasterC" loc="6:../../../tos/lib/onewire/OneWireMasterC.nc">
      <documentation loc="1:../../../tos/lib/onewire/OneWireMasterC.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="OneWireMasterP" loc="9:../../../tos/lib/onewire/OneWireMasterP.nc">
      <documentation loc="2:../../../tos/lib/onewire/OneWireMasterP.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10; Only supports one device on the 1-wire bus.</short>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="39:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="BusyWaitMicroC.BusyWaitCounterC" loc="52(BusyWaitMicroC.BusyWaitCounterC):../../../tos/lib/timer/BusyWaitCounterC.nc">
      <documentation loc="36:../../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="BusyWaitCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd034640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f07bd0349b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430CounterMicroC" loc="44:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
        <short>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.</short>
        <long>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.   If your base clock is in units of binary hertz then 1 uis, decimal&#10; hertz it will be 1us.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430CounterMicroC.Counter" loc="42(Msp430CounterMicroC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd034640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f07bd0349b0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplDs2411C" loc="1:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <configuration/>
    </component>
    <component qname="HplDs2411C.MspGpio" loc="42(HplDs2411C.MspGpio):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="Ds2411PowerControlC" loc="12:../../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <module/>
    </component>
    <component qname="CC2420TransmitC" loc="41:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
        <short>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TransmitP" loc="46:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420TransmitC.Spi" loc="39(CC2420TransmitC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC" loc="39:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
        <short>&#10; Implementation of the receive path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the receive path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveP" loc="45:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Jung Il Choi&#10; @author JeongGil Ko&#10; @author Razvan Musaloiu-E&#10; @version $Revision: 1.21 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC" loc="38:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420PacketP" loc="43:../../../tos/chips/cc2420/packet/CC2420PacketP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC.CounterToLocalTimeC" loc="46(CC2420PacketC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CC2420PacketC.DummyTimer" loc="44(CC2420PacketC.DummyTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC.Spi" loc="39(CC2420ReceiveC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RandomC" loc="43:../../../tos/system/RandomC.nc">
      <documentation loc="33:../../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420CsmaC.StateC" loc="65(CC2420CsmaC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueSendC" loc="38:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
        <short>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; </short>
        <long>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueSendP" loc="38:../../../tos/chips/cc2420/unique/UniqueSendP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
        <short>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.</short>
        <long>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UniqueSendC.StateC" loc="65(UniqueSendC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueReceiveC" loc="40:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
        <short>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; This should sit at the bottom of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueReceiveP" loc="41:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
        <short> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC" loc="62:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
        <short>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.</short>
        <long>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.  They do not include the network byte &#10; responsible for identifying the packing as being sourced from a TinyOS&#10; network.&#10;&#10; TinyOS I-Frames are interoperability packets that do include a network&#10; byte as defined by 6LowPAN specifications.  The I-Frame header type is&#10; the default packet header used in TinyOS networks.&#10;&#10; Since either packet header is acceptable, this layer must do some &#10; preprocessing (sorry) to figure out whether or not it needs to include &#10; the functionality to process I-frames.  If I-Frames are used, then&#10; the network byte is added on the way out and checked on the way in.&#10; If the packet came from a network different from a TinyOS network, the&#10; user may access it through the DispatchP's NonTinyosReceive[] Receive &#10; interface and process it in a different radio stack.&#10;&#10; If T-Frames are used instead, this layer is simply pass-through wiring to the&#10; layer beneath.  &#10;&#10; Define &#34;CC2420_IFRAME_TYPE&#34; to use the interoperability frame and &#10; this layer&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TinyosNetworkP" loc="44:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
        <short>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.</short>
        <long>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.  Filters incoming packets that are not&#10; TinyOS network compatible.  Provides the 6LowpanSnoop interface to&#10; sniff for packets that were not originated from TinyOS.&#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC.FcfsResourceQueueC" loc="42(CC2420TinyosNetworkC.FcfsResourceQueueC):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DummyLplC" loc="41:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Sleep interval is always 0, and duty cycle is always 100%&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="DummyLplP" loc="39:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Wakeup interval is always 0 (always on)&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DummyLplC.StateC" loc="65(DummyLplC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyC" loc="38:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
        <short>&#10; Dummy configuration for PacketLink Layer&#10; </short>
        <long>&#10; Dummy configuration for PacketLink Layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyP" loc="38:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <documentation loc="32:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
        <short>&#10; Dummy module for Packet Link layer&#10; </short>
        <long>&#10; Dummy module for Packet Link layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ActiveMessageP" loc="46:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc" safe="">
      <documentation loc="33:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
        <short>&#10; Active message implementation on top of the CC2420 radio.</short>
        <long>&#10; Active message implementation on top of the CC2420 radio. This&#10; implementation uses the 16-bit addressing mode of 802.15.4: the&#10; only additional byte it adds is the AM id byte, as the first byte&#10; of the data payload.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.22 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MasterAppC.AMSenderC" loc="47(MasterAppC.AMSenderC):../../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:17">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MasterAppC.AMSenderC.SenderC" loc="47(MasterAppC.AMSenderC.SenderC):../../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MasterAppC.AMSenderC.SenderC.AMQueueEntryP" loc="43(MasterAppC.AMSenderC.SenderC.AMQueueEntryP):../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MasterAppC.AMReceiverC" loc="43(MasterAppC.AMReceiverC):../../../tos/system/AMReceiverC.nc">
      <documentation loc="33:../../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:17">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f07bce781d0" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f07bce78580" loc="81:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f07bce78930" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f07bce78ce0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f07bce770d0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430TimerP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f07bcb65930" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f07bcb65cd0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f07bcb630d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f07bcb63450" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f07bcb637d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f07bcb63b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f07bcb62020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f07bcb623b0" loc="49:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f07bcb62780" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f07bcb27c80" loc="42:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f07bcb240d0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f07bca3fcb0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f07bca3fcb0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f07bc9ffa40" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f07bc9ffa40"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f07bc9e8570" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f07bc9e8570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f07bc9e8d40" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f07bc9e8d40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f07bc9e7160" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f07bc9e7160"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f07bc9e7940" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f07bc9e7940"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f07bc9e7d10" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f07bc9e6540" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f07bc9e6540"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f07bca0b6d0" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f07bca0b6d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f07bc9c4020" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f07bc9c4020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f07bc9c4410" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f07bc9c4410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f07bc9c4bf0" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f07bc9c4bf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f07bc9c3020" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f07bc989cc0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f07bc989cc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f07bc953530" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f07bc953530"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f07bc953880" loc="56:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="VirtualizeTimerImplP" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f07bc945980" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f07bc945980"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f07bc945cd0" loc="62:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f07bc8cf550" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f07bc8cf550"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="HplCC2420AlarmC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz32C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="GpioCaptureC" loc="47:../../../tos/chips/msp430/timer/GpioCaptureC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430InterruptC" loc="50:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="CC2420SpiC" loc="39:../../../tos/chips/cc2420/spi/CC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="StateC" loc="65:../../../tos/system/StateC.nc" abstract="">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplCC2420SpiC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Spi0C" loc="79:../../../tos/chips/msp430/usart/Msp430Spi0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDmaP" loc="73:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc" abstract="">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="56:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f07bc2245e0" loc="56:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f07bc2189b0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="96:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f07bc1fdcc0" loc="96:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="BusyWaitCounterC" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc" abstract="">
      <documentation loc="36:../../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f07bbfb2020" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f07bbfb2020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f07bbfb27b0" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bbfb27b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f07bbb8c6a0" loc="47:../../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f07bbb813a0" loc="47:../../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f07bbb7a0d0" loc="43:../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f07bbb62c80" loc="45:../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMReceiverC" loc="43:../../../tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="33:../../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f07bbaf8330" loc="43:../../../tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f07bd0271d0" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bd0271d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bd027550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f07bd02bca0" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f07bd02bca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f07bd02a0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bd026110" loc="42:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bd026110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bd026490"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f07bd01b130" loc="43:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f07bd01b130"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f07bd0251b0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f07bd025340"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f07bd01b7d0"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f07bd01b960"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f07bd01baf0"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f07bd01bc80"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f07bd01be10"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f07bd025020"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f07bd01b4b0"/>
        <function-ref name="node_id" scoped="" ref="0x7f07bd01b640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f07bd017700" loc="7:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f07bd017700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bd017a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bd0191a0" loc="4:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bd0191a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bd019520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f07bd017020" loc="6:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f07bd017020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bd0173a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f07bd017de0" loc="8:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f07bd017de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bd016180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f07bd019810" loc="5:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f07bd019810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f07bd018980"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f07bd018b10"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f07bd018020"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f07bd0181b0"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f07bd018340"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f07bd0184d0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f07bd018660"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f07bd0187f0"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f07bd019b90"/>
        <function-ref name="node_id" scoped="" ref="0x7f07bd019d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bd01a640" loc="2:../../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bd01a640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bd01a9c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f07bd000900" loc="39:../../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f07bd000900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bd000c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f07bcfdede0" loc="40:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f07bcfdede0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f07bcfe3c70"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f07bcfe3310"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f07bcfe34a0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f07bcfe3630"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f07bcfe3180"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f07bcfe37c0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f07bcfe3950"/>
        <function-ref name="initClocks" scoped="" ref="0x7f07bcfe3ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bcfe7850" loc="39:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bcfe7850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bcfe7bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f07bcfcd830" loc="203:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f07bcfcd830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f07bcfcc7f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f07bcfcdd40"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f07bcfcc020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f07bcfcc1b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f07bcfcdbb0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f07bcfcc340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f07bcfcc4d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f07bcfcc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f07bcfccaf0" loc="204:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f07bcfccaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f07bcfcce70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bcfcd1c0" loc="202:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bcfcd1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bcfcd540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f07bd14ec80" loc="55:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f07bd14ec80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f07bd3290a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f07bd2ab9a0" loc="51:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f07bd2ab9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f07bd2abd20"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f07bd3c6020"/>
        <function-ref name="sleep" scoped="" ref="0x7f07bd3c61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f07bd1ec3d0" loc="52:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f07bd1ec3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f07bd1ec750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x7f07bcfe58b0" loc="39:../../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f07bcfe58b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f07bcf987f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f07bcfe5dc0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f07bcf98020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f07bcf981b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f07bcfe5c30"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f07bcf98340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f07bcf984d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f07bcf98660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f07bcf8b8d0" loc="69:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f07bcf8b8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bcf8bc50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f07bcf8c110" loc="66:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f07bcf8c110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f07bcf8c490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f07bcf8b1d0" loc="68:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f07bcf8b1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bcf8b550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f07bcf8c780" loc="67:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f07bcf8c780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bcf8cb00"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f07bcf8cc90"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f07bcf8ce20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f07bd4c6940" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd4c6940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bd4c6cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bd4c6e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f07bd4d31e0" loc="46:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f07bd4d31e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bd4d3560"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f07bd4d36f0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f07bd4d3880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f07bd077040" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f07bd077040"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bd0773c0"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bd077550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f07bd072490" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f07bd072490"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f07bd072810"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f07bd0729a0"/>
        <function-ref name="sleep" scoped="" ref="0x7f07bd072b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f07bd078140" loc="54:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f07bd078140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bd0784c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f07bd078650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f07bd0787e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f07bcf740d0" loc="46:../../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f07bcf740d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f07bcf74450"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f07bcf745e0"/>
        <function-ref name="led1On" scoped="" ref="0x7f07bcf74770"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f07bcf74900"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f07bcf74a90"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf74c20"/>
        <function-ref name="led1Off" scoped="" ref="0x7f07bcf74db0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f07bcf804d0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf80020"/>
        <function-ref name="led0On" scoped="" ref="0x7f07bcf801b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f07bcf80340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f07bcf691d0" loc="50:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f07bcf691d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf69550"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf696e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf69870"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf69a00"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf69b90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf69d20"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf6f020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf6f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bcf72640" loc="46:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bcf72640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bcf729c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f07bcf6f4d0" loc="51:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f07bcf6f4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf6f850"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf6f9e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf6fb70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf6fd00"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf6e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf6e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf6e340"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf6e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f07bcf72c40" loc="47:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f07bcf72c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f07bcf71020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f07bcf711b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f07bcf71340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f07bcf714d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f07bcf71660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf717f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f07bcf71980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f07bcf70020"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf71b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f07bcf71ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f07bcf71e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f07bcf6e7f0" loc="52:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f07bcf6e7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf6eb70"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf6ed00"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf68020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf681b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf68340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf684d0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf68660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf687f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f07bcf73d80" loc="41:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f07bcf73d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf4c180"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf4c310"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf4c4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf4c630"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf4c7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf4c950"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf4cae0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf4cc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f07bcf4b020" loc="42:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f07bcf4b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf4b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf4b530"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf4b6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf4b850"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf4b9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf4bb70"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf4bd00"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf4a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f07bcf49600" loc="44:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bcf49600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bcf49980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f07bcf4a380" loc="43:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f07bcf4a380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf4a700"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf4a890"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf4aa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf4abb0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf4ad40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf49020"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf491b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf49340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f07bcf2e580" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f07bcf2e580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf2e900"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf2ea90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf2ec20"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf2c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf2d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf2d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf2d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf2d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf2d660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf2d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf2d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf2db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf2dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf2c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf2c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf2c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf2c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf2edb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf2c660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf2c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f07bcf15710" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f07bcf15710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf15a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf15c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf15db0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf13a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf141b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf14340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf144d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf14660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf147f0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf14980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf14b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf14ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf14e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf13120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf132b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf13440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf135d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf14020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf13760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf138f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f07bce8bd30" loc="205:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f07bce8bd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce8a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce8a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce8a400"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce881b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce8a720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce8a8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce8aa40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce8abd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce8ad60"/>
        <function-ref name="get" scoped="" ref="0x7f07bce89020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce891b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce89340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce894d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce89760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce898f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce89a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce89c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce8a590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce89da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce88020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f07bce90d40" loc="201:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f07bce90d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce8f0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce8f270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce8f400"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce8d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce8f720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce8f8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce8fa40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce8fbd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce8fd60"/>
        <function-ref name="get" scoped="" ref="0x7f07bce8e020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce8e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce8e340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce8e4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce8e760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce8e8f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce8ea80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce8ec10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce8f590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce8eda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce8d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f07bceb9d50" loc="183:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f07bceb9d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bceb8100"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bceb8290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bceb8420"/>
        <function-ref name="clr" scoped="" ref="0x7f07bceb61b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bceb8740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bceb88d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bceb8a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bceb8bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bceb8d80"/>
        <function-ref name="get" scoped="" ref="0x7f07bceb7020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bceb71b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bceb7340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bceb74d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bceb7760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bceb78f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bceb7a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bceb7c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bceb85b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bceb7da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bceb6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f07bcf10710" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f07bcf10710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf10a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf10c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf10db0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf0ea80"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf0f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf0f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf0f4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf0f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf0f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf0f980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf0fb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf0fca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf0fe30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf0e120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf0e2b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf0e440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf0e5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf0f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf0e760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf0e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f07bcef68a0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f07bcef68a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcef6c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcef6db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcef5020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcef4c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcef5340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcef54d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcef5660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcef57f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcef5980"/>
        <function-ref name="get" scoped="" ref="0x7f07bcef5b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcef5ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcef5e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcef4020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcef42b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcef4440"/>
        <function-ref name="set" scoped="" ref="0x7f07bcef45d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcef4760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcef51b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcef48f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcef4a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f07bcedd8a0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f07bcedd8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bceddc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcedddb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcedc020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcedbc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcedc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcedc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcedc660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcedc7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcedc980"/>
        <function-ref name="get" scoped="" ref="0x7f07bcedcb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcedcca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcedce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcedb020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcedb2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcedb440"/>
        <function-ref name="set" scoped="" ref="0x7f07bcedb5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcedb760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcedc1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcedb8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcedba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f07bcec88a0" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f07bcec88a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcec8c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcec8db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcec7020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcec6c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcec7340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcec74d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcec7660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcec77f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcec7980"/>
        <function-ref name="get" scoped="" ref="0x7f07bcec7b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcec7ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcec7e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcec6020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcec62b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcec6440"/>
        <function-ref name="set" scoped="" ref="0x7f07bcec65d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcec6760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcec71b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcec68f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcec6a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f07bceb4d50" loc="185:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f07bceb4d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bceb3100"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bceb3290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bceb3420"/>
        <function-ref name="clr" scoped="" ref="0x7f07bceb11b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bceb3740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bceb38d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bceb3a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bceb3bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bceb3d80"/>
        <function-ref name="get" scoped="" ref="0x7f07bceb2020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bceb21b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bceb2340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bceb24d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bceb2760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bceb28f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bceb2a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bceb2c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bceb35b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bceb2da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bceb1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f07bcea0d40" loc="195:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f07bcea0d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce9f0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce9f270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce9f400"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce9d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce9f720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce9f8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce9fa40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce9fbd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce9fd60"/>
        <function-ref name="get" scoped="" ref="0x7f07bce9e020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce9e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce9e340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce9e4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce9e760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce9e8f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce9ea80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce9ec10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce9f590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce9eda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce9d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f07bce81d50" loc="211:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f07bce81d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce80100"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce80290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce80420"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce7e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce80740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce808d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce80a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce80bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce80d80"/>
        <function-ref name="get" scoped="" ref="0x7f07bce7f020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce7f1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce7f340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce7f4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce7f760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce7f8f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce7fa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce7fc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce805b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce7fda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce7e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f07bcf27d50" loc="57:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f07bcf27d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf26100"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf26290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf26420"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf241b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf26740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf268d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf26a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf26bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf26d80"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf25020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf251b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf25340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf254d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf25760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf258f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf25a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf25c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf265b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf25da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf24020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f07bceb1580" loc="186:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f07bceb1580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bceb1900"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bceb1a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bceb1c20"/>
        <function-ref name="clr" scoped="" ref="0x7f07bceaf980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bceb0020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bceb01b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bceb0340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bceb04d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bceb0660"/>
        <function-ref name="get" scoped="" ref="0x7f07bceb07f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bceb0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bceb0b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bceb0ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bceaf020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bceaf1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bceaf340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bceaf4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bceb1db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bceaf660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bceaf7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f07bcf22d50" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f07bcf22d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf21100"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf21290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf21420"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf1f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf21740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf218d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf21a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf21bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf21d80"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf20020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf201b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf20340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf204d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf20760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf208f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf20a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf20c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf215b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf20da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf1f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f07bcf08e50" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f07bcf08e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf07210"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf073a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf07530"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf05340"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf07850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf079e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf07b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf07d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf06020"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf061b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf06340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf064d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf06660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf068f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf06a80"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf06c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf06da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf076c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf05020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf051b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f07bceee020" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f07bceee020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bceee3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bceee530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bceee6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bceec4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bceee9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bceeeb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bceeed00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bceed020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bceed1b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bceed340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bceed4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bceed660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bceed7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bceeda80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bceedc10"/>
        <function-ref name="set" scoped="" ref="0x7f07bceedda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bceec020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bceee850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bceec1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bceec340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f07bced5020" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f07bced5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bced53a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bced5530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bced56c0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bced34d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bced59e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bced5b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bced5d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bced4020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bced41b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bced4340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bced44d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bced4660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bced47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bced4a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bced4c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bced4da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bced3020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bced5850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bced31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bced3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f07bcec0020" loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f07bcec0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcec03a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcec0530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcec06c0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcebe4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcec09e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcec0b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcec0d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcebf020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcebf1b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcebf340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcebf4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcebf660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcebf7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcebfa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcebfc10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcebfda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcebe020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcec0850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcebe1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcebe340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f07bcf33580" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f07bcf33580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf33900"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf33a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf33c20"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf31980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf32020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf321b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf32340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf324d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf32660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf327f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf32980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf32b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf32ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf31020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf311b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf31340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf314d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf33db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf31660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf317f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f07bcf1a580" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f07bcf1a580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf1aa00"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf1ab90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf1ad20"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf18a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf191b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf19340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf194d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf19660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf197f0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf19980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf19b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf19ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf19e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf18120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf182b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf18440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf185d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf19020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf18760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf188f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f07bcf00710" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f07bcf00710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf00a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf00c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf00db0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcefea80"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bceff1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bceff340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bceff4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bceff660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bceff7f0"/>
        <function-ref name="get" scoped="" ref="0x7f07bceff980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bceffb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bceffca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bceffe30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcefe120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcefe2b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcefe440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcefe5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bceff020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcefe760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcefe8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f07bcebb580" loc="182:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f07bcebb580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcebb900"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcebba90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcebbc20"/>
        <function-ref name="clr" scoped="" ref="0x7f07bceb9980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bceba020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bceba1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bceba340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bceba4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bceba660"/>
        <function-ref name="get" scoped="" ref="0x7f07bceba7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bceba980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcebab10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcebaca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bceb9020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bceb91b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bceb9340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bceb94d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcebbdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bceb9660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bceb97f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f07bce98570" loc="198:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f07bce98570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce988f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce98a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce98c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce96980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce97020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce971b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce97340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce974d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce97660"/>
        <function-ref name="get" scoped="" ref="0x7f07bce977f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce97980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce97b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce97ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce96020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce961b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce96340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce964d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce98da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce96660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce967f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f07bce83570" loc="209:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f07bce83570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce838f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce83a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce83c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce81980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce82020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce821b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce82340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce824d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce82660"/>
        <function-ref name="get" scoped="" ref="0x7f07bce827f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce82980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce82b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce82ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce81020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce811b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce81340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce814d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce83da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce81660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce817f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f07bcea7580" loc="191:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f07bcea7580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcea7900"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcea7a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcea7c20"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcea5980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcea6020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcea61b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcea6340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcea64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcea6660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcea67f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcea6980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcea6b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcea6ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcea5020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcea51b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcea5340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcea54d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcea7db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcea5660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcea57f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f07bcefb710" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f07bcefb710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcefbc90"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcefbe20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcefa020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcef9c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcefa340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcefa4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcefa660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcefa7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcefa980"/>
        <function-ref name="get" scoped="" ref="0x7f07bcefab10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcefaca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcefae30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcef9020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcef92b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcef9440"/>
        <function-ref name="set" scoped="" ref="0x7f07bcef95d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcef9760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcefa1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcef98f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcef9a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f07bcee28a0" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f07bcee28a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcee2c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcee2db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcee1020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcee0c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcee1340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcee14d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcee1660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcee17f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcee1980"/>
        <function-ref name="get" scoped="" ref="0x7f07bcee1b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcee1ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcee1e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcee0020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcee02b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcee0440"/>
        <function-ref name="set" scoped="" ref="0x7f07bcee05d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcee0760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcee11b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcee08f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcee0a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f07bcecd8a0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f07bcecd8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcecdc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcecddb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcecc020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcecbc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcecc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcecc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcecc660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcecc7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcecc980"/>
        <function-ref name="get" scoped="" ref="0x7f07bceccb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bceccca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcecce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcecb020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcecb2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcecb440"/>
        <function-ref name="set" scoped="" ref="0x7f07bcecb5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcecb760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcecc1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcecb8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcecba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f07bce96d40" loc="199:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f07bce96d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce940e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce94270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce94400"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce921b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce94720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce948b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce94a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce94bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce94d60"/>
        <function-ref name="get" scoped="" ref="0x7f07bce93020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce931b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce93340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce934d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce93760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce938f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce93a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce93c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce94590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce93da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce92020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f07bceafd40" loc="188:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f07bceafd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bceae0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bceae270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bceae400"/>
        <function-ref name="clr" scoped="" ref="0x7f07bceac1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bceae720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bceae8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bceaea40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bceaebd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bceaed60"/>
        <function-ref name="get" scoped="" ref="0x7f07bcead020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcead1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcead340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcead4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcead760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcead8f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bceada80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bceadc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bceae590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bceadda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bceac020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f07bcf2cd50" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f07bcf2cd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf2b100"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf2b290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf2b420"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf291b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf2b740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf2b8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf2ba60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf2bbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf2bd80"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf2a020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf2a1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf2a340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf2a4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf2a760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf2a8f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf2aa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf2ac10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf2b5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf2ada0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf29020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f07bcf13e50" loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f07bcf13e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf12210"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf123a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf12530"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf10340"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf12850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf129e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf12b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf12d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf11020"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf111b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf11340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf114d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf11660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf118f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf11a80"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf11c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf11da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf126c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf10020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf101b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f07bced38a0" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f07bced38a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bced3c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bced3db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bced2020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bced1c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bced2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bced24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bced2660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bced27f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bced2980"/>
        <function-ref name="get" scoped="" ref="0x7f07bced2b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bced2ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bced2e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bced1020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bced12b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bced1440"/>
        <function-ref name="set" scoped="" ref="0x7f07bced15d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bced1760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bced21b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bced18f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bced1a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f07bcf0ee50" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f07bcf0ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf0d210"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf0d3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf0d530"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf0b340"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf0d850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf0d9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf0db70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf0dd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf0c020"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf0c1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf0c340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf0c4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf0c660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf0c8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf0ca80"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf0cc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf0cda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf0d6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf0b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf0b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f07bcef3020" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f07bcef3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcef33a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcef3530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcef36c0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcef14d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcef39e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcef3b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcef3d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcef2020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcef21b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcef2340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcef24d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcef2660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcef27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcef2a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcef2c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcef2da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcef1020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcef3850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcef11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcef1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f07bceda020" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f07bceda020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bceda3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bceda530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bceda6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bced84d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bceda9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcedab70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcedad00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bced9020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bced91b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bced9340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bced94d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bced9660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bced97f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bced9a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bced9c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bced9da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bced8020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bceda850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bced81b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bced8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f07bcec5020" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f07bcec5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcec53a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcec5530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcec56c0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcec34d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcec59e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcec5b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcec5d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcec4020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcec41b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcec4340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcec44d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcec4660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcec47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcec4a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcec4c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcec4da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcec3020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcec5850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcec31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcec3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f07bceaad50" loc="190:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f07bceaad50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcea9100"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcea9290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcea9420"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcea71b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcea9740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcea98d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcea9a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcea9bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcea9d80"/>
        <function-ref name="get" scoped="" ref="0x7f07bcea8020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcea81b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcea8340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcea84d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcea8760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcea88f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcea8a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcea8c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcea95b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcea8da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcea7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f07bcf36530" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f07bcf36530"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf368b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf36a40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf36bd0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf44980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf45020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf451b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf45340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf454d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf45660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf457f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf45980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf45b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf45ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf44020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf441b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf44340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf444d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf36d60"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf44660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf447f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f07bcf1f580" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f07bcf1f580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf1f900"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf1fa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf1fc20"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf1d980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf1e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf1e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf1e340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf1e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf1e660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf1e7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf1e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf1eb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf1eca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf1d020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf1d1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf1d340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf1d4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf1fdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf1d660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf1d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f07bcf05710" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f07bcf05710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf05a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf05c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf05db0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf03a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf041b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf04340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf044d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf04660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf047f0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf04980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf04b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf04ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf04e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf03120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf032b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf03440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf035d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf04020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf03760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf038f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f07bceec8a0" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f07bceec8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bceecc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bceecdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bceeb020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bceeac10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bceeb340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bceeb4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bceeb660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bceeb7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bceeb980"/>
        <function-ref name="get" scoped="" ref="0x7f07bceebb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bceebca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bceebe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bceea020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bceea2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bceea440"/>
        <function-ref name="set" scoped="" ref="0x7f07bceea5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bceea760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bceeb1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bceea8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bceeaa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f07bcea5d50" loc="192:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f07bcea5d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcea4100"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcea4290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcea4420"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcea21b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcea4740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcea48d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcea4a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcea4bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcea4d80"/>
        <function-ref name="get" scoped="" ref="0x7f07bcea3020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcea31b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcea3340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcea34d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcea3760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcea38f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcea3a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcea3c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcea45b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcea3da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcea2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f07bce9d570" loc="196:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f07bce9d570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce9d8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce9da80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce9dc10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce9b980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce9c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce9c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce9c340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce9c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce9c660"/>
        <function-ref name="get" scoped="" ref="0x7f07bce9c7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce9c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce9cb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce9cca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce9b020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce9b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce9b340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce9b4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce9dda0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce9b660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce9b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f07bce8d570" loc="202:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f07bce8d570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce8d8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce8da80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce8dc10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce8b980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce8c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce8c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce8c340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce8c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce8c660"/>
        <function-ref name="get" scoped="" ref="0x7f07bce8c7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce8c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce8cb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce8cca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce8b020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce8b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce8b340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce8b4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce8dda0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce8b660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce8b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f07bcee78a0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f07bcee78a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcee7c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcee7db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcee6020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcee5c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcee6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcee64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcee6660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcee67f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcee6980"/>
        <function-ref name="get" scoped="" ref="0x7f07bcee6b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcee6ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcee6e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcee5020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcee52b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcee5440"/>
        <function-ref name="set" scoped="" ref="0x7f07bcee55d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcee5760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcee61b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcee58f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcee5a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f07bcea2580" loc="193:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f07bcea2580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcea2900"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcea2a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcea2c20"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcea0980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcea1020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcea11b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcea1340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcea14d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcea1660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcea17f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcea1980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcea1b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcea1ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcea0020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcea01b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcea0340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcea04d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcea2db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcea0660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcea07f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f07bcf31d50" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f07bcf31d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf30100"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf30290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf30420"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf2e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf30740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf308d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf30a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf30bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf30d80"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf2f020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf2f1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf2f340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf2f4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf2f760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf2f8f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf2fa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf2fc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf305b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf2fda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf2e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f07bcf18e50" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f07bcf18e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf17210"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf173a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf17530"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf15340"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf17850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf179e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf17b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf17d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf16020"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf161b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf16340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf164d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf16660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf168f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf16a80"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf16c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf16da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf176c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf15020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf151b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f07bcefee50" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f07bcefee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcefd210"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcefd3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcefd530"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcefb340"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcefd850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcefd9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcefdb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcefdd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcefc020"/>
        <function-ref name="get" scoped="" ref="0x7f07bcefc1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcefc340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcefc4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcefc660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcefc8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcefca80"/>
        <function-ref name="set" scoped="" ref="0x7f07bcefcc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcefcda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcefd6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcefb020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcefb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f07bceac580" loc="189:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f07bceac580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bceac900"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bceaca90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bceacc20"/>
        <function-ref name="clr" scoped="" ref="0x7f07bceaa980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bceab020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bceab1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bceab340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bceab4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bceab660"/>
        <function-ref name="get" scoped="" ref="0x7f07bceab7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bceab980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bceabb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bceabca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bceaa020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bceaa1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bceaa340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bceaa4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bceacdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bceaa660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bceaa7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f07bce92570" loc="200:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f07bce92570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce928f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce92a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce92c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce90980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce91020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce911b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce91340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce914d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce91660"/>
        <function-ref name="get" scoped="" ref="0x7f07bce917f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce91980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce91b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce91ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce90020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce901b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce90340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce904d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce92da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce90660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce907f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f07bcef8020" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f07bcef8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcef83a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcef8530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcef86c0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcef64d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcef89e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcef8b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcef8d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcef7020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcef71b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcef7340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcef74d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcef7660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcef77f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcef7a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcef7c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcef7da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcef6020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcef8850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcef61b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcef6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f07bcedf020" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f07bcedf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcedf3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcedf530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcedf6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcedd4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcedf9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcedfb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcedfd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcede020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcede1b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcede340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcede4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcede660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcede7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcedea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcedec10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcededa0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcedd020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcedf850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcedd1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcedd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f07bceca020" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f07bceca020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bceca3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bceca530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bceca6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcec84d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bceca9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcecab70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcecad00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcec9020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcec91b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcec9340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcec94d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcec9660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcec97f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcec9a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcec9c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcec9da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcec8020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bceca850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcec81b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcec8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f07bcf29580" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f07bcf29580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf29900"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf29a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf29c20"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf27980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf28020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf281b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf28340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf284d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf28660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf287f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf28980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf28b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf28ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf27020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf271b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf27340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf274d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf29db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf27660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf277f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f07bcecf020" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f07bcecf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcecf3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcecf530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcecf6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcecd4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcecf9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcecfb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcecfd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcece020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcece1b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcece340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcece4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcece660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcece7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcecea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcecec10"/>
        <function-ref name="set" scoped="" ref="0x7f07bceceda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcecd020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcecf850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcecd1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcecd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f07bcf24580" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f07bcf24580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf24900"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf24a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf24c20"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf22980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf23020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf231b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf23340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf234d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf23660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf237f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf23980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf23b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf23ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf22020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf221b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf22340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf224d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf24db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf22660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf227f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f07bcf0b710" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f07bcf0b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf0ba90"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf0bc20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf0bdb0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf08a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf091b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf09340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf094d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf09660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf097f0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf09980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf09b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf09ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf09e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf08120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf082b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf08440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf085d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf09020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf08760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf088f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f07bcef18a0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f07bcef18a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcef1c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcef1db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcef0020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bceefc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcef0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcef04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcef0660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcef07f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcef0980"/>
        <function-ref name="get" scoped="" ref="0x7f07bcef0b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcef0ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcef0e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bceef020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bceef2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bceef440"/>
        <function-ref name="set" scoped="" ref="0x7f07bceef5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bceef760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcef01b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bceef8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bceefa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f07bced88a0" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f07bced88a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bced8c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bced8db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bced7020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bced6c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bced7340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bced74d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bced7660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bced77f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bced7980"/>
        <function-ref name="get" scoped="" ref="0x7f07bced7b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bced7ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bced7e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bced6020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bced62b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bced6440"/>
        <function-ref name="set" scoped="" ref="0x7f07bced65d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bced6760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bced71b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bced68f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bced6a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f07bcec38a0" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f07bcec38a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcec3c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcec3db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcec2020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcec1c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcec2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcec24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcec2660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcec27f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcec2980"/>
        <function-ref name="get" scoped="" ref="0x7f07bcec2b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcec2ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcec2e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcec1020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcec12b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcec1440"/>
        <function-ref name="set" scoped="" ref="0x7f07bcec15d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcec1760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcec21b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcec18f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcec1a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f07bcf44d50" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f07bcf44d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf35100"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf35290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf35420"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf331b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf35740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf358d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf35a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf35bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf35d80"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf34020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf341b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf34340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf344d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf34760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf348f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf34a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf34c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf355b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf34da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf33020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f07bcf1dd50" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f07bcf1dd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf1c100"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf1c290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf1c420"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf1a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf1c740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf1c8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf1ca60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf1cbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf1cd80"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf1b020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf1b1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf1b340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf1b4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf1b760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf1b8f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf1ba80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf1bc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf1c5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf1bda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf1a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f07bcf03e50" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f07bcf03e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcf02210"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcf023a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcf02530"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcf00340"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcf02850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcf029e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcf02b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcf02d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcf01020"/>
        <function-ref name="get" scoped="" ref="0x7f07bcf011b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcf01340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcf014d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcf01660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcf018f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcf01a80"/>
        <function-ref name="set" scoped="" ref="0x7f07bcf01c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcf01da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcf026c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcf00020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcf001b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f07bcee9020" loc="90:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f07bcee9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcee93a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcee9530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcee96c0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcee74d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcee99e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcee9b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcee9d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcee8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcee81b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcee8340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcee84d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcee8660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcee87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcee8a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcee8c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcee8da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcee7020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcee9850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcee71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcee7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f07bce9bd40" loc="197:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f07bce9bd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce9a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce9a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce9a400"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce981b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce9a720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce9a8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce9aa40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce9abd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce9ad60"/>
        <function-ref name="get" scoped="" ref="0x7f07bce99020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce991b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce99340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce994d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce99760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce998f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce99a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce99c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce9a590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce99da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce98020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f07bce88560" loc="206:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f07bce88560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce888e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce88a70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce88c00"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce86980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce87020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce871b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce87340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce874d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce87660"/>
        <function-ref name="get" scoped="" ref="0x7f07bce877f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce87980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce87b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce87ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce86020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce861b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce86340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce864d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce88d90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce86660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce867f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f07bceb6580" loc="184:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f07bceb6580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bceb6900"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bceb6a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bceb6c20"/>
        <function-ref name="clr" scoped="" ref="0x7f07bceb4980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bceb5020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bceb51b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bceb5340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bceb54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bceb5660"/>
        <function-ref name="get" scoped="" ref="0x7f07bceb57f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bceb5980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bceb5b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bceb5ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bceb4020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bceb41b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bceb4340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bceb44d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bceb6db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bceb4660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bceb47f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f07bcee4020" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f07bcee4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcee43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcee4530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcee46c0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcee24d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcee49e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcee4b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcee4d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcee3020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcee31b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcee3340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcee34d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcee3660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcee37f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcee3a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcee3c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcee3da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcee2020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcee4850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcee21b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcee2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f07bce86d40" loc="208:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f07bce86d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce850e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce85270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce85400"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce831b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce85720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce858b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce85a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce85bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce85d60"/>
        <function-ref name="get" scoped="" ref="0x7f07bce84020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce841b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce84340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce844d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce84760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce848f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce84a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce84c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce85590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce84da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce83020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f07bce7e580" loc="212:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f07bce7e580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce7e900"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce7ea90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce7ec20"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce7c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce7d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce7d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce7d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce7d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce7d660"/>
        <function-ref name="get" scoped="" ref="0x7f07bce7d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce7d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce7db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce7dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce7c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce7c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce7c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce7c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce7edb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce7c660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce7c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f07bcebe8f0" loc="181:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f07bcebe8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcebd0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcebd230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcebd3c0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcebb1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcebd6e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcebd870"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcebda00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcebdb90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcebdd20"/>
        <function-ref name="get" scoped="" ref="0x7f07bcebc020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcebc1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcebc340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcebc4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcebc760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcebc8f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcebca80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcebcc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcebd550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcebcda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcebb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce79d10" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce79d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce4a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce4a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce4a400"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce481b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce4a720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce4a8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce4aa40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce4abd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce4ad60"/>
        <function-ref name="get" scoped="" ref="0x7f07bce49020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce491b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce49340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce494d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce49760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce498f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce49a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce49c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce49da0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce4a590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce48020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce45260" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce45260"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce455e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce45770"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce45900"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce43660"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce45c20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce45db0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce44020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce441b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce44340"/>
        <function-ref name="get" scoped="" ref="0x7f07bce444d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce44660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce447f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce44980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce44c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce44da0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce43020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce431b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce43340"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce45a90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce434d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce40740" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce40740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce40ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce40c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce40de0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce3ea80"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce3f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce3f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce3f4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce3f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce3f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f07bce3f980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce3fb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce3fca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce3fe30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce3e120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce3e2b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce3e440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce3e5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce3e760"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce3f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce3e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce3bb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce3bb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce3a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce3a1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce3a340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce38020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce3a660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce3a7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce3a980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce3ab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce3aca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bce3ae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce39020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce391b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce39340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce395d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce39760"/>
        <function-ref name="set" scoped="" ref="0x7f07bce398f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce39a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce39c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce3a4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce39da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce35060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce35060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce353e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce35570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce35700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce324d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce35a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce35bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce35d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce33020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce331b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bce33340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce334d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce33660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce337f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce33a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce33c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bce33da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce32020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce321b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce35890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce32340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce2f540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce2f540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce2f8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce2fa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce2fbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce2d980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce2e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce2e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce2e340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce2e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce2e660"/>
        <function-ref name="get" scoped="" ref="0x7f07bce2e7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce2e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce2eb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce2eca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce2d020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce2d1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce2d340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce2d4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce2d660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce2fd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce2d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce2ab90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce2ab90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce29020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce291b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce29340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce27020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce29660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce297f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce29980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce29b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce29ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bce29e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce28020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce281b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce28340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce285d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce28760"/>
        <function-ref name="set" scoped="" ref="0x7f07bce288f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce28a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce28c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce294d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce28da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce24060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce24060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce243e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce24570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce24700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce224d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce24a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce24bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce24d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce23020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce231b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bce23340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce234d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce23660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce237f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce23a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce23c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bce23da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce22020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce221b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce24890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce22340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce1f540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce1f540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce1f8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce1fa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce1fbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce1d980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce1e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce1e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce1e340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce1e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce1e660"/>
        <function-ref name="get" scoped="" ref="0x7f07bce1e7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce1e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce1eb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce1eca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce1d020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce1d1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce1d340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce1d4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce1d660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce1fd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce1d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce1ab90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce1ab90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce19020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce191b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce19340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce17020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce19660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce197f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce19980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce19b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce19ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bce19e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce18020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce181b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce18340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce185d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce18760"/>
        <function-ref name="set" scoped="" ref="0x7f07bce188f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce18a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce18c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce194d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce18da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce14060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce14060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce143e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce14570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce14700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce124d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce14a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce14bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce14d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce13020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce131b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bce13340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce134d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce13660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce137f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce13a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce13c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bce13da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce12020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce121b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce14890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce12340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce0f540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce0f540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce0f8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce0fa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce0fbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce0d980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce0e020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce0e1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce0e340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce0e4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce0e660"/>
        <function-ref name="get" scoped="" ref="0x7f07bce0e7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce0e980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce0eb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce0eca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce0d020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce0d1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce0d340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce0d4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce0d660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce0fd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce0d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce0ad10" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce0ad10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce080e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce08270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce08400"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce061b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce08720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce088b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce08a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce08bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce08d60"/>
        <function-ref name="get" scoped="" ref="0x7f07bce07020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce071b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce07340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce074d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce07760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce078f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce07a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce07c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce07da0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce08590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce06020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bce03260" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bce03260"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bce035e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bce03770"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bce03900"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bce01660"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bce03c20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bce03db0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bce02020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bce021b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bce02340"/>
        <function-ref name="get" scoped="" ref="0x7f07bce024d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bce02660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bce027f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bce02980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bce02c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bce02da0"/>
        <function-ref name="set" scoped="" ref="0x7f07bce01020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bce011b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bce01340"/>
        <function-ref name="clr" scoped="" ref="0x7f07bce03a90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bce014d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcdfe740" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcdfe740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcdfeac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcdfec50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdfede0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcdfca80"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcdfd1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcdfd340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcdfd4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcdfd660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcdfd7f0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcdfd980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcdfdb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcdfdca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcdfde30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcdfc120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcdfc2b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcdfc440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcdfc5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcdfc760"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdfd020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcdfc8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcdf9b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcdf9b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcdf8020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcdf81b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdf8340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcdf6020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcdf8660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcdf87f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcdf8980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcdf8b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcdf8ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcdf8e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcdf7020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcdf71b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcdf7340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcdf75d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcdf7760"/>
        <function-ref name="set" scoped="" ref="0x7f07bcdf78f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcdf7a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcdf7c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdf84d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcdf7da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcdf3060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcdf3060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcdf33e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcdf3570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdf3700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcdf14d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcdf3a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcdf3bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcdf3d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcdf2020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcdf21b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcdf2340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcdf24d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcdf2660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcdf27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcdf2a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcdf2c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcdf2da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcdf1020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcdf11b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdf3890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcdf1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcdee540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcdee540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcdee8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcdeea50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdeebe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcdec980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcded020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcded1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcded340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcded4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcded660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcded7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcded980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcdedb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcdedca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcdec020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcdec1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcdec340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcdec4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcdec660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdeed70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcdec7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcde9b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcde9b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcde8020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcde81b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcde8340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcde6020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcde8660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcde87f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcde8980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcde8b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcde8ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcde8e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcde7020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcde71b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcde7340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcde75d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcde7760"/>
        <function-ref name="set" scoped="" ref="0x7f07bcde78f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcde7a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcde7c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcde84d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcde7da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcde3060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcde3060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcde33e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcde3570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcde3700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcde14d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcde3a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcde3bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcde3d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcde2020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcde21b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcde2340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcde24d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcde2660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcde27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcde2a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcde2c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcde2da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcde1020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcde11b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcde3890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcde1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcddd540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcddd540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcddd8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcddda50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdddbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcddb980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcddc020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcddc1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcddc340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcddc4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcddc660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcddc7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcddc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcddcb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcddcca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcddb020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcddb1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcddb340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcddb4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcddb660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdddd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcddb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcdd8b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcdd8b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcdd7020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcdd71b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdd7340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcdd5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcdd7660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcdd77f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcdd7980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcdd7b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcdd7ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcdd7e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcdd6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcdd61b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcdd6340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcdd65d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcdd6760"/>
        <function-ref name="set" scoped="" ref="0x7f07bcdd68f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcdd6a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcdd6c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdd74d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcdd6da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcdd2060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcdd2060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcdd23e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcdd2570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdd2700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcdd04d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcdd2a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcdd2bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcdd2d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcdd1020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcdd11b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcdd1340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcdd14d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcdd1660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcdd17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcdd1a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcdd1c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcdd1da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcdd0020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcdd01b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdd2890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcdd0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcdcd540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcdcd540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcdcd8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcdcda50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdcdbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcdcb980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcdcc020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcdcc1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcdcc340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcdcc4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcdcc660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcdcc7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcdcc980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcdccb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcdccca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcdcb020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcdcb1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcdcb340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcdcb4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcdcb660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdcdd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcdcb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcdc8dc0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcdc8dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcdc7180"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcdc7310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdc74a0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcdc51b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcdc77c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcdc7950"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcdc7ae0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcdc7c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcdc7e00"/>
        <function-ref name="get" scoped="" ref="0x7f07bcdc6020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcdc61b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcdc6340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcdc64d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcdc6760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcdc68f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcdc6a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcdc6c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcdc6da0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdc7630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcdc5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcdc2260" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcdc2260"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcdc25e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcdc2770"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdc2900"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcdc0660"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcdc2c20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcdc2db0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcdc1020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcdc11b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcdc1340"/>
        <function-ref name="get" scoped="" ref="0x7f07bcdc14d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcdc1660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcdc17f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcdc1980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcdc1c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcdc1da0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcdc0020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcdc01b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcdc0340"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdc2a90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcdc04d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcdbd740" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcdbd740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcdbdac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcdbdc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdbdde0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcdbba80"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcdbc1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcdbc340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcdbc4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcdbc660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcdbc7f0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcdbc980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcdbcb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcdbcca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcdbce30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcdbb120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcdbb2b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcdbb440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcdbb5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcdbb760"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdbc020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcdbb8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcdb8b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcdb8b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcdb6020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcdb61b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdb6340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcdb4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcdb6660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcdb67f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcdb6980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcdb6b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcdb6ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcdb6e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcdb5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcdb51b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcdb5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcdb55d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcdb5760"/>
        <function-ref name="set" scoped="" ref="0x7f07bcdb58f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcdb5a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcdb5c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdb64d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcdb5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcdb1060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcdb1060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcdb13e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcdb1570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdb1700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcdaf4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcdb1a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcdb1bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcdb1d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcdb0020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcdb01b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcdb0340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcdb04d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcdb0660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcdb07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcdb0a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcdb0c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcdb0da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcdaf020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcdaf1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdb1890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcdaf340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcdac540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcdac540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcdac8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcdaca50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcdacbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcdaa980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcdab020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcdab1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcdab340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcdab4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcdab660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcdab7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcdab980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcdabb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcdabca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcdaa020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcdaa1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcdaa340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcdaa4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcdaa660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcdacd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcdaa7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcda7b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcda7b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcda6020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcda61b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcda6340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcda4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcda6660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcda67f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcda6980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcda6b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcda6ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcda6e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcda5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcda51b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcda5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcda55d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcda5760"/>
        <function-ref name="set" scoped="" ref="0x7f07bcda58f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcda5a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcda5c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcda64d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcda5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcda1060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcda1060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcda13e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcda1570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcda1700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd9f4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcda1a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcda1bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcda1d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcda0020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcda01b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcda0340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcda04d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcda0660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcda07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcda0a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcda0c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcda0da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd9f020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd9f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcda1890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd9f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd9c540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd9c540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd9c8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd9ca50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd9cbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd9a980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd9b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd9b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd9b340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd9b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd9b660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd9b7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd9b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd9bb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd9bca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd9a020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd9a1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd9a340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd9a4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd9a660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd9cd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd9a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd97b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd97b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd96020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd961b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd96340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd94020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd96660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd967f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd96980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd96b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd96ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd96e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd95020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd951b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd95340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd955d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd95760"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd958f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd95a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd95c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd964d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd95da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd91060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd91060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd913e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd91570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd91700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd8f4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd91a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd91bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd91d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd90020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd901b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd90340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd904d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd90660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd907f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd90a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd90c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd90da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd8f020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd8f1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd91890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd8f340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd8c540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd8c540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd8c8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd8ca50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd8cbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd89980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd8a020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd8a1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd8a340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd8a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd8a660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd8a7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd8a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd8ab10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd8aca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd89020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd891b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd89340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd894d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd89660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd8cd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd897f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd86b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd86b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd85020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd851b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd85340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd83020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd85660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd857f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd85980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd85b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd85ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd85e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd84020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd841b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd84340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd845d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd84760"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd848f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd84a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd84c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd854d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd84da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd80060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd80060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd803e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd80570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd80700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd7e4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd80a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd80bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd80d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd7f020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd7f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd7f340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd7f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd7f660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd7f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd7fa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd7fc10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd7fda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd7e020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd7e1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd80890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd7e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd7b540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd7b540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd7b8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd7ba50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd7bbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd79980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd7a020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd7a1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd7a340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd7a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd7a660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd7a7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd7a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd7ab10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd7aca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd79020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd791b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd79340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd794d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd79660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd7bd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd797f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd76b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd76b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd75020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd751b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd75340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd73020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd75660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd757f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd75980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd75b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd75ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd75e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd74020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd741b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd74340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd745d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd74760"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd748f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd74a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd74c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd754d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd74da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd70060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd70060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd703e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd70570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd70700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd6e4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd70a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd70bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd70d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd6f020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd6f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd6f340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd6f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd6f660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd6f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd6fa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd6fc10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd6fda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd6e020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd6e1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd70890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd6e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd6b540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd6b540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd6b8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd6ba50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd6bbe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd69980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd6a020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd6a1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd6a340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd6a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd6a660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd6a7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd6a980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd6ab10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd6aca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd69020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd691b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd69340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd694d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd69660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd6bd70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd697f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd66b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd66b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd65020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd651b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd65340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd63020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd65660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd657f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd65980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd65b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd65ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd65e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd64020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd641b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd64340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd645d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd64760"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd648f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd64a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd64c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd654d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd64da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd5f060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd5f060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd5f3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd5f570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd5f700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd5d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd5fa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd5fbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd5fd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd5e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd5e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd5e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd5e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd5e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd5e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd5ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd5ec10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd5eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd5d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd5d1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd5f890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd5d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd5a540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd5a540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd5a8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd5aa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd5abe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd58980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd59020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd591b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd59340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd594d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd59660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd597f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd59980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd59b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd59ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd58020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd581b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd58340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd584d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd58660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd5ad70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd587f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd55b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd55b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd54020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd541b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd54340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd52020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd54660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd547f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd54980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd54b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd54ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd54e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd53020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd531b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd53340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd535d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd53760"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd538f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd53a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd53c10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd544d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd53da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd4f060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd4f060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd4f3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd4f570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd4f700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd4d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd4fa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd4fbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd4fd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd4e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd4e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd4e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd4e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd4e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd4e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd4ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd4ec10"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd4eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd4d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd4d1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd4f890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd4d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f07bcd4a540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f07bcd4a540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcd4a8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcd4aa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bcd4abe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bcd48980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bcd49020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcd491b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bcd49340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bcd494d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bcd49660"/>
        <function-ref name="get" scoped="" ref="0x7f07bcd497f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bcd49980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bcd49b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bcd49ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bcd48020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bcd481b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcd48340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bcd484d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bcd48660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bcd4ad70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bcd487f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f07bccba610" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bccba610"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bccba990"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bccbab20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bccbacb0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bccb8980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bccb9020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bccb91b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bccb9340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bccb94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bccb9660"/>
        <function-ref name="get" scoped="" ref="0x7f07bccb97f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bccb9980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bccb9b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bccb9ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bccb8020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bccb81b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bccb8340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bccb84d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bccb8660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bccbae40"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bccb87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f07bcccc480" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f07bcccc480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bcccc800"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bcccc990"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bccccb20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bcccccb0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcccce40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bccba020"/>
        <function-ref name="set" scoped="" ref="0x7f07bccba1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bccba340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f07bccb5de0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bccb5de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bccb3180"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bccb3310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bccb34a0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bccb11b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bccb37c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bccb3950"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bccb3ae0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bccb3c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bccb3e00"/>
        <function-ref name="get" scoped="" ref="0x7f07bccb2020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bccb21b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bccb2340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bccb24d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bccb2760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bccb28f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bccb2a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bccb2c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bccb2da0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bccb3630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bccb1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f07bccb6b20" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f07bccb6b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bccb5020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bccb51b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bccb5340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bccb54d0"/>
        <function-ref name="get" scoped="" ref="0x7f07bccb5660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bccb57f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bccb5980"/>
        <function-ref name="clr" scoped="" ref="0x7f07bccb5b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f07bccae480" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bccae480"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bccae800"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bccae990"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bccaeb20"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bccac7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bccaee40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bccad020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bccad1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bccad340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bccad4d0"/>
        <function-ref name="get" scoped="" ref="0x7f07bccad660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bccad7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bccad980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bccadb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bccadda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bccac020"/>
        <function-ref name="set" scoped="" ref="0x7f07bccac1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bccac340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bccac4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bccaecb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bccac660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f07bccaf1b0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f07bccaf1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bccaf530"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bccaf6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bccaf850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bccaf9e0"/>
        <function-ref name="get" scoped="" ref="0x7f07bccafb70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bccafd00"/>
        <function-ref name="set" scoped="" ref="0x7f07bccae020"/>
        <function-ref name="clr" scoped="" ref="0x7f07bccae1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMControl" ref="0x7f07bcc0ca50" loc="17:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMControl" scoped="" ref="0x7f07bcc0ca50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f07bcc0cdd0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f07bcc1d020"/>
        <function-ref name="start" scoped="" ref="0x7f07bcc1d1b0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bcc1d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f07bcca1cd0" loc="9:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f07bcca1cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f07bcc9e0a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerTramaTDMA" ref="0x7f07bcc91840" loc="11:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerTramaTDMA" scoped="" ref="0x7f07bcc91840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bcc90cf0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcc9b300"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f07bcc900d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f07bcc9bc00"/>
        <function-ref name="getdt" scoped="" ref="0x7f07bcc8e660"/>
        <function-ref name="gett0" scoped="" ref="0x7f07bcc8e1e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bcc9b780"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f07bcc9c480"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f07bcc906e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f07bcc9c950"/>
        <function-ref name="stop" scoped="" ref="0x7f07bcc9ce20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f07bcc2f910" loc="13:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f07bcc2f910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcc2fc90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f07bcc2fe20"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bcc87020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bcc871b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f07bcc87340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f07bcc148f0" loc="15:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f07bcc148f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bcc14c70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bcc14e00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bcc1e020"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bcc1e1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bcc1e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7f07bcc0f180" loc="16:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f07bcc0f180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bcc0f500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f07bcc9e360" loc="10:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f07bcc9e360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f07bcc9e6e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f07bcc9e870"/>
        <function-ref name="led1On" scoped="" ref="0x7f07bcc9ea00"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f07bcc9eb90"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f07bcc9ed20"/>
        <function-ref name="get" scoped="" ref="0x7f07bcc9d020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f07bcc9d1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f07bcc9d7f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bcc9d340"/>
        <function-ref name="led0On" scoped="" ref="0x7f07bcc9d4d0"/>
        <function-ref name="led2On" scoped="" ref="0x7f07bcc9d660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerLeds" ref="0x7f07bcc8ecd0" loc="12:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerLeds" scoped="" ref="0x7f07bcc8ecd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bcc89220"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcc8c7c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f07bcc8b590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f07bcc8b110"/>
        <function-ref name="getdt" scoped="" ref="0x7f07bcc89b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f07bcc896a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bcc8cc40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f07bcc8d940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f07bcc8bba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f07bcc8de10"/>
        <function-ref name="stop" scoped="" ref="0x7f07bcc8c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f07bcc1f8d0" loc="14:MasterC.nc">
      <component-ref qname="MasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f07bcc1f8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f07bcc1fc50"/>
        <function-ref name="source" scoped="" ref="0x7f07bcc1fde0"/>
        <function-ref name="address" scoped="" ref="0x7f07bcc86020"/>
        <function-ref name="destination" scoped="" ref="0x7f07bcc861b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f07bcc86340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f07bcc864d0"/>
        <function-ref name="type" scoped="" ref="0x7f07bcc86660"/>
        <function-ref name="setType" scoped="" ref="0x7f07bcc867f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f07bcc86980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f07bcc86b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f07bcc86ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f07bcbe7980" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="MasterAppC.TimerTramaTDMA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bcbe7980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bc8bbe80"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc8bc4a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f07bc8bb260"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f07bc8bcda0"/>
        <function-ref name="getdt" scoped="" ref="0x7f07bc8ba7a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f07bc8ba320"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bc8bc920"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f07bc8be5a0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f07bc8bb870"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f07bc8bea70"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc8bc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f07bcbde050" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f07bcbde050"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bcbda630"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcbddac0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f07bcbdb920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f07bcbdb4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f07bcbd9020"/>
        <function-ref name="gett0" scoped="" ref="0x7f07bcbdaab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bcbdb020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f07bcbdec40"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f07bcbda020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f07bcbdd170"/>
        <function-ref name="stop" scoped="" ref="0x7f07bcbdd640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f07bcbd5c30" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f07bcbd5c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bcbd0110"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcbd36a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f07bcbd24a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f07bcbd2020"/>
        <function-ref name="getdt" scoped="" ref="0x7f07bcbd0a10"/>
        <function-ref name="gett0" scoped="" ref="0x7f07bcbd0590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bcbd3b20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f07bcbd4860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f07bcbd2ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f07bcbd4d30"/>
        <function-ref name="stop" scoped="" ref="0x7f07bcbd3220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f07bcbca500" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f07bcbca500"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bcbce170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bcbd9e50" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bcbd9e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bcbd5210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f07bc98d870" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f07bc98d870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bc98a090"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc98b090"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bc98ba10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bc98b550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bc98a550"/>
        <function-ref name="start" scoped="" ref="0x7f07bc98c6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc98cbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bc98d020" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bc98d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bc98d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f07bb71f2a0" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f07bb71f2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bb71db30"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb71eaa0"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bb71d4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bb71d020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bb71c020"/>
        <function-ref name="start" scoped="" ref="0x7f07bb71e0d0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bb71e5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bb720a10" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bb720a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bb720d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f07bb707a80" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bb707a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bb707e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bb706020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bb7061b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bb706340"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb7064d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f07bb709020" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bb709020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bb7093a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bb709530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bb7096c0"/>
        <function-ref name="get" scoped="" ref="0x7f07bb709850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bb7099e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bb709b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bb709d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bb708020"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bb7081b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bb708340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bb7084d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f07bb708760" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bb708760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bb708ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bb708c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bb708e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bb707020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bb7071b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bb707340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bb7074d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bb707660"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bb7077f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f07bcb951d0" loc="52:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bcb951d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb95550"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcb956e0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcb95870"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcb95a00"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcb95b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f07bcb9ab00" loc="50:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bcb9ab00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcb9ae80"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bcb99030"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb991c0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcb99350"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb994e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb99670"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bcb99800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb99990"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bcb99b20"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bcb99cb0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bcb99e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f07bcb98720" loc="51:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bcb98720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcb98aa0"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcb98c30"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb98dc0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcb97020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcb971b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb97340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcb974d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcb97660"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcb977f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f07bcb85730" loc="56:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f07bcb85730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcb85ab0"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcb85c40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb85dd0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcb84020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcb841b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb84340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcb844d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcb84660"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcb847f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f07bcb7f280" loc="61:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f07bcb7f280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcb7f600"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcb7f790"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb7f920"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcb7fab0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcb7fc40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb7fdd0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcb7e020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcb7e1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcb7e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f07bcb86700" loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f07bcb86700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb86a80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcb86c10"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcb86da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb85020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb851b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcb85340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f07bcb73020" loc="73:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f07bcb73020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb733a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcb73530"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcb736c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb73850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb739e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcb73b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f07bcb8c890" loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f07bcb8c890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb8cc10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcb8cda0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcb86020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcb861b0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcb86340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f07bcb74160" loc="72:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f07bcb74160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb744e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcb74670"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcb74800"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcb74990"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcb74b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f07bcb6aae0" loc="82:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f07bcb6aae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb6ae60"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcb69020"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcb691b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb69340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb694d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcb69660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f07bcb72020" loc="74:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f07bcb72020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcb723a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcb72530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb726c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcb72850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcb729e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb72b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcb72d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcb71020"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcb711b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f07bcb900c0" loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f07bcb900c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcb90440"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcb905d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb90760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcb908f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcb90a80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb90c10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcb90da0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcb8f020"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcb8f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f07bcb7aa20" loc="66:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f07bcb7aa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb7ada0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcb79020"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcb791b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb79340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb794d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcb79660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f07bcb7bbb0" loc="65:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f07bcb7bbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb7a020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcb7a1b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcb7a340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcb7a4d0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcb7a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f07bcb7c730" loc="64:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f07bcb7c730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcb7cab0"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcb7cc40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb7cdd0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcb7b020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcb7b1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb7b340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcb7b4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcb7b660"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcb7b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f07bcb83a20" loc="58:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f07bcb83a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb83da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcb82020"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcb821b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb82340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb824d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcb82660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f07bcb70570" loc="76:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f07bcb70570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb708f0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcb70a80"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcb70c10"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb70da0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb6f020"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcb6f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f07bcb79a50" loc="67:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f07bcb79a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcb79dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcb78020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb781b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcb78340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcb784d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb78660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcb787f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcb78980"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcb78b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f07bcb84bb0" loc="57:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f07bcb84bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb83020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcb831b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcb83340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcb834d0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcb83660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f07bcb94830" loc="49:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f07bcb94830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcb94bb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bcb94d40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb91020"/>
        <function-ref name="get" scoped="" ref="0x7f07bcb911b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb91340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb914d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bcb91660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb917f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bcb91980"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bcb91b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bcb91ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f07bcb71570" loc="75:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f07bcb71570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb71af0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcb71c80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcb71e10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcb70020"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcb701b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f07bcb8d410" loc="53:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f07bcb8d410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcb8d790"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcb8d920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb8dab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcb8dc40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcb8ddd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb8c020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcb8c1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcb8c340"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcb8c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f07bcb6f5a0" loc="77:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f07bcb6f5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcb6f920"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcb6fab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb6fc40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcb6fdd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcb6e020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb6e1b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcb6e340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcb6e4d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcb6e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f07bcb87410" loc="52:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f07bcb87410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb87790"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcb87920"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcb87ab0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb87c40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb87dd0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcb8d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f07bcb77da0" loc="69:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f07bcb77da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb76180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcb76310"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcb764a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb76630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb767c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcb76950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f07bcb8f570" loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f07bcb8f570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb8f8f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcb8fa80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcb8fc10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcb8fda0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcb8e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f07bcb77020" loc="68:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f07bcb77020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb773a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcb77530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcb776c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcb77850"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcb779e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f07bcb6d890" loc="79:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f07bcb6d890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb6dc10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcb6dda0"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcb6c020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb6c1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb6c340"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcb6c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f07bcb76d40" loc="71:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f07bcb76d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcb750e0"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcb75270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb75400"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcb75590"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcb75720"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb758b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcb75a40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcb75bd0"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcb75d60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f07bcb829e0" loc="60:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f07bcb829e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcb82d60"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bcb80020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb801b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcb80340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb804d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb80660"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bcb807f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb80980"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bcb80b10"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bcb80ca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bcb80e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f07bcb7d700" loc="63:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f07bcb7d700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb7da80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcb7dc10"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcb7dda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb7c020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb7c1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcb7c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f07bcb6ea20" loc="78:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f07bcb6ea20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb6eda0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcb6d020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcb6d1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcb6d340"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcb6d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f07bcb6bd40" loc="81:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f07bcb6bd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb6a0e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcb6a270"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcb6a400"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcb6a590"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcb6a720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f07bcb7e700" loc="62:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f07bcb7e700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcb7eb80"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcb7ed10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcb7d020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcb7d1b0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcb7d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f07bcb6c8c0" loc="80:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f07bcb6c8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcb6cc40"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcb6cdd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb6b020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcb6b1b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcb6b340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb6b4d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcb6b660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcb6b7f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcb6b980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f07bcb31940" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f07bcb31940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcb31cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f07bcb312f0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f07bcb312f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcb31670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f07bcb2f020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f07bcb2f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcb2f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f07bcb32bf0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f07bcb32bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcb31020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f07bcb333e0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bcb333e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcb33760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bcb338f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb33a80"/>
        <function-ref name="get" scoped="" ref="0x7f07bcb33c10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb33da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb32020"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bcb321b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb32340"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bcb324d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bcb32660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bcb327f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f07bcb29750" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f07bcb29750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcb29ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f07bcb29100" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f07bcb29100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcb29480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f07bcb29da0" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f07bcb29da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcb28180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f07bcb2aa60" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f07bcb2aa60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcb2ae00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f07bcb2b260" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bcb2b260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcb2b5e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bcb2b770"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb2b900"/>
        <function-ref name="get" scoped="" ref="0x7f07bcb2ba90"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcb2bc20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcb2bdb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bcb2a020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcb2a1b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bcb2a340"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bcb2a4d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bcb2a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f07bcade7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f07bcade7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcadeb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcadecb0"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcadee40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcadd020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcadd1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcadd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f07bcb256d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f07bcb256d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcb25a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcb25be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcb25d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcadf020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcadf1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcadf340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcadf4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcadf660"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcadf7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f07bcadcc50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f07bcadcc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcadb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f07bcadfac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f07bcadfac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcadfe40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcade020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcade1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcade340"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcade4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f07bcadd610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bcadd610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcadd990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bcaddb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcaddcb0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcadde40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcadc020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcadc1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bcadc340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcadc4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bcadc660"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bcadc7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bcadc980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f07bcad7cb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f07bcad7cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcad60a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcad6230"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcad63c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcad6550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcad66e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcad6870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f07bcad9b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f07bcad9b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcad8020"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcad81b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcad8340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcad84d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcad8660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcad87f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcad8980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcad8b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcad8ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f07bcad32f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f07bcad32f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcad3670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f07bcad7020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f07bcad7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcad73a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcad7530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcad76c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcad7850"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcad79e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f07bcad6b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bcad6b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcad4020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bcad41b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcad4340"/>
        <function-ref name="get" scoped="" ref="0x7f07bcad44d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcad4660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcad47f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bcad4980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcad4b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bcad4ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bcad4e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bcad3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f07bcace2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f07bcace2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcace670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcace800"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcace990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcaceb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcacecb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcacee40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f07bcad0220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f07bcad0220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcad05a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcad0730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcad08c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcad0a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcad0be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcad0d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcacf020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcacf1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcacf340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f07bcacc7a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f07bcacc7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcaccb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f07bcacf610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f07bcacf610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcacf990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcacfb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcacfcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcacfe40"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcace020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f07bcacd160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bcacd160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcacd4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bcacd670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcacd800"/>
        <function-ref name="get" scoped="" ref="0x7f07bcacd990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcacdb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcacdcb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bcacde40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcacc020"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bcacc1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bcacc340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bcacc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f07bcac77a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f07bcac77a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcac7b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcac7cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcac7e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcac6020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcac61b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcac6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f07bcac96d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f07bcac96d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcac9a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcac9be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcac9d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcac8020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcac81b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcac8340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcac84d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcac8660"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcac87f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f07bcac4c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f07bcac4c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcac3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f07bcac8ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f07bcac8ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcac8e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcac7020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcac71b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcac7340"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcac74d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f07bcac6610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bcac6610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcac6990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bcac6b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcac6cb0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcac6e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcac4020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcac41b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bcac4340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcac44d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bcac4660"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bcac47f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bcac4980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f07bcabfcb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f07bcabfcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcabe0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcabe230"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcabe3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcabe550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcabe6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcabe870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f07bcac1b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f07bcac1b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcac0020"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcac01b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcac0340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcac04d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcac0660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcac07f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcac0980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcac0b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcac0ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f07bcabc2f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f07bcabc2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcabc670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f07bcabf020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f07bcabf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcabf3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcabf530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcabf6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcabf850"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcabf9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f07bcabeb40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bcabeb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcabd020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bcabd1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcabd340"/>
        <function-ref name="get" scoped="" ref="0x7f07bcabd4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcabd660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcabd7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bcabd980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcabdb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bcabdca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bcabde30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bcabc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f07bcab72f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f07bcab72f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcab7670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcab7800"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcab7990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcab7b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcab7cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcab7e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f07bcab9220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f07bcab9220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcab95a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcab9730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcab98c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcab9a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcab9be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcab9d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcab8020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcab81b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcab8340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f07bcab57a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f07bcab57a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcab5b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f07bcab8610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f07bcab8610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcab8990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcab8b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcab8cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcab8e40"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcab7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f07bcab6160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bcab6160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcab64e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bcab6670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcab6800"/>
        <function-ref name="get" scoped="" ref="0x7f07bcab6990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcab6b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcab6cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bcab6e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcab5020"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bcab51b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bcab5340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bcab54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f07bcaaf7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f07bcaaf7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcaafb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcaafcb0"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcaafe40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcaae020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcaae1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcaae340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f07bcab16d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f07bcab16d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcab1a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcab1be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcab1d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcab0020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcab01b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcab0340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcab04d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcab0660"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcab07f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f07bcaadc50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f07bcaadc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcaac020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f07bcab0ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f07bcab0ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcab0e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcaaf020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcaaf1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcaaf340"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcaaf4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f07bcaae610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bcaae610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcaae990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bcaaeb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcaaecb0"/>
        <function-ref name="get" scoped="" ref="0x7f07bcaaee40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcaad020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcaad1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bcaad340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcaad4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bcaad660"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bcaad7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bcaad980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f07bcaa8cb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f07bcaa8cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcaa70a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bcaa7230"/>
        <function-ref name="captured" scoped="" ref="0x7f07bcaa73c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcaa7550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcaa76e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bcaa7870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f07bcaaab30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f07bcaaab30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcaa9020"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcaa91b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcaa9340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcaa94d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcaa9660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcaa97f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcaa9980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcaa9b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcaa9ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f07bcaa52f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f07bcaa52f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bcaa5670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f07bcaa8020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f07bcaa8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcaa83a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcaa8530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcaa86c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcaa8850"/>
        <function-ref name="fired" scoped="" ref="0x7f07bcaa89e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f07bcaa7b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bcaa7b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bcaa6020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bcaa61b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcaa6340"/>
        <function-ref name="get" scoped="" ref="0x7f07bcaa64d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcaa6660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bcaa67f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bcaa6980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bcaa6b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bcaa6ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bcaa6e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bcaa5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f07bca9f2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f07bca9f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bca9f670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bca9f800"/>
        <function-ref name="captured" scoped="" ref="0x7f07bca9f990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bca9fb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bca9fcb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bca9fe40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f07bcaa1220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f07bcaa1220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bcaa15a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bcaa1730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bcaa18c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bcaa1a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bcaa1be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bcaa1d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bcaa0020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bcaa01b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bcaa0340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f07bca9d7a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f07bca9d7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bca9db20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f07bcaa0610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f07bcaa0610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bcaa0990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bcaa0b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bcaa0cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bcaa0e40"/>
        <function-ref name="fired" scoped="" ref="0x7f07bca9f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f07bca9e160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bca9e160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bca9e4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bca9e670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bca9e800"/>
        <function-ref name="get" scoped="" ref="0x7f07bca9e990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bca9eb20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bca9ecb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bca9ee40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bca9d020"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bca9d1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bca9d340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bca9d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f07bca987a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f07bca987a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bca98b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bca98cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f07bca98e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bca97020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bca971b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bca97340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f07bca9a6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f07bca9a6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bca9aa50"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bca9abe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bca9ad70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bca99020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bca991b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bca99340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bca994d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bca99660"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bca997f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f07bca96c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f07bca96c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bca95020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f07bca99ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f07bca99ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bca99e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bca98020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bca981b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bca98340"/>
        <function-ref name="fired" scoped="" ref="0x7f07bca984d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f07bca97610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bca97610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bca97990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bca97b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bca97cb0"/>
        <function-ref name="get" scoped="" ref="0x7f07bca97e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bca96020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bca961b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bca96340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bca964d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bca96660"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bca967f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bca96980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f07bca8fbc0" loc="7:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f07bca8fbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bca8e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f07bca903f0" loc="4:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f07bca903f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bca90770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f07bca90b80" loc="5:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f07bca90b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bca8f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f07bca8f430" loc="6:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f07bca8f430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bca8f7b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f07bb6fd760" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bb6fd760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bb6fdae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bb6fdc70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bb6fde00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bb6fc020"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb6fc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f07bb700dd0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bb700dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bb6ff180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bb6ff310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bb6ff4a0"/>
        <function-ref name="get" scoped="" ref="0x7f07bb6ff630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bb6ff7c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bb6ff950"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bb6ffae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bb6ffc70"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bb6ffe00"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bb6fe020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bb6fe1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f07bb704bf0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f07bb704bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bb7004e0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb7024e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bb702e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bb7029a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bb7009a0"/>
        <function-ref name="start" scoped="" ref="0x7f07bb703a80"/>
        <function-ref name="stop" scoped="" ref="0x7f07bb702020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bb704360" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bb704360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bb7046e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f07bb6fe440" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bb6fe440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bb6fe7c0"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bb6fe950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bb6feae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bb6fec70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bb6fee00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bb6fd020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bb6fd1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bb6fd340"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bb6fd4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f07bca068c0" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f07bca068c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bca0a700"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bca050d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bca0abc0"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bca05590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f07bca048e0" loc="43:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f07bca048e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bca01780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bca00150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bca01c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bca00610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f07bc9efc50" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bc9efc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc9ee020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bc9ee1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bc9ee340"/>
        <function-ref name="get" scoped="" ref="0x7f07bc9ee4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bc9ee660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bc9ee7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bc9ee980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bc9eeb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bc9eeca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bc9eee30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bc9ed020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f07bc9feb80" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f07bc9feb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bc9fd9b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bc9ef360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bc9fde70"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bc9ef820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f07bc9cc0f0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f07bc9cc0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bc9ca020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bc9ca9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bc9ca4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bc9cae60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f07bc9e9cf0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f07bc9e9cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bc9ceb60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bc9cd550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bc9cd090"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bc9cda10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f07bb71a5f0" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f07bb71a5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bb717e50"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb719e00"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bb717800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bb717340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bb716340"/>
        <function-ref name="start" scoped="" ref="0x7f07bb719430"/>
        <function-ref name="stop" scoped="" ref="0x7f07bb719940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f07bb714d20" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f07bb714d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bb710670"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb711550"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bb710020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bb711a10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bb710b30"/>
        <function-ref name="start" scoped="" ref="0x7f07bb712b60"/>
        <function-ref name="stop" scoped="" ref="0x7f07bb711090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f07bb7169b0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f07bb7169b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bb7157e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bb7141b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bb715ca0"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bb714670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f07bc9589c0" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f07bc9589c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bc958d40"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bc957020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f07bc95c850" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f07bc95c850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bc958090"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc959090"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bc959a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bc959550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bc958550"/>
        <function-ref name="start" scoped="" ref="0x7f07bc95b6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc95bbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f07bc9612f0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bc9612f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bc95d870"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc960e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f07bc95ec00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f07bc95e780"/>
        <function-ref name="getdt" scoped="" ref="0x7f07bc95c1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f07bc95dcf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bc95e300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f07bc960020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f07bc95d260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f07bc9604f0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc9609c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f07bc8d8020" loc="58:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f07bc8d8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bc8d4630"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc8d7a60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f07bc8d6920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f07bc8d64a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f07bc8d3020"/>
        <function-ref name="gett0" scoped="" ref="0x7f07bc8d4ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bc8d6020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f07bc8d8c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f07bc8d4020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f07bc8d7110"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc8d75e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f07bc8d3450" loc="59:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f07bc8d3450"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f07bc8d37d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f07bc8df8e0" loc="57:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bc8df8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bc8da020"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc8dd4c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f07bc8db300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f07bc8dde00"/>
        <function-ref name="getdt" scoped="" ref="0x7f07bc8da960"/>
        <function-ref name="gett0" scoped="" ref="0x7f07bc8da4c0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bc8dd960"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f07bc8de560"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f07bc8db930"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f07bc8dea50"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc8dd020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f07bb51c100" loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f07bb51c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bb51c480"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bb51c610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f07bb5243d0" loc="65:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f07bb5243d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bb520870"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb522e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f07bb521c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f07bb521780"/>
        <function-ref name="getdt" scoped="" ref="0x7f07bb51e1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f07bb520cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bb521300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f07bb522020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f07bb520260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f07bb5224f0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bb5229c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f07bb51da40" loc="67:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f07bb51da40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f07bb51ddc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Platform" ref="0x7f07bb51e5d0" loc="66:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f07bb51e5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f07bb51d660"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f07bb51d7f0"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f07bb51ec70"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f07bb51ee00"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f07bb51d020"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f07bb51d1b0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f07bb51d340"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f07bb51d4d0"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f07bb51e950"/>
        <function-ref name="node_id" scoped="" ref="0x7f07bb51eae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f07bb52bdb0" loc="63:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bb52bdb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bb525470"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb5289b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f07bb5277c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f07bb527320"/>
        <function-ref name="getdt" scoped="" ref="0x7f07bb525db0"/>
        <function-ref name="gett0" scoped="" ref="0x7f07bb525910"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bb528e50"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f07bb529a80"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f07bb527df0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f07bb528020"/>
        <function-ref name="stop" scoped="" ref="0x7f07bb528510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f07bc8d0020" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f07bc8d0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bc8d0c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f07bc8c6300" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f07bc8c6300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bc8c5150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bc8c5ad0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bc8c5610"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bc8c3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f07bc8b8260" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="MasterAppC.TimerLeds"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bc8b8260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bc8b46e0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc8b7ca0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f07bc8b5a70"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f07bc8b55f0"/>
        <function-ref name="getdt" scoped="" ref="0x7f07bc8b3020"/>
        <function-ref name="gett0" scoped="" ref="0x7f07bc8b4b60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bc8b5170"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f07bc8b8e50"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f07bc8b40d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f07bc8b7350"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc8b7820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f07bc8b2680" loc="61:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f07bc8b2680"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f07bc8b2a00"/>
        <function-ref name="stopDone" scoped="" ref="0x7f07bc8b2b90"/>
        <function-ref name="start" scoped="" ref="0x7f07bc8b2d20"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc8af020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f07bc8af7f0" loc="63:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f07bc8af7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bc8afb70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bc8afd00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bc8ad020"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bc8ad1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bc8ad340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f07bc8ac880" loc="65:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f07bc8ac880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bc8acc00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f07bc8ab020" loc="67:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f07bc8ab020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc8ab3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f07bc8ab530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bc8ab6c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bc8ab850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f07bc8ab9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f07bc8a7310" loc="70:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f07bc8a7310"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f07bc8a2880"/>
        <function-ref name="clear" scoped="" ref="0x7f07bc899020"/>
        <function-ref name="isValid" scoped="" ref="0x7f07bc8a2150"/>
        <function-ref name="set" scoped="" ref="0x7f07bc899750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f07bc88d130" loc="72:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f07bc88d130"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f07bc88d4b0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f07bc88d640"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f07bc88d7d0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f07bc88d960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f07bc8adb20" loc="64:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f07bc8adb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bc8ac020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f07bc8a8080" loc="69:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f07bc8a8080"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f07bc8a8400"/>
        <function-ref name="noAck" scoped="" ref="0x7f07bc8a8590"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f07bc8a8720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f07bc8abc90" loc="68:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f07bc8abc90"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f07bc8aa0a0"/>
        <function-ref name="source" scoped="" ref="0x7f07bc8aa230"/>
        <function-ref name="address" scoped="" ref="0x7f07bc8aa3c0"/>
        <function-ref name="destination" scoped="" ref="0x7f07bc8aa550"/>
        <function-ref name="setSource" scoped="" ref="0x7f07bc8aa6e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f07bc8aa870"/>
        <function-ref name="type" scoped="" ref="0x7f07bc8aaa00"/>
        <function-ref name="setType" scoped="" ref="0x7f07bc8aab90"/>
        <function-ref name="isForMe" scoped="" ref="0x7f07bc8aad20"/>
        <function-ref name="setGroup" scoped="" ref="0x7f07bc8a9020"/>
        <function-ref name="localGroup" scoped="" ref="0x7f07bc8a91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f07bc8983f0" loc="71:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f07bc8983f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f07bc897970"/>
        <function-ref name="clear" scoped="" ref="0x7f07bc8950d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f07bc897240"/>
        <function-ref name="set" scoped="" ref="0x7f07bc895800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f07bc881cc0" loc="55:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f07bc881cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f07bc8800a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f07bc880230"/>
        <function-ref name="start" scoped="" ref="0x7f07bc8803c0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc880550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f07bc867e30" loc="64:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bc867e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f07bc86f1e0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f07bc86f370"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f07bc86f500"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f07bc86f690"/>
        <function-ref name="setCca" scoped="" ref="0x7f07bc86f820"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f07bc86f9b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f07bc85ad20" loc="67:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f07bc85ad20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f07bc8641c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f07bc87b8f0" loc="60:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f07bc87b8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc87bc70"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f07bc87be00"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bc87a020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bc87a1b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f07bc87a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f07bc880d20" loc="56:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f07bc880d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bc87f0e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bc87f270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bc87f400"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bc87f590"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bc87f720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f07bc87dc00" loc="58:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f07bc87dc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bc87c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f07bc8729b0" loc="61:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bc8729b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f07bc872d30"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f07bc879020"/>
        <function-ref name="getRssi" scoped="" ref="0x7f07bc8791b0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f07bc879340"/>
        <function-ref name="getPower" scoped="" ref="0x7f07bc8794d0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f07bc879660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f07bc86fcb0" loc="65:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f07bc86fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f07bc8660a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f07bc866230"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f07bc8663c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f07bc866550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f07bc87d020" loc="57:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f07bc87d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bc87d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f07bc879990" loc="62:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f07bc879990"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f07bc879d10"/>
        <function-ref name="noAck" scoped="" ref="0x7f07bc878020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f07bc8781b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f07bc865020" loc="66:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f07bc865020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f07bc8653a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f07bc865530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f07bc8656c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f07bc865850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f07bc8659e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f07bc87c2d0" loc="59:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f07bc87c2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f07bc87c650"/>
        <function-ref name="source" scoped="" ref="0x7f07bc87c7e0"/>
        <function-ref name="address" scoped="" ref="0x7f07bc87c970"/>
        <function-ref name="destination" scoped="" ref="0x7f07bc87cb00"/>
        <function-ref name="setSource" scoped="" ref="0x7f07bc87cc90"/>
        <function-ref name="setDestination" scoped="" ref="0x7f07bc87ce20"/>
        <function-ref name="type" scoped="" ref="0x7f07bc87b020"/>
        <function-ref name="setType" scoped="" ref="0x7f07bc87b1b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f07bc87b340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f07bc87b4d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f07bc87b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f07bc86ec70" loc="63:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f07bc86ec70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f07bc870020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f07bc85db70" loc="43:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f07bc85db70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f07bc857020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f07bc8571b0"/>
        <function-ref name="start" scoped="" ref="0x7f07bc857340"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc8574d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f07bc8439d0" loc="55:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f07bc8439d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f07bc843d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f07bc842b70" loc="57:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f07bc842b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f07bc841020"/>
        <function-ref name="setRetries" scoped="" ref="0x7f07bc8411b0"/>
        <function-ref name="getRetries" scoped="" ref="0x7f07bc841340"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f07bc8414d0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f07bc841660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f07bc844020" loc="53:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bc844020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f07bc8443a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f07bc844530"/>
        <function-ref name="getRssi" scoped="" ref="0x7f07bc8446c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f07bc844850"/>
        <function-ref name="getPower" scoped="" ref="0x7f07bc8449e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f07bc844b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f07bc847990" loc="50:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f07bc847990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bc847d10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bc845020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bc8451b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bc845340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bc8454d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f07bc842080" loc="56:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f07bc842080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f07bc842400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f07bc842590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f07bc842720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f07bc8428b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f07bc850500" loc="47:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f07bc850500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bc850880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f07bc843020" loc="54:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f07bc843020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f07bc8433a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f07bc843530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f07bc8436c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bc856210" loc="45:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc856210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc856590"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc856720"/>
        <function-ref name="request" scoped="" ref="0x7f07bc8568b0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc856a40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc856bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f07bc8466f0" loc="46:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f07bc8466f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bc846a70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bc846c00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bc846d90"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bc850020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bc8501b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f07bc850bc0" loc="48:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f07bc850bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc847020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f07bc8471b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bc847340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bc8474d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f07bc847660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f07bc845840" loc="51:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f07bc845840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bc845bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f07bc83e390" loc="44:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f07bc83e390"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f07bc83e710"/>
        <function-ref name="stopDone" scoped="" ref="0x7f07bc83e8a0"/>
        <function-ref name="start" scoped="" ref="0x7f07bc83ea30"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc83ebc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f07bc83b330" loc="47:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bc83b330"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f07bc83b6b0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f07bc83b840"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f07bc83b9d0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f07bc83bb60"/>
        <function-ref name="setCca" scoped="" ref="0x7f07bc83bcf0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f07bc83be80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f07bc83ee80" loc="45:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f07bc83ee80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bc83c220"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bc83c3b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bc83c540"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bc83c6d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bc83c860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f07bc83cb40" loc="46:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f07bc83cb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bc83b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f07bc83ae70" loc="39:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f07bc83ae70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f07bc837220"/>
        <function-ref name="stopDone" scoped="" ref="0x7f07bc8373b0"/>
        <function-ref name="start" scoped="" ref="0x7f07bc837540"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc8376d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f07bc8367e0" loc="41:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bc8367e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f07bc836b60"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f07bc836cf0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f07bc836e80"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f07bc835030"/>
        <function-ref name="setCca" scoped="" ref="0x7f07bc8351c0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f07bc835350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f07bc82b060" loc="47:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f07bc82b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f07bc82b3e0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f07bc82b570"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f07bc82b700"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f07bc82b890"/>
        <function-ref name="setCca" scoped="" ref="0x7f07bc82ba20"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f07bc82bbb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f07bc820330" loc="50:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bc820330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f07bc8206b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f07bc820840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f07bc8209d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f07bc820b60"/>
        <function-ref name="getPower" scoped="" ref="0x7f07bc820cf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f07bc820e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Transmit" ref="0x7f07bc8222a0" loc="46:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f07bc8222a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bc822620"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bc8227b0"/>
        <function-ref name="modify" scoped="" ref="0x7f07bc822940"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bc822ad0"/>
        <function-ref name="resend" scoped="" ref="0x7f07bc822c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f07bc837990" loc="40:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f07bc837990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bc837d10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bc836020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bc8361b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bc836340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bc8364d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f07bc81f420" loc="48:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f07bc81f420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f07bc81f7a0"/>
        <function-ref name="rand32" scoped="" ref="0x7f07bc81f930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f07bc82a760" loc="45:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f07bc82a760"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f07bc82aae0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc82ac70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f07bc818920" loc="51:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bc818920"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f07bc818ca0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f07bc818e30"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f07bc81c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Power" ref="0x7f07bc82db50" loc="44:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f07bc82db50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f07bc833020"/>
        <function-ref name="rfOff" scoped="" ref="0x7f07bc8331b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7f07bc833340"/>
        <function-ref name="startVReg" scoped="" ref="0x7f07bc8334d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f07bc833660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f07bc8337f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f07bc833980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f07bc833b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f07bc81fbf0" loc="49:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f07bc81fbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f07bc821020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f07bc8211b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f07bc821340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f07bc8214d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f07bc821660"/>
        <function-ref name="get" scoped="" ref="0x7f07bc8217f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f07bc821980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f07bc820020"/>
        <function-ref name="set" scoped="" ref="0x7f07bc821b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f07bc821ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f07bc821e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f07bc835640" loc="43:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc835640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc8359c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc835b50"/>
        <function-ref name="request" scoped="" ref="0x7f07bc835ce0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc835e70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc834030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControlState" ref="0x7f07bc81b110" loc="52:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControlState" scoped="" ref="0x7f07bc81b110"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f07bc81b590"/>
        <function-ref name="toIdle" scoped="" ref="0x7f07bc81b720"/>
        <function-ref name="isState" scoped="" ref="0x7f07bc81b8b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f07bc81ba40"/>
        <function-ref name="requestState" scoped="" ref="0x7f07bc81bbd0"/>
        <function-ref name="forceState" scoped="" ref="0x7f07bc81bd60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendDone_task" ref="0x7f07bc80eb70" loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendDone_task" scoped="" ref="0x7f07bc80eb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bc80d020"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bc80d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDone_task" ref="0x7f07bc80fba0" loc="75:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDone_task" scoped="" ref="0x7f07bc80fba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bc80e020"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bc80e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDone_task" ref="0x7f07bc810c20" loc="74:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDone_task" scoped="" ref="0x7f07bc810c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bc80f020"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bc80f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f07bc7b6dc0" loc="45:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f07bc7b6dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f07bc7c2180"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f07bc7c2310"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f07bc7c24a0"/>
        <function-ref name="syncDone" scoped="" ref="0x7f07bc7c2630"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f07bc7c27c0"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f07bc7c2950"/>
        <function-ref name="setChannel" scoped="" ref="0x7f07bc7c2ae0"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f07bc7c2c70"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f07bc7c2e00"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f07bc7c1020"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f07bc7c11b0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f07bc7c1340"/>
        <function-ref name="sync" scoped="" ref="0x7f07bc7c14d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f07bc7c1760"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f07bc7c18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f07bc7b30c0" loc="47:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f07bc7b30c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc7b3cb0"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bc7b2170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f07bc7c1bf0" loc="46:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f07bc7c1bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f07bc7b5020"/>
        <function-ref name="rfOff" scoped="" ref="0x7f07bc7b51b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7f07bc7b5340"/>
        <function-ref name="startVReg" scoped="" ref="0x7f07bc7b54d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f07bc7b5660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f07bc7b57f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f07bc7b5980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f07bc7b5b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bc7c6950" loc="44:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc7c6950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc7c6cd0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc7c6e60"/>
        <function-ref name="request" scoped="" ref="0x7f07bc7c3020"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc7c31b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc7c3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f07bc7ac970" loc="46:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f07bc7ac970"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f07bc7accf0"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f07bc7ace80"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f07bc7ab030"/>
        <function-ref name="syncDone" scoped="" ref="0x7f07bc7ab1c0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f07bc7ab350"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f07bc7ab4e0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f07bc7ab670"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f07bc7ab800"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f07bc7ab990"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f07bc7abb20"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f07bc7abcb0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f07bc7abe40"/>
        <function-ref name="sync" scoped="" ref="0x7f07bc7aa020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f07bc7aa2b0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f07bc7aa440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXCTRL1" ref="0x7f07bc78b8e0" loc="66:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f07bc78b8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc78bc60"/>
        <function-ref name="write" scoped="" ref="0x7f07bc78bdf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalIeeeEui64" ref="0x7f07bc7a6020" loc="50:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f07bc7a6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f07bc7a63a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StartupTimer" ref="0x7f07bc7a6a10" loc="52:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StartupTimer" scoped="" ref="0x7f07bc7a6a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bc7a22a0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc7a32a0"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bc7a3c20"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bc7a3760"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bc7a2760"/>
        <function-ref name="start" scoped="" ref="0x7f07bc7a5890"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc7a5da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL0" ref="0x7f07bc78d710" loc="64:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f07bc78d710"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc78da90"/>
        <function-ref name="write" scoped="" ref="0x7f07bc78dc20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7f07bc7a0e70" loc="54:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f07bc7a0e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc79f220"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc79f3b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc79f540"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc79f6d0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc79f860"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc79f9f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bc79fb80"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc79fd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f07bc7a9b40" loc="48:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f07bc7a9b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc7a8750"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bc7a8bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="syncDone" ref="0x7f07bc779820" loc="126:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="syncDone" scoped="" ref="0x7f07bc779820"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bc779ba0"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bc779d30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSI" ref="0x7f07bc7891c0" loc="67:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f07bc7891c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc789540"/>
        <function-ref name="write" scoped="" ref="0x7f07bc7896d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f07bc789a70" loc="68:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f07bc789a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc789df0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc788020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG0" ref="0x7f07bc78e550" loc="62:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f07bc78e550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc78e8d0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc78ea60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f07bc794390" loc="57:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f07bc794390"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f07bc794710"/>
        <function-ref name="changed" scoped="" ref="0x7f07bc7948a0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f07bc794a30"/>
        <function-ref name="setAddress" scoped="" ref="0x7f07bc794bc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f07bc7a2c50" loc="53:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f07bc7a2c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc7a0020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc7a01b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc7a0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc7a04d0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc7a0660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc7a07f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bc7a0980"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc7a0b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCOFF" ref="0x7f07bc787120" loc="71:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f07bc787120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc7876a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VREN" ref="0x7f07bc79e0f0" loc="55:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f07bc79e0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc79e470"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc79e600"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc79e790"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc79e920"/>
        <function-ref name="get" scoped="" ref="0x7f07bc79eab0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc79ec40"/>
        <function-ref name="set" scoped="" ref="0x7f07bc79edd0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc79d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bc7ad510" loc="44:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bc7ad510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bc7ad890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f07bc78b020" loc="65:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bc78b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc78b3a0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc78b530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCON" ref="0x7f07bc787a40" loc="72:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f07bc787a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc787dc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f07bc7861d0" loc="74:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f07bc7861d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc786550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc7866e0"/>
        <function-ref name="request" scoped="" ref="0x7f07bc786870"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc786a00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc786b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SyncResource" ref="0x7f07bc784d90" loc="76:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SyncResource" scoped="" ref="0x7f07bc784d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc783180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc783310"/>
        <function-ref name="request" scoped="" ref="0x7f07bc7834a0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc783630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc7837c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f07bc7aa740" loc="47:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f07bc7aa740"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f07bc7aaac0"/>
        <function-ref name="rfOff" scoped="" ref="0x7f07bc7aac50"/>
        <function-ref name="rxOn" scoped="" ref="0x7f07bc7aade0"/>
        <function-ref name="startVReg" scoped="" ref="0x7f07bc7a9020"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f07bc7a91b0"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f07bc7a9340"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f07bc7a94d0"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f07bc7a9660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG1" ref="0x7f07bc78ee00" loc="63:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f07bc78ee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc78d1c0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc78d350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FSCTRL" ref="0x7f07bc78cbe0" loc="61:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f07bc78cbe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc78e020"/>
        <function-ref name="write" scoped="" ref="0x7f07bc78e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXON" ref="0x7f07bc7852b0" loc="69:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f07bc7852b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc785630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f07bc783a80" loc="78:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f07bc783a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f07bc783e00"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f07bc782020"/>
        <function-ref name="led1On" scoped="" ref="0x7f07bc7821b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f07bc782340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f07bc7824d0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc782660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f07bc7827f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f07bc782e30"/>
        <function-ref name="set" scoped="" ref="0x7f07bc782980"/>
        <function-ref name="led0On" scoped="" ref="0x7f07bc782b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f07bc782ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sync" ref="0x7f07bc77a940" loc="125:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sync" scoped="" ref="0x7f07bc77a940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bc77acc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bc77ae50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bc7adb80" loc="45:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc7adb80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc7ac020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc7ac1b0"/>
        <function-ref name="request" scoped="" ref="0x7f07bc7ac340"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc7ac4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc7ac660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PANID" ref="0x7f07bc7985e0" loc="60:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f07bc7985e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc798960"/>
        <function-ref name="write" scoped="" ref="0x7f07bc798af0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IEEEADR" ref="0x7f07bc78fc30" loc="59:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f07bc78fc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc7980e0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc798270"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptCCA" ref="0x7f07bc799c00" loc="56:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f07bc799c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bc79c020"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc79c1b0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f07bc79c340"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f07bc79c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiResource" ref="0x7f07bc784020" loc="75:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RssiResource" scoped="" ref="0x7f07bc784020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc7843a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc784530"/>
        <function-ref name="request" scoped="" ref="0x7f07bc7846c0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc784850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc7849e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRFOFF" ref="0x7f07bc7859c0" loc="70:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f07bc7859c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc785d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bc703c70" loc="45:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bc703c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bc700020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f07bc700690" loc="46:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f07bc700690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bc6fc020"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc6fd020"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bc6fd9a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bc6fd4e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bc6fc4e0"/>
        <function-ref name="start" scoped="" ref="0x7f07bc6ff5b0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc6ffac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bc6fba20" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bc6fba20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bc6fbda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f07bc6fa2e0" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f07bc6fa2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bc6beb30"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc6bfae0"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bc6be4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bc6be020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bc6bd020"/>
        <function-ref name="start" scoped="" ref="0x7f07bc6bf110"/>
        <function-ref name="stop" scoped="" ref="0x7f07bc6bf620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f07bb4c4690" loc="44:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f07bb4c4690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bb4c0020"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb4c2020"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bb4c29a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bb4c24e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bb4c04e0"/>
        <function-ref name="start" scoped="" ref="0x7f07bb4c35b0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bb4c3ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bb4c6df0" loc="43:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bb4c6df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bb4c41c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f07bb4bd870" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f07bb4bd870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bb4b9090"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb4ba090"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bb4baa10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bb4ba550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bb4b9550"/>
        <function-ref name="start" scoped="" ref="0x7f07bb4bb6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bb4bbbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bb4bd020" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bb4bd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bb4bd3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f07bb4a3020" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bb4a3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bb4a33a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bb4a3530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bb4a36c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bb4a3850"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb4a39e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f07bb4a6570" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bb4a6570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bb4a68f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bb4a6a80"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bb4a6c10"/>
        <function-ref name="get" scoped="" ref="0x7f07bb4a6da0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bb4a5020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bb4a51b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bb4a5340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bb4a54d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bb4a5660"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bb4a57f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bb4a5980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f07bb4a5c10" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bb4a5c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bb4a4020"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bb4a41b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bb4a4340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bb4a44d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bb4a4660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bb4a47f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bb4a4980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bb4a4b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bb4a4ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f07bb49ada0" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f07bb49ada0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bb499180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f07bb499310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f07bb4994a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f07bb499630"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb4997c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f07bb49c4c0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bb49c4c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bb49c840"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bb49c9d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bb49cb60"/>
        <function-ref name="get" scoped="" ref="0x7f07bb49ccf0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bb49ce80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bb49b030"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bb49b1c0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bb49b350"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bb49b4e0"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bb49b670"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bb49b800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f07bb4a0340" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f07bb4a0340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bb49eba0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb49fb80"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bb49e550"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bb49e090"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bb49c090"/>
        <function-ref name="start" scoped="" ref="0x7f07bb49f1b0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bb49f6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bb4a1a30" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bb4a1a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bb4a1db0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f07bb49ba90" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bb49ba90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bb49be10"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bb49a020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bb49a1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bb49a340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bb49a4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bb49a660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bb49a7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bb49a980"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bb49ab10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f07bc6e3650" loc="43:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f07bc6e3650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bc6e15b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bc6e0020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bc6e1a70"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bc6e04e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f07bc6da6d0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f07bc6da6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bc6d85b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bc6d7020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bc6d8a70"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bc6d74e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f07bc6dc2e0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f07bc6dc2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bc6db110"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bc6dba90"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bc6db5d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bc6da020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f07bb4b7a90" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f07bb4b7a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bb4b32e0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb4b42e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bb4b4c60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bb4b47a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bb4b37a0"/>
        <function-ref name="start" scoped="" ref="0x7f07bb4b68d0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bb4b6de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f07bb4b0210" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f07bb4b0210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bb4adb30"/>
        <function-ref name="fired" scoped="" ref="0x7f07bb4afa60"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bb4ad4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bb4ad020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bb4ac020"/>
        <function-ref name="start" scoped="" ref="0x7f07bb4af090"/>
        <function-ref name="stop" scoped="" ref="0x7f07bb4af5a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f07bb4b3e10" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f07bb4b3e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bb4b2ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bb4b1670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bb4b11b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bb4b1b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFO" ref="0x7f07bc6b86a0" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f07bc6b86a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6b8a20"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc6b8bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6b8d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6b7020"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6b71b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6b7340"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6b74d0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6b7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFOP" ref="0x7f07bc6b79d0" loc="45:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f07bc6b79d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6b7d50"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc6b6020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6b61b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6b6340"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6b64d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6b6660"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6b67f0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6b6980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7f07bc6b6ce0" loc="46:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f07bc6b6ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6b50a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc6b5230"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6b53c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6b5550"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6b56e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6b5870"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6b5a00"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6b5b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CSN" ref="0x7f07bc6b9370" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f07bc6b9370"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6b96f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc6b9880"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6b9a10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6b9ba0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6b9d30"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6b8020"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6b81b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6b8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VREN" ref="0x7f07bc6b3380" loc="48:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f07bc6b3380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6b3700"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc6b3890"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6b3a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6b3bb0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6b3d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6b1020"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6b11b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6b1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CCA" ref="0x7f07bc6ba0e0" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f07bc6ba0e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6ba460"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc6ba5f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6ba780"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6ba910"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6baaa0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6bac30"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6badc0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6b9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFD" ref="0x7f07bc6b4020" loc="47:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f07bc6b4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6b43a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc6b4530"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6b46c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6b4850"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6b49e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6b4b70"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6b4d00"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6b3020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f07bc6af930" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc6af930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6afcb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc6afe40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc6ae020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc6adc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6ae340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6ae4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc6ae660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc6ae7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6ae980"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6aeb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc6aeca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc6aee30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc6ad020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc6ad2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc6ad440"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6ad5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc6ad760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc6ad8f0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6ae1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc6ada80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f07bc6b0710" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc6b0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6b0a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc6b0c20"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6b0db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6af020"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6af1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6af340"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6af4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6af660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f07bc6a9020" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc6a9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6a93a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc6a9530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc6a96c0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc6a74d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6a99e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6a9b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc6a9d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc6a8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6a81b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6a8340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc6a84d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc6a8660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc6a87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc6a8a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc6a8c10"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6a8da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc6a7020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc6a71b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6a9850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc6a7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f07bc6abda0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc6abda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6aa180"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc6aa310"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6aa4a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6aa630"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6aa7c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6aa950"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6aaae0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6aac70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f07bc6a4610" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc6a4610"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6a4990"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc6a4b20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc6a4cb0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc6a2980"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6a3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6a31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc6a3340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc6a34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6a3660"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6a37f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc6a3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc6a3b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc6a3ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc6a2020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc6a21b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6a2340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc6a24d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc6a2660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6a4e40"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc6a27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f07bc6a54a0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc6a54a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6a5820"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc6a59b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6a5b40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6a5cd0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6a5e60"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6a4020"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6a41b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6a4340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f07bc69fc60" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc69fc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc69e020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc69e1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc69e340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc69c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc69e660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc69e7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc69e980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc69eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc69eca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc69ee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc69d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc69d1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc69d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc69d5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc69d760"/>
        <function-ref name="set" scoped="" ref="0x7f07bc69d8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc69da80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc69dc10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc69e4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc69dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f07bc6a0b00" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc6a0b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6a0e80"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc69f030"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc69f1c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc69f350"/>
        <function-ref name="get" scoped="" ref="0x7f07bc69f4e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc69f670"/>
        <function-ref name="set" scoped="" ref="0x7f07bc69f800"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc69f990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f07bc6982f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc6982f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc698670"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc698800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc698990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc696660"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc698cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc698e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc697020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc6971b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc697340"/>
        <function-ref name="get" scoped="" ref="0x7f07bc6974d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc697660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc6977f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc697980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc697c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc697da0"/>
        <function-ref name="set" scoped="" ref="0x7f07bc696020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc6961b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc696340"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc698b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc6964d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f07bc69a020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc69a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc69a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc69a530"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc69a6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc69a850"/>
        <function-ref name="get" scoped="" ref="0x7f07bc69a9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc69ab70"/>
        <function-ref name="set" scoped="" ref="0x7f07bc69ad00"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc698020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f07bc6937a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc6937a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc693b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc693cb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc693e40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc691a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc6921b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc692340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc6924d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc692660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6927f0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc692980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc692b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc692ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc692e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc691120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc6912b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bc691440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc6915d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc691760"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc692020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc6918f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f07bc694630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc694630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc6949b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc694b40"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc694cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc694e60"/>
        <function-ref name="get" scoped="" ref="0x7f07bc693020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc6931b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bc693340"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6934d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f07bc68ec60" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bc68ec60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc68d020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc68d1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc68d340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc68b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc68d660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc68d7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc68d980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc68db10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc68dca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc68de30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc68c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc68c1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc68c340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc68c5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc68c760"/>
        <function-ref name="set" scoped="" ref="0x7f07bc68c8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc68ca80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc68cc10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc68d4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc68cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f07bc68fb00" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc68fb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc68fe80"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc68e030"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc68e1c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc68e350"/>
        <function-ref name="get" scoped="" ref="0x7f07bc68e4e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc68e670"/>
        <function-ref name="set" scoped="" ref="0x7f07bc68e800"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc68e990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureSFD" ref="0x7f07bc66c700" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f07bc66c700"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f07bc66ca80"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc66cc10"/>
        <function-ref name="captured" scoped="" ref="0x7f07bc66cda0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f07bc675020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptCCA" ref="0x7f07bc675400" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f07bc675400"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bc675780"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc675910"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f07bc675aa0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f07bc675c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptFIFOP" ref="0x7f07bc674060" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f07bc674060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bc6743e0"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc674570"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f07bc674700"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f07bc674890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Capture" ref="0x7f07bc656a80" loc="50:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Capture" scoped="" ref="0x7f07bc656a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f07bc656e00"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f07bc655020"/>
        <function-ref name="captured" scoped="" ref="0x7f07bc6551b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bc655340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bc6554d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f07bc655660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f07bc669c20" loc="48:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f07bc669c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f07bc657020"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc6571b0"/>
        <function-ref name="captured" scoped="" ref="0x7f07bc657340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f07bc6574d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f07bc657760" loc="49:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f07bc657760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f07bc657ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f07bc657c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bc657e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f07bc656020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f07bc6561b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bc656340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f07bc6564d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f07bc656660"/>
        <function-ref name="setControl" scoped="" ref="0x7f07bc6567f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x7f07bc655930" loc="51:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f07bc655930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc655cb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc655e40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc653020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc652c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc653340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc6534d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc653660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc6537f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc653980"/>
        <function-ref name="get" scoped="" ref="0x7f07bc653b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc653ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc653e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc652020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc6522b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc652440"/>
        <function-ref name="set" scoped="" ref="0x7f07bc6525d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc652760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc6528f0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc6531b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc652a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f07bc6423f0" loc="46:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f07bc6423f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc642770"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc642900"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc642a90"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc642c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc642db0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc641020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc6411b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc641340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f07bc6363f0" loc="58:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f07bc6363f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc636770"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc636900"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc636a90"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc636c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc636db0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc635020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc6351b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc635340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f07bc63fd50" loc="49:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f07bc63fd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc63e100"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc63e290"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc63e420"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc63e5b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc63e740"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc63e8d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc63ea60"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc63ebf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f07bc63c3f0" loc="53:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f07bc63c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc63c770"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc63c900"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc63ca90"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc63cc20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc63cdb0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc63b020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc63b1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc63b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f07bc64abc0" loc="44:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f07bc64abc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc644020"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc6441b0"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc644340"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc6444d0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc644660"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc6447f0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc644980"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc644b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f07bc639d50" loc="56:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f07bc639d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc638210"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc6383a0"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc638530"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc6386c0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc638850"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc6389e0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc638b70"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc638d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f07bc641710" loc="47:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f07bc641710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc641a90"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc641c20"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc641db0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc640020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc6401b0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc640340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc6404d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc640660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f07bc635710" loc="59:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f07bc635710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc635a90"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc635c20"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc635db0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc634020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc6341b0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc634340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc6344d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc634660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f07bc645620" loc="42:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f07bc645620"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc6459a0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc645b30"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc645cc0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc645e50"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc64b020"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc64b1b0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc64b340"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc64b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f07bc63b710" loc="54:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f07bc63b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc63ba90"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc63bc20"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc63bdb0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc63a020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc63a1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc63a340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc63a4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc63a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f07bc643020" loc="45:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f07bc643020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc6433a0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc643530"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc6436c0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc643850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc6439e0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc643b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc643d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc642020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f07bc637100" loc="57:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f07bc637100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc637480"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc637610"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc6377a0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc637930"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc637ac0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc637c50"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc637de0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc636020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f07bc640a30" loc="48:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f07bc640a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc640db0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc63f020"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc63f1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc63f340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc63f4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc63f660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc63f7f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc63f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f07bc63d020" loc="52:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f07bc63d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc63d3a0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc63d530"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc63d6c0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc63d850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc63d9e0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc63db70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc63dd00"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc63c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f07bc64b8a0" loc="43:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f07bc64b8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc64bc20"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc64bdb0"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc64a020"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc64a1b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc64a340"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc64a4d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc64a660"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc64a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f07bc63aa30" loc="55:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f07bc63aa30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc63adb0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc639020"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc6391b0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc639340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc6394d0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc639660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc6397f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc639980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f07bc62b3f0" loc="58:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f07bc62b3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc62b770"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc62b900"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc62ba90"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc62bc20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc62bdb0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc62a020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc62a1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc62a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f07bc61f3f0" loc="70:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f07bc61f3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc61f770"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc61f900"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc61fa90"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc61fc20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc61fdb0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc61e020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc61e1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc61e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f07bc628d50" loc="61:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f07bc628d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc627100"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc627290"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc627420"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc6275b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc627740"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc6278d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc627a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc627bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f07bc6253f0" loc="65:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f07bc6253f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc625770"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc625900"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc625a90"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc625c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc625db0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc624020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc6241b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc624340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f07bc62fd50" loc="56:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f07bc62fd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc62e100"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc62e290"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc62e420"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc62e5b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc62e740"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc62e8d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc62ea60"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc62ebf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f07bc622d50" loc="68:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f07bc622d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc621210"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc6213a0"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc621530"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc6216c0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc621850"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc6219e0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc621b70"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc621d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f07bc62a710" loc="59:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f07bc62a710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc62aa90"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc62ac20"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc62adb0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc629020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc6291b0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc629340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc6294d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc629660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f07bc61e710" loc="71:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f07bc61e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc61ea90"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc61ec20"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc61edb0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc61d020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc61d1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc61d340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc61d4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc61d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f07bc6337a0" loc="54:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f07bc6337a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc633b20"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc633cb0"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc633e40"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc630020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc6301b0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc630340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc6304d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc630660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f07bc624710" loc="66:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f07bc624710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc624a90"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc624c20"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc624db0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc623020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc6231b0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc623340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc6234d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc623660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f07bc62c020" loc="57:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f07bc62c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc62c3a0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc62c530"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc62c6c0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc62c850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc62c9e0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc62cb70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc62cd00"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc62b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f07bc620100" loc="69:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f07bc620100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc620480"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc620610"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc6207a0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc620930"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc620ac0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc620c50"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc620de0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc61f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f07bc629a30" loc="60:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f07bc629a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc629db0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc628020"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc6281b0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc628340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc6284d0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc628660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc6287f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc628980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f07bc626020" loc="64:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f07bc626020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc6263a0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc626530"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc6266c0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc626850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc6269e0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc626b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc626d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc625020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f07bc630a30" loc="55:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f07bc630a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc630db0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc62f020"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc62f1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc62f340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc62f4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc62f660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc62f7f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc62f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f07bc623a30" loc="67:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f07bc623a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc623db0"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc622020"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc6221b0"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc622340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc6224d0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc622660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc6227f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc622980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f07bc5132f0" loc="52:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f07bc5132f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc513670"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc513800"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc513990"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc513b20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc513cb0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc513e40"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc506020"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc5061b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f07bc514680" loc="51:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f07bc514680"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bc514a00"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc514b90"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f07bc514d20"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f07bc513020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f07bc5027a0" loc="52:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f07bc5027a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bc502b20"/>
        <function-ref name="fired" scoped="" ref="0x7f07bc502cb0"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc502e40"/>
        <function-ref name="edge" scoped="" ref="0x7f07bc501020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f07bc5011b0"/>
        <function-ref name="enable" scoped="" ref="0x7f07bc501340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f07bc5014d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f07bc501660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f07bc505b70" loc="51:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f07bc505b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bc502020"/>
        <function-ref name="disable" scoped="" ref="0x7f07bc5021b0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f07bc502340"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f07bc5024d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f07bc0a3e50" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f07bc0a3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0a2410"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0a25a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f07bc0ad160" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f07bc0ad160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0ad4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f07bc0a7e50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f07bc0a7e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0a6210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0a63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f07bc0a1880" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bc0a1880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0a1c00"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0a1d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f07bc0990a0" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f07bc0990a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc099420"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0995b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f07bc0a00a0" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f07bc0a00a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0a0420"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0a05b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f07bc08b500" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f07bc08b500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc08b880"/>
        <function-ref name="write" scoped="" ref="0x7f07bc08ba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f07bc08d500" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f07bc08d500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc08d880"/>
        <function-ref name="write" scoped="" ref="0x7f07bc08da10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f07bc0ac490" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f07bc0ac490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0ac810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f07bc095880" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f07bc095880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc095c00"/>
        <function-ref name="write" scoped="" ref="0x7f07bc095d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f07bc08e500" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f07bc08e500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc08e880"/>
        <function-ref name="write" scoped="" ref="0x7f07bc08ea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f07bc0a6e50" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f07bc0a6e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0a4210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0a43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f07bc0a4e50" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f07bc0a4e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0a3210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0a33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f07bc09b880" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f07bc09b880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc09bc00"/>
        <function-ref name="write" scoped="" ref="0x7f07bc09bd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f07bc09c0a0" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f07bc09c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc09c420"/>
        <function-ref name="write" scoped="" ref="0x7f07bc09c5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f07bc0a0880" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f07bc0a0880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0a0c00"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0a0d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f07bc0afa90" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc0afa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f07bc0afe10"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f07bc0ae020"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f07bc0ae1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f07bc0aae00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f07bc0aae00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0a91c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f07bc0a9490" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f07bc0a9490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0a9910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f07bc092c80" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f07bc092c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0910a0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc091230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f07bc0a9be0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f07bc0a9be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0a8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f07bc08ece0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f07bc08ece0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc08d0a0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc08d230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f07bc0aa160" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f07bc0aa160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0aa4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f07bc0950a0" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f07bc0950a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc095420"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0955b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f07bc0a4670" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f07bc0a4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0a49f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0a4b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f07bc0a6670" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bc0a6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0a69f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0a6b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f07bc0aead0" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f07bc0aead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0aee50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f07bc0960a0" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f07bc0960a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc096420"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0965b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f07bc099880" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f07bc099880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc099c00"/>
        <function-ref name="write" scoped="" ref="0x7f07bc099d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f07bc096880" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f07bc096880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc096c00"/>
        <function-ref name="write" scoped="" ref="0x7f07bc096d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f07bc08cce0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f07bc08cce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc08b0a0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc08b230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f07bc08dce0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f07bc08dce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc08c0a0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc08c230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f07bc09c880" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f07bc09c880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc09cc00"/>
        <function-ref name="write" scoped="" ref="0x7f07bc09cd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f07bc0980a0" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f07bc0980a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc098420"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0985b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f07bc090ce0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f07bc090ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc08e0a0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc08e230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f07bc09f880" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f07bc09f880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc09fc00"/>
        <function-ref name="write" scoped="" ref="0x7f07bc09fd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f07bc08bce0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f07bc08bce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bc08a0a0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bc08a230"/>
        <function-ref name="write" scoped="" ref="0x7f07bc08a3c0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bc08a550"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bc08a6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f07bc0ae480" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f07bc0ae480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0ae800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f07bc0a7670" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f07bc0a7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0a79f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0a7b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f07bc0a3670" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f07bc0a3670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0a39f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0a3b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f07bc09a0a0" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f07bc09a0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc09a420"/>
        <function-ref name="write" scoped="" ref="0x7f07bc09a5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f07bc09f0a0" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f07bc09f0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc09f420"/>
        <function-ref name="write" scoped="" ref="0x7f07bc09f5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f07bc09a880" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f07bc09a880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc09ac00"/>
        <function-ref name="write" scoped="" ref="0x7f07bc09ad90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f07bc0a2870" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f07bc0a2870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0a2bf0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0a2d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f07bc0ad7b0" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f07bc0ad7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0adb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f07bc0a10a0" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bc0a10a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0a1420"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0a15b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bc0b0e20" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc0b0e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc0af1c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc0af350"/>
        <function-ref name="request" scoped="" ref="0x7f07bc0af4e0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc0af670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc0af800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f07bc0a82f0" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f07bc0a82f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0a8670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f07bc0a7020" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f07bc0a7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0a73a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f07bc090500" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f07bc090500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc090880"/>
        <function-ref name="write" scoped="" ref="0x7f07bc090a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f07bc091ce0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f07bc091ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0900a0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc090230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f07bc0aa7b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f07bc0aa7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0aab30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f07bc091500" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f07bc091500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc091880"/>
        <function-ref name="write" scoped="" ref="0x7f07bc091a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f07bc08c500" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f07bc08c500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc08c880"/>
        <function-ref name="write" scoped="" ref="0x7f07bc08ca10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f07bc09b0a0" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f07bc09b0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc09b420"/>
        <function-ref name="write" scoped="" ref="0x7f07bc09b5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f07bc098880" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f07bc098880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc098c00"/>
        <function-ref name="write" scoped="" ref="0x7f07bc098d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f07bc0ade00" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f07bc0ade00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0ac1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f07bc0acae0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f07bc0acae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0ace60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f07bc09d0a0" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f07bc09d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc09d420"/>
        <function-ref name="write" scoped="" ref="0x7f07bc09d5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f07bc0a8940" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f07bc0a8940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0a8cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f07bc09d880" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f07bc09d880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc09dc00"/>
        <function-ref name="write" scoped="" ref="0x7f07bc09dd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f07bc0920a0" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f07bc0920a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc092820"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0929b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f07bc08a9b0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f07bc08a9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bc08ad30"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bc089020"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0891b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bc089340"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bc0894d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f07bc4bf2c0" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f07bc4bf2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bc4bf640"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bc4bf7d0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc4bf960"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bc4bfaf0"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bc4bfc80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f07bc4c1350" loc="40:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc4c1350"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f07bc4c16d0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f07bc4c1860"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f07bc4c19f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f07bc4be540" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f07bc4be540"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc4be8c0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc4bea50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f07bc4bd370" loc="43:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f07bc4bd370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc4bd6f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc4bd880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bc4c24d0" loc="39:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc4c24d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc4c2850"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc4c29e0"/>
        <function-ref name="request" scoped="" ref="0x7f07bc4c2b70"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc4c2d00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc4c1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f07bc4bc1d0" loc="44:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f07bc4bc1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc4bc550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiPacket" ref="0x7f07bc4a62e0" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f07bc4a62e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bc4a6660"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bc4a67f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f07bc4b6890" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f07bc4b6890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bc4b6c10"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bc4b6da0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc4b5020"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bc4b51b0"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bc4b5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f07bc4b9660" loc="44:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc4b9660"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f07bc4b99e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f07bc4b9b70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f07bc4b9d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiByte" ref="0x7f07bc4aec70" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f07bc4aec70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f07bc4b0020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WorkingState" ref="0x7f07bc4a6b40" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="WorkingState" scoped="" ref="0x7f07bc4a6b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f07bc4af020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f07bc4af1b0"/>
        <function-ref name="isState" scoped="" ref="0x7f07bc4af340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f07bc4af4d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f07bc4af660"/>
        <function-ref name="forceState" scoped="" ref="0x7f07bc4af7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f07bc4b1060" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f07bc4b1060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc4b13e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc4b1570"/>
        <function-ref name="request" scoped="" ref="0x7f07bc4b1700"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc4b1890"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc4b1a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f07bc4b5ba0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f07bc4b5ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc4b4020"/>
        <function-ref name="write" scoped="" ref="0x7f07bc4b41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f07bc4b4a30" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f07bc4b4a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc4b4db0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc4b3020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f07bc4afa70" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f07bc4afa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f07bc4afdf0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f07bc4ad020"/>
        <function-ref name="led1On" scoped="" ref="0x7f07bc4ad1b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f07bc4ad340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f07bc4ad4d0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc4ad660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f07bc4ad7f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f07bc4ade30"/>
        <function-ref name="set" scoped="" ref="0x7f07bc4ad980"/>
        <function-ref name="led0On" scoped="" ref="0x7f07bc4adb10"/>
        <function-ref name="led2On" scoped="" ref="0x7f07bc4adca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bc4b7510" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc4b7510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc4b7890"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc4b7a20"/>
        <function-ref name="request" scoped="" ref="0x7f07bc4b7bb0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc4b7d40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc4b6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grant" ref="0x7f07bc4a2bd0" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grant" scoped="" ref="0x7f07bc4a2bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bc4a1020"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bc4a11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f07bc4b38b0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f07bc4b38b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc4b3c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f07bc447770" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="CC2420SpiWireC.WorkingStateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f07bc447770"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f07bc447af0"/>
        <function-ref name="toIdle" scoped="" ref="0x7f07bc447c80"/>
        <function-ref name="isState" scoped="" ref="0x7f07bc447e10"/>
        <function-ref name="isIdle" scoped="" ref="0x7f07bc443020"/>
        <function-ref name="requestState" scoped="" ref="0x7f07bc4431b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f07bc443340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f07bc4421d0" loc="66:../../../tos/system/StateImplC.nc">
      <component-ref qname="StateImplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f07bc4421d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f07bc442550"/>
        <function-ref name="toIdle" scoped="" ref="0x7f07bc4426e0"/>
        <function-ref name="isState" scoped="" ref="0x7f07bc442870"/>
        <function-ref name="isIdle" scoped="" ref="0x7f07bc442a00"/>
        <function-ref name="requestState" scoped="" ref="0x7f07bc442b90"/>
        <function-ref name="forceState" scoped="" ref="0x7f07bc442d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bc43e020" loc="66:../../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bc43e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bc43e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f07bc43eb70" loc="67:../../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f07bc43eb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f07bc43d020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f07bc43d1b0"/>
        <function-ref name="isState" scoped="" ref="0x7f07bc43d340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f07bc43d4d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f07bc43d660"/>
        <function-ref name="forceState" scoped="" ref="0x7f07bc43d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f07bc0d6020" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f07bc0d6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bc0d63a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bc0d6530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f07bc4248f0" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f07bc4248f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f07bc424c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bc425c40" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc425c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc424020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc4241b0"/>
        <function-ref name="request" scoped="" ref="0x7f07bc424340"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc4244d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc424660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f07bb3c45d0" loc="82:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f07bb3c45d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f07bb3c4950"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f07bb3c4ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f07bb3c2020" loc="87:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f07bb3c2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bb3c23a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bb3c2530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f07bb3c27c0" loc="89:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f07bb3c27c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f07bb3c2b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f07bb3c4d70" loc="83:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f07bb3c4d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f07bb3c3180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bb3c5940" loc="81:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bb3c5940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bb3c5cc0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bb3c5e50"/>
        <function-ref name="request" scoped="" ref="0x7f07bb3c4020"/>
        <function-ref name="granted" scoped="" ref="0x7f07bb3c41b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bb3c4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f07bb3c3410" loc="85:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f07bb3c3410"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f07bb3c3790"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f07bb3c3920"/>
        <function-ref name="splitRead" scoped="" ref="0x7f07bb3c3ab0"/>
        <function-ref name="write" scoped="" ref="0x7f07bb3c3c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f07bc3bb8e0" loc="74:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bc3bb8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f07bc3bbc60"/>
        <function-ref name="configure" scoped="" ref="0x7f07bc3bbdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f07bc3bd850" loc="77:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f07bc3bd850"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bc3bdbd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bc3bdd60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f07bc3b8a40" loc="80:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f07bc3b8a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f07bc3b8dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f07bc3be110" loc="75:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f07bc3be110"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f07bc3be490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f07bc3b9690" loc="79:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f07bc3b9690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc3b9a10"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc3b9ba0"/>
        <function-ref name="request" scoped="" ref="0x7f07bc3b9d30"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc3b8020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc3b81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bc3c2d80" loc="73:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc3c2d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc3bf180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc3bf310"/>
        <function-ref name="request" scoped="" ref="0x7f07bc3bf4a0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc3bf630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc3bf7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f07bc3be790" loc="76:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f07bc3be790"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f07bc3beb10"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f07bc3beca0"/>
        <function-ref name="splitRead" scoped="" ref="0x7f07bc3bee30"/>
        <function-ref name="write" scoped="" ref="0x7f07bc3bd020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f07bc3b4b40" loc="81:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f07bc3b4b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f07bc3b6020"/>
        <function-ref name="txDone" scoped="" ref="0x7f07bc3b61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f07bc342250" loc="76:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bc342250"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f07bc3425f0"/>
        <function-ref name="configure" scoped="" ref="0x7f07bc342780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f07bc341c50" loc="79:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f07bc341c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bc340020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bc3401b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f07bc33f3e0" loc="82:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f07bc33f3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f07bc33f780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f07bc342a10" loc="77:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f07bc342a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f07bc342d90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f07bc33fa50" loc="83:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f07bc33fa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f07bc33fdd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f07bc33d020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f07bc33d1b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f07bc33d340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f07bc33d4d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f07bc33d660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f07bc33d7f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f07bc33d980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f07bc33db10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f07bc33dca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f07bc33de30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f07bc33c020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f07bc33c1b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f07bc33c440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f07bc33c5d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f07bc33c760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f07bc33c8f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f07bc33ca80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f07bc33cc10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f07bc33cda0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f07bc33b020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f07bc33b1b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f07bc33b340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f07bc33b4d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bc33b660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f07bc33b9f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f07bc33bb80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f07bc33bd10"/>
        <function-ref name="tx" scoped="" ref="0x7f07bc33a020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f07bc33a1b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f07bc33a340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f07bc33a4d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f07bc33a660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f07bc33a7f0"/>
        <function-ref name="rx" scoped="" ref="0x7f07bc33a980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f07bc33ab10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f07bc33aca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f07bc33ae30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f07bc339020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f07bc3391b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f07bc339c20" loc="85:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f07bc339c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f07bc338020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f07bc3381b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f07bc338340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f07bc3384d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f07bc338660"/>
        <function-ref name="get" scoped="" ref="0x7f07bc3387f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f07bc338980"/>
        <function-ref name="led2On" scoped="" ref="0x7f07bc337020"/>
        <function-ref name="set" scoped="" ref="0x7f07bc338ca0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f07bc338b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f07bc338e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f07bc3405b0" loc="81:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f07bc3405b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc340950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc340ae0"/>
        <function-ref name="request" scoped="" ref="0x7f07bc340c70"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc340e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc33f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bc343470" loc="75:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc343470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc343810"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc3439a0"/>
        <function-ref name="request" scoped="" ref="0x7f07bc343b30"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc343cc0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc343e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f07bc341060" loc="78:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f07bc341060"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f07bc3413e0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f07bc341570"/>
        <function-ref name="splitRead" scoped="" ref="0x7f07bc341700"/>
        <function-ref name="write" scoped="" ref="0x7f07bc341890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f07bc339480" loc="84:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f07bc339480"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f07bc339800"/>
        <function-ref name="txDone" scoped="" ref="0x7f07bc339990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalDone_task" ref="0x7f07bc3372f0" loc="102:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalDone_task" scoped="" ref="0x7f07bc3372f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bc337670"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bc337800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f07bc3272c0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f07bc3272c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bc327640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f07bc32bd10" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f07bc32bd10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f07bc32a0e0"/>
        <function-ref name="txDone" scoped="" ref="0x7f07bc32a270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f07bc32f020" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f07bc32f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f07bc32f3a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f07bc32f530"/>
        <function-ref name="setUctl" scoped="" ref="0x7f07bc32f6c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f07bc32f850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f07bc32f9e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f07bc32fb70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f07bc32fd00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f07bc32e020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f07bc32e1b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f07bc32e340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f07bc32e4d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f07bc32e660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f07bc32e7f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f07bc32ea80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f07bc32ec10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f07bc32eda0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f07bc32d020"/>
        <function-ref name="isUart" scoped="" ref="0x7f07bc32d1b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f07bc32d340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f07bc32d4d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f07bc32d660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f07bc32d7f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f07bc32d980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f07bc32db10"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bc32dca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f07bc32c220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f07bc32c3b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f07bc32c540"/>
        <function-ref name="tx" scoped="" ref="0x7f07bc32c6d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f07bc32c860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f07bc32c9f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f07bc32cb80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f07bc32cd10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f07bc32b020"/>
        <function-ref name="rx" scoped="" ref="0x7f07bc32b1b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f07bc32b340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f07bc32b4d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f07bc32b660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f07bc32b7f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f07bc32b980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f07bc2edbb0" loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f07bc2edbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc2ec020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc2ec1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc2ec340"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc2ea020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc2ec660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc2ec7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc2ec980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc2ecb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc2ecca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc2ece30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc2eb020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc2eb1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc2eb340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc2eb5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc2eb760"/>
        <function-ref name="set" scoped="" ref="0x7f07bc2eb8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc2eba80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc2ec4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc2ebc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc2ebda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f07bc3212d0" loc="56:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f07bc3212d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f07bc321650"/>
        <function-ref name="txDone" scoped="" ref="0x7f07bc3217e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f07bc2ea3e0" loc="63:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f07bc2ea3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc2ea760"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc2ea8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc2eaa80"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc2e87f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc2eada0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc2e9020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc2e91b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc2e9340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc2e94d0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc2e9660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc2e97f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc2e9980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc2e9b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc2e9da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc2e8020"/>
        <function-ref name="set" scoped="" ref="0x7f07bc2e81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc2e8340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc2eac10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc2e84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc2e8660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f07bc2e8bb0" loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f07bc2e8bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc2e7020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc2e71b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc2e7340"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc2e5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc2e7660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc2e77f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc2e7980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc2e7b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc2e7ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc2e7e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc2e6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc2e61b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc2e6340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc2e65d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc2e6760"/>
        <function-ref name="set" scoped="" ref="0x7f07bc2e68f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc2e6a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc2e74d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc2e6c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc2e6da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f07bc326700" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f07bc326700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f07bc326a80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f07bc326c10"/>
        <function-ref name="setUctl" scoped="" ref="0x7f07bc326da0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f07bc325020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f07bc3251b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f07bc325340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f07bc3254d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f07bc325660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f07bc3257f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f07bc325980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f07bc325b10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f07bc325ca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f07bc325e30"/>
        <function-ref name="getUbr" scoped="" ref="0x7f07bc324120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f07bc3242b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f07bc324440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f07bc3245d0"/>
        <function-ref name="isUart" scoped="" ref="0x7f07bc324760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f07bc3248f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f07bc324a80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f07bc324c10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f07bc324da0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f07bc323020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f07bc3231b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bc323340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f07bc3236d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f07bc323860"/>
        <function-ref name="setUbr" scoped="" ref="0x7f07bc3239f0"/>
        <function-ref name="tx" scoped="" ref="0x7f07bc323b80"/>
        <function-ref name="getUctl" scoped="" ref="0x7f07bc323d10"/>
        <function-ref name="disableUart" scoped="" ref="0x7f07bc322020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f07bc3221b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f07bc322340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f07bc3224d0"/>
        <function-ref name="rx" scoped="" ref="0x7f07bc322660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f07bc3227f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f07bc322980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f07bc322b10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f07bc322ca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f07bc322e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7f07bc2f8d10" loc="59:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f07bc2f8d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f07bc31f0e0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f07bc31f270"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f07bc31f400"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f07bc31f590"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f07bc31f720"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f07bc31f8b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f07bc31fa40"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f07bc31fbd0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bc31fd60"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f07bc31e020"/>
        <function-ref name="getData" scoped="" ref="0x7f07bc31e1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f07bc31e340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f07bc31e4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f07bc31e760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f07bc31e8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f07bc31ea80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f07bc31ec10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f07bc31eda0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f07bc2f7020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f07bc2f71b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f07bc2f7340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f07bc2f74d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f07bc2f7660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f07bc2f77f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f07bc2f7980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f07bc2f7d10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f07bc2f6020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f07bc2f61b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f07bc2f6340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f07bc2f64d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f07bc2f6660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f07bc2f67f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f07bc2f6980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f07bc2f6b10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f07bc2f6ca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f07bc2f6e30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f07bc2f5020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f07bc2f51b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f07bc2f5340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f07bc2f54d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f07bc2f5660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f07bc2f57f0"/>
        <function-ref name="setData" scoped="" ref="0x7f07bc2f5980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f07bc2f5b10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f07bc2f5ca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f07bc2f5e30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f07bc2f4020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f07bc2f41b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f07bc2f4340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f07bc2f48d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f07bc2f4a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f07bc2f4bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f07bc2f4d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f07bc2f3020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f07bc2f31b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f07bc2f3340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f07bc2f34d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f07bc2f3660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f07bc2f37f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f07bc2f03e0" loc="61:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f07bc2f03e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc2f0760"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc2f08f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc2f0a80"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc2ed7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc2f0da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc2ee020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc2ee1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc2ee340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc2ee4d0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc2ee660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc2ee7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc2ee980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc2eeb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc2eeda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc2ed020"/>
        <function-ref name="set" scoped="" ref="0x7f07bc2ed1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc2ed340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc2f0c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc2ed4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc2ed660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f07bc321c20" loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f07bc321c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bc320020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f07bc2f3bb0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f07bc2f3bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc2f2020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc2f21b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc2f2340"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc2f0020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc2f2660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc2f27f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc2f2980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc2f2b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc2f2ca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc2f2e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc2f1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc2f11b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc2f1340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc2f15d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc2f1760"/>
        <function-ref name="set" scoped="" ref="0x7f07bc2f18f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc2f1a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc2f24d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc2f1c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc2f1da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f07bb3ba020" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f07bb3ba020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f07bb3ba3a0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f07bb3ba530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f07bb3b3440" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f07bb3b3440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bb3b37c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f07bb3ac760" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bb3ac760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f07bb3acae0"/>
        <function-ref name="configure" scoped="" ref="0x7f07bb3acc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f07bb3b3a50" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f07bb3b3a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f07bb3b3dd0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f07bb3b2020"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f07bb3b21b0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f07bb3b2340"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f07bb3b24d0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f07bb3b2660"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f07bb3b27f0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f07bb3b2980"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bb3b2b10"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f07bb3b2ca0"/>
        <function-ref name="getData" scoped="" ref="0x7f07bb3b2e30"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f07bb3b1020"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f07bb3b11b0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f07bb3b1440"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f07bb3b15d0"/>
        <function-ref name="getIV" scoped="" ref="0x7f07bb3b1760"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f07bb3b18f0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f07bb3b1a80"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f07bb3b1c10"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f07bb3b1da0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f07bb3b0020"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f07bb3b01b0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f07bb3b0340"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f07bb3b04d0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f07bb3b0660"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f07bb3b09f0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f07bb3b0b80"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f07bb3b0d10"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f07bb3af020"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f07bb3af1b0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f07bb3af340"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f07bb3af4d0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f07bb3af660"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f07bb3af7f0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f07bb3af980"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f07bb3afb10"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f07bb3afca0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f07bb3afe30"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f07bb3ae020"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f07bb3ae1b0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f07bb3ae340"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f07bb3ae4d0"/>
        <function-ref name="setData" scoped="" ref="0x7f07bb3ae660"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f07bb3ae7f0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f07bb3ae980"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f07bb3aeb10"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f07bb3aeca0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f07bb3aee30"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f07bb3ad020"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f07bb3ad5b0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f07bb3ad740"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f07bb3ad8d0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f07bb3ada60"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f07bb3adbf0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f07bb3add80"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f07bb3ac020"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f07bb3ac1b0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f07bb3ac340"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f07bb3ac4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f07bb3b4c10" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f07bb3b4c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f07bb3b3020"/>
        <function-ref name="txDone" scoped="" ref="0x7f07bb3b31b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bb3bb340" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bb3bb340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bb3bb6c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bb3bb850"/>
        <function-ref name="request" scoped="" ref="0x7f07bb3bb9e0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bb3bbb70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bb3bbd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f07bb3b8020" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f07bb3b8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f07bb3b83a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f07bb3b8530"/>
        <function-ref name="setUctl" scoped="" ref="0x7f07bb3b86c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f07bb3b8850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f07bb3b89e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f07bb3b8b70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f07bb3b8d00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f07bb3b7020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f07bb3b71b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f07bb3b7340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f07bb3b74d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f07bb3b7660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f07bb3b77f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f07bb3b7a80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f07bb3b7c10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f07bb3b7da0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f07bb3b6020"/>
        <function-ref name="isUart" scoped="" ref="0x7f07bb3b61b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f07bb3b6340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f07bb3b64d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f07bb3b6660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f07bb3b67f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f07bb3b6980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f07bb3b6b10"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bb3b6ca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f07bb3b5220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f07bb3b53b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f07bb3b5540"/>
        <function-ref name="tx" scoped="" ref="0x7f07bb3b56d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f07bb3b5860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f07bb3b59f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f07bb3b5b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f07bb3b5d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f07bb3b4020"/>
        <function-ref name="rx" scoped="" ref="0x7f07bb3b41b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f07bb3b4340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f07bb3b44d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f07bb3b4660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f07bb3b47f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f07bb3b4980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f07bb3ba7c0" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f07bb3ba7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f07bb3bab40"/>
        <function-ref name="userId" scoped="" ref="0x7f07bb3bacd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f07bc23f2c0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f07bc23f2c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f07bc23f640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f07bc23f7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f07bc23e8a0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bc23e8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f07bc23ec20"/>
        <function-ref name="configure" scoped="" ref="0x7f07bc23edb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f07bc2434d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f07bc2434d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f07bc243850"/>
        <function-ref name="txDone" scoped="" ref="0x7f07bc2439e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bc240020" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc240020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc2403a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc240530"/>
        <function-ref name="request" scoped="" ref="0x7f07bc2406c0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc240850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc2409e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f07bc2413f0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f07bc2413f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bc241770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f07bc23fad0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f07bc23fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f07bc23fe50"/>
        <function-ref name="userId" scoped="" ref="0x7f07bc23e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f07bc229bf0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f07bc229bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f07bc228020"/>
        <function-ref name="userId" scoped="" ref="0x7f07bc2281b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f07bc23cd60" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f07bc23cd60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f07bc23b180"/>
        <function-ref name="txDone" scoped="" ref="0x7f07bc23b310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f07bc2295e0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f07bc2295e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bc229960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f07bc23b710" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f07bc23b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bc23bab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f07bc23bd80" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f07bc23bd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f07bc229180"/>
        <function-ref name="txDone" scoped="" ref="0x7f07bc229310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f07bc1a9a60" loc="59:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f07bc1a9a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f07bc1a9e00"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f07bc1a8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f07bc1a7790" loc="64:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bc1a7790"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f07bc1a7b30"/>
        <function-ref name="configure" scoped="" ref="0x7f07bc1a7cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f07bc1a8270" loc="60:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f07bc1a8270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc1a85f0"/>
        <function-ref name="requested" scoped="" ref="0x7f07bc1a8780"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc1a8910"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc1a8aa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f07bc1a8c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bc1abca0" loc="58:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc1abca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc1a90a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc1a9230"/>
        <function-ref name="request" scoped="" ref="0x7f07bc1a93c0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc1a9550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc1a96e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f07bc1a6020" loc="65:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f07bc1a6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f07bc1a63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f07bc1a8e80" loc="61:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f07bc1a8e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f07bc1a7220"/>
        <function-ref name="userId" scoped="" ref="0x7f07bc1a73b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bb33f020" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bb33f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bb33f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f07bb33f630" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f07bb33f630"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f07bb33f9b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f07bb33fb40"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f07bb33fcd0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f07bb33fe60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f07bb33b6c0" loc="99:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f07bb33b6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f07bb33ba60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f07bb33bbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f07bb3399d0" loc="105:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f07bb3399d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f07bb339d70"/>
        <function-ref name="configure" scoped="" ref="0x7f07bb338020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f07bb3382b0" loc="106:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f07bb3382b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f07bb338630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f07bb3387c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f07bb338950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f07bb338ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f07bb33be40" loc="100:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f07bb33be40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bb33a1e0"/>
        <function-ref name="requested" scoped="" ref="0x7f07bb33a370"/>
        <function-ref name="granted" scoped="" ref="0x7f07bb33a500"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bb33a690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f07bb33a820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f07bb338d30" loc="107:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f07bb338d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f07bb3370e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f07bb337270"/>
        <function-ref name="led1On" scoped="" ref="0x7f07bb337400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f07bb337590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f07bb337720"/>
        <function-ref name="get" scoped="" ref="0x7f07bb3378b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f07bb337a40"/>
        <function-ref name="led0On" scoped="" ref="0x7f07bb3361b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bb337d60"/>
        <function-ref name="led2On" scoped="" ref="0x7f07bb337bd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f07bb336020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bb33c850" loc="98:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bb33c850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bb33cbf0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bb33cd80"/>
        <function-ref name="request" scoped="" ref="0x7f07bb33b020"/>
        <function-ref name="granted" scoped="" ref="0x7f07bb33b1b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bb33b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f07bb3392d0" loc="104:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f07bb3392d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f07bb339650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f07bb33aa70" loc="101:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f07bb33aa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f07bb33adf0"/>
        <function-ref name="userId" scoped="" ref="0x7f07bb339020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f07bb336480" loc="155:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f07bb336480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bb336800"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bb336990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f07bc19d020" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f07bc19d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f07bc19d3a0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f07bc19d530"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f07bc19d6c0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f07bc19d850"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f07bc19d9e0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f07bc19db70"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f07bc19dd00"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f07bc19c020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bc19c1b0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f07bc19c340"/>
        <function-ref name="getData" scoped="" ref="0x7f07bc19c4d0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f07bc19c660"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f07bc19c7f0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f07bc19ca80"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f07bc19cc10"/>
        <function-ref name="getIV" scoped="" ref="0x7f07bc19cda0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f07bc19b020"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f07bc19b1b0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f07bc19b340"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f07bc19b4d0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f07bc19b660"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f07bc19b7f0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f07bc19b980"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f07bc19bb10"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f07bc19bca0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f07bc19a220"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f07bc19a3b0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f07bc19a540"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f07bc19a6d0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f07bc19a860"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f07bc19a9f0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f07bc19ab80"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f07bc19ad10"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f07bc199020"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f07bc1991b0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f07bc199340"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f07bc1994d0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f07bc199660"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f07bc1997f0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f07bc199980"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f07bc199b10"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f07bc199ca0"/>
        <function-ref name="setData" scoped="" ref="0x7f07bc199e30"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f07bc198020"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f07bc1981b0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f07bc198340"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f07bc1984d0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f07bc198660"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f07bc1987f0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f07bc198d80"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f07bc197020"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f07bc1971b0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f07bc197340"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f07bc1974d0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f07bc197660"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f07bc1977f0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f07bc197980"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f07bc197b10"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f07bc197ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7f07bc18dbb0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7f07bc18dbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f07bc18c020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f07bc18c1b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f07bc18c340"/>
        <function-ref name="enableUart" scoped="" ref="0x7f07bc18c4d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f07bc18c660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f07bc18c7f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f07bc18c980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f07bc18cb10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f07bc18cca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f07bc18ce30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f07bc18b020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f07bc18b1b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f07bc18b340"/>
        <function-ref name="getUbr" scoped="" ref="0x7f07bc18b5d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f07bc18b760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f07bc18b8f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f07bc18ba80"/>
        <function-ref name="isUart" scoped="" ref="0x7f07bc18bc10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f07bc18bda0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f07bc18a020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f07bc18a1b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f07bc18a340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f07bc18a4d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f07bc18a660"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bc18a7f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f07bc18ab80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f07bc18ad10"/>
        <function-ref name="setUbr" scoped="" ref="0x7f07bc189020"/>
        <function-ref name="tx" scoped="" ref="0x7f07bc1891b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f07bc189340"/>
        <function-ref name="disableUart" scoped="" ref="0x7f07bc1894d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f07bc189660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f07bc1897f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f07bc189980"/>
        <function-ref name="rx" scoped="" ref="0x7f07bc189b10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f07bc189ca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f07bc189e30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f07bc188020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f07bc1881b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f07bc188340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f07bc185e40" loc="52:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f07bc185e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc1841e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc184370"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc184500"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc1821b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc184820"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc1849b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc184b40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc184cd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc184e60"/>
        <function-ref name="get" scoped="" ref="0x7f07bc183020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc1831b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc183340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc1834d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc183760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc1838f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bc183a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc183c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc184690"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc183da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc182020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7f07bc196d40" loc="48:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f07bc196d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f07bc1930e0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f07bc193270"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f07bc193400"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f07bc193590"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f07bc193720"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f07bc1938b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f07bc193a40"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f07bc193bd0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bc193d60"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f07bc192020"/>
        <function-ref name="getData" scoped="" ref="0x7f07bc1921b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f07bc192340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f07bc1924d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f07bc192760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f07bc1928f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f07bc192a80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f07bc192c10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f07bc192da0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f07bc191020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f07bc1911b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f07bc191340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f07bc1914d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f07bc191660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f07bc1917f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f07bc191980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f07bc191d10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f07bc190020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f07bc1901b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f07bc190340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f07bc1904d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f07bc190660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f07bc1907f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f07bc190980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f07bc190b10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f07bc190ca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f07bc190e30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f07bc18f020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f07bc18f1b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f07bc18f340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f07bc18f4d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f07bc18f660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f07bc18f7f0"/>
        <function-ref name="setData" scoped="" ref="0x7f07bc18f980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f07bc18fb10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f07bc18fca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f07bc18fe30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f07bc18e020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f07bc18e1b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f07bc18e340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f07bc18e8d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f07bc18ea60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f07bc18ebf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f07bc18ed80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f07bc18d020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f07bc18d1b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f07bc18d340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f07bc18d4d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f07bc18d660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f07bc18d7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f07bc188700" loc="51:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f07bc188700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bc188a80"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bc188c10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bc188da0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bc185a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bc1861b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bc186340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bc1864d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bc186660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bc1867f0"/>
        <function-ref name="get" scoped="" ref="0x7f07bc186980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bc186b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bc186ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bc186e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bc185120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bc1852b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bc185440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bc1855d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bc186020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bc185760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bc1858f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f07bc071c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f07bc071c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc06f210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc06f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f07bc07bda0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f07bc07bda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc07a180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f07bc074b50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f07bc074b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc073020"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0731b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f07bc06e670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bc06e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc06e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc06eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f07bc067e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f07bc067e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc066210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0663a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f07bc06ee50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f07bc06ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc06d210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc06d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f07bc05a2f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f07bc05a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc05a670"/>
        <function-ref name="write" scoped="" ref="0x7f07bc05a800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f07bc05d2f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f07bc05d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc05d670"/>
        <function-ref name="write" scoped="" ref="0x7f07bc05d800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f07bc079120" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f07bc079120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0794a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f07bc063670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f07bc063670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0639f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc063b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f07bc05e2f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f07bc05e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc05e670"/>
        <function-ref name="write" scoped="" ref="0x7f07bc05e800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f07bc073c60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f07bc073c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc072020"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0721b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f07bc072c60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f07bc072c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc071020"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0711b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f07bc068670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f07bc068670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0689f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc068b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f07bc06be50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f07bc06be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc06a210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc06a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f07bc06d670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f07bc06d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc06d9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc06db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f07bc07d760" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc07d760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f07bc07dae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f07bc07dc70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f07bc07de00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f07bc078aa0" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f07bc078aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc078e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f07bc077120" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f07bc077120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0775a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f07bc061a70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f07bc061a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc061df0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc060020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f07bc077870" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f07bc077870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc077bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f07bc05ead0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f07bc05ead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc05ee50"/>
        <function-ref name="write" scoped="" ref="0x7f07bc05d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f07bc079dc0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f07bc079dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc078180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f07bc064e50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f07bc064e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc063210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0633a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f07bc072480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f07bc072480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc072800"/>
        <function-ref name="write" scoped="" ref="0x7f07bc072990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f07bc073480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bc073480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc073800"/>
        <function-ref name="write" scoped="" ref="0x7f07bc073990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f07bc07b750" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f07bc07b750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc07bad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f07bc065e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f07bc065e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc064210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0643a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f07bc066670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f07bc066670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0669f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc066b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f07bc064670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f07bc064670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0649f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc064b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f07bc05cad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f07bc05cad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc05ce50"/>
        <function-ref name="write" scoped="" ref="0x7f07bc05a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f07bc05dad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f07bc05dad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc05de50"/>
        <function-ref name="write" scoped="" ref="0x7f07bc05c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f07bc06a670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f07bc06a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc06a9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc06ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f07bc066e50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f07bc066e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc065210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0653a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f07bc05fad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f07bc05fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc05fe50"/>
        <function-ref name="write" scoped="" ref="0x7f07bc05e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f07bc06c670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f07bc06c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc06c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc06cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f07bc05aad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f07bc05aad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bc05ae50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bc059020"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0591b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bc059340"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bc0594d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f07bc07b100" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f07bc07b100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc07b480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f07bc074370" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f07bc074370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0746f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc074880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f07bc071480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f07bc071480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc071800"/>
        <function-ref name="write" scoped="" ref="0x7f07bc071990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f07bc068e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f07bc068e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc067210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0673a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f07bc06de50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f07bc06de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc06c210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc06c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f07bc067670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f07bc067670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0679f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc067b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f07bc06f670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f07bc06f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc06f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc06fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f07bc07a450" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f07bc07a450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc07a7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f07bc06fe50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bc06fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc06e210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc06e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bc07ea80" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc07ea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc07ee00"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc07d020"/>
        <function-ref name="request" scoped="" ref="0x7f07bc07d1b0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc07d340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc07d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f07bc075020" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f07bc075020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0753a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f07bc075cc0" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f07bc075cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0740a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f07bc05f2f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f07bc05f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc05f670"/>
        <function-ref name="write" scoped="" ref="0x7f07bc05f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f07bc060ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f07bc060ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc060e50"/>
        <function-ref name="write" scoped="" ref="0x7f07bc05f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f07bc078450" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f07bc078450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0787d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f07bc0602f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f07bc0602f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc060670"/>
        <function-ref name="write" scoped="" ref="0x7f07bc060800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f07bc05c2f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f07bc05c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc05c670"/>
        <function-ref name="write" scoped="" ref="0x7f07bc05c800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f07bc06ae50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f07bc06ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc068210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0683a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f07bc065670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f07bc065670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0659f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc065b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f07bc07aaa0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f07bc07aaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc07ae20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f07bc079770" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f07bc079770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc079af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f07bc06ce50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f07bc06ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc06b210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc06b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f07bc075670" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f07bc075670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0759f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f07bc06b670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f07bc06b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc06b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc06bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f07bc063e50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f07bc063e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc061610"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0617a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f07bc0597a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f07bc0597a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bc059b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bc059cb0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc059e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bc058020"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bc0581b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f07bc044c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f07bc044c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc043210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0433a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f07bc04fda0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f07bc04fda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc04e180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f07bc048b50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f07bc048b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc046020"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0461b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f07bc042670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bc042670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0429f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc042b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f07bc03be50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f07bc03be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc03a210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc03a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f07bc042e50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f07bc042e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc041210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0413a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f07bc02e2f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f07bc02e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc02e670"/>
        <function-ref name="write" scoped="" ref="0x7f07bc02e800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f07bc0302f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f07bc0302f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc030670"/>
        <function-ref name="write" scoped="" ref="0x7f07bc030800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f07bc04d120" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f07bc04d120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc04d4a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f07bc036670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f07bc036670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0369f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc036b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f07bc0312f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f07bc0312f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc031670"/>
        <function-ref name="write" scoped="" ref="0x7f07bc031800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f07bc046c60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f07bc046c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc045020"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0451b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f07bc045c60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f07bc045c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc044020"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0441b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f07bc03c670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f07bc03c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc03c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc03cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f07bc03ee50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f07bc03ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc03d210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc03d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f07bc041670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f07bc041670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0419f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc041b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f07bc050760" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bc050760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f07bc050ae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f07bc050c70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f07bc050e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f07bc04baa0" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f07bc04baa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc04be20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f07bc04a120" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f07bc04a120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc04a5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f07bc035a70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f07bc035a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc035df0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc034020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f07bc04a870" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f07bc04a870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc04abf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f07bc031ad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f07bc031ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc031e50"/>
        <function-ref name="write" scoped="" ref="0x7f07bc030020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f07bc04ddc0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f07bc04ddc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc04b180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f07bc037e50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f07bc037e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc036210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0363a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f07bc045480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f07bc045480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc045800"/>
        <function-ref name="write" scoped="" ref="0x7f07bc045990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f07bc046480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bc046480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc046800"/>
        <function-ref name="write" scoped="" ref="0x7f07bc046990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f07bc04f750" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f07bc04f750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc04fad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f07bc038e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f07bc038e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc037210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0373a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f07bc03a670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f07bc03a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc03a9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc03ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f07bc037670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f07bc037670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0379f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc037b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f07bc02fad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f07bc02fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc02fe50"/>
        <function-ref name="write" scoped="" ref="0x7f07bc02e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f07bc030ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f07bc030ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc030e50"/>
        <function-ref name="write" scoped="" ref="0x7f07bc02f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f07bc03d670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f07bc03d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc03d9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc03db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f07bc03ae50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f07bc03ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc038210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0383a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f07bc033ad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f07bc033ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc033e50"/>
        <function-ref name="write" scoped="" ref="0x7f07bc031020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f07bc03f670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f07bc03f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc03f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc03fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f07bc02ead0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f07bc02ead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bc02ee50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bc02d020"/>
        <function-ref name="write" scoped="" ref="0x7f07bc02d1b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bc02d340"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bc02d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f07bc04f100" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f07bc04f100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc04f480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f07bc048370" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f07bc048370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0486f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc048880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f07bc044480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f07bc044480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc044800"/>
        <function-ref name="write" scoped="" ref="0x7f07bc044990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f07bc03ce50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f07bc03ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc03b210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc03b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f07bc041e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f07bc041e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc03f210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc03f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f07bc03b670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f07bc03b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc03b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc03bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f07bc043670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f07bc043670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0439f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc043b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f07bc04e450" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f07bc04e450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc04e7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f07bc043e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bc043e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc042210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0423a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bc0519e0" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bc0519e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bc051d60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bc050020"/>
        <function-ref name="request" scoped="" ref="0x7f07bc0501b0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bc050340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bc0504d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f07bc049020" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f07bc049020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0493a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f07bc049cc0" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f07bc049cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0480a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f07bc0332f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f07bc0332f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc033670"/>
        <function-ref name="write" scoped="" ref="0x7f07bc033800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f07bc034ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f07bc034ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc034e50"/>
        <function-ref name="write" scoped="" ref="0x7f07bc033020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f07bc04b450" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f07bc04b450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc04b7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f07bc0342f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f07bc0342f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc034670"/>
        <function-ref name="write" scoped="" ref="0x7f07bc034800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f07bc02f2f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f07bc02f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc02f670"/>
        <function-ref name="write" scoped="" ref="0x7f07bc02f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f07bc03de50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f07bc03de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc03c210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc03c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f07bc038670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f07bc038670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc0389f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc038b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f07bc04eaa0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f07bc04eaa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc04ee20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f07bc04d770" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f07bc04d770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc04daf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f07bc03fe50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f07bc03fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc03e210"/>
        <function-ref name="write" scoped="" ref="0x7f07bc03e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f07bc049670" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f07bc049670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bc0499f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f07bc03e670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f07bc03e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc03e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc03eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f07bc036e50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f07bc036e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc035610"/>
        <function-ref name="write" scoped="" ref="0x7f07bc0357a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f07bc02d7a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f07bc02d7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bc02db20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bc02dcb0"/>
        <function-ref name="write" scoped="" ref="0x7f07bc02de40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bc02c020"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bc02c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7f07bc025b20" loc="54:../../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f07bc025b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f07bc022020"/>
        <function-ref name="changed" scoped="" ref="0x7f07bc0221b0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f07bc022340"/>
        <function-ref name="setAddress" scoped="" ref="0x7f07bc0224d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f07bc024d20" loc="13:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <component-ref qname="LocalIeeeEui64C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f07bc024d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f07bc00c0e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f07bc008310" loc="5:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f07bc008310"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f07bc008690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReadId48" ref="0x7f07bc005880" loc="8:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f07bc005880"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bc005c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f07bbffa020" loc="8:../../../tos/chips/ds2411/Ds2411C.nc">
      <component-ref qname="Ds2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f07bbffa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbffa3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="OneWire" ref="0x7f07bbff1bd0" loc="14:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f07bbff1bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbff4020"/>
        <function-ref name="write" scoped="" ref="0x7f07bbff41b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerControl" ref="0x7f07bbff4530" loc="15:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerControl" scoped="" ref="0x7f07bbff4530"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f07bbff48b0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bbff4a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f07bbff5140" loc="11:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f07bbff5140"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbff54c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f07bbff9c50" loc="8:../../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f07bbff9c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbfe0020"/>
        <function-ref name="write" scoped="" ref="0x7f07bbfe01b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f07bbfe0540" loc="11:../../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f07bbfe0540"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bbfe08c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bbfe0a50"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bbfe0be0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bbfe0d70"/>
        <function-ref name="get" scoped="" ref="0x7f07bbfdf020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bbfdf1b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bbfdf340"/>
        <function-ref name="clr" scoped="" ref="0x7f07bbfdf4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f07bbfd7950" loc="15:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f07bbfd7950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd034640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f07bd0349b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f07bbfda780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f07bbfdc150" loc="11:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f07bbfdc150"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbfdc4d0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbfdc660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f07bbfdc9f0" loc="14:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f07bbfdc9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bbfdcd70"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bbfdb020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bbfdb1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bbfdb340"/>
        <function-ref name="get" scoped="" ref="0x7f07bbfdb4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bbfdb660"/>
        <function-ref name="set" scoped="" ref="0x7f07bbfdb7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bbfdb980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f07bbfdeca0" loc="41:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f07bbfdeca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd034640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f07bd0349b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f07bbfb6ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f07bbfb4a90" loc="54:../../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f07bbfb4a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd034640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f07bd0349b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f07bbfa58d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f07bbfa4020" loc="55:../../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f07bbfa4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd034640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f07bd0349b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bbfa4e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bbfa3800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bbfa3340"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bbfa3cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430CounterMicro" ref="0x7f07bbf9e530" loc="46:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <component-ref qname="Msp430CounterMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f07bbf9e530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd034640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f07bd0349b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bbf9d3d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bbf9dd50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bbf9d890"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bbf9c260"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f07bbf97020" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f07bbf97020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bbf973a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f07bbf97530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f07bbf976c0"/>
        <function-ref name="get" scoped="" ref="0x7f07bbf97850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f07bbf979e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bbf97b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f07bbf97d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bbf96020"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bbf961b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f07bbf96340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f07bbf964d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f07bbf9be50" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f07bbf9be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd034640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f07bd0349b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bbf99ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bbf98670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bbf981b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bbf98b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Gpio" ref="0x7f07bbfe1590" loc="3:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <component-ref qname="HplDs2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Gpio" scoped="" ref="0x7f07bbfe1590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bbfe1910"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bbfe1aa0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bbfe1c30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bbfe1dc0"/>
        <function-ref name="get" scoped="" ref="0x7f07bbf92020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bbf921b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bbf92340"/>
        <function-ref name="clr" scoped="" ref="0x7f07bbf924d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f07bbf90c50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f07bbf90c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bbf8e020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bbf8e1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f07bbf8e340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f07bbf8c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bbf8e660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bbf8e7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f07bbf8e980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f07bbf8eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bbf8eca0"/>
        <function-ref name="get" scoped="" ref="0x7f07bbf8ee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f07bbf8d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f07bbf8d1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f07bbf8d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f07bbf8d5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f07bbf8d760"/>
        <function-ref name="set" scoped="" ref="0x7f07bbf8d8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f07bbf8da80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f07bbf8dc10"/>
        <function-ref name="clr" scoped="" ref="0x7f07bbf8e4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f07bbf8dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f07bbf919e0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f07bbf919e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bbf91d60"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bbf90020"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bbf901b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bbf90340"/>
        <function-ref name="get" scoped="" ref="0x7f07bbf904d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bbf90660"/>
        <function-ref name="set" scoped="" ref="0x7f07bbf907f0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bbf90980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f07bbf871b0" loc="14:../../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <component-ref qname="Ds2411PowerControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f07bbf871b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f07bbf87530"/>
        <function-ref name="stop" scoped="" ref="0x7f07bbf876c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f07bbf78cb0" loc="46:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bbf78cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f07bbf770a0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f07bbf77230"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f07bbf773c0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f07bbf77550"/>
        <function-ref name="setCca" scoped="" ref="0x7f07bbf776e0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f07bbf77870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f07bbf72990" loc="47:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f07bbf72990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f07bbf72d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Transmit" ref="0x7f07bbf78020" loc="45:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f07bbf78020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbf783a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbf78530"/>
        <function-ref name="modify" scoped="" ref="0x7f07bbf786c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbf78850"/>
        <function-ref name="resend" scoped="" ref="0x7f07bbf789e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f07bbf7b6c0" loc="44:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f07bbf7b6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f07bbf7ba40"/>
        <function-ref name="stop" scoped="" ref="0x7f07bbf7bbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f07bbf74150" loc="48:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f07bbf74150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f07bbf744d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f07bbf68970" loc="51:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bbf68970"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f07bbf68cf0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f07bbf68e80"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f07bbf67030"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f07bbf671c0"/>
        <function-ref name="setCca" scoped="" ref="0x7f07bbf67350"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f07bbf674e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f07bbf60950" loc="58:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f07bbf60950"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f07bbf5e020"/>
        <function-ref name="clear" scoped="" ref="0x7f07bbf5e750"/>
        <function-ref name="isValid" scoped="" ref="0x7f07bbf5f780"/>
        <function-ref name="set" scoped="" ref="0x7f07bbf5ee80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f07bbf49020" loc="78:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bbf49020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbf493a0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbf49530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f07bbf49890" loc="79:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f07bbf49890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbf49c10"/>
        <function-ref name="write" scoped="" ref="0x7f07bbf49da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f07bbf67900" loc="52:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f07bbf67900"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f07bbf67c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXONCCA" ref="0x7f07bbf4c530" loc="72:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f07bbf4c530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbf4c8b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CaptureSFD" ref="0x7f07bbf5b880" loc="60:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f07bbf5b880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f07bbf5bc00"/>
        <function-ref name="disable" scoped="" ref="0x7f07bbf5bd90"/>
        <function-ref name="captured" scoped="" ref="0x7f07bbf5a020"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f07bbf5a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BackoffTimer" ref="0x7f07bbf66ae0" loc="55:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BackoffTimer" scoped="" ref="0x7f07bbf66ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bbf63390"/>
        <function-ref name="fired" scoped="" ref="0x7f07bbf64360"/>
        <function-ref name="startAt" scoped="" ref="0x7f07bbf64ce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bbf64820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f07bbf63850"/>
        <function-ref name="start" scoped="" ref="0x7f07bbf65970"/>
        <function-ref name="stop" scoped="" ref="0x7f07bbf65e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f07bbf63d00" loc="56:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbf63d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f07bbf610a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f07bbf61230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f07bbf613c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f07bbf61550"/>
        <function-ref name="getPower" scoped="" ref="0x7f07bbf616e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f07bbf61870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO_RAM" ref="0x7f07bbf4e550" loc="68:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f07bbf4e550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbf4e8d0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbf4ea60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f07bbf4ee00" loc="69:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f07bbf4ee00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbf4d1c0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbf4d350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Receive" ref="0x7f07bbf42d40" loc="83:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f07bbf42d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbf460e0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f07bbf46270"/>
        <function-ref name="sfd" scoped="" ref="0x7f07bbf46400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f07bbf6abc0" loc="50:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f07bbf6abc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbf68020"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbf681b0"/>
        <function-ref name="modify" scoped="" ref="0x7f07bbf68340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbf684d0"/>
        <function-ref name="resend" scoped="" ref="0x7f07bbf68660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ChipSpiResource" ref="0x7f07bbf50d10" loc="66:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bbf50d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f07bbf4f0e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f07bbf4f270"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f07bbf4f400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHTX" ref="0x7f07bbf4cc60" loc="73:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f07bbf4cc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbf4b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f07bbf54820" loc="62:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f07bbf54820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bbf54ba0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bbf54d30"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bbf52020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bbf521b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bbf52340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bbf524d0"/>
        <function-ref name="set" scoped="" ref="0x7f07bbf52660"/>
        <function-ref name="clr" scoped="" ref="0x7f07bbf527f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bbf6bc60" loc="48:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bbf6bc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bbf6a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f07bbf61bb0" loc="57:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbf61bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbf60020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f07bbf601b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f07bbf60340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7f07bbf55be0" loc="59:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f07bbf55be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bbf5b020"/>
        <function-ref name="isSet" scoped="" ref="0x7f07bbf5b1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbf5b340"/>
        <function-ref name="set" scoped="" ref="0x7f07bbf5b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f07bbf4b3e0" loc="74:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bbf4b3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbf4b960"/>
        <function-ref name="write" scoped="" ref="0x7f07bbf4baf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f07bbf50020" loc="65:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f07bbf50020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bbf503a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bbf50530"/>
        <function-ref name="request" scoped="" ref="0x7f07bbf506c0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bbf50850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bbf509e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CCA" ref="0x7f07bbf5a500" loc="61:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f07bbf5a500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bbf5a980"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bbf5ab10"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bbf5aca0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bbf5ae30"/>
        <function-ref name="get" scoped="" ref="0x7f07bbf54020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bbf541b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bbf54340"/>
        <function-ref name="clr" scoped="" ref="0x7f07bbf544d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f07bbf48130" loc="80:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f07bbf48130"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbf484b0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbf48640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXNONCE" ref="0x7f07bbf489c0" loc="81:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f07bbf489c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbf48d40"/>
        <function-ref name="write" scoped="" ref="0x7f07bbf47020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f07bbf4d6d0" loc="70:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f07bbf4d6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbf4da50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFD" ref="0x7f07bbf52b40" loc="63:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f07bbf52b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bbf51020"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bbf511b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bbf51340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bbf514d0"/>
        <function-ref name="get" scoped="" ref="0x7f07bbf51660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bbf517f0"/>
        <function-ref name="set" scoped="" ref="0x7f07bbf51980"/>
        <function-ref name="clr" scoped="" ref="0x7f07bbf51b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f07bbf466c0" loc="84:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f07bbf466c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f07bbf46a40"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f07bbf46bd0"/>
        <function-ref name="led1On" scoped="" ref="0x7f07bbf46d60"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f07bbf45020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f07bbf451b0"/>
        <function-ref name="get" scoped="" ref="0x7f07bbf45340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f07bbf454d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f07bbf45b10"/>
        <function-ref name="set" scoped="" ref="0x7f07bbf45660"/>
        <function-ref name="led0On" scoped="" ref="0x7f07bbf457f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f07bbf45980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f07bbf4a5e0" loc="77:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bbf4a5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbf4a960"/>
        <function-ref name="write" scoped="" ref="0x7f07bbf4aaf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f07bbf6a320" loc="49:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f07bbf6a320"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f07bbf6a6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bbf6a830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO" ref="0x7f07bbf4f780" loc="67:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f07bbf4f780"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bbf4fb00"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bbf4fc90"/>
        <function-ref name="write" scoped="" ref="0x7f07bbf4fe20"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bbf4e020"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bbf4e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXON" ref="0x7f07bbf4dde0" loc="71:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f07bbf4dde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbf4c180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXENC" ref="0x7f07bbf4be80" loc="76:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f07bbf4be80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbf4a220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f07bbf660f0" loc="53:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f07bbf660f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f07bbf66470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f07bbea8c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f07bbea8c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea7210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea73a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f07bbeb2020" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f07bbeb2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeb23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f07bbeacc70" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f07bbeacc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbeaa020"/>
        <function-ref name="write" scoped="" ref="0x7f07bbeaa1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f07bbea6670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bbea6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea69f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea6b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f07bbe9fe50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f07bbe9fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe9e210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe9e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f07bbea6e50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f07bbea6e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea5210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea53a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f07bbe922f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f07bbe922f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe92670"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe92800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f07bbe942f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f07bbe942f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe94670"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe94800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f07bbeb1370" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f07bbeb1370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeb16f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f07bbe9a670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f07bbe9a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe9a9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe9ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f07bbe952f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f07bbe952f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe95670"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe95800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f07bbeaac60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f07bbeaac60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea9020"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f07bbea9c60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f07bbea9c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea8020"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f07bbea0670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f07bbea0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea09f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea0b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f07bbea2e50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f07bbea2e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea1210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f07bbea5670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f07bbea5670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea59f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea5b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f07bbeb48f0" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bbeb48f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f07bbeb4c70"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f07bbeb4e00"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f07bbeb3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f07bbeafd00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f07bbeafd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeae0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f07bbeae370" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f07bbeae370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeae7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f07bbe99a70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f07bbe99a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe99df0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe98020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f07bbeaeac0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f07bbeaeac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeaee40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f07bbe95ad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f07bbe95ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe95e50"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe94020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f07bbeaf060" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f07bbeaf060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeaf3e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f07bbe9be50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f07bbe9be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe9a210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe9a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f07bbea9480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f07bbea9480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea9800"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea9990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f07bbeaa480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bbeaa480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbeaa800"/>
        <function-ref name="write" scoped="" ref="0x7f07bbeaa990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f07bbeb3940" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f07bbeb3940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeb3cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f07bbe9ce50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f07bbe9ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe9b210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe9b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f07bbe9e670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f07bbe9e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe9e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe9eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f07bbe9b670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f07bbe9b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe9b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe9bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f07bbe93ad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f07bbe93ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe93e50"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe92020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f07bbe94ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f07bbe94ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe94e50"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe93020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f07bbea1670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f07bbea1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea19f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea1b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f07bbe9ee50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f07bbe9ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe9c210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe9c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f07bbe97ad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f07bbe97ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe97e50"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe95020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f07bbea3670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f07bbea3670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea39f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea3b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f07bbe92ad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f07bbe92ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bbe92e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bbe91020"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe911b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bbe91340"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bbe914d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f07bbeb32f0" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f07bbeb32f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeb3670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f07bbeac490" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f07bbeac490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbeac810"/>
        <function-ref name="write" scoped="" ref="0x7f07bbeac9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f07bbea8480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f07bbea8480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea8800"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea8990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f07bbea0e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f07bbea0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe9f210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe9f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f07bbea5e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f07bbea5e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea3210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f07bbe9f670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f07bbe9f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe9f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe9fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f07bbea7670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f07bbea7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea79f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea7b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f07bbeb2670" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f07bbeb2670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeb29f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f07bbea7e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bbea7e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea6210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bbeb5c30" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bbeb5c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bbeb4020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bbeb41b0"/>
        <function-ref name="request" scoped="" ref="0x7f07bbeb4340"/>
        <function-ref name="granted" scoped="" ref="0x7f07bbeb44d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bbeb4660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f07bbead160" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f07bbead160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbead4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f07bbeade00" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f07bbeade00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeac1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f07bbe972f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f07bbe972f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe97670"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe97800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f07bbe98ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f07bbe98ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe98e50"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe97020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f07bbeaf6b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f07bbeaf6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeafa30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f07bbe982f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f07bbe982f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe98670"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe98800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f07bbe932f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f07bbe932f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe93670"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe93800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f07bbea1e50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f07bbea1e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea0210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f07bbe9c670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f07bbe9c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe9c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe9cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f07bbeb2cc0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f07bbeb2cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeb10a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f07bbeb19c0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f07bbeb19c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeb1d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f07bbea3e50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f07bbea3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea2210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f07bbead7b0" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f07bbead7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbeadb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f07bbea2670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f07bbea2670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbea29f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbea2b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f07bbe9ae50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f07bbe9ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe99610"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe997a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f07bbe917a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f07bbe917a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bbe91b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bbe91cb0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe91e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bbe90020"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bbe901b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f07bbe85df0" loc="42:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f07bbe85df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbe821c0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f07bbe82350"/>
        <function-ref name="sfd" scoped="" ref="0x7f07bbe824e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f07bbe827c0" loc="43:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f07bbe827c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbe82b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f07bbe80020" loc="44:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f07bbe80020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f07bbe803a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f07bbe855c0" loc="41:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f07bbe855c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f07bbe85940"/>
        <function-ref name="stop" scoped="" ref="0x7f07bbe85ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFO" ref="0x7f07bbe78380" loc="54:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f07bbe78380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bbe78700"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bbe78890"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bbe78a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bbe78bb0"/>
        <function-ref name="get" scoped="" ref="0x7f07bbe78d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bbe77020"/>
        <function-ref name="set" scoped="" ref="0x7f07bbe771b0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bbe77340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f07bbe71b90" loc="64:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f07bbe71b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f07bbe70020"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f07bbe701b0"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f07bbe70340"/>
        <function-ref name="syncDone" scoped="" ref="0x7f07bbe704d0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f07bbe70660"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f07bbe707f0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f07bbe70980"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f07bbe70b10"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f07bbe70ca0"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f07bbe70e30"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f07bbe6f020"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f07bbe6f1b0"/>
        <function-ref name="sync" scoped="" ref="0x7f07bbe6f340"/>
        <function-ref name="getChannel" scoped="" ref="0x7f07bbe6f5d0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f07bbe6f760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveDone_task" ref="0x7f07bbe5a9d0" loc="148:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveDone_task" scoped="" ref="0x7f07bbe5a9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bbe5ad50"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bbe58020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f07bbe6fd70" loc="65:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f07bbe6fd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f07bbe6c330"/>
        <function-ref name="clear" scoped="" ref="0x7f07bbe6ca60"/>
        <function-ref name="isValid" scoped="" ref="0x7f07bbe6eba0"/>
        <function-ref name="set" scoped="" ref="0x7f07bbe6b210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFOP" ref="0x7f07bbe776b0" loc="55:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f07bbe776b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bbe77a30"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bbe77bc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bbe77d50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bbe76020"/>
        <function-ref name="get" scoped="" ref="0x7f07bbe761b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bbe76340"/>
        <function-ref name="set" scoped="" ref="0x7f07bbe764d0"/>
        <function-ref name="clr" scoped="" ref="0x7f07bbe76660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f07bbe6acb0" loc="69:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bbe6acb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe690a0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe69230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f07bbe69590" loc="70:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f07bbe69590"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe69910"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe69aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXNONCE" ref="0x7f07bbe676d0" loc="72:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f07bbe676d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe67a50"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe67be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f07bbe72330" loc="62:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbe72330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f07bbe726b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f07bbe72840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f07bbe729d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f07bbe72b60"/>
        <function-ref name="getPower" scoped="" ref="0x7f07bbe72cf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f07bbe72e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f07bbe7b550" loc="49:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f07bbe7b550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbe7b8d0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f07bbe7ba60"/>
        <function-ref name="sfd" scoped="" ref="0x7f07bbe7bbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SACK" ref="0x7f07bbe733a0" loc="60:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f07bbe733a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbe73720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f07bbe79020" loc="53:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f07bbe79020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f07bbe793a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f07bbe79530"/>
        <function-ref name="toggle" scoped="" ref="0x7f07bbe796c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f07bbe79850"/>
        <function-ref name="get" scoped="" ref="0x7f07bbe799e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f07bbe79b70"/>
        <function-ref name="set" scoped="" ref="0x7f07bbe79d00"/>
        <function-ref name="clr" scoped="" ref="0x7f07bbe78020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO_RAM" ref="0x7f07bbe66020" loc="73:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f07bbe66020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe663a0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe66530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bbe7c620" loc="47:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bbe7c620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bbe7c9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f07bbe711e0" loc="63:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbe711e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbe71560"/>
        <function-ref name="getHeader" scoped="" ref="0x7f07bbe716f0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f07bbe71880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f07bbe7a020" loc="50:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f07bbe7a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbe7a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f07bbe756e0" loc="58:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f07bbe756e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bbe75a60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bbe75bf0"/>
        <function-ref name="request" scoped="" ref="0x7f07bbe75d80"/>
        <function-ref name="granted" scoped="" ref="0x7f07bbe74020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bbe741b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f07bbe69e00" loc="71:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f07bbe69e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe671c0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe67350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO" ref="0x7f07bbe74530" loc="59:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f07bbe74530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bbe748b0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bbe74a40"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe74bd0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bbe74d60"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bbe73020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f07bbe668b0" loc="74:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f07bbe668b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbe66e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f07bbe7a7c0" loc="51:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f07bbe7a7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f07bbe7ab40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f07bbe65150" loc="76:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f07bbe65150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f07bbe654d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f07bbe65660"/>
        <function-ref name="led1On" scoped="" ref="0x7f07bbe657f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f07bbe65980"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f07bbe65b10"/>
        <function-ref name="get" scoped="" ref="0x7f07bbe65ca0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f07bbe65e30"/>
        <function-ref name="led2Off" scoped="" ref="0x7f07bbe644d0"/>
        <function-ref name="set" scoped="" ref="0x7f07bbe64020"/>
        <function-ref name="led0On" scoped="" ref="0x7f07bbe641b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f07bbe64340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f07bbe6a3e0" loc="68:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bbe6a3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbe6a760"/>
        <function-ref name="write" scoped="" ref="0x7f07bbe6a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXDEC" ref="0x7f07bbe6bb10" loc="67:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f07bbe6bb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbe6a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptFIFOP" ref="0x7f07bbe76a50" loc="56:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f07bbe76a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f07bbe76dd0"/>
        <function-ref name="disable" scoped="" ref="0x7f07bbe75020"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f07bbe751b0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f07bbe75340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHRX" ref="0x7f07bbe73ad0" loc="61:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f07bbe73ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbe72020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f07bbe7cca0" loc="48:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f07bbe7cca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f07bbe7b0a0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bbe7b230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f07bbdf9a70" loc="44:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f07bbdf9a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f07bbdf9df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f07bbdfd670" loc="41:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbdfd670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f07bbdfd9f0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f07bbdfdb80"/>
        <function-ref name="getRssi" scoped="" ref="0x7f07bbdfdd10"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f07bbdfa020"/>
        <function-ref name="getPower" scoped="" ref="0x7f07bbdfa1b0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f07bbdfa340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f07bbdf8550" loc="46:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f07bbdf8550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f07bbdf7b00"/>
        <function-ref name="clear" scoped="" ref="0x7f07bbdf52a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f07bbdf73d0"/>
        <function-ref name="set" scoped="" ref="0x7f07bbdf59d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f07bbdf90c0" loc="43:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbdf90c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbdf9440"/>
        <function-ref name="getHeader" scoped="" ref="0x7f07bbdf95d0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f07bbdf9760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f07bbdf0480" loc="48:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f07bbdf0480"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bbdf0800"/>
        <function-ref name="isSet" scoped="" ref="0x7f07bbdf0990"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbdf0b20"/>
        <function-ref name="set" scoped="" ref="0x7f07bbdf0cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f07bbdf4660" loc="47:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f07bbdf4660"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f07bbdf3ce0"/>
        <function-ref name="clear" scoped="" ref="0x7f07bbdf1460"/>
        <function-ref name="isValid" scoped="" ref="0x7f07bbdf35b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bbdf1b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f07bbdfa6e0" loc="42:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f07bbdfa6e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f07bbdfaa60"/>
        <function-ref name="noAck" scoped="" ref="0x7f07bbdfabf0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f07bbdfad80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f07bbdea020" loc="49:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f07bbdea020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f07bbdea3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f07bbdefd20" loc="46:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbdefd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f07bbdec0e0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f07bbdec270"/>
        <function-ref name="getRssi" scoped="" ref="0x7f07bbdec400"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f07bbdec590"/>
        <function-ref name="getPower" scoped="" ref="0x7f07bbdec720"/>
        <function-ref name="getLqi" scoped="" ref="0x7f07bbdec8b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f07bbde14a0" loc="56:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f07bbde14a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bbde1820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f07bbde19b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbde1b40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbde1cd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f07bbde1e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f07bbdeaa80" loc="51:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f07bbdeaa80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f07bbde7020"/>
        <function-ref name="clear" scoped="" ref="0x7f07bbde7750"/>
        <function-ref name="isValid" scoped="" ref="0x7f07bbde88d0"/>
        <function-ref name="set" scoped="" ref="0x7f07bbde7e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f07bbdeb640" loc="48:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbdeb640"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbdeb9c0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f07bbdebb50"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f07bbdebce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f07bbde28b0" loc="53:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f07bbde28b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bbde2c30"/>
        <function-ref name="isSet" scoped="" ref="0x7f07bbde2dc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbde1020"/>
        <function-ref name="set" scoped="" ref="0x7f07bbde11b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime32khz" ref="0x7f07bbddf3b0" loc="57:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime32khz" scoped="" ref="0x7f07bbddf3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bbdde020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f07bbdde6e0" loc="58:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f07bbdde6e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bbddd3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f07bbde6af0" loc="52:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f07bbde6af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f07bbde30d0"/>
        <function-ref name="clear" scoped="" ref="0x7f07bbde3800"/>
        <function-ref name="isValid" scoped="" ref="0x7f07bbde4970"/>
        <function-ref name="set" scoped="" ref="0x7f07bbde2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f07bbdecc50" loc="47:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f07bbdecc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f07bbdeb020"/>
        <function-ref name="noAck" scoped="" ref="0x7f07bbdeb1b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f07bbdeb340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f07bbd8d020" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f07bbd8d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bbd8dc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f07bbd8c300" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f07bbd8c300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f07bd034200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f07bbd8b150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f07bbd8bad0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f07bbd8b610"/>
        <function-ref name="overflow" scoped="" ref="0x7f07bbd8a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f07bbd88450" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="CC2420PacketC.DummyTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f07bbd88450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f07bd035680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f07bd0359f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f07bbd84a20"/>
        <function-ref name="fired" scoped="" ref="0x7f07bbd85020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f07bbd85da0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f07bbd85920"/>
        <function-ref name="getdt" scoped="" ref="0x7f07bbd834a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f07bbd83020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f07bbd854a0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f07bbd86090"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f07bbd84410"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f07bbd86560"/>
        <function-ref name="stop" scoped="" ref="0x7f07bbd86a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f07bbd72c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f07bbd72c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd71210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd713a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f07bbd7c020" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f07bbd7c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd7c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f07bbd76c70" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f07bbd76c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd75020"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd751b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f07bbd70670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f07bbd70670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd709f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd70b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f07bbd69e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f07bbd69e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd68210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd683a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f07bbd70e50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f07bbd70e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd6f210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd6f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f07bbd5c2f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f07bbd5c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd5c670"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd5c800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f07bbd5f2f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f07bbd5f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd5f670"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd5f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f07bbd7b370" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f07bbd7b370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd7b6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f07bbd64670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f07bbd64670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd649f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd64b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f07bbd602f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f07bbd602f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd60670"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd60800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f07bbd75c60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f07bbd75c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd74020"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd741b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f07bbd74c60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f07bbd74c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd72020"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd721b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f07bbd6a670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f07bbd6a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd6a9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd6ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f07bbd6de50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f07bbd6de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd6b210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd6b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f07bbd6f670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f07bbd6f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd6f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd6fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f07bbd7e970" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f07bbd7e970"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f07bbd7ecf0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f07bbd7ee80"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f07bbd7d030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f07bbd7ad00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f07bbd7ad00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd780a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f07bbd78370" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f07bbd78370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd787f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f07bbd63a70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f07bbd63a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd63df0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd62020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f07bbd78ac0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f07bbd78ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd78e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f07bbd60ad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f07bbd60ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd60e50"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd5f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f07bbd7a060" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f07bbd7a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd7a3e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f07bbd65e50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f07bbd65e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd64210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd643a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f07bbd74480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f07bbd74480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd74800"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd74990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f07bbd75480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f07bbd75480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd75800"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd75990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f07bbd7d950" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f07bbd7d950"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd7dcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f07bbd67e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f07bbd67e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd65210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd653a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f07bbd68670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f07bbd68670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd689f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd68b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f07bbd65670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f07bbd65670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd659f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd65b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f07bbd5dad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f07bbd5dad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd5de50"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd5c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f07bbd5fad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f07bbd5fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd5fe50"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd5d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f07bbd6b670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f07bbd6b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd6b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd6bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f07bbd68e50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f07bbd68e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd67210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd673a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f07bbd61ad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f07bbd61ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd61e50"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd60020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f07bbd6e670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f07bbd6e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd6e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd6eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f07bbd5cad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f07bbd5cad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bbd5ce50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bbd5b020"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd5b1b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bbd5b340"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bbd5b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f07bbd7d300" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f07bbd7d300"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd7d680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f07bbd76490" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f07bbd76490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd76810"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd769a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f07bbd72480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f07bbd72480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd72800"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd72990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f07bbd6ae50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f07bbd6ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd69210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd693a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f07bbd6fe50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f07bbd6fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd6e210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd6e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f07bbd69670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f07bbd69670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd699f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd69b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f07bbd71670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f07bbd71670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd719f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd71b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f07bbd7c670" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f07bbd7c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd7c9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f07bbd71e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f07bbd71e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd70210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd703a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bbd7fd00" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bbd7fd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bbd7e0a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bbd7e230"/>
        <function-ref name="request" scoped="" ref="0x7f07bbd7e3c0"/>
        <function-ref name="granted" scoped="" ref="0x7f07bbd7e550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bbd7e6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f07bbd77160" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f07bbd77160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd774e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f07bbd77e00" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f07bbd77e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd761c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f07bbd612f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f07bbd612f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd61670"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd61800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f07bbd62ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f07bbd62ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd62e50"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd61020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f07bbd7a6b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f07bbd7a6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd7aa30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f07bbd622f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f07bbd622f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd62670"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd62800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f07bbd5d2f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f07bbd5d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd5d670"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd5d800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f07bbd6be50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f07bbd6be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd6a210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd6a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f07bbd67670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f07bbd67670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd679f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd67b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f07bbd7ccc0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f07bbd7ccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd7b0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f07bbd7b9c0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f07bbd7b9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd7bd40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f07bbd6ee50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f07bbd6ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd6d210"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd6d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f07bbd777b0" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f07bbd777b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f07bbd77b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f07bbd6d670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f07bbd6d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd6d9f0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd6db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f07bbd64e50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f07bbd64e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f07bbd63610"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd637a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f07bbd5b7a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f07bbd5b7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f07bbd5bb20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f07bbd5bcb0"/>
        <function-ref name="write" scoped="" ref="0x7f07bbd5be40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f07bbd5a020"/>
        <function-ref name="readDone" scoped="" ref="0x7f07bbd5a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f07bbd31a20" loc="46:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f07bbd31a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f07bbd31da0"/>
        <function-ref name="rand32" scoped="" ref="0x7f07bbd30020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f07bbd2f920" loc="45:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f07bbd2f920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bbd31560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bbd35990" loc="44:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bbd35990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bbd35d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f07bbd2ba20" loc="48:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f07bbd2ba20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f07bbd2bda0"/>
        <function-ref name="rand32" scoped="" ref="0x7f07bbd2a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f07bbd2c940" loc="47:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f07bbd2c940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bbd2b560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bbd2c080" loc="46:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bbd2c080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bbd2c400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f07bbd33aa0" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="CC2420CsmaC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f07bbd33aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f07bbd33e20"/>
        <function-ref name="toIdle" scoped="" ref="0x7f07bbd1d020"/>
        <function-ref name="isState" scoped="" ref="0x7f07bbd1d1b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f07bbd1d340"/>
        <function-ref name="requestState" scoped="" ref="0x7f07bbd1d4d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f07bbd1d660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f07bbd13020" loc="44:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f07bbd13020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbd133a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbd13530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbd136c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbd13850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbd139e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f07bbd14220" loc="40:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f07bbd14220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbd145a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbd14730"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbd148c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbd14a50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbd14be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f07bbd0be60" loc="45:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f07bbd0be60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbd0a210"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbd0a3a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbd0a530"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbd0a6c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbd0a850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f07bbd0ea10" loc="40:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f07bbd0ea10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbd0ed90"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbd0b020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbd0b1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbd0b340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbd0b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f07bbd098f0" loc="47:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f07bbd098f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f07bbd09c70"/>
        <function-ref name="rand32" scoped="" ref="0x7f07bbd09e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bbd0b750" loc="41:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bbd0b750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bbd0bad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f07bbd08170" loc="48:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbd08170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbd084f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f07bbd08680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f07bbd08810"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="State" ref="0x7f07bbd0aae0" loc="46:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f07bbd0aae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f07bbd0ae60"/>
        <function-ref name="toIdle" scoped="" ref="0x7f07bbd09020"/>
        <function-ref name="isState" scoped="" ref="0x7f07bbd091b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f07bbd09340"/>
        <function-ref name="requestState" scoped="" ref="0x7f07bbd094d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f07bbd09660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f07bbd0c690" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="UniqueSendC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f07bbd0c690"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f07bbd0ca10"/>
        <function-ref name="toIdle" scoped="" ref="0x7f07bbd0cba0"/>
        <function-ref name="isState" scoped="" ref="0x7f07bbd0cd30"/>
        <function-ref name="isIdle" scoped="" ref="0x7f07bbcf7020"/>
        <function-ref name="requestState" scoped="" ref="0x7f07bbcf71b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f07bbcf7340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f07bbcf1950" loc="47:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f07bbcf1950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbcf1cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f07bbcf4aa0" loc="42:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f07bbcf4aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbcf4e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f07bbcf1200" loc="43:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f07bbcf1200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbcf1580"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f07bbceb3f0" loc="49:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f07bbceb3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbceb770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bbcecb70" loc="45:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bbcecb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bbceb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f07bbcefe30" loc="43:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f07bbcefe30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbcec1e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f07bbceba70" loc="50:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbceba70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbcebdf0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f07bbcea020"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f07bbcea1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f07bbcec570" loc="44:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f07bbcec570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbcec8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f07bbcbd020" loc="75:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f07bbcbd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbcbd3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f07bbcbd6b0" loc="76:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f07bbcbd6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbcbda30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbcbdbc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbcbdd50"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbcbc020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbcbc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f07bbcc18e0" loc="65:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f07bbcc18e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbcc1c60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbcc1df0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbcc0020"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbcc01b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbcc0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f07bbcc0c90" loc="68:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f07bbcc0c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbcbf0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbcbf230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbcbf3c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbcbf550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbcbf6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f07bbcc05e0" loc="66:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f07bbcc05e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbcc0960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bbcc2be0" loc="64:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bbcc2be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bbcc1020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bbcc11b0"/>
        <function-ref name="request" scoped="" ref="0x7f07bbcc1340"/>
        <function-ref name="granted" scoped="" ref="0x7f07bbcc14d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bbcc1660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f07bbcbfa50" loc="69:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f07bbcbfa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbcbfdd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f07bbcbe170" loc="71:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f07bbcbe170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bbcbe4f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f07bbcbe680"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbcbe810"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbcbe9a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f07bbcbeb30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f07bbcb3d70" loc="58:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f07bbcb3d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbcb2180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbcb2310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbcb24a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbcb2630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbcb27c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f07bbcb2b10" loc="59:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f07bbcb2b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbcb1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantTask" ref="0x7f07bbc84db0" loc="184:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantTask" scoped="" ref="0x7f07bbc84db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bbc82180"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bbc82310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f07bbcb12f0" loc="60:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbcb12f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f07bbcb1670"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f07bbcb1800"/>
        <function-ref name="getRssi" scoped="" ref="0x7f07bbcb1990"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f07bbcb1b20"/>
        <function-ref name="getPower" scoped="" ref="0x7f07bbcb1cb0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f07bbcb1e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f07bbcb5a20" loc="51:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f07bbcb5a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbcb5da0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbcb4020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbcb41b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbcb4340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbcb44d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f07bbcb0b70" loc="62:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f07bbcb0b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f07bbcaf020"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f07bbcaf1b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f07bbcaf340"/>
        <function-ref name="dequeue" scoped="" ref="0x7f07bbcaf4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f07bbcb0170" loc="61:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbcb0170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbcb04f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f07bbcb0680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f07bbcb0810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f07bbcb5370" loc="49:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f07bbcb5370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbcb56f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f07bbcb77b0" loc="46:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f07bbcb77b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bbcb7b30"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bbcb7cc0"/>
        <function-ref name="request" scoped="" ref="0x7f07bbcb7e50"/>
        <function-ref name="granted" scoped="" ref="0x7f07bbcb6020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bbcb61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f07bbcb64d0" loc="48:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f07bbcb64d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbcb6850"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbcb69e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbcb6b70"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbcb6d00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbcb5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f07bbcb4840" loc="52:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f07bbcb4840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbcb4bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f07bbcb3020" loc="54:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f07bbcb3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bbcb33a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f07bbcb3530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbcb36c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbcb3850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f07bbcb39e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f07bbc64dd0" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f07bbc64dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f07bbc63180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f07bbc63410" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f07bbc63410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f07bbc63790"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f07bbc63920"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f07bbc63ab0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f07bbc63c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f07bbc57b80" loc="46:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f07bbc57b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f07bbc56020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f07bbc561b0"/>
        <function-ref name="start" scoped="" ref="0x7f07bbc56340"/>
        <function-ref name="stop" scoped="" ref="0x7f07bbc564d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f07bbc55860" loc="51:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f07bbc55860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbc55be0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbc55d70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbc54020"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbc541b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbc54340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f07bbc54690" loc="52:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f07bbc54690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbc54a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f07bbc5bce0" loc="43:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f07bbc5bce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbc580a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbc58230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbc583c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbc58550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbc586e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f07bbc57080" loc="45:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f07bbc57080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f07bbc57400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f07bbc57590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f07bbc57720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f07bbc578b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendState" ref="0x7f07bbc56800" loc="47:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendState" scoped="" ref="0x7f07bbc56800"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f07bbc56b80"/>
        <function-ref name="toIdle" scoped="" ref="0x7f07bbc56d10"/>
        <function-ref name="isState" scoped="" ref="0x7f07bbc55020"/>
        <function-ref name="isIdle" scoped="" ref="0x7f07bbc551b0"/>
        <function-ref name="requestState" scoped="" ref="0x7f07bbc55340"/>
        <function-ref name="forceState" scoped="" ref="0x7f07bbc554d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f07bbc54d90" loc="53:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f07bbc54d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f07bbc53180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f07bbc53310"/>
        <function-ref name="start" scoped="" ref="0x7f07bbc534a0"/>
        <function-ref name="stop" scoped="" ref="0x7f07bbc53630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f07bbc58980" loc="44:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f07bbc58980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbc58d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f07bbc502d0" loc="41:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <component-ref qname="DummyLplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f07bbc502d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f07bbc50650"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f07bbc507e0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f07bbc50970"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f07bbc50b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f07bbc52580" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="DummyLplC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f07bbc52580"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f07bbc52900"/>
        <function-ref name="toIdle" scoped="" ref="0x7f07bbc52a90"/>
        <function-ref name="isState" scoped="" ref="0x7f07bbc52c20"/>
        <function-ref name="isIdle" scoped="" ref="0x7f07bbc52db0"/>
        <function-ref name="requestState" scoped="" ref="0x7f07bbc51020"/>
        <function-ref name="forceState" scoped="" ref="0x7f07bbc511b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f07bbc43d70" loc="45:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f07bbc43d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbc41180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbc41310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbc414a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbc41630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbc417c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f07bbc46350" loc="40:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f07bbc46350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbc466d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbc46860"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbc469f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbc46b80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbc46d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f07bbc43020" loc="41:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f07bbc43020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f07bbc433a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f07bbc43530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f07bbc436c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f07bbc43850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f07bbc439e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f07bbc3d1c0" loc="44:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f07bbc3d1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f07bbc3d540"/>
        <function-ref name="noAck" scoped="" ref="0x7f07bbc3d6d0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f07bbc3d860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f07bbc40410" loc="40:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f07bbc40410"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f07bbc40790"/>
        <function-ref name="setRetries" scoped="" ref="0x7f07bbc40920"/>
        <function-ref name="getRetries" scoped="" ref="0x7f07bbc40ab0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f07bbc40c40"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f07bbc40dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f07bbc1e690" loc="59:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f07bbc1e690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbc1ea10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f07bbc1f860" loc="58:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f07bbc1f860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbc1fbe0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbc1fd70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbc1e020"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbc1e1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbc1e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f07bbc1c610" loc="62:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f07bbc1c610"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f07bbc1c990"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f07bbc1cb20"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f07bbc1ccb0"/>
        <function-ref name="syncDone" scoped="" ref="0x7f07bbc1ce40"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f07bbc1a020"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f07bbc1a1b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f07bbc1a340"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f07bbc1a4d0"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f07bbc1a660"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f07bbc1a7f0"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f07bbc1a980"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f07bbc1ab10"/>
        <function-ref name="sync" scoped="" ref="0x7f07bbc1aca0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f07bbc19020"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f07bbc191b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f07bbc208b0" loc="54:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f07bbc208b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f07bbc20c30"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f07bbc20dc0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f07bbc1f020"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f07bbc1f1b0"/>
        <function-ref name="setCca" scoped="" ref="0x7f07bbc1f340"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f07bbc1f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f07bbc21ce0" loc="53:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f07bbc21ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f07bbc200a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f07bbc181f0" loc="64:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f07bbc181f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f07bbc18570"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f07bbc18700"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f07bbc18890"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f07bbc18a20"/>
        <function-ref name="setCca" scoped="" ref="0x7f07bbc18bb0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f07bbc18d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f07bbc22a80" loc="52:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f07bbc22a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bbc22e00"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f07bbc21020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbc211b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbc21340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f07bbc214d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f07bbc26020" loc="48:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f07bbc26020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbc263a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbc26530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbc266c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbc26850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbc269e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f07bbc24df0" loc="50:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f07bbc24df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbc231c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f07bbc1ece0" loc="60:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f07bbc1ece0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f07bbc1d0a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f07bbc1d230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f07bbc1d3c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f07bbc1d550"/>
        <function-ref name="getPower" scoped="" ref="0x7f07bbc1d6e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f07bbc1d870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f07bbc194d0" loc="63:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f07bbc194d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f07bbc19950"/>
        <function-ref name="changed" scoped="" ref="0x7f07bbc19ae0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f07bbc19c70"/>
        <function-ref name="setAddress" scoped="" ref="0x7f07bbc19e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f07bbc1db70" loc="61:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f07bbc1db70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbc1c020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f07bbc1c1b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f07bbc1c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f07bbc24210" loc="49:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f07bbc24210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbc24590"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f07bbc17d30" loc="67:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f07bbc17d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f07bbc160e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f07bbc16270"/>
        <function-ref name="led1On" scoped="" ref="0x7f07bbc16400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f07bbc16590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f07bbc16720"/>
        <function-ref name="get" scoped="" ref="0x7f07bbc168b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f07bbc16a40"/>
        <function-ref name="led2Off" scoped="" ref="0x7f07bbc151b0"/>
        <function-ref name="set" scoped="" ref="0x7f07bbc16bd0"/>
        <function-ref name="led0On" scoped="" ref="0x7f07bbc16d60"/>
        <function-ref name="led2On" scoped="" ref="0x7f07bbc15020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f07bbc23470" loc="51:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f07bbc23470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f07bbc237f0"/>
        <function-ref name="source" scoped="" ref="0x7f07bbc23980"/>
        <function-ref name="address" scoped="" ref="0x7f07bbc23b10"/>
        <function-ref name="destination" scoped="" ref="0x7f07bbc23ca0"/>
        <function-ref name="setSource" scoped="" ref="0x7f07bbc23e30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f07bbc22020"/>
        <function-ref name="type" scoped="" ref="0x7f07bbc221b0"/>
        <function-ref name="setType" scoped="" ref="0x7f07bbc22340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f07bbc224d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f07bbc22660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f07bbc227f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioResource" ref="0x7f07bbc170f0" loc="66:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioResource" scoped="" ref="0x7f07bbc170f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f07bbc17470"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f07bbc17600"/>
        <function-ref name="request" scoped="" ref="0x7f07bbc17790"/>
        <function-ref name="granted" scoped="" ref="0x7f07bbc17920"/>
        <function-ref name="isOwner" scoped="" ref="0x7f07bbc17ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f07bbaff020" loc="49:../../../tos/system/AMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f07bbaff020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbaff3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbaff530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbaff6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbaff850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbaff9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f07bbaffc30" loc="50:../../../tos/system/AMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f07bbaffc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bbafe020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f07bbafe1b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbafe340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbafe4d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f07bbafe660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f07bbafe8b0" loc="51:../../../tos/system/AMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f07bbafe8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f07bbafec30"/>
        <function-ref name="source" scoped="" ref="0x7f07bbafedc0"/>
        <function-ref name="address" scoped="" ref="0x7f07bbafd020"/>
        <function-ref name="destination" scoped="" ref="0x7f07bbafd1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f07bbafd340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f07bbafd4d0"/>
        <function-ref name="type" scoped="" ref="0x7f07bbafd660"/>
        <function-ref name="setType" scoped="" ref="0x7f07bbafd7f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f07bbafd980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f07bbafdb10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f07bbafdca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f07bbafc020" loc="52:../../../tos/system/AMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f07bbafc020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f07bbafc3a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f07bbafc530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f07bbafc6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f07bb1b8bc0" loc="49:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f07bb1b8bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bb1b7020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bb1b71b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bb1b7340"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bb1b74d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bb1b7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f07bb1b78b0" loc="50:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f07bb1b78b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bb1b7c30"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f07bb1b7dc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bb1b6020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bb1b61b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f07bb1b6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f07bb1b6590" loc="51:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f07bb1b6590"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f07bb1b6910"/>
        <function-ref name="source" scoped="" ref="0x7f07bb1b6aa0"/>
        <function-ref name="address" scoped="" ref="0x7f07bb1b6c30"/>
        <function-ref name="destination" scoped="" ref="0x7f07bb1b6dc0"/>
        <function-ref name="setSource" scoped="" ref="0x7f07bb1b5020"/>
        <function-ref name="setDestination" scoped="" ref="0x7f07bb1b51b0"/>
        <function-ref name="type" scoped="" ref="0x7f07bb1b5340"/>
        <function-ref name="setType" scoped="" ref="0x7f07bb1b54d0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f07bb1b5660"/>
        <function-ref name="setGroup" scoped="" ref="0x7f07bb1b57f0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f07bb1b5980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f07bb1b5c10" loc="52:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f07bb1b5c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f07bb1b4020"/>
        <function-ref name="noAck" scoped="" ref="0x7f07bb1b41b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f07bb1b4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f07bb1ab640" loc="44:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f07bb1ab640"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bb1ab9c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bb1abb50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bb1abce0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bb1abe70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bb1a9030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f07bb1a92e0" loc="46:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f07bb1a92e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bb1a9660"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bb1a97f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bb1a9980"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bb1a9b10"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bb1a9ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f07bb1a8020" loc="47:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MasterAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f07bb1a8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f07bb1a83a0"/>
        <function-ref name="source" scoped="" ref="0x7f07bb1a8530"/>
        <function-ref name="address" scoped="" ref="0x7f07bb1a86c0"/>
        <function-ref name="destination" scoped="" ref="0x7f07bb1a8850"/>
        <function-ref name="setSource" scoped="" ref="0x7f07bb1a89e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f07bb1a8b70"/>
        <function-ref name="type" scoped="" ref="0x7f07bb1a8d00"/>
        <function-ref name="setType" scoped="" ref="0x7f07bb1a7020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f07bb1a71b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f07bb1a7340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f07bb1a74d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f07bbb66930" loc="43:../../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f07bbb66930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbb66cb0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbb66e40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbb63020"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbb631b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbb63340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f07bbb14400" loc="51:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f07bbb14400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbb147a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbb14930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbb14ac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbb14c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbb14de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f07bbb16df0" loc="47:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f07bbb16df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f07bbb151c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbb15350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbb154e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f07bbb15670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f07bbb15800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f07bbb12720" loc="53:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f07bbb12720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bbb12aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f07bbb12c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbb12dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbb11020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f07bbb111b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBusy" ref="0x7f07bbb15b80" loc="48:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBusy" scoped="" ref="0x7f07bbb15b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBusy"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="busy" scoped="" ref="0x7f07bbb14020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f07bbb11480" loc="184:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7f07bbb11480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bbb11800"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bbb11990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f07bbb11c60" loc="140:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7f07bbb11c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f07bbb0f020"/>
        <function-ref name="runTask" scoped="" ref="0x7f07bbb0f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f07bbb13060" loc="52:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f07bbb13060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f07bbb133e0"/>
        <function-ref name="source" scoped="" ref="0x7f07bbb13570"/>
        <function-ref name="address" scoped="" ref="0x7f07bbb13700"/>
        <function-ref name="destination" scoped="" ref="0x7f07bbb13890"/>
        <function-ref name="setSource" scoped="" ref="0x7f07bbb13a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f07bbb13bb0"/>
        <function-ref name="type" scoped="" ref="0x7f07bbb13d40"/>
        <function-ref name="setType" scoped="" ref="0x7f07bbb12020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f07bbb121b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f07bbb12340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f07bbb124d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f07bbaf2020" loc="46:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="MasterAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f07bbaf2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f07bbaf23a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f07bbaf2530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f07bbaf26c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f07bbaf2850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f07bbaf29e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f07bbaf3910" loc="45:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="MasterAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f07bbaf3910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f07bbaf3c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f07bbaf2c30" loc="47:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="MasterAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f07bbaf2c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f07bbaf1020"/>
        <function-ref name="source" scoped="" ref="0x7f07bbaf11b0"/>
        <function-ref name="address" scoped="" ref="0x7f07bbaf1340"/>
        <function-ref name="destination" scoped="" ref="0x7f07bbaf14d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f07bbaf1660"/>
        <function-ref name="setDestination" scoped="" ref="0x7f07bbaf17f0"/>
        <function-ref name="type" scoped="" ref="0x7f07bbaf1980"/>
        <function-ref name="setType" scoped="" ref="0x7f07bbaf1b10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f07bbaf1ca0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f07bbaf1e30"/>
        <function-ref name="localGroup" scoped="" ref="0x7f07bbaf0020"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f07bd02ace0" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f07bd02b8d0" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Platform" loc="51:../../../tos/interfaces/Platform.nc">
      <function command="" provided="0" name="jiffiesRawSize" ref="0x7f07bd020d50" loc="109:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="node_id" ref="0x7f07bd01cc00" loc="182:../../../tos/interfaces/Platform.nc">
        <documentation loc="164:../../../tos/interfaces/Platform.nc">
          <short>&#10; Platform dependent node id.</short>
          <long>&#10; Platform dependent node id.&#10;&#10; Get a Platform defined node id.  This will typically be a serial number&#10; or mac address.&#10;&#10; Platform define PLATFORM_SERIAL_NUM_SIZE determines the&#10; size.  If not defined defaults to 4 bytes (uint32_t).  But platforms&#10; really should define it to be clear.  (see platform.h)&#10;&#10; input:  *lenp      pointer where to place the length of the number.&#10;&#10; output: *lenp      length filled in if non-null.&#10; return: *uint8_t   pointer to the serial_num or NULL.&#10;&#10; a Node Id is assumed to be a sequence of bytes starting with the&#10; msb first.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lenp" ref="0x7f07bd01c940" loc="182:../../../tos/interfaces/Platform.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRawSize" ref="0x7f07bd021030" loc="79:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRaw" ref="0x7f07bd023870" loc="78:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesExpired" ref="0x7f07bd01fb40" loc="126:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f07bd01f550" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f07bd01f8b0" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIntPriority" ref="0x7f07bd01c020" loc="162:../../../tos/interfaces/Platform.nc">
        <documentation loc="153:../../../tos/interfaces/Platform.nc">
          <short>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.</short>
          <long>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.&#10;   modern computer hardware allows the assignment of different priorities&#10;   to interrupt sources.  This is inherently a platform thing.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="irq_number" ref="0x7f07bd01ecd0" loc="162:../../../tos/interfaces/Platform.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set_unaligned_traps" ref="0x7f07bd01e5a0" loc="150:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on_off" ref="0x7f07bd01e320" loc="150:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesRaw" ref="0x7f07bd0205b0" loc="108:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="localTime" ref="0x7f07bd0230e0" loc="64:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsExpired" ref="0x7f07bd021dd0" loc="95:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f07bd0217e0" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f07bd021b40" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f07bcfdeb40" loc="48:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f07bcfe1de0" loc="43:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f07bcfde420" loc="47:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f07bcfe1700" loc="42:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f07bcfe05a0" loc="45:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f07bcfe48f0" loc="40:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f07bcfe1020" loc="41:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f07bcfe0cc0" loc="46:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f07bd14e7e0" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f07bd416700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f07bd074a80" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f07bd0721f0" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f07bd0742b0" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f07bd1ec020" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f07bdb8ce80" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f07bd4d4e20" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f07bd4d4610" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f07bd4c8770" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event.&#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f07bd4c6020" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f07bcf7a020" loc="61:../../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f07bcf7a7d0" loc="67:../../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f07bcf79020" loc="72:../../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f07bcf78020" loc="83:../../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f07bcf767d0" loc="100:../../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f07bcf75020" loc="117:../../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f07bcf797b0" loc="77:../../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f07bcf75b90" loc="134:../../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f07bcf75910" loc="134:../../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f07bcf7c850" loc="56:../../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f07bcf78800" loc="89:../../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f07bcf76020" loc="94:../../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f07bcf6b8a0" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f07bcf6a020" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f07bcf6da40" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f07bcf6ae80" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f07bcf6b190" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f07bcf6a740" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f07bcf70c40" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f07bcf6d350" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f07bcf40880" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f07bcf3f020" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f07bcf3bb10" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f07bcf3b890" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullUp" ref="0x7f07bcf395d0" loc="126:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f07bcf42120" loc="59:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f07bcf3e020" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f07bcf39d60" loc="134:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="129:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDriveStrength" ref="0x7f07bcf38860" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="136:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short> &#10; Set port drive strength.</short>
          <long> &#10; Set port drive strength.&#10; @param mode: MSP430_PORT_DRIVE_STRENGTH_*&#10; @return EINVAL if invalid mode or pin doesn't support drive&#10;     strength config.&#10; FAIL if pin is not an output&#10; SUCCESS if pin supports it, is an output, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f07bcf385e0" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f07bcf3f760" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f07bcf400e0" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getDriveStrength" ref="0x7f07bcf36190" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get drive strength.</short>
          <long>&#10; Get drive strength.&#10; @return MSP430_PORT_DRIVE_STRENGTH_*&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f07bcf3d770" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullDown" ref="0x7f07bcf3ae30" loc="125:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f07bcf428c0" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorOff" ref="0x7f07bcf3a3e0" loc="124:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; set resistor mode directly.</short>
          <long>&#10; set resistor mode directly.&#10;&#10; You have to know what you are doing when you use these.  These routines&#10; assume that the port is set for input (PxDIR).  The routines explicitly&#10; change the value of the bits setting in PxOUT.&#10;&#10; The advantage of using these routines is efficiency because there is no&#10; mode checking.  In addition, no error check is done to make sure that the&#10; port is in input mode.  The thing is, first, this is something that you&#10; get right once and then it doesn't change so why check and, second no&#10; one actually checks the error return because there really isn't any&#10; point to doing the check because this isn't something you actually need&#10; to check the return code for.  So why have one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f07bcf43270" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f07bcf3e7a0" loc="91:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f07bcf3b020" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f07bcf3d020" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f07bcf439a0" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f07bcc0d110" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f07bcc11e40" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f07bcc0c600" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f07bcc0c380" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f07bcc11460" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f07bcc0d960" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f07bcc9a350" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f07bcc9a350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f07bcc931f0" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f07bcc98a60" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f07bcc95820" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f07bcc95250" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f07bcc95590" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f07bcc96a60" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f07bcc91270" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f07bcc93980" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f07bcc96270" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f07bcc99020" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f07bcc9ac40" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f07bcc94820" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f07bcc94250" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f07bcc94590" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f07bcc99ae0" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f07bcc99860" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f07bcc98350" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <function command="" provided="0" name="clear" ref="0x7f07bcc373f0" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bcc37170" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f07bcc35490" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bcc35210" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f07bcc337b0" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bcc331b0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f07bcc334e0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f07bcc328a0" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f07bcc34930" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bcc34370" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f07bcc346a0" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f07bcc1b2c0" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f07bcc30930" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f07bcc30cb0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f07bcc1b020" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f07bcc18970" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bcc18370" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f07bcc186a0" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f07bcc17a60" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f07bcc1a630" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bcc1a3b0" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f07bcc19b80" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bcc195a0" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f07bcc198f0" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f07bcc139c0" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
              <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bcc13060" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f07bcc133b0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f07bcc136e0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f07bcc222a0" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f07bcc49180"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f07bcc22020" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f07bcc2bd60" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f07bcc2bae0" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f07bcc2e1f0" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f07bcc2ecb0" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f07bcc2ea30" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f07bcc287a0" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f07bcc281c0" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f07bcc28510" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f07bcc2a2b0" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f07bcc2cc40" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f07bcc2a020" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f07bcc25bf0" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f07bcc25970" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f07bcc27020" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f07bcc239a0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f07bcc23cc0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f07bcc4ad50"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f07bcc269f0" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f07bcc26770" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f07bcc20730" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f07bcc49180"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f07bcc20150" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f07bcc204a0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f07bcc49180"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f07bcc1f580" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f07bcc49180"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f07bcbcf6d0" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f07bcbcf6d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f07bcbca020" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f07bcbc5070" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f07bcbc5070"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f07bcbc52b0" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bcbc52b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f07bcbc2e00" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bcbc52b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f07bcbc4e40" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f07bcbc2460" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bcbc52b0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bcbc52b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f07bcbc3e60" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bcbc52b0"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f07bcbc21d0" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bcbc52b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f07bcbc3640" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f07bcbc0620" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bcbc52b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f07bcbc5e10" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bcbc52b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f07bcbc5b90" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bcbc52b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f07bcbc4680" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f07bcb9f350" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f07bcb9fcd0" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f07bcb9fa50" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f07bcb9e750" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f07bcb9e4d0" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f07bcb9c2a0" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f07bcb9c020" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f07bcb9c990" loc="46:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f07bcbadad0" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f07bcbab400" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f07bcbab180" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f07bcbac270" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f07bcbb3d30" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f07bcbac9b0" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f07bcbb0c50" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f07bcbad3e0" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f07bcbb0510" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f07bcbaf390" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f07bcbafca0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f07bcbafa20" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f07bcbabe10" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f07bcbabb90" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f07bcba43a0" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10;&#10; It has a predefined idea of what mode that capture should occur in.&#10; If that doesn't work for you, use setControl.&#10;&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; @param ccis configures which input channel to use.&#10;&#10; Msp430Timer.h has convenience definitions:&#10;&#10;     MSP430TIMER_CM_NONE,            MSP430TIMER_CCI_A&#10;     MSP430TIMER_CM_RISING,          MSP430TIMER_CCI_B&#10;     MSP430TIMER_CM_FALLING,         MSP430TIMER_CCI_GND&#10;     MSP430TIMER_CM_BOTH             MSP430TIMER_CCI_VCC&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f07bcba5d70" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
          <variable name="ccis" ref="0x7f07bcba4110" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f07bcba7350" loc="41:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f07bcfd5550"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f07bcfd4020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f07bcba4d40" loc="76:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f07bcba2c40" loc="78:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f07bcba54e0" loc="56:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short>&#10; Sets the time in compare mode.</short>
          <long>&#10; Sets the time in compare mode.&#10;&#10; setControlAsCompare has a predefined, hardcoded idea of&#10; how the control register should be set for doing a compare.&#10;&#10; Your mileage may vary and this may not work for you.   In&#10; which case you set use setControl.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f07bcba24b0" loc="77:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f07bcba7af0" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f07bcba62b0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f07bcba6d00" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f07bcfd5550"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f07bcfd4020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f07bcba6a80" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f07bcfd5550"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f07bcfd4020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f07bcb8ed60" loc="45:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="42:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f07bcb88400" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="76:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f07bcb88180" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f07bcb87020" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="87:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f07bcb88d10" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f07bcb899a0" loc="74:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="71:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f07bcb890e0" loc="69:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="59:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f07bcb8b740" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f07bcb8b4c0" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f07bcb5d1f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f07bca0de10" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f07bca0de10"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f07bca08070" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bca08070"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f07bca08990" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return counter value.</short>
          <long>&#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bca08070"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f07bca07ad0" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f07bca07270" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f07bca06270" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSkew" loc="51:../../../tos/lib/timer/TimeSkew.nc">
      <documentation loc="35:../../../tos/lib/timer/TimeSkew.nc">
        <short>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.</short>
        <long>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.  Under various circumstances&#10; adjustments may be made by this underlying timing that can result&#10; in time skew.&#10;&#10; Typically this can occur when the RTC (Real Time Clock) subsystem&#10; has had its time adjusted for example via a GPS providing synchronized&#10; time.  If this skew is below a reasonable threshold (platform dependent)&#10; TimeSkew.skew(skew_val) will be signalled.  Beyond that threshold&#10; it might be better to reboot and reestablish reasonable time via&#10; those mechanisms.&#10;&#10; @author Eric B.Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function event="" provided="0" name="skew" ref="0x7f07bc946e80" loc="62:../../../tos/lib/timer/TimeSkew.nc">
        <documentation loc="52:../../../tos/lib/timer/TimeSkew.nc">
          <short>&#10; Signaled when the underlying timing system has detected timing&#10; skew.</short>
          <long>&#10; Signaled when the underlying timing system has detected timing&#10; skew.&#10;&#10; @param skew    estimated skew computed.  in millisecs (units platform&#10;                dependent, typically binary millisecs).&#10;                > 0, time has been moved into the future (we were slow).&#10;                &#60; 0, time has been shifted backwards, (we were fast).&#10;                = 0, skew is beyond platform limits.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSkew"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f07bdb80930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skew" ref="0x7f07bc946c00" loc="62:../../../tos/lib/timer/TimeSkew.nc">
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f07bdb80930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f07bc8a1020" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f07bc8a1020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f07bc8a1260" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bc8a1260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7f07bc89e0b0" loc="63:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bc8a1260"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc89fe00" loc="63:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f07bc89d2a0" loc="70:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc89d020" loc="70:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7f07bc8a1e20" loc="49:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc8a1ba0" loc="49:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f07bc89c610" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bc8a1260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc89c020" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f07bc89c380" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bc8a1260"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7f07bc890680" loc="65:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc890060" loc="65:../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7f07bc8903f0" loc="65:../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7f07bc88e850" loc="71:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc88e5d0" loc="71:../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7f07bc891810" loc="57:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7f07bc894d60" loc="52:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7f07bc894ae0" loc="52:../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f07bc8a62e0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc8a6060" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f07bc8a5510" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc8a5290" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f07bc8a3680" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc8a3400" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioBackoff" loc="54:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <short>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.</short>
        <long>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.  &#10; &#10; This is because of fan-out issues with multiple components wanting to&#10; affect backoffs for whatever they're interested in:&#10; If you signal out an *event* to request an initial backoff and&#10; several components happen to be listening, then those components&#10; would be required to return a backoff value.  We don't want that&#10; behavior.&#10; With this strategy, components can listen for the requests and then&#10; decide if they want to affect the behavior.  If the component wants to&#10; affect the behavior, it calls back using the setXYZBackoff(..) command.&#10; If several components call back, then the last component to get its &#10; word in has the final say. &#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="requestCca" ref="0x7f07bc867520" loc="95:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="90:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on whether or not to use CCA on the outbound packet.</short>
          <long>&#10; Request for input on whether or not to use CCA on the outbound packet.&#10; Replies should come in the form of setCca(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc8672a0" loc="95:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestInitialBackoff" ref="0x7f07bc86a780" loc="81:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="76:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; </short>
          <long>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc86a500" loc="81:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCongestionBackoff" ref="0x7f07bc86ce70" loc="66:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="62:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestCongestionBackoff event&#10; </short>
          <long>&#10; Must be called within a requestCongestionBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f07bc86cbf0" loc="66:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInitialBackoff" ref="0x7f07bc86c350" loc="60:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="56:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestInitialBackoff event&#10; </short>
          <long>&#10; Must be called within a requestInitialBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f07bc86c0d0" loc="60:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCca" ref="0x7f07bc86b8d0" loc="73:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="68:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Enable CCA for the outbound packet.</short>
          <long>&#10; Enable CCA for the outbound packet.  Must be called within a requestCca&#10; event&#10; @param ccaOn TRUE to enable CCA, which is the default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ccaOn" ref="0x7f07bc86b650" loc="73:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestCongestionBackoff" ref="0x7f07bc868690" loc="88:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="83:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; </short>
          <long>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc868410" loc="88:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7f07bc85be60" loc="59:../../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7f07bc85b850" loc="59:../../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f07bc85bbd0" loc="59:../../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Packet" loc="40:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <function command="" provided="0" name="setPower" ref="0x7f07bc876120" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="49:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Set transmission power for a given packet.</short>
          <long>&#10; Set transmission power for a given packet. Valid ranges are&#10; between 0 and 31.&#10;&#10; @param p_msg the message.&#10; @param power transmission power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f07bc877ae0" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="power" ref="0x7f07bc877e30" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setNetwork" ref="0x7f07bc872710" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f07bc872110" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="networkId" ref="0x7f07bc872480" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRssi" ref="0x7f07bc876c00" loc="64:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="58:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get rssi value for a given packet.</short>
          <long>&#10; Get rssi value for a given packet. For received packets, it is&#10; the received signal strength when receiving that packet. For sent&#10; packets, it is the received signal strength of the ack if an ack&#10; was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="signed char" size="I:1" alignment="I:1">
            <typename><typedef-ref name="int8_t" ref="0x7f07bdb80110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f07bc876980" loc="64:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNetwork" ref="0x7f07bc873620" loc="75:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f07bc8733a0" loc="75:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPower" ref="0x7f07bc8772e0" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="42:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get transmission power setting for current packet.</short>
          <long>&#10; Get transmission power setting for current packet.&#10;&#10; @param the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f07bc877060" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLqi" ref="0x7f07bc874760" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="66:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get lqi value for a given packet.</short>
          <long>&#10; Get lqi value for a given packet. For received packets, it is the&#10; link quality indicator value when receiving that packet. For sent&#10; packets, it is the link quality indicator value of the ack if an&#10; ack was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f07bc8744e0" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7f07bc85f6c0" loc="65:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc85f440" loc="65:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7f07bc863790" loc="46:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc863170" loc="46:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7f07bc863500" loc="46:../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7f07bc861680" loc="59:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc861400" loc="59:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7f07bc862b90" loc="53:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc862570" loc="53:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7f07bc862900" loc="53:../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7f07bc85e6c0" loc="71:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc85e440" loc="71:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7f07bc86e2a0" loc="47:../../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc86e020" loc="47:../../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f07bc855e00" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc855840" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f07bc855b70" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f07bc84a620" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc84a020" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f07bc84a350" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f07bc848660" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f07bc84c2a0" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc84c020" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f07bc84b750" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc84b170" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f07bc84b4c0" loc="100:../../../tos/interfaces/Send.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f07bc852cc0" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.&#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource&#10;&#10; @note This command should never be called between putting in a request&#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event,&#10;       we have opted to keep thing simple and warn you about the potential&#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f07bc854cc0" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f07bc854350" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f07bc8524f0" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f07bc8518a0" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Transmit" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <short>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f07bc8273a0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send a message&#10;&#10; </short>
          <long>&#10; Send a message&#10;&#10; @param p_msg message to send.&#10; @param useCca TRUE if this Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f07bc82cdc0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="useCca" ref="0x7f07bc827110" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f07bc8266a0" loc="65:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="60:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Cancel sending of the message.</short>
          <long>&#10; Cancel sending of the message.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="modify" ref="0x7f07bc823e70" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="75:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Modify the contents of a packet.</short>
          <long>&#10; Modify the contents of a packet. This command can only be used&#10; when an SFD capture event for the sending packet is signalled.&#10;&#10; @param offset in the message to start modifying.&#10; @param buf to data to write&#10; @param len of bytes to write&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f07bc823060" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f07bc8238a0" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f07bc823bd0" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f07bc825840" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="67:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Signal that a message has been sent&#10;&#10; </short>
          <long>&#10; Signal that a message has been sent&#10;&#10; @param p_msg message to send.&#10; @param error notifaction of how the operation went.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f07bc825260" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f07bc8255b0" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resend" ref="0x7f07bc827e30" loc="58:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send the previous message again&#10; </short>
          <long>&#10; Send the previous message again&#10; @param useCca TRUE if this re-Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="useCca" ref="0x7f07bc827bb0" loc="58:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../../tos/interfaces/Random.nc">
      <documentation loc="34:../../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7f07bc81f0e0" loc="52:../../../tos/interfaces/Random.nc">
        <documentation loc="48:../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7f07bc828870" loc="46:../../../tos/interfaces/Random.nc">
        <documentation loc="42:../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f07bc832a40" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f07bc82a270" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420PacketBody" loc="37:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <short>&#10; Internal interface for the CC2420 to get portions of a packet.</short>
        <long>&#10; Internal interface for the CC2420 to get portions of a packet.&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="getPayload" ref="0x7f07bc8192e0" loc="49:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="45:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the payload region of the message, after any headers&#10;    works with extended addressing mode&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc819020" loc="49:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getHeader" ref="0x7f07bc81a710" loc="42:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="39:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_header_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_header" ref="0x7f07bcc843a0"/>
              <typename><typedef-ref name="cc2420_header_t" ref="0x7f07bcc83d10"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc81a410" loc="42:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMetadata" ref="0x7f07bc818620" loc="53:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="50:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_metadata_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_metadata" ref="0x7f07bcc81860"/>
              <typename><typedef-ref name="cc2420_metadata_t" ref="0x7f07bcc7f180"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bc818320" loc="53:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Power" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio power operations (e.g. voltage&#10; regulator, oscillator, etc). However, it does not include&#10; transmission power, see the CC2420Config interface.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="startOscillator" ref="0x7f07bc82f6e0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="65:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the oscillator.</short>
          <long>&#10; Start the oscillator. On SUCCESS, &#60;code>startOscillator&#60;/code>&#10; will be signalled when the oscillator has been started.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rfOff" ref="0x7f07bc82d840" loc="97:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="92:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Disable RX.</short>
          <long>&#10; Disable RX.&#10;&#10; @return SUCCESS if receive mode has been disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxOn" ref="0x7f07bc82d070" loc="90:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="85:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Enable RX.</short>
          <long>&#10; Enable RX.&#10;&#10; @return SUCCESS if receive mode has been enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startVReg" ref="0x7f07bc834e20" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the voltage regulator on the CC2420.</short>
          <long>&#10; Start the voltage regulator on the CC2420. On SUCCESS,&#10; &#60;code>startVReg()&#60;/code> will be signalled when the voltage&#10; regulator is fully on.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopVReg" ref="0x7f07bc831e80" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="58:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the voltage regulator immediately.</short>
          <long>&#10; Stop the voltage regulator immediately.&#10;&#10; @return SUCCESS always&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startOscillatorDone" ref="0x7f07bc82e020" loc="76:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="73:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the oscillator has been started.</short>
          <long>&#10; Signals that the oscillator has been started.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopOscillator" ref="0x7f07bc82e840" loc="83:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="78:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the oscillator.</short>
          <long>&#10; Stop the oscillator.&#10;&#10; @return SUCCESS if the oscillator was stopped, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startVRegDone" ref="0x7f07bc8316c0" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the voltage regulator has been started.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="State" loc="38:../../../tos/interfaces/State.nc">
      <documentation loc="33:../../../tos/interfaces/State.nc">
        <short>&#10; State machine interface&#10; </short>
        <long>&#10; State machine interface&#10; @author David Moss - dmm@rincon.com&#10;</long>
      </documentation>
      <function command="" provided="0" name="getState" ref="0x7f07bc813d00" loc="71:../../../tos/interfaces/State.nc">
        <documentation loc="68:../../../tos/interfaces/State.nc">
          <short>&#10; Get the current state&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toIdle" ref="0x7f07bc814350" loc="56:../../../tos/interfaces/State.nc">
        <documentation loc="53:../../../tos/interfaces/State.nc">
          <short>&#10; Set the current state back to S_IDLE&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isState" ref="0x7f07bc813530" loc="66:../../../tos/interfaces/State.nc">
        <documentation loc="63:../../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in the given state&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="myState" ref="0x7f07bc8132b0" loc="66:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isIdle" ref="0x7f07bc814ac0" loc="61:../../../tos/interfaces/State.nc">
        <documentation loc="58:../../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in S_IDLE&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requestState" ref="0x7f07bc815020" loc="45:../../../tos/interfaces/State.nc">
        <documentation loc="40:../../../tos/interfaces/State.nc">
          <short>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.</short>
          <long>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.&#10; @return SUCCESS if the state is change, FAIL if it isn't&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f07bc81cc90" loc="45:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="forceState" ref="0x7f07bc815ad0" loc="51:../../../tos/interfaces/State.nc">
        <documentation loc="47:../../../tos/interfaces/State.nc">
          <short>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.</short>
          <long>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f07bc815850" loc="51:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Config" loc="46:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio configurations. All get() and set()&#10; commands are single-phase. After setting some values, a call to&#10; sync() is required for the changes to propagate to the cc2420&#10; hardware chip. This interface allows setting multiple parameters&#10; before calling sync().&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/06/16 15:33:32 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setAutoAck" ref="0x7f07bc7b7870" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="100:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync must be called for acknowledgement changes to take effect&#10; </short>
          <long>&#10; Sync must be called for acknowledgement changes to take effect&#10; @param enableAutoAck TRUE to enable auto acknowledgements&#10; @param hwAutoAck TRUE to default to hardware auto acks, FALSE to&#10;     default to software auto acknowledgements&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAutoAck" ref="0x7f07bc7b7290" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </variable>
          <variable name="hwAutoAck" ref="0x7f07bc7b75e0" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAddressRecognitionEnabled" ref="0x7f07bc7b91f0" loc="93:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="90:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddressRecognition" ref="0x7f07bc7ba880" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="81:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @param enableAddressRecognition TRUE to turn address recognition on&#10; @param useHwAddressRecognition TRUE to perform address recognition first&#10;     in hardware. This doesn't affect software address recognition. The&#10;     driver must sync with the chip after changing this value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAddressRecognition" ref="0x7f07bc7ba210" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </variable>
          <variable name="useHwAddressRecognition" ref="0x7f07bc7ba5f0" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="syncDone" ref="0x7f07bc7c0c10" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f07bc7c0990" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAddressRecognitionDefault" ref="0x7f07bc7b9a70" loc="98:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="95:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is performed first in hardware.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShortAddr" ref="0x7f07bc7bc730" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f07bc7bc4b0" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f07bc7bfd30" loc="61:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f07bc7bfab0" loc="61:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAutoAckEnabled" ref="0x7f07bc7b6ae0" loc="117:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="114:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if auto acks are enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPanAddr" ref="0x7f07bc7bb9c0" loc="78:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f07bc7bb740" loc="78:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAutoAckDefault" ref="0x7f07bc7b62b0" loc="112:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="108:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if hardware auto acks are the default, FALSE if software&#10;     acks are the default&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getExtAddr" ref="0x7f07bc7be4d0" loc="66:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="63:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Get the long address of the radio: set in hardware&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f07bc893ac0"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f07bc88b240"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShortAddr" ref="0x7f07bc7becc0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="68:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the short address of the radio.</short>
          <long>&#10; Change the short address of the radio.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sync" ref="0x7f07bc7c01f0" loc="54:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="48:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync configuration changes with the radio hardware.</short>
          <long>&#10; Sync configuration changes with the radio hardware. This only&#10; applies to set commands below.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f07bc7bf390" loc="60:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the channel of the radio, between 11 and 26&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPanAddr" ref="0x7f07bc7bb020" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="74:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the PAN address of the radio.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../../tos/interfaces/Read.nc">
      <documentation loc="33:../../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10;&#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f07bc7b44a0" loc="49:../../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f07bc7b44a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f07bc7b4d60" loc="55:../../../tos/interfaces/Read.nc">
        <documentation loc="50:../../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10;&#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f07bc7b1ac0" loc="63:../../../tos/interfaces/Read.nc">
        <documentation loc="57:../../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f07bc7b44a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f07bc7b1510" loc="63:../../../tos/interfaces/Read.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </variable>
          <variable name="val" ref="0x7f07bc7b1830" loc="63:../../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f07bc7b44a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Register" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
      <documentation loc="33:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <short>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio.</short>
        <long>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio. The return values (when appropriate) refer to the&#10; status byte returned on the CC2420 SO pin. A full list of RW&#10; registers can be found on page 61 of the CC2420 datasheet (rev&#10; 1.2). Page 25 of the same document describes the protocol for&#10; interacting with these registers over the CC2420 SPI bus.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f07bc793ce0" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="49:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Read a 16-bit data word from the register.</short>
          <long>&#10; Read a 16-bit data word from the register.&#10;&#10; @param data pointer to place the register value.&#10; @return status byte from the read.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f07bcc88550"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f07bc793a60" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f07bc78c7f0" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Write a 16-bit data word to the register.</short>
          <long>&#10; Write a 16-bit data word to the register.&#10; &#10; @param data value to write to register.&#10; @return status byte from the write.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f07bcc88550"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f07bc78c570" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalIeeeEui64" loc="43:../../../tos/interfaces/LocalIeeeEui64.nc">
      <documentation loc="39:../../../tos/interfaces/LocalIeeeEui64.nc">
        <short>&#10; Interface to read the 64-bit IEEE EUI.</short>
        <long>&#10; Interface to read the 64-bit IEEE EUI.&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="getId" ref="0x7f07bc7a7c50" loc="48:../../../tos/interfaces/LocalIeeeEui64.nc">
        <documentation loc="44:../../../tos/interfaces/LocalIeeeEui64.nc">
          <short>&#10; Get the 64-bit IEEE EUI.</short>
          <long>&#10; Get the 64-bit IEEE EUI.&#10; @returns the 64-bit IEEE EUI type, defined in tos/types/IeeeEui64.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalIeeeEui64"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f07bc893ac0"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f07bc88b240"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7f07bc7950e0" loc="50:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7f07bc794070" loc="60:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7f07bc7958c0" loc="55:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f07bcc49180"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7f07bc797860" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f07bcc49180"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7f07bc797280" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f07bcc49180"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7f07bc7975d0" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f07bcc49560"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Strobe" loc="44:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
      <documentation loc="33:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <short>&#10; Interface representing one of the CC2420 command strobe registers.</short>
        <long>&#10; Interface representing one of the CC2420 command strobe registers.&#10; Writing to one of these registers enacts a command on the CC2420,&#10; such as power-up, transmission, or clear a FIFO.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="strobe" ref="0x7f07bc788e40" loc="53:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <documentation loc="46:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
          <short>&#10; Send a command strobe to the register.</short>
          <long>&#10; Send a command strobe to the register. The return value is the&#10; CC2420 status register. Table 5 on page 27 of the CC2420&#10; datasheet (v1.2) describes the contents of this register.&#10; &#10; @return Status byte from the CC2420.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Strobe"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f07bcc88550"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Ram" loc="41:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <short>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f07bc791060" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="43:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Read data from a RAM.</short>
          <long>&#10; Read data from a RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f07bcc88550"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f07bc7921e0" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f07bc792a50" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f07bc792da0" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f07bc78f7b0" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="54:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Write data to RAM.</short>
          <long>&#10; Write data to RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f07bcc88550"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f07bc791930" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f07bc78f1c0" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f07bc78f510" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:../../../tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:../../../tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f07bc7997e0" loc="68:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:../../../tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f07bc799020" loc="61:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:../../../tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x7f07bc79a720" loc="54:../../../tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x7f07bc79ddb0" loc="53:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:../../../tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7f07bc673190" loc="54:../../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f07bc66c350" loc="66:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f07bc673b30" loc="61:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f07bc6738b0" loc="61:../../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7f07bc6768f0" loc="53:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Interrupt" loc="39:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
      <documentation loc="34:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f07bc649800" loc="54:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.</short>
          <long> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f07bc645270" loc="85:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port.</short>
          <long>&#10; Signalled when an interrupt occurs on a port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f07bc649070" loc="49:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Disables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Disables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x7f07bc6479a0" loc="80:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets whether the edge should be high to low or low to high.</short>
          <long>&#10; Sets whether the edge should be high to low or low to high.&#10;&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition.&#10;&#10; DEPRECATED.&#10;&#10; The if generates extra code that doesn't need to be there.   Replaced&#10; by edge{Rising,Falling}();&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x7f07bc647720" loc="80:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeFalling" ref="0x7f07bc647020" loc="67:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7f07bc64c870" loc="44:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Enables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Enables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeRising" ref="0x7f07bc648810" loc="66:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="63:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets rising or falling edge for the interrupt generation&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x7f07bc648030" loc="61:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Gets the current input value of a port.</short>
          <long> &#10; Gets the current input value of a port.&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ChipSpiResource" loc="17:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
      <documentation loc="2:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <short>&#10; Interface for the SPI resource for an entire chip.</short>
        <long>&#10; Interface for the SPI resource for an entire chip.  The chip accesses&#10; the platform SPI resource one time, but can have multiple clients &#10; using the SPI bus on top.  When all of the clients are released, the&#10; chip will normally try to release itself from the platforms SPI bus.&#10; In some cases, this isn't desirable - so even though upper components&#10; aren't actively using the SPI bus, they can tell the chip to hold onto&#10; it so they can have immediate access when they need. &#10;&#10; Any component that aborts a release MUST attempt the release at a later&#10; time if they don't acquire and release the SPI bus naturally after the&#10; abort.&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="releasing" ref="0x7f07bc4f4810" loc="24:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="19:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; The SPI bus is about to be automatically released.</short>
          <long>&#10; The SPI bus is about to be automatically released.  Modules that aren't&#10; using the SPI bus but still want the SPI bus to stick around must call&#10; abortRelease() within the event.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="abortRelease" ref="0x7f07bc4f30e0" loc="31:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="27:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Abort the release of the SPI bus.</short>
          <long>&#10; Abort the release of the SPI bus.  This must be called only with the&#10; releasing() event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="attemptRelease" ref="0x7f07bc4f3920" loc="39:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="33:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Release the SPI bus if there are no objections&#10; </short>
          <long>&#10; Release the SPI bus if there are no objections&#10; @return SUCCESS if the SPI bus is released from the chip.&#10;      FAIL if the SPI bus is already in use.&#10;      EBUSY if some component aborted the release.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Fifo" loc="40:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <short>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="continueRead" ref="0x7f07bc4cb420" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Continue reading from the FIFO without having to send the address&#10; byte again.</short>
          <long>&#10; Continue reading from the FIFO without having to send the address&#10; byte again. The &#60;code>readDone&#60;/code> event will be signalled&#10; upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f07bc4cce10" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f07bc4cb190" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7f07bc4c6700" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="84:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a write operation.</short>
          <long>&#10; Signals the completion of a write operation.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes written.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f07bc4c7d90" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f07bc4c6110" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f07bc4c6460" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f07bc4c7020" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="73:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start writing the FIFO.</short>
          <long>&#10; Start writing the FIFO. The &#60;code>writeDone&#60;/code> event will be&#10; signalled upon completion.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f07bcc88550"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f07bc4c9970" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f07bc4c9cc0" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="beginRead" ref="0x7f07bc4cc020" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="42:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start reading from the FIFO.</short>
          <long>&#10; Start reading from the FIFO. The &#60;code>readDone&#60;/code> event will&#10; be signalled upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f07bcc88550"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f07bc4ce9d0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f07bc4ced20" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f07bc4cab90" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="64:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a read operation.</short>
          <long>&#10; Signals the completion of a read operation.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes read.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f07bc4ca250" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f07bc4ca5a0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f07bc4ca8f0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f07bc4aca40" loc="76:../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f07bc4ac0d0" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f07bc4ac460" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f07bc4ac7a0" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f07bc4a8020" loc="88:../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f07bc4ab2a0" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f07bc4ab630" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f07bc4ab970" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f07bc4abce0" loc="89:../../../tos/interfaces/SpiPacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
              <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7f07bc4ae8f0" loc="45:../../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7f07bc4ae670" loc="45:../../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f07bc3ceb70" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f07bc3cb4e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430SpiConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <short>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; </short>
        <long>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f07bc3c9aa0" loc="39:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <interfacedef-ref qname="Msp430SpiConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f07bc3ff2b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f07bc401e00"/></type-tag>
            </type-qualified>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7f07bc3c86f0" loc="62:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f07bc3c8470" loc="62:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7f07bc3c6b30" loc="74:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f07bc3c68b0" loc="74:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7f07bc3c6020" loc="68:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f07bc3c55f0" loc="81:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f07bc3c5370" loc="81:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f07bc3bb020" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f07bc3bc750" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART. &#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information.&#10;&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f07bc3b4740" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f07bc3b44c0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f07bc3b7cd0" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART.&#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information. I.e. calling &#60;code>tx&#60;/done> will transmit a byte of&#10; data in the mode (SPI or UART) the USART has been set to before.&#10;&#10; @author Vlado Handziski (handzisk@tkn.tu-berlin.de)&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f07bc38f7c0" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f07bc39b2d0" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f07bc3a7020" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f07bc41c020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f07bc41c860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f07bc3aacf0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f07bc41c020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f07bc41c860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f07bc39d3b0" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f07bc3a5530" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f07bc417020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f07bc417860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f07bc3a52b0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f07bc417020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f07bc417860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f07bc3949e0" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f07bc390020" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f07bc3a6a90" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f07bc41aec0"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f07bc419680"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f07bc3a5d20" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f07bc417020"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f07bc417860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f07bc3a1b90" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f07bc3a1910" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f07bc3a11f0" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f07bc3942b0" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f07bc3a62a0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f07bc41aec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f07bc419680"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f07bc3a6020" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f07bc41aec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f07bc419680"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f07bc3a2020" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f07bc393190" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f07bc3a2a00" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f07bc3a2780" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f07bc39f480" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f07bc39fc00" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f07bc396420" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f07bc398190" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f07bc39c350" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f07bc396b60" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f07bc39bab0" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f07bc3938b0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f07bc3a0390" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f07bc422d80"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f07bc41e4d0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f07bc392070" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f07bc38f020" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f07bc3a4700" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f07bc3a4480" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f07bc38e2a0" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f07bc38e020" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f07bc3a7800" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f07bc41c020"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f07bc41c860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f07bc39db20" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f07bc399270" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f07bc397ba0" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f07bc3ebb50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f07bc3eb730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f07bc397920" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f07bc3ebb50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f07bc3eb730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f07bc398ca0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f07bc3ff2b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f07bc401e00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f07bc398a20" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f07bc3ff2b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f07bc401e00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f07bc38eac0" loc="227:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="222:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return byte received&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f07bc392860" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f07bc3a0ba0" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f07bc390780" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f07bc3999e0" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f07bc39cb30" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f07bc327020" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <function command="" provided="0" name="disableOwnAddress" ref="0x7f07bc3019d0" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7f07bc312020" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7f07bc307620" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f07bc3073a0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7f07bc31b5b0" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7f07bc304c50" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7f07bc30c5e0" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7f07bc314070" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7f07bc311020" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f07bc315020" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7f07bc316d30" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7f07bc3174b0" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7f07bc30f020" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7f07bc306550" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7f07bc301270" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7f07bc308c30" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7f07bc2fc350" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7f07bc2f89d0" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7f07bc31a420" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7f07bc310740" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7f07bc30d1f0" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7f07bc3158e0" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7f07bc31d350" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7f07bc308460" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f07bc3081e0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7f07bc320c00" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7f07bc3044d0" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7f07bc2ff190" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7f07bc2fab00" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7f07bc2f8270" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7f07bc303b90" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7f07bc2ff8c0" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7f07bc307db0" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7f07bc2fd390" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7f07bc31ab40" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7f07bc30b7e0" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7f07bc2fe7b0" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7f07bc302ac0" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7f07bc30dde0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7f07bc30db60" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7f07bc2f92d0" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7f07bc30aa60" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7f07bc303420" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7f07bc31de10" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f07bc3d74a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f07bc3d7080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f07bc31db90" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f07bc3d74a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f07bc3d7080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7f07bc310020" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7f07bc319cb0" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f07bc319a30" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7f07bc30f980" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f07bc30f700" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7f07bc2fdb60" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7f07bc316620" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7f07bc319350" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7f07bc30a2a0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7f07bc30a020" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f07bdb7f520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7f07bc31bce0" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7f07bc2fe020" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7f07bc302350" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7f07bc306cc0" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7f07bc30b020" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7f07bc30cd30" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7f07bc311740" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7f07bc3147b0" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7f07bc2f9a40" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7f07bc317e30" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f07bc317bb0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7f07bc2fcb10" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7f07bc312750" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7f07bc2fa350" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f07bc253020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f07bc253880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="38:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f07bc21edc0" loc="54:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f07bc21b020" loc="71:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f07bc21e530" loc="44:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="39:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f07bc21d6d0" loc="63:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f07bc21b950" loc="79:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwnerInfo" loc="2:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
      <function command="" provided="0" name="inUse" ref="0x7f07bc21ab20" loc="9:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
        <documentation loc="3:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
          <short>&#10; Check whether a DefaultOwner has an active client.</short>
          <long>&#10; Check whether a DefaultOwner has an active client.&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f07bc20f4c0" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f07bc218490"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f07bc20f240" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f07bc218490"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f07bc212420" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f07bc210020" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f07bc218490"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f07bc212ca0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f07bc218490"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f07bc210930" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f07bc218490"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadId48" loc="8:../../../tos/chips/ds2411/ReadId48.nc">
      <documentation loc="4:../../../tos/chips/ds2411/ReadId48.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f07bc0055e0" loc="13:../../../tos/chips/ds2411/ReadId48.nc">
        <interfacedef-ref qname="ReadId48"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f07bc005360" loc="13:../../../tos/chips/ds2411/ReadId48.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="OneWireReadWrite" loc="9:../../../tos/lib/onewire/OneWireReadWrite.nc">
      <documentation loc="5:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f07bbff2b00" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f07bbff21c0" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f07bbff2530" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f07bbff2860" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f07bbff1880" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f07bbff12c0" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f07bbff15f0" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f07bbfd8530" loc="59:../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f07bbfd8530"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f07bbfd8770" loc="59:../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bbfd8770"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7f07bbfd72e0" loc="66:../../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bbfd8770"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f07bbfd7060" loc="66:../../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f07bbfd8770"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveIndicator" loc="37:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <short>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; </short>
        <long>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="isReceiving" ref="0x7f07bbf72580" loc="43:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <documentation loc="39:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the indicator is showing we are actively receiving at this&#10; level&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveIndicator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Receive" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <short>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2008-06-17 07:28:24 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f07bbf429e0" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Signals that a message has been received.</short>
          <long>&#10; Signals that a message has been received.&#10;&#10; @param type of the message received.&#10; @param message pointer to message received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0x7f07bbf42020" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
            </type-int>
          </variable>
          <variable name="message" ref="0x7f07bbf42750" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd_dropped" ref="0x7f07bbf447f0" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="51:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that the packet has been dropped by the radio&#10; (e.g.</short>
          <long>&#10; Notification that the packet has been dropped by the radio&#10; (e.g. due to address rejection).&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd" ref="0x7f07bbf44020" loc="49:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that an SFD capture has occured.</short>
          <long>&#10; Notification that an SFD capture has occured.&#10;&#10; @param time at which the capture happened.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f07bbf47d30" loc="49:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f07bdb7f920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeSyncOffset" loc="43:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
      <function command="" provided="0" name="get" ref="0x7f07bbf583d0" loc="58:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="52:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns the offset of where the timesync timestamp is sotred in a&#10; CC2420 packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f07bdb7f160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bbf58150" loc="58:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7f07bbf593d0" loc="50:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="45:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns TRUE if the current message should be timestamped.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bbf59150" loc="50:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f07bbf55350" loc="72:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="67:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10; Cancels any pending requests to timestamp the message in MAC.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bbf550d0" loc="72:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f07bbf57390" loc="65:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="60:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10;  Sets the current message to be timestamped in the MAC layer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f07bbf57110" loc="65:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f07bcc39350"/>
                <typename><typedef-ref name="message_t" ref="0x7f07bcc389a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7f07bbd325e0" loc="53:../../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f07bbd325e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7f07bbd2f2a0" loc="64:../../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f07bd4d2020"/>
            <typename><typedef-ref name="error_t" ref="0x7f07bd4ca1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f07bbd325e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7f07bbd2f020" loc="64:../../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f07bbd325e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBusy" loc="2:../../../tos/interfaces/SendBusy.nc">
      <function command="" provided="0" name="busy" ref="0x7f07bbb5b1f0" loc="9:../../../tos/interfaces/SendBusy.nc">
        <documentation loc="3:../../../tos/interfaces/SendBusy.nc">
          <short>&#10; Check whether send queue entry is in use&#10;&#10; </short>
          <long>&#10; Check whether send queue entry is in use&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBusy"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f07bd4d8090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
