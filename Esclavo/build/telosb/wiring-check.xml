<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="26:SlaveAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f86c1d3ccf0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f86c20c4a20"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f86c20c4a20"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f86c2027110"/></to>
    </wire>
    <wire loc="27:SlaveAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f86c1d39360"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f86c200f0d0"/></to>
    </wire>
    <wire loc="51:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f86c200f0d0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f86c200dc40"/></to>
    </wire>
    <wire loc="28:SlaveAppC.nc">
      <from><interface-ref name="TimerMiSlot" scoped="" ref="0x7f86c1d2c820"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c1c6f980"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c1c6f980"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f86c1c64050"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="29:SlaveAppC.nc">
      <from><interface-ref name="TimerLeds" scoped="" ref="0x7f86c1d29cd0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c193f260"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c193f260"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f86c1c64050"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="31:SlaveAppC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f86c1cca910"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f86c0b8ec30"/></to>
    </wire>
    <wire loc="65:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f86c0b8ec30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f86c0245aa0"/></to>
    </wire>
    <wire loc="32:SlaveAppC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f86c1cba8d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f86c0b8d8b0"/></to>
    </wire>
    <wire loc="66:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f86c0b8d8b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f86c0244720"/></to>
    </wire>
    <wire loc="33:SlaveAppC.nc">
      <from><interface-ref name="AMControl" scoped="" ref="0x7f86c1ca7a50"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f86c0c34360"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f86c0c34360"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f86c192ccc0"/></to>
    </wire>
    <wire loc="34:SlaveAppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f86c1caf8f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f86c0b8e020"/></to>
    </wire>
    <wire loc="64:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f86c0b8e020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f86c0246e60"/></to>
    </wire>
    <wire loc="35:SlaveAppC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f86c1caa180"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f86c0b82910"/></to>
    </wire>
    <wire loc="54:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f86c0b82910"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f86c0c315c0"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="36:SlaveAppC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c1ca0c20"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c1925610"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c1925610"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c18ed020"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20c5020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c0d05dd0"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20c5020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c0d8eb70"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20c5020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c0daf750"/></to>
    </wire>
    <wire loc="52:../../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20c5020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c0dcc080"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20c5020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c0f1e620"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20c5020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c1015c60"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20c5020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c17aa7e0"/></to>
    </wire>
    <wire loc="73:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20c5020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c03cf020"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateImplC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20c5020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c14e6020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20c5020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c1856510"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20c5020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c1c5fe50"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f86c2027780"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f86c256e1e0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f86c256e1e0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f86c2113140"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f86c20261d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c20c1020"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f86c20c1020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c20b41a0"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20268d0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20c5020"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f86c20b6130"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f86c20b4810"/></to>
    </wire>
    <wire loc="50:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f86c20b2020"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f86c209b900"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f86c209b900"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c2082850"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f86c20b2700"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c20b5640"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f86c20b2de0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c1fe4600"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f86c2082850"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c20681c0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f86c2079de0"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f86c2068830"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f86c21e9c80"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f86c2067af0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2112040"/></to>
    </wire>
    <wire loc="56:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f86c210d490"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f86c23469a0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f86c1fe4600"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c200d640"/></to>
    </wire>
    <wire loc="54:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f86c20041d0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f86c200ed80"/></to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f86c200ed80"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1d67480"/></to>
    </wire>
    <wire loc="55:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f86c200a4d0"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f86c1fe6020"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f86c1fe6020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1d50b20"/></to>
    </wire>
    <wire loc="56:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f86c20097f0"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f86c1fe5380"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f86c1fe5380"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1d4a1b0"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c1d55610"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x7f86c1f788a0"/></to>
    </wire>
    <wire loc="737:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f86c1f788a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e21b90"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c1d4fde0"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x7f86c1f75020"/></to>
    </wire>
    <wire loc="738:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f86c1f75020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e1b060"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c1d49480"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x7f86c1f738a0"/></to>
    </wire>
    <wire loc="739:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f86c1f738a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e16540"/></to>
    </wire>
    <wire loc="693:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f86c1fc9580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1ecf060"/></to>
    </wire>
    <wire loc="706:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f86c1fb0710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e99740"/></to>
    </wire>
    <wire loc="844:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f86c1f26d30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e89540"/></to>
    </wire>
    <wire loc="864:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f86c1f2bd40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1dea060"/></to>
    </wire>
    <wire loc="845:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f86c1f54d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e84b90"/></to>
    </wire>
    <wire loc="711:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f86c1faa710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e8e060"/></to>
    </wire>
    <wire loc="724:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f86c1f918a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e58740"/></to>
    </wire>
    <wire loc="748:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f86c1f638a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1df5540"/></to>
    </wire>
    <wire loc="848:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f86c1f4fd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e78540"/></to>
    </wire>
    <wire loc="858:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f86c1f3bd40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e0b060"/></to>
    </wire>
    <wire loc="870:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f86c1f1cd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1de5540"/></to>
    </wire>
    <wire loc="696:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f86c1fc2d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1ebf060"/></to>
    </wire>
    <wire loc="849:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f86c1f4c580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e73b90"/></to>
    </wire>
    <wire loc="701:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f86c1fbdd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1eb5b90"/></to>
    </wire>
    <wire loc="714:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f86c1fa3e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e7d060"/></to>
    </wire>
    <wire loc="727:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f86c1f89020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e47540"/></to>
    </wire>
    <wire loc="740:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f86c1f6f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e11b90"/></to>
    </wire>
    <wire loc="751:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f86c1f5b020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1de5540"/></to>
    </wire>
    <wire loc="691:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f86c1fce580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1edb740"/></to>
    </wire>
    <wire loc="704:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f86c1fb5580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1ea4d10"/></to>
    </wire>
    <wire loc="717:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f86c1f9b710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e6d060"/></to>
    </wire>
    <wire loc="843:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f86c1f56580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e89540"/></to>
    </wire>
    <wire loc="861:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f86c1f32570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1dfa060"/></to>
    </wire>
    <wire loc="868:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f86c1f1e570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1de5540"/></to>
    </wire>
    <wire loc="854:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f86c1f42580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e26540"/></to>
    </wire>
    <wire loc="722:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f86c1f96710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e63dc0"/></to>
    </wire>
    <wire loc="735:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f86c1f7d8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e2c060"/></to>
    </wire>
    <wire loc="746:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f86c1f688a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e00b90"/></to>
    </wire>
    <wire loc="862:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f86c1f30d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1df5540"/></to>
    </wire>
    <wire loc="851:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f86c1f4ad40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e37540"/></to>
    </wire>
    <wire loc="694:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f86c1fc7d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1eca540"/></to>
    </wire>
    <wire loc="707:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f86c1faee50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e94b90"/></to>
    </wire>
    <wire loc="744:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f86c1f6d8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e0b060"/></to>
    </wire>
    <wire loc="712:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f86c1fa8e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e89540"/></to>
    </wire>
    <wire loc="725:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f86c1f8e020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e52b90"/></to>
    </wire>
    <wire loc="749:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f86c1f60020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1df0b90"/></to>
    </wire>
    <wire loc="853:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f86c1f45d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e2c060"/></to>
    </wire>
    <wire loc="689:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f86c1fd1530"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1f14d10"/></to>
    </wire>
    <wire loc="702:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f86c1fba580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1eaf060"/></to>
    </wire>
    <wire loc="715:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f86c1fa0710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e78540"/></to>
    </wire>
    <wire loc="728:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f86c1f878a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e42b90"/></to>
    </wire>
    <wire loc="855:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f86c1f40d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e6d060"/></to>
    </wire>
    <wire loc="859:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f86c1f38570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e06540"/></to>
    </wire>
    <wire loc="865:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f86c1f28570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1de5540"/></to>
    </wire>
    <wire loc="733:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f86c1f828a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e37540"/></to>
    </wire>
    <wire loc="856:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f86c1f3d580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e68540"/></to>
    </wire>
    <wire loc="692:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f86c1fccd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1ed6b90"/></to>
    </wire>
    <wire loc="705:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f86c1fb3e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e9e260"/></to>
    </wire>
    <wire loc="718:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f86c1f99e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e68540"/></to>
    </wire>
    <wire loc="852:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f86c1f47580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e32b90"/></to>
    </wire>
    <wire loc="863:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f86c1f2d570"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1df0b90"/></to>
    </wire>
    <wire loc="723:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f86c1f93020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e5d260"/></to>
    </wire>
    <wire loc="736:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f86c1f7a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e26540"/></to>
    </wire>
    <wire loc="747:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f86c1f65020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1dfa060"/></to>
    </wire>
    <wire loc="695:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f86c1fc4580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1ec5b90"/></to>
    </wire>
    <wire loc="745:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f86c1f6a020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e06540"/></to>
    </wire>
    <wire loc="700:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f86c1fbf580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1eba540"/></to>
    </wire>
    <wire loc="713:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f86c1fa5710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e84b90"/></to>
    </wire>
    <wire loc="726:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f86c1f8c8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e4c060"/></to>
    </wire>
    <wire loc="750:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f86c1f5e8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1dea060"/></to>
    </wire>
    <wire loc="690:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f86c1fdfd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1ee0260"/></to>
    </wire>
    <wire loc="703:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f86c1fb8d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1eaa540"/></to>
    </wire>
    <wire loc="716:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f86c1f9ee50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e73b90"/></to>
    </wire>
    <wire loc="729:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f86c1f84020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e3c060"/></to>
    </wire>
    <wire loc="860:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f86c1f35d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e00b90"/></to>
    </wire>
    <wire loc="847:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f86c1f23560"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e7d060"/></to>
    </wire>
    <wire loc="846:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f86c1f51580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e7d060"/></to>
    </wire>
    <wire loc="734:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f86c1f7f020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e32b90"/></to>
    </wire>
    <wire loc="867:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f86c1f21d40"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1dea060"/></to>
    </wire>
    <wire loc="871:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f86c1f19580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e11b90"/></to>
    </wire>
    <wire loc="842:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f86c1f598f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f86c1e8e060"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f86c1c64050"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f86c1c5cc30"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f86c1c5cc30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c19678e0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f86c1c5fe50"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c1a15020"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c19678e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c05b9db0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f86c1c52500"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f86c1957020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f86c1a15020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c07aeb10"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f86c1960020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c19e82f0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f86c19e2850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f86c1a15870"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f86c1a15870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f86c07a8890"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f86c194d300"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f86c1a8e8c0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f86c1a8e8c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f86c1a71cf0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f86c07aeb10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c0790660"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f86c07a10a0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f86c07ad4f0"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f86c07ad4f0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f86c078f020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f86c07a4c00"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f86c1a8e8c0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c078b190"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c0797340"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c0797340"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c1c22990"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c078a770"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c0796a80"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c0796a80"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c1c1f720"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c0789a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c0795da0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c0795da0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c1c1d1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c1c22990"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f86c1c099e0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f86c1c099e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c1bb3260"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c1c1f720"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f86c1c07280"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f86c1c07280"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f86c1b506d0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c1c1d1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f86c1c06700"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f86c1c06700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f86c1b4fac0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c1c22990"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f86c1c099e0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c1c1f720"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f86c1c01a50"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f86c1c01a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f86c1b40220"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c1c1d1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f86c1bff020"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f86c1bff020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f86c1b3f610"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c1c22990"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f86c1c099e0"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c1c1f720"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f86c1bfed40"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f86c1bfed40"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f86c1b396d0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c1c1d1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f86c1bfc160"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f86c1bfc160"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f86c1b38ac0"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c1c22990"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f86c1c099e0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c1c1f720"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f86c1bf9020"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f86c1bf9020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f86c1b31b30"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c1c1d1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f86c1bf8570"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f86c1bf8570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f86c1b2f020"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c1c22990"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f86c1c099e0"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c1c1f720"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f86c1bf65a0"/></to>
    </wire>
    <wire loc="175:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f86c1bf65a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f86c1b29220"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c1c1d1d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f86c1bf5a20"/></to>
    </wire>
    <wire loc="176:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f86c1bf5a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f86c1b28610"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c1c22990"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f86c1c099e0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c1c1f720"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f86c1bf38c0"/></to>
    </wire>
    <wire loc="182:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f86c1bf38c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f86c1b216d0"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c1c1d1d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f86c1bf2d40"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f86c1bf2d40"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f86c1b20ac0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f86c1c0c730"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f86c1b58220"/></to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f86c1c0d700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f86c1b5ecb0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f86c1bfa020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f86c1b377a0"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f86c1c13890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f86c1b5e020"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f86c1bf1ae0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f86c1b1f7a0"/></to>
    </wire>
    <wire loc="112:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f86c1c170c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f86c1bac6d0"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f86c1c02a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f86c1b47cb0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f86c1c03bb0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f86c1b47020"/></to>
    </wire>
    <wire loc="146:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f86c1c04730"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f86c1b49b30"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f86c1c0aa20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f86c1b562f0"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f86c1bf7570"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f86c1b2fcb0"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f86c1c0bbb0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f86c1b57610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f86c1c1b830"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c1bba3e0"/></to>
    </wire>
    <wire loc="119:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f86c1c14410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f86c1b60b30"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f86c1c0e410"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f86c1b667a0"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f86c1bffda0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f86c1b3e2f0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f86c1c16570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f86c1b67ac0"/></to>
    </wire>
    <wire loc="177:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f86c1bf4890"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f86c1b272f0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f86c1c05700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f86c1b4e7a0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f86c1bb82f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f86c1bb9bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f86c1bb8940"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f86c1b183f0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f86c1bb7020"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f86c1b18b80"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c1b65610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c1bba3e0"/></to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f86c1b63c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f86c1bb9bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c1b5db40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c1bba3e0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f86c1b5b2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f86c1bb9bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c1b55160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c1bba3e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f86c1b537a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f86c1bb9bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f86c1bb1100"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f86c1bb2a60"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f86c1bb1750"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f86c1b17430"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f86c1bb1da0"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f86c1b17bc0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c1b4d610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c1bb3260"/></to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f86c1b4cc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f86c1bb2a60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c1b46b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c1bb3260"/></to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f86c1b442f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f86c1bb2a60"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c1b3d160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c1bb3260"/></to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f86c1b3c7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f86c1bb2a60"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c1b36610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c1bb3260"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f86c1b35c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f86c1bb2a60"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c1b2eb40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c1bb3260"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f86c1b2c2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f86c1bb2a60"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c1b26160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c1bb3260"/></to>
    </wire>
    <wire loc="179:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f86c1b257a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f86c1bb2a60"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c1b1e610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f86c1bb3260"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f86c1b1dc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f86c1bb2a60"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f86c1a530f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f86c1a8c8e0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f86c1a8c8e0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f86c1a85b80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c1a77c50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f86c1c099e0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f86c19df9c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f86c05b23d0"/></from>
      <to><interface-ref name="TimerFrom" scoped="" ref="0x7f86c1960020"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimeSkew" scoped="" ref="0x7f86c05aba40"/></from>
      <to><interface-ref name="TimeSkew" scoped="" ref="0x7f86c195b450"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f86c05ac5d0"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f86c20b6130"/></to>
    </wire>
    <wire loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f86c05aa100"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f86c192ccc0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f86c18ff020"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f86c18ff020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f86c0cf9b80"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c19222c0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c0cc28b0"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f86c19121d0"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f86c0cc3ce0"/></to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f86c19278f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f86c0cc4a80"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f86c192bd20"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f86c0cc8020"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f86c1929c00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f86c0cc6df0"/></to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c18ed020"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0e9f670"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f86c190d130"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f86c18eb080"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f86c18eb080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f86c0cf9080"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f86c1929020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f86c0cc6210"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f86c1923080"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f86c18ec020"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f86c18ec020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f86c0e9c6e0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f86c1904430"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f86c18ebb70"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f86c18ebb70"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f86c0ce4020"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f86c19282d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f86c0cc5470"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f86c191a170"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f86c18ec9d0"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f86c18ec9d0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f86c0e9ba70"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioResource" scoped="" ref="0x7f86c0cb90f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c18fe530"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f86c0cc1860"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f86c18f7a70"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f86c18f7a70"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f86c0d62c90"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f86c0cc0690"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f86c18ef840"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f86c18ef840"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f86c0d61a50"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f86c0cbb4d0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f86c10cdb20"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0cc0ce0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0e9f670"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0e9f670"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0e91d20"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0cbeb70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0e9b0c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0e9b0c0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0e8d640"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f86c0cbd610"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f86c185fdc0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f86c185fdc0"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f86c1855970"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f86c0cba1f0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c18e5330"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c18e5330"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c18de7e0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f86c0cb9d30"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f86c200f0d0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f86c0cf9b80"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f86c0cf6d90"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f86c0e9ba70"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f86c0e8b020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f86c0ce4020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f86c0ce2410"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f86c0d62c90"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f86c0d57a20"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f86c0cf9080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f86c0cf22d0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f86c18f8690"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f86c0d625e0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f86c0d625e0"/></from>
      <to><interface-ref name="BareReceive" scoped="" ref="0x7f86c0d57370"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f86c0e9c6e0"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f86c0e8ec50"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c18fe530"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c0d64be0"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c0d64be0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c0d597b0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f86c18ee940"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f86c0d638e0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f86c0d638e0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7f86c0d584d0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f86c18f8d50"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f86c0d60170"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f86c0d60170"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f86c0d55020"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f86c0d61a50"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f86c0d56840"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f86c0cf6d90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f86c18e7390"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f86c18e7390"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f86c18e4e70"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f86c0d5f6b0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f86c0db4220"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f86c0db4220"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f86c0db2a10"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f86c0db3020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f86c0ce7350"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f86c0ce7350"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f86c0ce4d70"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f86c0ce4d70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f86c0cfdce0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f86c0cfdce0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f86c0cf7860"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f86c0cf7860"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f86c18e7e80"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f86c18e7e80"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f86c18df990"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f86c0d5f020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f86c0cfa980"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f86c0cfa980"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f86c0cf6690"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f86c0cf6690"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f86c0d95aa0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f86c0d95aa0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f86c0d91e30"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f86c0d92950"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f86c18e6b40"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f86c18e6b40"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f86c0f237c0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f86c0f237c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f86c0f1c020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c18dd640"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c186f950"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c186f950"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c1856b80"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f86c18d5b50"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f86c186abf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f86c186abf0"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f86c1853740"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f86c18d2760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f86c10246c0"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f86c18d2760"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f86c0f265c0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f86c0f265c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f86c0f1eca0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f86c10246c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f86c1014320"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f86c18cb2a0"/></from>
      <to><interface-ref name="CC2420Transmit" scoped="" ref="0x7f86c1021020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f86c1021020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f86c1014bc0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f86c18d1060"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c1021cb0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c1021cb0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c1013970"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c18c8330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0e9f670"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c18c0920"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0e9b0c0"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f86c18c7420"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f86c0dd1a20"/></to>
    </wire>
    <wire loc="56:../../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f86c0dd1a20"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f86c0dcba20"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControlState" scoped="" ref="0x7f86c18c4110"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f86c0dd3aa0"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f86c0dd3aa0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f86c14eb1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f86c18c7bf0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f86c200f0d0"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="sendDone_task" scoped="" ref="0x7f86c18b6b70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="stopDone_task" scoped="" ref="0x7f86c18b8ba0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="startDone_task" scoped="" ref="0x7f86c18b9c20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ReadRssi" scoped="" ref="0x7f86c185b0c0"/></from>
      <to><interface-ref name="ReadRssi" scoped="" ref="0x7f86c1851b40"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="StartupTimer" scoped="" ref="0x7f86c184ea10"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f86c17a7220"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f86c17a7220"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f86c17a1af0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f86c184ac50"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f86c1762e60"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f86c1762e60"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1754630"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f86c1849e70"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7f86c175e6a0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f86c175e6a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1743630"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f86c18470f0"/></from>
      <to><interface-ref name="VREN" scoped="" ref="0x7f86c175cce0"/></to>
    </wire>
    <wire loc="77:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f86c175cce0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1738020"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f86c1841c00"/></from>
      <to><interface-ref name="InterruptCCA" scoped="" ref="0x7f86c171d400"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f86c171d400"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f86c15bc680"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f86c182f520"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c1159e20"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c1159e20"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c156a4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f86c182e570"/></from>
      <to><interface-ref name="SRXON" scoped="" ref="0x7f86c11557b0"/></to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f86c11557b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f86c182ec80"/></from>
      <to><interface-ref name="SRFOFF" scoped="" ref="0x7f86c1154ae0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f86c1154ae0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f86c1830d70"/></from>
      <to><interface-ref name="SXOSCON" scoped="" ref="0x7f86c1157ad0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f86c1157ad0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f86c1830450"/></from>
      <to><interface-ref name="SXOSCOFF" scoped="" ref="0x7f86c1153160"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f86c1153160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f86c1834420"/></from>
      <to><interface-ref name="FSCTRL" scoped="" ref="0x7f86c114b870"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f86c114b870"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f86c1834cd0"/></from>
      <to><interface-ref name="IOCFG0" scoped="" ref="0x7f86c1148880"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f86c1148880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f86c183c5d0"/></from>
      <to><interface-ref name="IOCFG1" scoped="" ref="0x7f86c11470a0"/></to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f86c11470a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f86c1837020"/></from>
      <to><interface-ref name="MDMCTRL0" scoped="" ref="0x7f86c114fe50"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f86c114fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c18378f0"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c114e670"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c114e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f86c1838e20"/></from>
      <to><interface-ref name="PANID" scoped="" ref="0x7f86c113a500"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f86c113a500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f86c18384a0"/></from>
      <to><interface-ref name="IEEEADR" scoped="" ref="0x7f86c113bce0"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f86c113bce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f86c18331e0"/></from>
      <to><interface-ref name="RXCTRL1" scoped="" ref="0x7f86c114ce50"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f86c114ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f86c1833a80"/></from>
      <to><interface-ref name="RSSI" scoped="" ref="0x7f86c114ee50"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f86c114ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f86c18323c0"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f86c114de50"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f86c114de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SyncResource" scoped="" ref="0x7f86c182c180"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c1126a80"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c1126a80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c156a4d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RssiResource" scoped="" ref="0x7f86c182d3d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c10fa9e0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c10fa9e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c156a4d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f86c183d390"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f86c10cdb20"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f86c184e020"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f86c10ccd20"/></to>
    </wire>
    <wire loc="23:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f86c10ccd20"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f86c10b1310"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="syncDone" scoped="" ref="0x7f86c1821ca0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="sync" scoped="" ref="0x7f86c1822db0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f86c17aa7e0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c17a1260"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f86c17a1260"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c0555720"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f86c17a1af0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f86c0554020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f86c0555720"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c054e760"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f86c0554020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f86c05471d0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f86c054e760"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c0531340"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f86c0541b90"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f86c054c020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f86c054c020"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f86c0531bd0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f86c0543690"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f86c178b080"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f86c178b080"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f86c1786cd0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c052ddd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c0538e70"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c0538e70"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c1c22990"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c052b440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c05355d0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c05355d0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c1c1f720"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c052a760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c05348f0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c05348f0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c1c1d1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f86c17820f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f86c1a8c8e0"/></to>
    </wire>
    <wire loc="73:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f86c1760090"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f86c174fb00"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f86c175f390"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1748020"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f86c17a8b10"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1759020"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f86c175d9b0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f86c173eaf0"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c17582f0"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f86c1fc9580"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c17537a0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f86c1f918a0"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c174dc60"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f86c1fccd50"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c17472f0"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f86c1fd1530"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c17427a0"/></from>
      <to><interface-ref name="Port46" scoped="" ref="0x7f86c1f878a0"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c173dc60"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f86c1f93020"/></to>
    </wire>
    <wire loc="69:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c17372f0"/></from>
      <to><interface-ref name="Port45" scoped="" ref="0x7f86c1f89020"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f86c171a700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f86c1717c20"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f86c171c060"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f86c15aeb70"/></to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c16ff760"/></from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f86c1c04730"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430Capture" scoped="" ref="0x7f86c16fea80"/></from>
      <to><interface-ref name="CaptureB1" scoped="" ref="0x7f86c1c02a20"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x7f86c16fd930"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f86c1f93020"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f86c15bb2f0"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f86c16eb3f0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f86c16eb3f0"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f86c16d43f0"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f86c15ad7a0"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f86c16ee620"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f86c16ee620"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f86c16db7a0"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f86c16de3f0"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x7f86c16c83f0"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f86c16e8d50"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x7f86c16d1d50"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f86c16e53f0"/></from>
      <to><interface-ref name="Port21" scoped="" ref="0x7f86c16ce3f0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f86c16f3bc0"/></from>
      <to><interface-ref name="Port12" scoped="" ref="0x7f86c16d7d50"/></to>
    </wire>
    <wire loc="80:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f86c16e1d50"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f86c16cbd50"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f86c16ea710"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x7f86c16d3710"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f86c16dd710"/></from>
      <to><interface-ref name="Port27" scoped="" ref="0x7f86c16c7710"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f86c16e4710"/></from>
      <to><interface-ref name="Port22" scoped="" ref="0x7f86c16cd710"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f86c16ec020"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f86c16d5020"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f86c16df100"/></from>
      <to><interface-ref name="Port25" scoped="" ref="0x7f86c16c9100"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f86c16e9a30"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7f86c16d2a30"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f86c16e6020"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7f86c16cf020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f86c16f48a0"/></from>
      <to><interface-ref name="Port11" scoped="" ref="0x7f86c16d8a30"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f86c16e2a30"/></from>
      <to><interface-ref name="Port23" scoped="" ref="0x7f86c16cca30"/></to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f86c1155160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c1149880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f86c11410a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f86c11480a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f86c1136500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f86c1138500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f86c1154490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f86c113e880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f86c1139500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f86c1144880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f86c11450a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c1158a90"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c1569350"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c1569350"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c1561660"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f86c1153e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f86c1152490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f86c113dc80"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f86c1152be0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f86c1139ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f86c113e0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f86c114d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f86c113f0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f86c1141880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f86c113f880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f86c1137ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f86c1138ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f86c1145880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f86c11400a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f86c113ace0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f86c1147880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f86c1136ce0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f86c15682c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f86c1157480"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f86c114f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f86c114c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f86c11420a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f86c1142880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c11490a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f86c11512f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f86c114f020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f86c11537b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f86c113b500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f86c1137500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f86c11440a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f86c1140880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f86c1155e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f86c11460a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f86c1151940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f86c1146880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f86c113d0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f86c11349b0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f86c15682c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Fifo" scoped="" ref="0x7f86c15682c0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f86c155f890"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c155eba0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c155ca30"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c156a4d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c1560510"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c155b8b0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="WorkingState" scoped="" ref="0x7f86c154eb40"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f86c14f0770"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f86c14f0770"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f86c14eb1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f86c155a060"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c14cec40"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c14cec40"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c0455940"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f86c1557c70"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f86c14cd8f0"/></to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f86c14cd8f0"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f86c0454d70"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f86c154e2e0"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f86c117f020"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f86c117f020"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f86c0452020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f86c1558a70"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f86c200f0d0"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <from><interface-ref name="grant" scoped="" ref="0x7f86c154bbd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/system/StateImplC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f86c14eb1d0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f86c14e6b70"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f86c0452020"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f86c1466850"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f86c0454d70"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f86c1467110"/></to>
    </wire>
    <wire loc="105:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c0455940"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c146cd80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f86c04545d0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f86c044a020"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f86c044a020"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f86c12e98a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f86c1467110"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f86c13eb440"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f86c0453410"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f86c1467790"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f86c1467790"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f86c13eba50"/></to>
    </wire>
    <wire loc="111:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f86c1461a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f86c04527c0"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c043a760"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c14638e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f86c1462690"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c044b340"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c044b340"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c12ea5c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f86c145cb40"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f86c0442c10"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f86c0442c10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f86c12eea80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c14638e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c13ecc40"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f86c1466850"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f86c13e9700"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c146cd80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c13ede80"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f86c13e8e00"/></from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f86c1461a40"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f86c13e8060"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f86c1462690"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f86c13e3de0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f86c145cb40"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f86c13e7490"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f86c13db8a0"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f86c13db8a0"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f86c13d2d00"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f86c13e25a0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f86c200f0d0"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <from><interface-ref name="signalDone_task" scoped="" ref="0x7f86c13e1c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f86c13d18a0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f86c13c9290"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f86c13d43b0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f86c13ca910"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f86c139b700"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f86c1f56580"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f86c1399e40"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7f86c1f54d50"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f86c1396570"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f86c1f51580"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f86c1394d40"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7f86c1f4c580"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f86c1391570"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7f86c1f4fd50"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7f86c13a05b0"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f86c123c390"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f86c0441440"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f86c12eb9a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f86c0441a50"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f86c12488c0"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f86c12488c0"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f86c123c390"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f86c0449020"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f86c13db8a0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f86c044a7c0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f86c12e7130"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f86c12e7130"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f86c1251930"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c12e6020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c043a760"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f86c12e98a0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f86c1252530"/></to>
    </wire>
    <wire loc="81:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f86c1252530"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f86c03cb6c0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f86c12eea80"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f86c12e45c0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c12ea5c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c12536a0"/></to>
    </wire>
    <wire loc="80:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c12536a0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c03cc850"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7f86c12eb9a0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f86c12d3020"/></to>
    </wire>
    <wire loc="83:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f86c1251930"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f86c03caa70"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c1250270"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c12e6020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f86c12d14b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f86c1251930"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f86c12d3690"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f86c13d43b0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f86c12d3e70"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f86c13d18a0"/></to>
    </wire>
    <wire loc="82:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f86c1252cb0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f86c03cbe40"/></to>
    </wire>
    <wire loc="84:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c03c99d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c1250270"/></to>
    </wire>
    <wire loc="85:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f86c03c92d0"/></from>
      <to><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f86c12509f0"/></to>
    </wire>
    <wire loc="87:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f86c03c82b0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f86c03cf630"/></to>
    </wire>
    <wire loc="155:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f86c03c6480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7f86c1235250"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f86c13d2d00"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f86c1231d40"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f86c1f56580"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f86c122e570"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f86c1f51580"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f86c1119c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f86c1124da0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f86c111db50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c1117670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f86c1110e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f86c1117e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f86c11032f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f86c11052f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f86c1122120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f86c110b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f86c11072f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f86c111cc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f86c111ac60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f86c1111670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f86c1113e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f86c1116670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c1125760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c1569350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f86c1120aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f86c111f120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f86c110aa70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f86c111f870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f86c1107ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f86c1122dc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f86c110ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f86c111a480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c111c480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f86c1124750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f86c110de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f86c110f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f86c110c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f86c1104ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f86c1105ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f86c1112670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f86c110fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f86c1108ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f86c1115670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f86c1103ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f86c15682c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f86c1124100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f86c111d370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f86c1119480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f86c1111e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f86c1116e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f86c1110670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f86c1118670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f86c1123450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c1118e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f86c111e020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f86c111ecc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f86c11082f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f86c1109ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f86c1120450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f86c11092f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f86c11042f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f86c1112e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f86c110d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f86c1123aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f86c1122770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f86c1115e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f86c111e670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f86c1113670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f86c110be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f86c11027a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f86c15682c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f86c10edc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f86c10f8da0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f86c10f0b50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c10ea670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f86c10e3e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f86c10eae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f86c10d62f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f86c10d92f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f86c10f5120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f86c10df670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f86c10da2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f86c10efc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f86c10eec60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f86c10e4670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f86c10e7e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f86c10e9670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c10f9760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c1569350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f86c10f4aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f86c10f3120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f86c10dea70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f86c10f3870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f86c10daad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f86c10f5dc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f86c10e0e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f86c10ee480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c10ef480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f86c10f8750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f86c10e1e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f86c10e2670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f86c10e0670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f86c10d8ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f86c10d9ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f86c10e6670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f86c10e2e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f86c10dbad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f86c10e8670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f86c10d6ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f86c15682c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f86c10f8100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f86c10f0370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f86c10ed480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f86c10e4e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f86c10e9e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f86c10e3670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f86c10ec670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f86c10f6450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c10ece50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f86c10f1020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f86c10f1cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f86c10db2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f86c10dcad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f86c10f4450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f86c10dc2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f86c10d82f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f86c10e6e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f86c10e1670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f86c10f6aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f86c10f5770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f86c10e8e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f86c10f1670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f86c10e7670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f86c10dfe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f86c10d57a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f86c15682c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="21:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f86c10ae880"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f86c10a3020"/></to>
    </wire>
    <wire loc="20:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f86c10a3020"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f86c109d140"/></to>
    </wire>
    <wire loc="16:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f86c1099bd0"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f86c10a2c50"/></to>
    </wire>
    <wire loc="21:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f86c10a2c50"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f86c1085150"/></to>
    </wire>
    <wire loc="17:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="PowerControl" scoped="" ref="0x7f86c109c530"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f86c10301b0"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f86c1089540"/></from>
      <to><interface-ref name="Gpio" scoped="" ref="0x7f86c108a590"/></to>
    </wire>
    <wire loc="11:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="Gpio" scoped="" ref="0x7f86c108a590"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f86c10399e0"/></to>
    </wire>
    <wire loc="18:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f86c107f950"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f86c1087ca0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f86c1087ca0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f86c105da90"/></to>
    </wire>
    <wire loc="19:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f86c10859f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x7f86c1089540"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f86c104c020"/></from>
      <to><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f86c1047530"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f86c1047530"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f86c1043e50"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c1040020"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7f86c1c1b830"/></to>
    </wire>
    <wire loc="9:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c1038c50"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f86c1fb5580"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="EnergyIndicator" scoped="" ref="0x7f86c101d990"/></from>
      <to><interface-ref name="EnergyIndicator" scoped="" ref="0x7f86c1012900"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ByteIndicator" scoped="" ref="0x7f86c101f150"/></from>
      <to><interface-ref name="ByteIndicator" scoped="" ref="0x7f86c100f0f0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="BackoffTimer" scoped="" ref="0x7f86c100fae0"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f86c17a7220"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f86c0ffc690"/></from>
      <to><interface-ref name="CCA" scoped="" ref="0x7f86c17a8b10"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f86c0ff69b0"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f86c1762e60"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f86c0ff4cd0"/></from>
      <to><interface-ref name="SFD" scoped="" ref="0x7f86c175d9b0"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f86c0ffda80"/></from>
      <to><interface-ref name="CaptureSFD" scoped="" ref="0x7f86c171a700"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f86c0ff2020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c0f57c30"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c0f57c30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c156a4d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c0ff2d10"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c0f568f0"/></to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c0f568f0"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c1569350"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f86c0fef6d0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f86c0f552f0"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f86c0f552f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f86c0fefde0"/></from>
      <to><interface-ref name="STXON" scoped="" ref="0x7f86c0f54cc0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f86c0f54cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f86c0fee530"/></from>
      <to><interface-ref name="STXONCCA" scoped="" ref="0x7f86c0f52370"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f86c0f52370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f86c0feec60"/></from>
      <to><interface-ref name="SFLUSHTX" scoped="" ref="0x7f86c0f51d00"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f86c0f51d00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f86c0ff0e00"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f86c0f4bc60"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f86c0f4bc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f86c0ff1780"/></from>
      <to><interface-ref name="TXFIFO" scoped="" ref="0x7f86c0f337a0"/></to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f86c0f337a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f86c15682c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f86c0ff0550"/></from>
      <to><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f86c0f372f0"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f86c0f372f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c0fed3e0"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c0f4c480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c0f4c480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c0fec5e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c0f49e50"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c0f49e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c0feb020"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c0f48670"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c0f48670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f86c0fede80"/></from>
      <to><interface-ref name="STXENC" scoped="" ref="0x7f86c0f4f7b0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f86c0f4f7b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f86c0fea9c0"/></from>
      <to><interface-ref name="TXNONCE" scoped="" ref="0x7f86c0f35ad0"/></to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f86c0f35ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f86c0feb890"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f86c0f362f0"/></to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f86c0f362f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f86c0fea130"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f86c0f36ad0"/></to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f86c0f36ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f86c0fe4d40"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f86c0f26df0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f86c0f26df0"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f86c0f1d550"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c100bd00"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0e9f670"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c100abb0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0e9b0c0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f86c1004c60"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f86c0e9a550"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f86c0e9a550"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f86c0e8ba80"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f86c0ff7e80"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f86c0e92480"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f86c0e92480"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f86c0e848b0"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f86c0fe86c0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f86c200f0d0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f86c0f4ac60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f86c0f54020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f86c0f4ec70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f86c0f41e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f86c0f48e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f86c0f342f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f86c0f3c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f86c0f4cc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f86c0f42670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f86c0f44e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f86c0f46670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f86c0f50370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f86c0f3ba70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f86c0f50ac0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f86c0f37ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f86c0f51060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f86c0f3de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f86c0f4b480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f86c0f55940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f86c0f3ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f86c0f3f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f86c0f3d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f86c0f43670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f86c0f3fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f86c0f38ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f86c0f45670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f86c0f34ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f86c15682c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f86c0f4e490"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f86c0f4a480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f86c0f42e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f86c0f46e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f86c0f41670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f86c0f49670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f86c0f54670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f86c0f4f160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f86c0f4fe00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f86c0f382f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f86c0f3aad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f86c0f516b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f86c0f3a2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f86c0f352f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f86c0f43e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f86c0f3e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f86c0f529c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f86c0f45e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f86c0f44670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f86c0f3ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketIndicator" scoped="" ref="0x7f86c0f22020"/></from>
      <to><interface-ref name="PacketIndicator" scoped="" ref="0x7f86c0f1c7c0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f86c0f07150"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f86c200f0d0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f86c0f1b020"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f86c1762e60"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f86c0f1a380"/></from>
      <to><interface-ref name="FIFO" scoped="" ref="0x7f86c1760090"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f86c0f196b0"/></from>
      <to><interface-ref name="FIFOP" scoped="" ref="0x7f86c175f390"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f86c0f18a50"/></from>
      <to><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f86c171c060"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f86c0f176e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c0e21d00"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f86c0e21d00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f86c156a4d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f86c0f16530"/></from>
      <to><interface-ref name="RXFIFO" scoped="" ref="0x7f86c0dfead0"/></to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f86c0dfead0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f86c15682c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f86c0f15ad0"/></from>
      <to><interface-ref name="SFLUSHRX" scoped="" ref="0x7f86c0e1b6b0"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f86c0e1b6b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f86c0f153a0"/></from>
      <to><interface-ref name="SACK" scoped="" ref="0x7f86c0e1a370"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f86c0e1a370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0f14330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0e9f670"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0f131e0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0e9b0c0"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f86c0f11d70"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f86c0e9a550"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f86c0f13b90"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f86c185fdc0"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c0f0c3e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c0e13e50"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c0e13e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c0f0ccb0"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c0e12670"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c0e12670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f86c0f0db10"/></from>
      <to><interface-ref name="SRXDEC" scoped="" ref="0x7f86c0e19160"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f86c0e19160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f86c0f096d0"/></from>
      <to><interface-ref name="RXNONCE" scoped="" ref="0x7f86c0dfe2f0"/></to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f86c0dfe2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f86c0f0a590"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f86c0e002f0"/></to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f86c0e002f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f86c0f0ae00"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f86c0e00ad0"/></to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f86c0e00ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f86c0f08020"/></from>
      <to><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f86c0e02ad0"/></to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f86c0e02ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f86c0f088b0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f86c0e1f300"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f86c0e1f300"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <from><interface-ref name="receiveDone_task" scoped="" ref="0x7f86c0efb9d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f86c0e96660"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f86c0e88af0"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f86c0e2e300"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f86c178b080"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTime32khz" scoped="" ref="0x7f86c0e813b0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f86c0e2f020"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f86c0e806e0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f86c1c52500"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f86c0e29450"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f86c1c64050"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f86c0e14c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f86c0e1e020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f86c0e18c70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f86c0e0be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f86c0e12e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f86c0e1d370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f86c0e06670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f86c0e022f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f86c0e17c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f86c0e15c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f86c0e0c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f86c0e0ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f86c0e11670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c0e20970"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c1569350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f86c0e1bd00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f86c0e05a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f86c0e1aac0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f86c0e1b060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f86c0e07e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f86c0e15480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c0e17480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f86c0e1f950"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f86c0e09e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f86c0e0a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f86c0e07670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f86c0dffad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f86c0e0d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f86c0e0ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f86c0e03ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f86c0e10670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f86c0e18490"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f86c0e14480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f86c0e0ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f86c0e11e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f86c0e0b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f86c0e13670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f86c0e1e670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f86c0e19e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f86c0e032f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f86c0e04ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f86c0e042f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f86c0dff2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f86c0e0de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f86c0e09670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f86c0e1ecc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f86c0e1d9c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f86c0e10e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f86c0e197b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f86c0e0e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f86c0e06e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f86c0dfd7a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f86c15682c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7f86c0dcf920"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7f86c0dcc940"/></to>
    </wire>
    <wire loc="54:../../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f86c0dd5990"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f86c0dcc080"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f86c0dafe60"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f86c0db3020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f86c0daeae0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f86c0db0690"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f86c0db0690"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f86c14eb1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f86c0dad8f0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f86c0dd1a20"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0dac170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0e9b0c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="DuplicateReceive" scoped="" ref="0x7f86c0d92200"/></from>
      <to><interface-ref name="DuplicateReceive" scoped="" ref="0x7f86c0d8e570"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f86c0d8d3f0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f86c0d92950"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0d8da70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0e9b0c0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f86c0d55d70"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f86c0d5f6b0"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f86c0d54b10"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f86c0d5f020"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0d532f0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0e9f670"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0d52170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0e9b0c0"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f86c0d52b70"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f86c0d04410"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <from><interface-ref name="grantTask" scoped="" ref="0x7f86c0d26db0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SendState" scoped="" ref="0x7f86c0cf8800"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f86c0cf4580"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f86c0cf4580"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f86c14eb1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f86c0cdf1c0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f86c18ec020"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f86c0c333f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f86c192bd20"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f86c0c301d0"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f86c1929c00"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f86c0c307e0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f86c19278f0"/></to>
    </wire>
    <wire loc="89:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f86c0c2da20"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f86c0e9a550"/></to>
    </wire>
    <wire loc="86:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f86c0c23890"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f86c190d130"/></to>
    </wire>
    <wire loc="81:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f86c0c315c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f86c1929020"/></to>
    </wire>
    <wire loc="85:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f86c0c2eb20"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f86c1923080"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f86c0c2f470"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f86c19282d0"/></to>
    </wire>
    <wire loc="90:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f86c0c27af0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f86c0e96660"/></to>
    </wire>
    <wire loc="63:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f86c0246e60"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f86c02397f0"/></to>
    </wire>
    <wire loc="64:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f86c0245aa0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f86c0c307e0"/></to>
    </wire>
    <wire loc="65:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f86c0244720"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f86c0c2f470"/></to>
    </wire>
    <wire loc="67:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f86c0b8b020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f86c0243da0"/></to>
    </wire>
    <wire loc="66:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f86c0243da0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f86c0c2eb20"/></to>
    </wire>
    <wire loc="60:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f86c02385f0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f86c0bf5930"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f86c0236270"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f86c0c2f470"/></to>
    </wire>
    <wire loc="53:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f86c0bf5930"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f86c0ba5df0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f86c0ba3400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f86c0c333f0"/></to>
    </wire>
    <wire loc="55:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f86c0ba2060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f86c0c2f470"/></to>
    </wire>
    <wire loc="56:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f86c0ba1720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f86c0c307e0"/></to>
    </wire>
    <wire loc="184:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f86c0ba0480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f86c0ba0c60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f86c0b81020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f86c0c307e0"/></to>
    </wire>
    <wire loc="56:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f86c0b81c30"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f86c0c2f470"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="41:../../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="35:../../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="200:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/x1xxx/McuSleepC.nc" safe="">
      <documentation loc="36:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="65:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="45:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="33:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="53:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../../tos/system/LedsC.nc">
      <documentation loc="34:../../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="37:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; Digital pin i/o abstraction, TI MSP430 processors.</short>
        <long>&#10; Digital pin i/o abstraction, TI MSP430 processors.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @author Joao Goncalves &#60;joao.m.goncalves@ist.utl.pt>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="79(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="79(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="79(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="79(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="79(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="79(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="79(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="79(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="79(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="79(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="79(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="79(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="79(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="79(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="79(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="79(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="79(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="79(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="79(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="79(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="79(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="79(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="79(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="79(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="79(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="79(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="79(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="79(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="79(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="79(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="79(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="79(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="79(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="79(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="79(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="79(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="79(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="79(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="79(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="79(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="79(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="79(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="79(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="79(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="79(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="79(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="79(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="79(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="SlaveC" loc="8:SlaveC.nc">
      <module/>
    </component>
    <component qname="SlaveAppC.TimerMiSlot" loc="44(SlaveAppC.TimerMiSlot):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC" loc="48:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <documentation loc="36:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="41(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="41(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="41(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="41(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="41(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="41(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="41(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="41(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="41(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="41(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="41(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="41(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="55(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC.VT" loc="61(HilTimerMilliC.VirtualizeTimerC.VT):../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerImplP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f86c19d9530"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SlaveAppC.TimerLeds" loc="44(SlaveAppC.TimerLeds):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ActiveMessageC" loc="53:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="CC2420RadioC" loc="41:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <documentation loc="24:../../../tos/chips/cc2420/CC2420RadioC.nc">
        <short>&#10; Radio wiring for the CC2420.</short>
        <long>&#10; Radio wiring for the CC2420.  This layer seperates the common&#10; wiring of the lower-layer components of the CC2420 stack and makes&#10; them available to clients like the AM stack and the IEEE802.15.4&#10; stack.&#10;&#10; This component provides the highest-level internal interface to&#10; other components of the CC2420 stack.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10; @author Stephen Dawson-Haggerty&#10; @version $Revision: 1.2 $ $Date: 2009/08/20 01:37:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaC" loc="42:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
        <short>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.</short>
        <long>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-05-14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaP" loc="37:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.12 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ControlC" loc="42:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
        <short>&#10; Implementation for configuring a ChipCon CC2420 radio.</short>
        <long>&#10; Implementation for configuring a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/05/14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ControlP" loc="42:../../../tos/chips/cc2420/control/CC2420ControlP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Urs Hunkeler (ReadRssi implementation)&#10; @version $Revision: 1.7 $ $Date: 2008/06/24 04:07:28 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="AlarmMultiplexC" loc="43:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
        <short>&#10; A component that multiplexes the use of an alarm.</short>
        <long>&#10; A component that multiplexes the use of an alarm. The assumption is&#10; that its use is mutually exclusive and users check whether the&#10; events are for them.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm" loc="40(AlarmMultiplexC.Alarm):../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420AlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C):../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer" loc="37(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm" loc="43(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="41:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
        <short>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Counter32khz32C.Transform" loc="54(Counter32khz32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform" loc="51(AlarmMultiplexC.Alarm.Alarm32khz32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
        <short>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420PinsC.CCAM" loc="42(HplCC2420PinsC.CCAM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.CSNM" loc="42(HplCC2420PinsC.CSNM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOM" loc="42(HplCC2420PinsC.FIFOM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOPM" loc="42(HplCC2420PinsC.FIFOPM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.RSTNM" loc="42(HplCC2420PinsC.RSTNM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.SFDM" loc="42(HplCC2420PinsC.SFDM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.VRENM" loc="42(HplCC2420PinsC.VRENM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
        <short>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420InterruptsC.CaptureSFDC" loc="47(HplCC2420InterruptsC.CaptureSFDC):../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="GpioCaptureC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430InterruptC" loc="39:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for GPIO interrupts.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptP" loc="51:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc" safe="">
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptCCAC" loc="50(HplCC2420InterruptsC.InterruptCCAC):../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptFIFOPC" loc="50(HplCC2420InterruptsC.InterruptFIFOPC):../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="CC2420ControlC.Spi" loc="39(CC2420ControlC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC" loc="37:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:16 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420SpiP" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Roman Lim&#10; @author Razvan Musaloie-E.&#10; @author Jeonggil Ko&#10; @version $Revision: 1.4 $ $Date: 2008-06-23 20:25:15 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.WorkingStateC" loc="65(CC2420SpiWireC.WorkingStateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="StateImplC" loc="64:../../../tos/system/StateImplC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="StateImplP" loc="64:../../../tos/system/StateImplP.nc" safe="">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC" loc="40(CC2420SpiWireC.HplCC2420SpiC):../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC" loc="79(CC2420SpiWireC.HplCC2420SpiC.SpiC):../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Spi0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P" loc="71:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P.SpiP" loc="73(Msp430SpiNoDma0P.SpiP):../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430SpiNoDmaP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
        <short>&#10; An HPL abstraction of USART0 on the MSP430.</short>
        <long>&#10; An HPL abstraction of USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="54:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC" loc="39(CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="56(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="96(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420ControlC.SyncSpiC" loc="39(CC2420ControlC.SyncSpiC):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ControlC.RssiResource" loc="39(CC2420ControlC.RssiResource):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LocalIeeeEui64C" loc="11:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <configuration/>
    </component>
    <component qname="LocalIeeeEui64P" loc="3:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <module/>
    </component>
    <component qname="Ds2411C" loc="7:../../../tos/chips/ds2411/Ds2411C.nc">
      <configuration/>
    </component>
    <component qname="Ds2411P" loc="9:../../../tos/chips/ds2411/Ds2411P.nc">
      <module/>
    </component>
    <component qname="OneWireMasterC" loc="6:../../../tos/lib/onewire/OneWireMasterC.nc">
      <documentation loc="1:../../../tos/lib/onewire/OneWireMasterC.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="OneWireMasterP" loc="9:../../../tos/lib/onewire/OneWireMasterP.nc">
      <documentation loc="2:../../../tos/lib/onewire/OneWireMasterP.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10; Only supports one device on the 1-wire bus.</short>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="39:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="BusyWaitMicroC.BusyWaitCounterC" loc="52(BusyWaitMicroC.BusyWaitCounterC):../../../tos/lib/timer/BusyWaitCounterC.nc">
      <documentation loc="36:../../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="BusyWaitCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20cf640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f86c20cf9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430CounterMicroC" loc="44:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
        <short>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.</short>
        <long>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.   If your base clock is in units of binary hertz then 1 uis, decimal&#10; hertz it will be 1us.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430CounterMicroC.Counter" loc="42(Msp430CounterMicroC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20cf640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f86c20cf9b0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplDs2411C" loc="1:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <configuration/>
    </component>
    <component qname="HplDs2411C.MspGpio" loc="42(HplDs2411C.MspGpio):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="Ds2411PowerControlC" loc="12:../../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <module/>
    </component>
    <component qname="CC2420TransmitC" loc="41:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
        <short>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TransmitP" loc="46:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420TransmitC.Spi" loc="39(CC2420TransmitC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC" loc="39:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
        <short>&#10; Implementation of the receive path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the receive path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveP" loc="45:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Jung Il Choi&#10; @author JeongGil Ko&#10; @author Razvan Musaloiu-E&#10; @version $Revision: 1.21 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC" loc="38:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420PacketP" loc="43:../../../tos/chips/cc2420/packet/CC2420PacketP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC.CounterToLocalTimeC" loc="46(CC2420PacketC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CC2420PacketC.DummyTimer" loc="44(CC2420PacketC.DummyTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC.Spi" loc="39(CC2420ReceiveC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RandomC" loc="43:../../../tos/system/RandomC.nc">
      <documentation loc="33:../../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420CsmaC.StateC" loc="65(CC2420CsmaC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueSendC" loc="38:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
        <short>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; </short>
        <long>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueSendP" loc="38:../../../tos/chips/cc2420/unique/UniqueSendP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
        <short>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.</short>
        <long>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UniqueSendC.StateC" loc="65(UniqueSendC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueReceiveC" loc="40:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
        <short>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; This should sit at the bottom of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueReceiveP" loc="41:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
        <short> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC" loc="62:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
        <short>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.</short>
        <long>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.  They do not include the network byte &#10; responsible for identifying the packing as being sourced from a TinyOS&#10; network.&#10;&#10; TinyOS I-Frames are interoperability packets that do include a network&#10; byte as defined by 6LowPAN specifications.  The I-Frame header type is&#10; the default packet header used in TinyOS networks.&#10;&#10; Since either packet header is acceptable, this layer must do some &#10; preprocessing (sorry) to figure out whether or not it needs to include &#10; the functionality to process I-frames.  If I-Frames are used, then&#10; the network byte is added on the way out and checked on the way in.&#10; If the packet came from a network different from a TinyOS network, the&#10; user may access it through the DispatchP's NonTinyosReceive[] Receive &#10; interface and process it in a different radio stack.&#10;&#10; If T-Frames are used instead, this layer is simply pass-through wiring to the&#10; layer beneath.  &#10;&#10; Define &#34;CC2420_IFRAME_TYPE&#34; to use the interoperability frame and &#10; this layer&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TinyosNetworkP" loc="44:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
        <short>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.</short>
        <long>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.  Filters incoming packets that are not&#10; TinyOS network compatible.  Provides the 6LowpanSnoop interface to&#10; sniff for packets that were not originated from TinyOS.&#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC.FcfsResourceQueueC" loc="42(CC2420TinyosNetworkC.FcfsResourceQueueC):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DummyLplC" loc="41:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Sleep interval is always 0, and duty cycle is always 100%&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="DummyLplP" loc="39:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Wakeup interval is always 0 (always on)&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DummyLplC.StateC" loc="65(DummyLplC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyC" loc="38:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
        <short>&#10; Dummy configuration for PacketLink Layer&#10; </short>
        <long>&#10; Dummy configuration for PacketLink Layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyP" loc="38:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <documentation loc="32:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
        <short>&#10; Dummy module for Packet Link layer&#10; </short>
        <long>&#10; Dummy module for Packet Link layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ActiveMessageP" loc="46:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc" safe="">
      <documentation loc="33:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
        <short>&#10; Active message implementation on top of the CC2420 radio.</short>
        <long>&#10; Active message implementation on top of the CC2420 radio. This&#10; implementation uses the 16-bit addressing mode of 802.15.4: the&#10; only additional byte it adds is the AM id byte, as the first byte&#10; of the data payload.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.22 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="59:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <documentation loc="49:../../../tos/platforms/telosa/ActiveMessageC.nc">
        <short>&#10;&#10; The Active Message layer on the Telos platform.</short>
        <long>&#10;&#10; The Active Message layer on the Telos platform. This is a naming wrapper&#10; around the CC2420 Active Message layer.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.9 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SlaveAppC.AMSenderC" loc="47(SlaveAppC.AMSenderC):../../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:17">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SlaveAppC.AMSenderC.SenderC" loc="47(SlaveAppC.AMSenderC.SenderC):../../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="SlaveAppC.AMSenderC.SenderC.AMQueueEntryP" loc="43(SlaveAppC.AMSenderC.SenderC.AMQueueEntryP):../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SlaveAppC.AMReceiverC" loc="43(SlaveAppC.AMReceiverC):../../../tos/system/AMReceiverC.nc">
      <documentation loc="33:../../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:17">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f86c1f131d0" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f86c1f13580" loc="81:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f86c1f13930" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f86c1f13ce0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f86c1f120d0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430TimerP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f86c1bec930" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f86c1beccd0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f86c1beb0d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f86c1beb450" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f86c1beb7d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f86c1bebb40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f86c1bea020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f86c1bea3b0" loc="49:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f86c1bea780" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f86c1baec80" loc="42:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f86c1bab0d0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f86c1ac8cb0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f86c1ac8cb0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f86c1a86a40" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f86c1a86a40"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f86c1a70570" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f86c1a70570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f86c1a70d40" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f86c1a70d40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f86c1a6f160" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f86c1a6f160"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f86c1a6f940" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f86c1a6f940"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f86c1a6fd10" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f86c1a6d540" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f86c1a6d540"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f86c1a936d0" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f86c1a936d0"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f86c1a4c020" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f86c1a4c020"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f86c1a4c410" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f86c1a4c410"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f86c1a4cbf0" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f86c1a4cbf0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f86c1a4b020" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f86c1a10cc0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f86c1a10cc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f86c19d9530" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f86c19d9530"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f86c19d9880" loc="56:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="VirtualizeTimerImplP" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f86c19cb980" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f86c19cb980"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f86c19cbcd0" loc="62:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f86c1956550" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f86c1956550"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="HplCC2420AlarmC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz32C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="GpioCaptureC" loc="47:../../../tos/chips/msp430/timer/GpioCaptureC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430InterruptC" loc="50:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="CC2420SpiC" loc="39:../../../tos/chips/cc2420/spi/CC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="StateC" loc="65:../../../tos/system/StateC.nc" abstract="">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplCC2420SpiC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Spi0C" loc="79:../../../tos/chips/msp430/usart/Msp430Spi0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDmaP" loc="73:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc" abstract="">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="56:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f86c12cc020" loc="56:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f86c12be2f0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="96:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f86c12a59f0" loc="96:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="BusyWaitCounterC" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc" abstract="">
      <documentation loc="36:../../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f86c105b020" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f86c105b020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f86c105b7b0" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c105b7b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f86c0c1b660" loc="47:../../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f86c0c10360" loc="47:../../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f86c0c090d0" loc="43:../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f86c0bf1c80" loc="45:../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMReceiverC" loc="43:../../../tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="33:../../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f86c0b87330" loc="43:../../../tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f86c20c5020" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20c5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c20c53a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f86c20c4a20" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f86c20c4a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f86c20c4da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c20c1020" loc="42:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c20c1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c20c13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f86c20b6130" loc="43:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f86c20b6130"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f86c20bf1b0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f86c20bf340"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f86c20b67d0"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f86c20b6960"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f86c20b6af0"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f86c20b6c80"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f86c20b6e10"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f86c20bf020"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f86c20b64b0"/>
        <function-ref name="node_id" scoped="" ref="0x7f86c20b6640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f86c20b2700" loc="7:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f86c20b2700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c20b2a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c20b41a0" loc="4:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c20b41a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c20b4520"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f86c20b2020" loc="6:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f86c20b2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c20b23a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f86c20b2de0" loc="8:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f86c20b2de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c20b1180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f86c20b4810" loc="5:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f86c20b4810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f86c20b3980"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f86c20b3b10"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f86c20b3020"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f86c20b31b0"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f86c20b3340"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f86c20b34d0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f86c20b3660"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f86c20b37f0"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f86c20b4b90"/>
        <function-ref name="node_id" scoped="" ref="0x7f86c20b4d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c20b5640" loc="2:../../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c20b5640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c20b59c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f86c209b900" loc="39:../../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f86c209b900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c209bc80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f86c2079de0" loc="40:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f86c2079de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f86c207ec70"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f86c207e310"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f86c207e4a0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f86c207e630"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f86c207e180"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f86c207e7c0"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f86c207e950"/>
        <function-ref name="initClocks" scoped="" ref="0x7f86c207eae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c2082850" loc="39:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c2082850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c2082bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f86c2068830" loc="203:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f86c2068830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f86c20677f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f86c2068d40"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f86c2067020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f86c20671b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f86c2068bb0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f86c2067340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f86c20674d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f86c2067660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f86c2067af0" loc="204:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f86c2067af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f86c2067e70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c20681c0" loc="202:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c20681c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c2068540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f86c21e9c80" loc="55:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f86c21e9c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f86c23c40a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f86c23469a0" loc="51:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f86c23469a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f86c2346d20"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f86c2461020"/>
        <function-ref name="sleep" scoped="" ref="0x7f86c24611b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f86c22873d0" loc="52:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f86c22873d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f86c2287750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x7f86c20808b0" loc="39:../../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f86c20808b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f86c20337f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f86c2080dc0"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f86c2033020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f86c20331b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f86c2080c30"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f86c2033340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f86c20334d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f86c2033660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f86c20268d0" loc="69:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f86c20268d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c2026c50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f86c2027110" loc="66:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f86c2027110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f86c2027490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f86c20261d0" loc="68:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f86c20261d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c2026550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f86c2027780" loc="67:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f86c2027780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c2027b00"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f86c2027c90"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f86c2027e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f86c2561940" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2561940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c2561cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c2561e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f86c256e1e0" loc="46:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f86c256e1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c256e560"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f86c256e6f0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f86c256e880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f86c2112040" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f86c2112040"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c21123c0"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c2112550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f86c210d490" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f86c210d490"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f86c210d810"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f86c210d9a0"/>
        <function-ref name="sleep" scoped="" ref="0x7f86c210db30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f86c2113140" loc="54:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f86c2113140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c21134c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f86c2113650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f86c21137e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f86c200f0d0" loc="46:../../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f86c200f0d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f86c200f450"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f86c200f5e0"/>
        <function-ref name="led1On" scoped="" ref="0x7f86c200f770"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f86c200f900"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f86c200fa90"/>
        <function-ref name="get" scoped="" ref="0x7f86c200fc20"/>
        <function-ref name="led1Off" scoped="" ref="0x7f86c200fdb0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f86c201a4d0"/>
        <function-ref name="set" scoped="" ref="0x7f86c201a020"/>
        <function-ref name="led0On" scoped="" ref="0x7f86c201a1b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f86c201a340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f86c20041d0" loc="50:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f86c20041d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c2004550"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c20046e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c2004870"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c2004a00"/>
        <function-ref name="get" scoped="" ref="0x7f86c2004b90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c2004d20"/>
        <function-ref name="set" scoped="" ref="0x7f86c200a020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c200a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c200d640" loc="46:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c200d640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c200d9c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f86c200a4d0" loc="51:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f86c200a4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c200a850"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c200a9e0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c200ab70"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c200ad00"/>
        <function-ref name="get" scoped="" ref="0x7f86c2009020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c20091b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c2009340"/>
        <function-ref name="clr" scoped="" ref="0x7f86c20094d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f86c200dc40" loc="47:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f86c200dc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f86c200c020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f86c200c1b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f86c200c340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f86c200c4d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f86c200c660"/>
        <function-ref name="get" scoped="" ref="0x7f86c200c7f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f86c200c980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f86c200b020"/>
        <function-ref name="set" scoped="" ref="0x7f86c200cb10"/>
        <function-ref name="led0On" scoped="" ref="0x7f86c200cca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f86c200ce30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f86c20097f0" loc="52:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f86c20097f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c2009b70"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c2009d00"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c2003020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c20031b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c2003340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c20034d0"/>
        <function-ref name="set" scoped="" ref="0x7f86c2003660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c20037f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f86c200ed80" loc="41:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f86c200ed80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fe7180"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fe7310"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fe74a0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fe7630"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fe77c0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fe7950"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fe7ae0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fe7c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f86c1fe6020" loc="42:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f86c1fe6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fe63a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fe6530"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fe66c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fe6850"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fe69e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fe6b70"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fe6d00"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fe5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f86c1fe4600" loc="44:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c1fe4600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c1fe4980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f86c1fe5380" loc="43:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f86c1fe5380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fe5700"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fe5890"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fe5a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fe5bb0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fe5d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fe4020"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fe41b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fe4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f86c1fc9580" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f86c1fc9580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fc9900"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fc9a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fc9c20"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fc7980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fc8020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fc81b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fc8340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fc84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fc8660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fc87f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fc8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fc8b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fc8ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fc7020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fc71b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fc7340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fc74d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fc9db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fc7660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fc77f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f86c1fb0710" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f86c1fb0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fb0a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fb0c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fb0db0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1faea80"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1faf1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1faf340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1faf4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1faf660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1faf7f0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1faf980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fafb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fafca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fafe30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fae120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fae2b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fae440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fae5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1faf020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fae760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fae8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f86c1f26d30" loc="205:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f86c1f26d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f250e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f25270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f25400"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f231b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f25720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f258b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f25a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f25bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f25d60"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f24020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f241b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f24340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f244d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f24760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f248f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f24a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f24c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f25590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f24da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f23020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f86c1f2bd40" loc="201:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f86c1f2bd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f2a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f2a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f2a400"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f281b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f2a720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f2a8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f2aa40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f2abd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f2ad60"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f29020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f291b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f29340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f294d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f29760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f298f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f29a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f29c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f2a590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f29da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f28020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f86c1f54d50" loc="183:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f86c1f54d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f53100"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f53290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f53420"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f511b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f53740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f538d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f53a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f53bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f53d80"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f52020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f521b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f52340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f524d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f52760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f528f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f52a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f52c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f535b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f52da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f51020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f86c1faa710" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f86c1faa710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1faaa90"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1faac20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1faadb0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fa8a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fa91b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fa9340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fa94d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fa9660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fa97f0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fa9980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fa9b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fa9ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fa9e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fa8120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fa82b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fa8440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fa85d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fa9020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fa8760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fa88f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f86c1f918a0" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f86c1f918a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f91c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f91db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f90020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f8fc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f90340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f904d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f90660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f907f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f90980"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f90b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f90ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f90e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f8f020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f8f2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f8f440"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f8f5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f8f760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f901b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f8f8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f8fa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f86c1f788a0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f86c1f788a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f78c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f78db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f77020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f76c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f77340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f774d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f77660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f777f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f77980"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f77b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f77ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f77e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f76020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f762b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f76440"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f765d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f76760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f771b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f768f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f76a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f86c1f638a0" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f86c1f638a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f63c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f63db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f62020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f61c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f62340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f624d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f62660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f627f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f62980"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f62b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f62ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f62e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f61020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f612b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f61440"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f615d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f61760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f621b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f618f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f61a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f86c1f4fd50" loc="185:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f86c1f4fd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f4e100"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f4e290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f4e420"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f4c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f4e740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f4e8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f4ea60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f4ebf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f4ed80"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f4d020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f4d1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f4d340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f4d4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f4d760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f4d8f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f4da80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f4dc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f4e5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f4dda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f4c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f86c1f3bd40" loc="195:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f86c1f3bd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f3a0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f3a270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f3a400"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f381b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f3a720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f3a8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f3aa40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f3abd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f3ad60"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f39020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f391b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f39340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f394d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f39760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f398f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f39a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f39c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f3a590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f39da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f38020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f86c1f1cd50" loc="211:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f86c1f1cd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f1b100"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f1b290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f1b420"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f191b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f1b740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f1b8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f1ba60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f1bbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f1bd80"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f1a020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f1a1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f1a340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f1a4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f1a760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f1a8f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f1aa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f1ac10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f1b5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f1ada0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f19020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f86c1fc2d50" loc="57:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f86c1fc2d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fc1100"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fc1290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fc1420"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fbf1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fc1740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fc18d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fc1a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fc1bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fc1d80"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fc0020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fc01b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fc0340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fc04d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fc0760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fc08f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fc0a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fc0c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fc15b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fc0da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fbf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f86c1f4c580" loc="186:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f86c1f4c580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f4c900"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f4ca90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f4cc20"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f4a980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f4b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f4b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f4b340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f4b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f4b660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f4b7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f4b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f4bb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f4bca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f4a020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f4a1b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f4a340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f4a4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f4cdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f4a660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f4a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f86c1fbdd50" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f86c1fbdd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fbc100"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fbc290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fbc420"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fba1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fbc740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fbc8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fbca60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fbcbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fbcd80"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fbb020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fbb1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fbb340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fbb4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fbb760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fbb8f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fbba80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fbbc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fbc5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fbbda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fba020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f86c1fa3e50" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f86c1fa3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fa2210"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fa23a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fa2530"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fa0340"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fa2850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fa29e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fa2b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fa2d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fa1020"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fa11b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fa1340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fa14d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fa1660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fa18f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fa1a80"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fa1c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fa1da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fa26c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fa0020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fa01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f86c1f89020" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f86c1f89020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f893a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f89530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f896c0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f874d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f899e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f89b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f89d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f88020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f881b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f88340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f884d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f88660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f887f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f88a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f88c10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f88da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f87020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f89850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f871b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f87340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f86c1f6f020" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f86c1f6f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f6f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f6f530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f6f6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f6d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f6f9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f6fb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f6fd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f6e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f6e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f6e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f6e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f6e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f6e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f6ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f6ec10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f6eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f6d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f6f850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f6d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f6d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f86c1f5b020" loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f86c1f5b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f5b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f5b530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f5b6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f594d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f5b9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f5bb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f5bd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f5a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f5a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f5a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f5a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f5a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f5a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f5aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f5ac10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f5ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f59020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f5b850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f591b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f59340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f86c1fce580" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f86c1fce580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fce900"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fcea90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fcec20"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fcc980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fcd020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fcd1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fcd340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fcd4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fcd660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fcd7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fcd980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fcdb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fcdca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fcc020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fcc1b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fcc340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fcc4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fcedb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fcc660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fcc7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f86c1fb5580" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f86c1fb5580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fb5a00"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fb5b90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fb5d20"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fb3a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fb41b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fb4340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fb44d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fb4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fb47f0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fb4980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fb4b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fb4ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fb4e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fb3120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fb32b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fb3440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fb35d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fb4020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fb3760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fb38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f86c1f9b710" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f86c1f9b710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f9ba90"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f9bc20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f9bdb0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f99a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f9a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f9a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f9a4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f9a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f9a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f9a980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f9ab10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f9aca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f9ae30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f99120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f992b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f99440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f995d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f9a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f99760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f998f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f86c1f56580" loc="182:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f86c1f56580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f56900"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f56a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f56c20"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f54980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f55020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f551b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f55340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f554d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f55660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f557f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f55980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f55b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f55ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f54020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f541b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f54340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f544d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f56db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f54660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f547f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f86c1f32570" loc="198:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f86c1f32570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f328f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f32a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f32c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f30980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f31020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f311b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f31340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f314d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f31660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f317f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f31980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f31b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f31ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f30020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f301b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f30340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f304d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f32da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f30660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f307f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f86c1f1e570" loc="209:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f86c1f1e570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f1e8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f1ea80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f1ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f1c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f1d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f1d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f1d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f1d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f1d660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f1d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f1d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f1db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f1dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f1c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f1c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f1c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f1c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f1eda0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f1c660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f1c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f86c1f42580" loc="191:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f86c1f42580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f42900"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f42a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f42c20"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f40980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f41020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f411b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f41340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f414d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f41660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f417f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f41980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f41b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f41ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f40020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f401b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f40340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f404d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f42db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f40660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f407f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f86c1f96710" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f86c1f96710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f96c90"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f96e20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f95020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f94c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f95340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f954d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f95660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f957f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f95980"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f95b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f95ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f95e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f94020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f942b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f94440"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f945d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f94760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f951b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f948f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f94a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f86c1f7d8a0" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f86c1f7d8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f7dc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f7ddb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f7c020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f7bc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f7c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f7c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f7c660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f7c7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f7c980"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f7cb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f7cca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f7ce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f7b020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f7b2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f7b440"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f7b5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f7b760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f7c1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f7b8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f7ba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f86c1f688a0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f86c1f688a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f68c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f68db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f67020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f66c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f67340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f674d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f67660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f677f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f67980"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f67b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f67ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f67e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f66020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f662b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f66440"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f665d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f66760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f671b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f668f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f66a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f86c1f30d40" loc="199:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f86c1f30d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f2f0e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f2f270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f2f400"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f2d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f2f720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f2f8b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f2fa40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f2fbd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f2fd60"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f2e020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f2e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f2e340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f2e4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f2e760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f2e8f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f2ea80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f2ec10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f2f590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f2eda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f2d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f86c1f4ad40" loc="188:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f86c1f4ad40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f490e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f49270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f49400"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f471b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f49720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f498b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f49a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f49bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f49d60"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f48020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f481b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f48340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f484d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f48760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f488f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f48a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f48c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f49590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f48da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f47020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f86c1fc7d50" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f86c1fc7d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fc6100"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fc6290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fc6420"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fc41b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fc6740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fc68d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fc6a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fc6bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fc6d80"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fc5020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fc51b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fc5340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fc54d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fc5760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fc58f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fc5a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fc5c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fc65b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fc5da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fc4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f86c1faee50" loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f86c1faee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fac210"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fac3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fac530"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1faa340"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fac850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fac9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1facb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1facd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fab020"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fab1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fab340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fab4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fab660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fab8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1faba80"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fabc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fabda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fac6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1faa020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1faa1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f86c1f6d8a0" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f86c1f6d8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f6dc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f6ddb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f6c020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f6bc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f6c340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f6c4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f6c660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f6c7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f6c980"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f6cb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f6cca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f6ce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f6b020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f6b2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f6b440"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f6b5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f6b760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f6c1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f6b8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f6ba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f86c1fa8e50" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f86c1fa8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fa7210"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fa73a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fa7530"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fa5340"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fa7850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fa79e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fa7b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fa7d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fa6020"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fa61b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fa6340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fa64d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fa6660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fa68f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fa6a80"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fa6c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fa6da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fa76c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fa5020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fa51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f86c1f8e020" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f86c1f8e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f8e3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f8e530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f8e6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f8c4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f8e9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f8eb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f8ed00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f8d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f8d1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f8d340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f8d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f8d660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f8d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f8da80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f8dc10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f8dda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f8c020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f8e850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f8c1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f8c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f86c1f75020" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f86c1f75020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f753a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f75530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f756c0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f734d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f759e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f75b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f75d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f74020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f741b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f74340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f744d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f74660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f747f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f74a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f74c10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f74da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f73020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f75850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f731b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f73340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f86c1f60020" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f86c1f60020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f603a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f60530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f606c0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f5e4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f609e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f60b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f60d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f5f020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f5f1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f5f340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f5f4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f5f660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f5f7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f5fa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f5fc10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f5fda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f5e020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f60850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f5e1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f5e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f86c1f45d50" loc="190:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f86c1f45d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f44100"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f44290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f44420"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f421b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f44740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f448d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f44a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f44bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f44d80"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f43020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f431b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f43340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f434d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f43760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f438f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f43a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f43c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f445b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f43da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f42020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f86c1fd1530" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f86c1fd1530"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fd18b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fd1a40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fd1bd0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fdf980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fe0020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fe01b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fe0340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fe04d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fe0660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fe07f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fe0980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fe0b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fe0ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fdf020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fdf1b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fdf340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fdf4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fd1d60"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fdf660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fdf7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f86c1fba580" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f86c1fba580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fba900"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fbaa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fbac20"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fb8980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fb9020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fb91b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fb9340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fb94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fb9660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fb97f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fb9980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fb9b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fb9ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fb8020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fb81b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fb8340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fb84d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fbadb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fb8660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fb87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f86c1fa0710" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f86c1fa0710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fa0a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fa0c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fa0db0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f9ea80"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f9f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f9f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f9f4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f9f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f9f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f9f980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f9fb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f9fca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f9fe30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f9e120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f9e2b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f9e440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f9e5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f9f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f9e760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f9e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f86c1f878a0" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f86c1f878a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f87c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f87db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f86020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f85c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f86340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f864d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f86660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f867f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f86980"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f86b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f86ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f86e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f85020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f852b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f85440"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f855d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f85760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f861b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f858f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f85a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f86c1f40d50" loc="192:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f86c1f40d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f3f100"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f3f290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f3f420"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f3d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f3f740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f3f8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f3fa60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f3fbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f3fd80"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f3e020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f3e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f3e340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f3e4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f3e760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f3e8f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f3ea80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f3ec10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f3f5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f3eda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f3d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f86c1f38570" loc="196:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f86c1f38570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f388f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f38a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f38c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f35980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f36020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f361b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f36340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f364d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f36660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f367f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f36980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f36b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f36ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f35020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f351b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f35340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f354d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f38da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f35660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f357f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f86c1f28570" loc="202:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f86c1f28570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f288f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f28a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f28c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f26980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f27020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f271b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f27340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f274d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f27660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f277f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f27980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f27b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f27ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f26020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f261b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f26340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f264d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f28da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f26660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f267f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f86c1f828a0" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f86c1f828a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f82c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f82db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f81020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f80c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f81340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f814d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f81660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f817f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f81980"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f81b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f81ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f81e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f80020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f802b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f80440"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f805d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f80760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f811b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f808f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f80a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f86c1f3d580" loc="193:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f86c1f3d580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f3d900"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f3da90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f3dc20"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f3b980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f3c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f3c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f3c340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f3c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f3c660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f3c7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f3c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f3cb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f3cca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f3b020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f3b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f3b340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f3b4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f3ddb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f3b660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f3b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f86c1fccd50" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f86c1fccd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fcb100"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fcb290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fcb420"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fc91b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fcb740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fcb8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fcba60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fcbbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fcbd80"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fca020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fca1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fca340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fca4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fca760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fca8f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fcaa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fcac10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fcb5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fcada0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fc9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f86c1fb3e50" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f86c1fb3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fb2210"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fb23a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fb2530"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fb0340"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fb2850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fb29e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fb2b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fb2d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fb1020"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fb11b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fb1340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fb14d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fb1660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fb18f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fb1a80"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fb1c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fb1da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fb26c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fb0020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fb01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f86c1f99e50" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f86c1f99e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f98210"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f983a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f98530"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f96340"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f98850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f989e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f98b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f98d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f97020"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f971b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f97340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f974d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f97660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f978f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f97a80"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f97c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f97da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f986c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f96020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f961b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f86c1f47580" loc="189:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f86c1f47580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f47900"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f47a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f47c20"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f45980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f46020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f461b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f46340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f464d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f46660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f467f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f46980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f46b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f46ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f45020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f451b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f45340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f454d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f47db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f45660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f457f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f86c1f2d570" loc="200:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f86c1f2d570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f2d8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f2da80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f2dc10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f2b980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f2c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f2c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f2c340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f2c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f2c660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f2c7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f2c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f2cb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f2cca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f2b020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f2b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f2b340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f2b4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f2dda0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f2b660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f2b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f86c1f93020" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f86c1f93020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f933a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f93530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f936c0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f914d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f939e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f93b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f93d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f92020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f921b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f92340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f924d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f92660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f927f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f92a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f92c10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f92da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f91020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f93850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f911b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f91340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f86c1f7a020" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f86c1f7a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f7a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f7a530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f7a6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f784d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f7a9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f7ab70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f7ad00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f79020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f791b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f79340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f794d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f79660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f797f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f79a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f79c10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f79da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f78020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f7a850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f781b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f78340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f86c1f65020" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f86c1f65020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f653a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f65530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f656c0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f634d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f659e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f65b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f65d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f64020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f641b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f64340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f644d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f64660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f647f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f64a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f64c10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f64da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f63020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f65850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f631b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f63340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f86c1fc4580" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f86c1fc4580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fc4900"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fc4a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fc4c20"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fc2980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fc3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fc31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fc3340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fc34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fc3660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fc37f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fc3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fc3b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fc3ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fc2020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fc21b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fc2340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fc24d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fc4db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fc2660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fc27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f86c1f6a020" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f86c1f6a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f6a3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f6a530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f6a6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f684d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f6a9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f6ab70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f6ad00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f69020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f691b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f69340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f694d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f69660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f697f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f69a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f69c10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f69da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f68020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f6a850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f681b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f68340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f86c1fbf580" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f86c1fbf580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fbf900"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fbfa90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fbfc20"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fbd980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fbe020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fbe1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fbe340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fbe4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fbe660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fbe7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fbe980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fbeb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fbeca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fbd020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fbd1b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fbd340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fbd4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fbfdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fbd660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fbd7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f86c1fa5710" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f86c1fa5710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fa5a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fa5c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fa5db0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fa3a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fa41b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fa4340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fa44d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fa4660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fa47f0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fa4980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fa4b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fa4ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fa4e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fa3120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fa32b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fa3440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fa35d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fa4020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fa3760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fa38f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f86c1f8c8a0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f86c1f8c8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f8cc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f8cdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f8b020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f8ac10"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f8b340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f8b4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f8b660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f8b7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f8b980"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f8bb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f8bca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f8be30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f8a020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f8a2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f8a440"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f8a5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f8a760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f8b1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f8a8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f8aa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f86c1f738a0" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f86c1f738a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f73c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f73db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f71020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f70c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f71340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f714d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f71660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f717f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f71980"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f71b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f71ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f71e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f70020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f702b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f70440"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f705d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f70760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f711b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f708f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f70a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f86c1f5e8a0" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f86c1f5e8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f5ec20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f5edb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f5d020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f5cc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f5d340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f5d4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f5d660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f5d7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f5d980"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f5db10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f5dca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f5de30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f5c020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f5c2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f5c440"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f5c5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f5c760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f5d1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f5c8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f5ca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f86c1fdfd50" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f86c1fdfd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fd0100"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fd0290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fd0420"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fce1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fd0740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fd08d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fd0a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fd0bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fd0d80"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fcf020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fcf1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fcf340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fcf4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fcf760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fcf8f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fcfa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fcfc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fd05b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fcfda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fce020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f86c1fb8d50" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f86c1fb8d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1fb7100"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1fb7290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1fb7420"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1fb51b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1fb7740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1fb78d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1fb7a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1fb7bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1fb7d80"/>
        <function-ref name="get" scoped="" ref="0x7f86c1fb6020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1fb61b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1fb6340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1fb64d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1fb6760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1fb68f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1fb6a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1fb6c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1fb75b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1fb6da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1fb5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f86c1f9ee50" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f86c1f9ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f9d210"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f9d3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f9d530"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f9b340"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f9d850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f9d9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f9db70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f9dd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f9c020"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f9c1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f9c340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f9c4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f9c660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f9c8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f9ca80"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f9cc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f9cda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f9d6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f9b020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f9b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f86c1f84020" loc="90:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f86c1f84020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f843a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f84530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f846c0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f824d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f849e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f84b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f84d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f83020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f831b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f83340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f834d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f83660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f837f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f83a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f83c10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f83da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f82020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f84850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f821b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f82340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f86c1f35d40" loc="197:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f86c1f35d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f340e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f34270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f34400"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f321b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f34720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f348b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f34a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f34bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f34d60"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f33020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f331b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f33340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f334d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f33760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f338f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f33a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f33c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f34590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f33da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f32020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f86c1f23560" loc="206:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f86c1f23560"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f238e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f23a70"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f23c00"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f21980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f22020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f221b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f22340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f224d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f22660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f227f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f22980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f22b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f22ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f21020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f211b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f21340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f214d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f23d90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f21660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f217f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f86c1f51580" loc="184:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f86c1f51580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f51900"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f51a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f51c20"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f4f980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f50020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f501b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f50340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f504d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f50660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f507f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f50980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f50b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f50ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f4f020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f4f1b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f4f340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f4f4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f51db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f4f660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f4f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f86c1f7f020" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f86c1f7f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f7f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f7f530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f7f6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f7d4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f7f9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f7fb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f7fd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f7e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f7e1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f7e340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f7e4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f7e660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f7e7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f7ea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f7ec10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f7eda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f7d020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f7f850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f7d1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f7d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f86c1f21d40" loc="208:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f86c1f21d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f200e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f20270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f20400"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f1e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f20720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f208b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f20a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f20bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f20d60"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f1f020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f1f1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f1f340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f1f4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f1f760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f1f8f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f1fa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f1fc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f20590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f1fda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f1e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f86c1f19580" loc="212:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f86c1f19580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f19900"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f19a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f19c20"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f17980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f18020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f181b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f18340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f184d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f18660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f187f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f18980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f18b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f18ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f17020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f171b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f17340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f174d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f19db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f17660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f177f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f86c1f598f0" loc="181:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f86c1f598f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1f580a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1f58230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1f583c0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1f561b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1f586e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1f58870"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1f58a00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1f58b90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1f58d20"/>
        <function-ref name="get" scoped="" ref="0x7f86c1f57020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1f571b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1f57340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1f574d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1f57760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1f578f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1f57a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1f57c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1f58550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1f57da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1f56020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1f14d10" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1f14d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1ee50e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1ee5270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1ee5400"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1ee31b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1ee5720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1ee58b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1ee5a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1ee5bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1ee5d60"/>
        <function-ref name="get" scoped="" ref="0x7f86c1ee4020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1ee41b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1ee4340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1ee44d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1ee4760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1ee48f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1ee4a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1ee4c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1ee4da0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1ee5590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1ee3020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1ee0260" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1ee0260"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1ee05e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1ee0770"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1ee0900"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1ede660"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1ee0c20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1ee0db0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1edf020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1edf1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1edf340"/>
        <function-ref name="get" scoped="" ref="0x7f86c1edf4d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1edf660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1edf7f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1edf980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1edfc10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1edfda0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1ede020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1ede1b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1ede340"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1ee0a90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1ede4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1edb740" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1edb740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1edbac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1edbc50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1edbde0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1ed9a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1eda1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1eda340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1eda4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1eda660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1eda7f0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1eda980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1edab10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1edaca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1edae30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1ed9120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1ed92b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1ed9440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1ed95d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1ed9760"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1eda020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1ed98f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1ed6b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1ed6b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1ed4020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1ed41b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1ed4340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1ed2020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1ed4660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1ed47f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1ed4980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1ed4b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1ed4ca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1ed4e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1ed3020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1ed31b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1ed3340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1ed35d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1ed3760"/>
        <function-ref name="set" scoped="" ref="0x7f86c1ed38f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1ed3a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1ed3c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1ed44d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1ed3da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1ecf060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1ecf060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1ecf3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1ecf570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1ecf700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1ecd4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1ecfa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1ecfbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1ecfd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1ece020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1ece1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1ece340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1ece4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1ece660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1ece7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1ecea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1ecec10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1eceda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1ecd020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1ecd1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1ecf890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1ecd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1eca540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1eca540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1eca8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1ecaa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1ecabe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1ec8980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1ec9020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1ec91b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1ec9340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1ec94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1ec9660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1ec97f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1ec9980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1ec9b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1ec9ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1ec8020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1ec81b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1ec8340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1ec84d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1ec8660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1ecad70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1ec87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1ec5b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1ec5b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1ec4020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1ec41b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1ec4340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1ec2020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1ec4660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1ec47f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1ec4980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1ec4b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1ec4ca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1ec4e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1ec3020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1ec31b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1ec3340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1ec35d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1ec3760"/>
        <function-ref name="set" scoped="" ref="0x7f86c1ec38f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1ec3a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1ec3c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1ec44d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1ec3da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1ebf060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1ebf060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1ebf3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1ebf570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1ebf700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1ebd4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1ebfa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1ebfbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1ebfd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1ebe020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1ebe1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1ebe340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1ebe4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1ebe660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1ebe7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1ebea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1ebec10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1ebeda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1ebd020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1ebd1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1ebf890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1ebd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1eba540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1eba540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1eba8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1ebaa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1ebabe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1eb8980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1eb9020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1eb91b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1eb9340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1eb94d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1eb9660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1eb97f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1eb9980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1eb9b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1eb9ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1eb8020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1eb81b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1eb8340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1eb84d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1eb8660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1ebad70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1eb87f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1eb5b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1eb5b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1eb4020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1eb41b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1eb4340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1eb2020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1eb4660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1eb47f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1eb4980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1eb4b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1eb4ca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1eb4e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1eb3020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1eb31b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1eb3340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1eb35d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1eb3760"/>
        <function-ref name="set" scoped="" ref="0x7f86c1eb38f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1eb3a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1eb3c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1eb44d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1eb3da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1eaf060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1eaf060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1eaf3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1eaf570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1eaf700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1ead4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1eafa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1eafbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1eafd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1eae020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1eae1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1eae340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1eae4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1eae660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1eae7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1eaea80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1eaec10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1eaeda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1ead020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1ead1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1eaf890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1ead340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1eaa540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1eaa540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1eaa8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1eaaa50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1eaabe0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1ea7980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1ea8020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1ea81b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1ea8340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1ea84d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1ea8660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1ea87f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1ea8980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1ea8b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1ea8ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1ea7020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1ea71b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1ea7340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1ea74d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1ea7660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1eaad70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1ea77f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1ea4d10" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1ea4d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1ea30e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1ea3270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1ea3400"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1ea11b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1ea3720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1ea38b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1ea3a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1ea3bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1ea3d60"/>
        <function-ref name="get" scoped="" ref="0x7f86c1ea2020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1ea21b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1ea2340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1ea24d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1ea2760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1ea28f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1ea2a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1ea2c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1ea2da0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1ea3590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1ea1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e9e260" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e9e260"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e9e5e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e9e770"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e9e900"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e9c660"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e9ec20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e9edb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e9d020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e9d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e9d340"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e9d4d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e9d660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e9d7f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e9d980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e9dc10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e9dda0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e9c020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e9c1b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e9c340"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e9ea90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e9c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e99740" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e99740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e99ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e99c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e99de0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e97a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e981b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e98340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e984d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e98660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e987f0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e98980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e98b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e98ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e98e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e97120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e972b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e97440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e975d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e97760"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e98020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e978f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e94b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e94b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e93020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e931b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e93340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e91020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e93660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e937f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e93980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e93b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e93ca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e93e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e92020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e921b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e92340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e925d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e92760"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e928f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e92a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e92c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e934d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e92da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e8e060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e8e060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e8e3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e8e570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e8e700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e8c4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e8ea20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e8ebb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e8ed40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e8d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e8d1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e8d340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e8d4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e8d660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e8d7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e8da80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e8dc10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e8dda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e8c020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e8c1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e8e890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e8c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e89540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e89540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e898c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e89a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e89be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e87980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e88020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e881b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e88340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e884d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e88660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e887f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e88980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e88b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e88ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e87020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e871b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e87340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e874d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e87660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e89d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e877f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e84b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e84b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e83020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e831b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e83340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e81020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e83660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e837f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e83980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e83b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e83ca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e83e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e82020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e821b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e82340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e825d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e82760"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e828f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e82a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e82c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e834d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e82da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e7d060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e7d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e7d3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e7d570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e7d700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e7b4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e7da20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e7dbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e7dd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e7c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e7c1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e7c340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e7c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e7c660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e7c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e7ca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e7cc10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e7cda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e7b020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e7b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e7d890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e7b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e78540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e78540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e788c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e78a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e78be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e76980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e77020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e771b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e77340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e774d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e77660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e777f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e77980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e77b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e77ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e76020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e761b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e76340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e764d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e76660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e78d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e767f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e73b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e73b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e72020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e721b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e72340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e70020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e72660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e727f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e72980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e72b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e72ca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e72e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e71020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e711b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e71340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e715d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e71760"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e718f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e71a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e71c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e724d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e71da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e6d060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e6d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e6d3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e6d570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e6d700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e6b4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e6da20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e6dbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e6dd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e6c020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e6c1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e6c340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e6c4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e6c660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e6c7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e6ca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e6cc10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e6cda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e6b020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e6b1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e6d890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e6b340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e68540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e68540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e688c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e68a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e68be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e66980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e67020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e671b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e67340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e674d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e67660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e677f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e67980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e67b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e67ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e66020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e661b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e66340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e664d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e66660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e68d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e667f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e63dc0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e63dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e62180"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e62310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e624a0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e601b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e627c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e62950"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e62ae0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e62c70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e62e00"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e61020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e611b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e61340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e614d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e61760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e618f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e61a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e61c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e61da0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e62630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e60020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e5d260" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e5d260"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e5d5e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e5d770"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e5d900"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e5b660"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e5dc20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e5ddb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e5c020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e5c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e5c340"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e5c4d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e5c660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e5c7f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e5c980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e5cc10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e5cda0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e5b020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e5b1b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e5b340"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e5da90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e5b4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e58740" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e58740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e58ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e58c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e58de0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e55a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e561b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e56340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e564d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e56660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e567f0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e56980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e56b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e56ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e56e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e55120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e552b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e55440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e555d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e55760"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e56020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e558f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e52b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e52b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e51020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e511b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e51340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e4f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e51660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e517f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e51980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e51b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e51ca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e51e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e50020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e501b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e50340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e505d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e50760"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e508f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e50a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e50c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e514d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e50da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e4c060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e4c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e4c3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e4c570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e4c700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e4a4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e4ca20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e4cbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e4cd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e4b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e4b1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e4b340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e4b4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e4b660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e4b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e4ba80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e4bc10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e4bda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e4a020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e4a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e4c890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e4a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e47540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e47540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e478c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e47a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e47be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e45980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e46020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e461b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e46340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e464d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e46660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e467f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e46980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e46b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e46ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e45020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e451b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e45340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e454d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e45660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e47d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e457f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e42b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e42b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e41020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e411b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e41340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e3f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e41660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e417f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e41980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e41b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e41ca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e41e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e40020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e401b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e40340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e405d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e40760"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e408f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e40a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e40c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e414d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e40da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e3c060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e3c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e3c3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e3c570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e3c700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e3a4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e3ca20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e3cbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e3cd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e3b020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e3b1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e3b340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e3b4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e3b660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e3b7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e3ba80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e3bc10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e3bda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e3a020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e3a1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e3c890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e3a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e37540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e37540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e378c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e37a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e37be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e35980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e36020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e361b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e36340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e364d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e36660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e367f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e36980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e36b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e36ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e35020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e351b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e35340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e354d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e35660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e37d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e357f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e32b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e32b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e31020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e311b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e31340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e2f020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e31660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e317f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e31980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e31b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e31ca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e31e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e30020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e301b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e30340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e305d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e30760"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e308f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e30a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e30c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e314d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e30da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e2c060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e2c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e2c3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e2c570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e2c700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e294d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e2ca20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e2cbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e2cd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e2a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e2a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e2a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e2a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e2a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e2a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e2aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e2ac10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e2ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e29020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e291b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e2c890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e29340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e26540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e26540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e268c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e26a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e26be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e24980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e25020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e251b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e25340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e254d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e25660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e257f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e25980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e25b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e25ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e24020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e241b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e24340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e244d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e24660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e26d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e247f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e21b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e21b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e20020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e201b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e20340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e1e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e20660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e207f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e20980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e20b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e20ca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e20e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e1f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e1f1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e1f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e1f5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e1f760"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e1f8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e1fa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e1fc10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e204d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e1fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e1b060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e1b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e1b3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e1b570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e1b700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e194d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e1ba20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e1bbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e1bd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e1a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e1a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e1a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e1a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e1a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e1a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e1aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e1ac10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e1ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e19020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e191b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e1b890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e19340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e16540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e16540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e168c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e16a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e16be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e14980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e15020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e151b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e15340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e154d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e15660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e157f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e15980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e15b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e15ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e14020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e141b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e14340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e144d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e14660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e16d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e147f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e11b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e11b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e10020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e101b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e10340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e0e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e10660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e107f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e10980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e10b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e10ca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e10e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e0f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e0f1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e0f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e0f5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e0f760"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e0f8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e0fa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e0fc10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e104d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e0fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e0b060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e0b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e0b3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e0b570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e0b700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e094d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e0ba20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e0bbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e0bd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e0a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e0a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e0a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e0a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e0a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e0a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e0aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e0ac10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e0ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e09020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e091b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e0b890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e09340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e06540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e06540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1e068c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1e06a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1e06be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1e04980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1e05020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1e051b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1e05340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1e054d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1e05660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1e057f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1e05980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1e05b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1e05ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1e04020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1e041b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1e04340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1e044d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1e04660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1e06d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1e047f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1e00b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1e00b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1dff020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1dff1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1dff340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1dfd020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1dff660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1dff7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1dff980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1dffb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1dffca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1dffe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1dfe020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1dfe1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1dfe340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1dfe5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1dfe760"/>
        <function-ref name="set" scoped="" ref="0x7f86c1dfe8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1dfea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1dfec10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1dff4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1dfeda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1dfa060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1dfa060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1dfa3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1dfa570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1dfa700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1df84d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1dfaa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1dfabb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1dfad40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1df9020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1df91b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1df9340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1df94d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1df9660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1df97f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1df9a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1df9c10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1df9da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1df8020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1df81b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1dfa890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1df8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1df5540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1df5540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1df58c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1df5a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1df5be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1df3980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1df4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1df41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1df4340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1df44d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1df4660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1df47f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1df4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1df4b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1df4ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1df3020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1df31b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1df3340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1df34d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1df3660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1df5d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1df37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1df0b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1df0b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1def020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1def1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1def340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1ded020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1def660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1def7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1def980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1defb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1defca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1defe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1dee020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1dee1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1dee340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1dee5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1dee760"/>
        <function-ref name="set" scoped="" ref="0x7f86c1dee8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1deea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1deec10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1def4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1deeda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1dea060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1dea060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1dea3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1dea570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1dea700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1de84d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1deaa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1deabb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1dead40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1de9020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1de91b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1de9340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1de94d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1de9660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1de97f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1de9a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1de9c10"/>
        <function-ref name="set" scoped="" ref="0x7f86c1de9da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1de8020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1de81b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1dea890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1de8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f86c1de5540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f86c1de5540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1de58c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1de5a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1de5be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1de3980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1de4020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1de41b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1de4340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1de44d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1de4660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1de47f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1de4980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1de4b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1de4ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1de3020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1de31b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1de3340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1de34d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1de3660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1de5d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1de37f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f86c1d55610" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c1d55610"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1d55990"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1d55b20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1d55cb0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1d53980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1d54020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1d541b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1d54340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1d544d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1d54660"/>
        <function-ref name="get" scoped="" ref="0x7f86c1d547f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1d54980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1d54b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1d54ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1d53020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1d531b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1d53340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1d534d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1d53660"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1d55e40"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1d537f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f86c1d67480" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1d67480"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1d67800"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1d67990"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1d67b20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1d67cb0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1d67e40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1d55020"/>
        <function-ref name="set" scoped="" ref="0x7f86c1d551b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1d55340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f86c1d4fde0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c1d4fde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1d4e180"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1d4e310"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1d4e4a0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1d4c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1d4e7c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1d4e950"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1d4eae0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1d4ec70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1d4ee00"/>
        <function-ref name="get" scoped="" ref="0x7f86c1d4d020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1d4d1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1d4d340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1d4d4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1d4d760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1d4d8f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1d4da80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1d4dc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1d4dda0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1d4e630"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1d4c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f86c1d50b20" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1d50b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1d4f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1d4f1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1d4f340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1d4f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1d4f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1d4f7f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1d4f980"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1d4fb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f86c1d49480" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c1d49480"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1d49800"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1d49990"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1d49b20"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1d477f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1d49e40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1d48020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1d481b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1d48340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1d484d0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1d48660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1d487f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1d48980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1d48b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1d48da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1d47020"/>
        <function-ref name="set" scoped="" ref="0x7f86c1d471b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1d47340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1d474d0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1d49cb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1d47660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f86c1d4a1b0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1d4a1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1d4a530"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1d4a6c0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1d4a850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1d4a9e0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1d4ab70"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1d4ad00"/>
        <function-ref name="set" scoped="" ref="0x7f86c1d49020"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1d491b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMControl" ref="0x7f86c1ca7a50" loc="18:SlaveC.nc">
      <component-ref qname="SlaveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMControl" scoped="" ref="0x7f86c1ca7a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f86c1ca7dd0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f86c1cb8020"/>
        <function-ref name="start" scoped="" ref="0x7f86c1cb81b0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c1cb8340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f86c1d3ccf0" loc="9:SlaveC.nc">
      <component-ref qname="SlaveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f86c1d3ccf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f86c1d390a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f86c1cca910" loc="14:SlaveC.nc">
      <component-ref qname="SlaveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f86c1cca910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1ccac90"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f86c1ccae20"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c1d22020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c1d221b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f86c1d22340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f86c1caf8f0" loc="16:SlaveC.nc">
      <component-ref qname="SlaveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f86c1caf8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c1cafc70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c1cafe00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c1cb9020"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c1cb91b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c1cb9340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f86c1ca0c20" loc="19:SlaveC.nc">
      <component-ref qname="SlaveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c1ca0c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f86c1cb0020"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f86c1cb01b0"/>
        <function-ref name="getRssi" scoped="" ref="0x7f86c1cb0340"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f86c1cb04d0"/>
        <function-ref name="getPower" scoped="" ref="0x7f86c1cb0660"/>
        <function-ref name="getLqi" scoped="" ref="0x7f86c1cb07f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7f86c1caa180" loc="17:SlaveC.nc">
      <component-ref qname="SlaveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f86c1caa180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c1caa500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f86c1d39360" loc="10:SlaveC.nc">
      <component-ref qname="SlaveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f86c1d39360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f86c1d396e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f86c1d39870"/>
        <function-ref name="led1On" scoped="" ref="0x7f86c1d39a00"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f86c1d39b90"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f86c1d39d20"/>
        <function-ref name="get" scoped="" ref="0x7f86c1d38020"/>
        <function-ref name="led1Off" scoped="" ref="0x7f86c1d381b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f86c1d387f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1d38340"/>
        <function-ref name="led0On" scoped="" ref="0x7f86c1d384d0"/>
        <function-ref name="led2On" scoped="" ref="0x7f86c1d38660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerMiSlot" ref="0x7f86c1d2c820" loc="11:SlaveC.nc">
      <component-ref qname="SlaveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMiSlot" scoped="" ref="0x7f86c1d2c820"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c1d2acf0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1d36300"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f86c1d2a0d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f86c1d36c00"/>
        <function-ref name="getdt" scoped="" ref="0x7f86c1d29660"/>
        <function-ref name="gett0" scoped="" ref="0x7f86c1d291e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c1d36780"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f86c1d37480"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f86c1d2a6e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f86c1d37950"/>
        <function-ref name="stop" scoped="" ref="0x7f86c1d37e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerLeds" ref="0x7f86c1d29cd0" loc="12:SlaveC.nc">
      <component-ref qname="SlaveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerLeds" scoped="" ref="0x7f86c1d29cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c1d24220"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1d277c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f86c1d25590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f86c1d25110"/>
        <function-ref name="getdt" scoped="" ref="0x7f86c1d24b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f86c1d246a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c1d27c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f86c1d28940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f86c1d25ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f86c1d28e10"/>
        <function-ref name="stop" scoped="" ref="0x7f86c1d27340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f86c1cba8d0" loc="15:SlaveC.nc">
      <component-ref qname="SlaveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f86c1cba8d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f86c1cbac50"/>
        <function-ref name="source" scoped="" ref="0x7f86c1cbade0"/>
        <function-ref name="address" scoped="" ref="0x7f86c1d21020"/>
        <function-ref name="destination" scoped="" ref="0x7f86c1d211b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f86c1d21340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f86c1d214d0"/>
        <function-ref name="type" scoped="" ref="0x7f86c1d21660"/>
        <function-ref name="setType" scoped="" ref="0x7f86c1d217f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f86c1d21980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f86c1d21b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f86c1d21ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f86c1c6f980" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="SlaveAppC.TimerMiSlot"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c1c6f980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c1943e80"/>
        <function-ref name="fired" scoped="" ref="0x7f86c19444a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f86c1943260"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f86c1944da0"/>
        <function-ref name="getdt" scoped="" ref="0x7f86c19417a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f86c1941320"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c1944920"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f86c19455a0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f86c1943870"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f86c1945a70"/>
        <function-ref name="stop" scoped="" ref="0x7f86c1944020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f86c1c64050" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f86c1c64050"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c1c61630"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1c63ac0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f86c1c62920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f86c1c624a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f86c1c5f020"/>
        <function-ref name="gett0" scoped="" ref="0x7f86c1c61ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c1c62020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f86c1c64c40"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f86c1c61020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f86c1c63170"/>
        <function-ref name="stop" scoped="" ref="0x7f86c1c63640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f86c1c5cc30" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f86c1c5cc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c1c57110"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1c596a0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f86c1c584a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f86c1c58020"/>
        <function-ref name="getdt" scoped="" ref="0x7f86c1c57a10"/>
        <function-ref name="gett0" scoped="" ref="0x7f86c1c57590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c1c59b20"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f86c1c5b860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f86c1c58ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f86c1c5bd30"/>
        <function-ref name="stop" scoped="" ref="0x7f86c1c59220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f86c1c52500" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f86c1c52500"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c1c54170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c1c5fe50" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c1c5fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c1c5c210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f86c1a15870" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f86c1a15870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c1a11090"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1a13090"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c1a13a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c1a13550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c1a11550"/>
        <function-ref name="start" scoped="" ref="0x7f86c1a146a0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c1a14bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c1a15020" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c1a15020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c1a153a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f86c07ad4f0" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f86c07ad4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c07abdb0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c07acda0"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c07ab760"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c07ab2a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c07aa2a0"/>
        <function-ref name="start" scoped="" ref="0x7f86c07ac3d0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c07ac8e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c07aeb10" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c07aeb10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c07ad020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f86c0795da0" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c0795da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c0794180"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c0794310"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c07944a0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c0794630"/>
        <function-ref name="fired" scoped="" ref="0x7f86c07947c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f86c0797340" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c0797340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c07976c0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c0797850"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c07979e0"/>
        <function-ref name="get" scoped="" ref="0x7f86c0797b70"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c0797d00"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c0796020"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c07961b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c0796340"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c07964d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c0796660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c07967f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f86c0796a80" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c0796a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c0796e00"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c0795020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c07951b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c0795340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c07954d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c0795660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c07957f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c0795980"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c0795b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f86c1c1d1d0" loc="52:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c1c1d1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1c1d550"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1c1d6e0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1c1d870"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1c1da00"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1c1db90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f86c1c22990" loc="50:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c1c22990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1c22d10"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1c21020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1c211b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1c21340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1c214d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1c21660"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1c217f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1c21980"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1c21b10"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1c21ca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1c21e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f86c1c1f720" loc="51:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c1c1f720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1c1faa0"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1c1fc30"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1c1fdc0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1c1e020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1c1e1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1c1e340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1c1e4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1c1e660"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1c1e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f86c1c0c730" loc="56:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f86c1c0c730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1c0cab0"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1c0cc40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1c0cdd0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1c0b020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1c0b1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1c0b340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1c0b4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1c0b660"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1c0b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f86c1c07280" loc="61:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f86c1c07280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1c07600"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1c07790"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1c07920"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1c07ab0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1c07c40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1c07dd0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1c06020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1c061b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1c06340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f86c1c0d700" loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f86c1c0d700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1c0da80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1c0dc10"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1c0dda0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1c0c020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1c0c1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1c0c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f86c1bfa020" loc="73:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f86c1bfa020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1bfa3a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1bfa530"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1bfa6c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1bfa850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1bfa9e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1bfab70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f86c1c13890" loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f86c1c13890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1c13c10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1c13da0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1c0d020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1c0d1b0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1c0d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f86c1bfc160" loc="72:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f86c1bfc160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1bfc4e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1bfc670"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1bfc800"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1bfc990"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1bfcb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f86c1bf1ae0" loc="82:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f86c1bf1ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1bf1e60"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1bf0020"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1bf01b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1bf0340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1bf04d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1bf0660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f86c1bf9020" loc="74:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f86c1bf9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1bf93a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1bf9530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1bf96c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1bf9850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1bf99e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1bf9b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1bf9d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1bf8020"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1bf81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f86c1c170c0" loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f86c1c170c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1c17440"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1c175d0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1c17760"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1c178f0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1c17a80"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1c17c10"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1c17da0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1c16020"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1c161b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f86c1c02a20" loc="66:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f86c1c02a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1c02da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1c01020"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1c011b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1c01340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1c014d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1c01660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f86c1c03bb0" loc="65:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f86c1c03bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1c02020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1c021b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1c02340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1c024d0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1c02660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f86c1c04730" loc="64:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f86c1c04730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1c04ab0"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1c04c40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1c04dd0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1c03020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1c031b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1c03340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1c034d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1c03660"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1c037f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f86c1c0aa20" loc="58:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f86c1c0aa20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1c0ada0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1c09020"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1c091b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1c09340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1c094d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1c09660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f86c1bf7570" loc="76:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f86c1bf7570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1bf78f0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1bf7a80"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1bf7c10"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1bf7da0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1bf6020"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1bf61b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f86c1c01a50" loc="67:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f86c1c01a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1c01dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1c00020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1c001b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1c00340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1c004d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1c00660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1c007f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1c00980"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1c00b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f86c1c0bbb0" loc="57:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f86c1c0bbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1c0a020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1c0a1b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1c0a340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1c0a4d0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1c0a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f86c1c1b830" loc="49:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f86c1c1b830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1c1bbb0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1c1bd40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1c18020"/>
        <function-ref name="get" scoped="" ref="0x7f86c1c181b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1c18340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1c184d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1c18660"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1c187f0"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1c18980"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1c18b10"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1c18ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f86c1bf8570" loc="75:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f86c1bf8570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1bf8af0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1bf8c80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1bf8e10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1bf7020"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1bf71b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f86c1c14410" loc="53:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f86c1c14410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1c14790"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1c14920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1c14ab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1c14c40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1c14dd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1c13020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1c131b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1c13340"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1c134d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f86c1bf65a0" loc="77:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f86c1bf65a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1bf6920"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1bf6ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1bf6c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1bf6dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1bf5020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1bf51b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1bf5340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1bf54d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1bf5660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f86c1c0e410" loc="52:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f86c1c0e410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1c0e790"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1c0e920"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1c0eab0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1c0ec40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1c0edd0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1c14020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f86c1bffda0" loc="69:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f86c1bffda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1bfe180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1bfe310"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1bfe4a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1bfe630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1bfe7c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1bfe950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f86c1c16570" loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f86c1c16570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1c168f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1c16a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1c16c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1c16da0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1c15020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f86c1bff020" loc="68:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f86c1bff020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1bff3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1bff530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1bff6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1bff850"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1bff9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f86c1bf4890" loc="79:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f86c1bf4890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1bf4c10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1bf4da0"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1bf3020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1bf31b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1bf3340"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1bf34d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f86c1bfed40" loc="71:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f86c1bfed40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1bfd0e0"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1bfd270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1bfd400"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1bfd590"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1bfd720"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1bfd8b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1bfda40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1bfdbd0"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1bfdd60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f86c1c099e0" loc="60:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f86c1c099e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1c09d60"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1c08020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1c081b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1c08340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1c084d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1c08660"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1c087f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1c08980"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1c08b10"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1c08ca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1c08e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f86c1c05700" loc="63:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f86c1c05700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1c05a80"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1c05c10"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1c05da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1c04020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1c041b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1c04340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f86c1bf5a20" loc="78:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f86c1bf5a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1bf5da0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1bf4020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1bf41b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1bf4340"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1bf44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f86c1bf2d40" loc="81:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f86c1bf2d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1bf10e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1bf1270"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1bf1400"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1bf1590"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1bf1720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f86c1c06700" loc="62:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f86c1c06700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1c06b80"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1c06d10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1c05020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1c051b0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1c05340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f86c1bf38c0" loc="80:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f86c1bf38c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1bf3c40"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1bf3dd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1bf2020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1bf21b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1bf2340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1bf24d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1bf2660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1bf27f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1bf2980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f86c1bb8940" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f86c1bb8940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1bb8cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f86c1bb82f0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f86c1bb82f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1bb8670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f86c1bb7020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f86c1bb7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1bb73a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f86c1bb9bf0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f86c1bb9bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1bb8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f86c1bba3e0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c1bba3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1bba760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1bba8f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1bbaa80"/>
        <function-ref name="get" scoped="" ref="0x7f86c1bbac10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1bbada0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1bb9020"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1bb91b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1bb9340"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1bb94d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1bb9660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1bb97f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f86c1bb1750" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f86c1bb1750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1bb1ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f86c1bb1100" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f86c1bb1100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1bb1480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f86c1bb1da0" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f86c1bb1da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1baf180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f86c1bb2a60" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f86c1bb2a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1bb2e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f86c1bb3260" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c1bb3260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1bb35e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1bb3770"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1bb3900"/>
        <function-ref name="get" scoped="" ref="0x7f86c1bb3a90"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1bb3c20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1bb3db0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1bb2020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1bb21b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1bb2340"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1bb24d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1bb2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f86c1b667a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f86c1b667a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b66b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1b66cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1b66e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b65020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b651b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1b65340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f86c1bac6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f86c1bac6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1baca50"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1bacbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1bacd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1b67020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1b671b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b67340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1b674d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1b67660"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1b677f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f86c1b63c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f86c1b63c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b62020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f86c1b67ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f86c1b67ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b67e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1b66020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1b661b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1b66340"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1b664d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f86c1b65610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c1b65610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1b65990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1b65b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b65cb0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1b65e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b63020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b631b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1b63340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b634d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1b63660"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1b637f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1b63980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f86c1b5ecb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f86c1b5ecb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b5d0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1b5d230"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1b5d3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b5d550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b5d6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1b5d870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f86c1b60b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f86c1b60b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1b5f020"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1b5f1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b5f340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1b5f4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1b5f660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b5f7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1b5f980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1b5fb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1b5fca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f86c1b5b2f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f86c1b5b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b5b670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f86c1b5e020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f86c1b5e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b5e3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1b5e530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1b5e6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1b5e850"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1b5e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f86c1b5db40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c1b5db40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1b5c020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1b5c1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b5c340"/>
        <function-ref name="get" scoped="" ref="0x7f86c1b5c4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b5c660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b5c7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1b5c980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b5cb10"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1b5cca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1b5ce30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1b5b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f86c1b562f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f86c1b562f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b56670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1b56800"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1b56990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b56b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b56cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1b56e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f86c1b58220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f86c1b58220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1b585a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1b58730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b588c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1b58a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1b58be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b58d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1b57020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1b571b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1b57340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f86c1b537a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f86c1b537a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b53b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f86c1b57610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f86c1b57610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b57990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1b57b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1b57cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1b57e40"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1b56020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f86c1b55160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c1b55160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1b554e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1b55670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b55800"/>
        <function-ref name="get" scoped="" ref="0x7f86c1b55990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b55b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b55cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1b55e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b53020"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1b531b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1b53340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1b534d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f86c1b4e7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f86c1b4e7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b4eb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1b4ecb0"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1b4ee40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b4d020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b4d1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1b4d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f86c1b506d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f86c1b506d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1b50a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1b50be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b50d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1b4f020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1b4f1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b4f340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1b4f4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1b4f660"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1b4f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f86c1b4cc50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f86c1b4cc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b4b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f86c1b4fac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f86c1b4fac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b4fe40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1b4e020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1b4e1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1b4e340"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1b4e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f86c1b4d610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c1b4d610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1b4d990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1b4db20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b4dcb0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1b4de40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b4c020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b4c1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1b4c340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b4c4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1b4c660"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1b4c7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1b4c980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f86c1b47cb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f86c1b47cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b460a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1b46230"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1b463c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b46550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b466e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1b46870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f86c1b49b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f86c1b49b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1b48020"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1b481b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b48340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1b484d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1b48660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b487f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1b48980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1b48b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1b48ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f86c1b442f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f86c1b442f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b44670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f86c1b47020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f86c1b47020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b473a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1b47530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1b476c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1b47850"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1b479e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f86c1b46b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c1b46b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1b45020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1b451b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b45340"/>
        <function-ref name="get" scoped="" ref="0x7f86c1b454d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b45660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b457f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1b45980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b45b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1b45ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1b45e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1b44020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f86c1b3e2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f86c1b3e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b3e670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1b3e800"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1b3e990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b3eb20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b3ecb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1b3ee40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f86c1b40220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f86c1b40220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1b405a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1b40730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b408c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1b40a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1b40be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b40d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1b3f020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1b3f1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1b3f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f86c1b3c7a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f86c1b3c7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b3cb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f86c1b3f610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f86c1b3f610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b3f990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1b3fb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1b3fcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1b3fe40"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1b3e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f86c1b3d160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c1b3d160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1b3d4e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1b3d670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b3d800"/>
        <function-ref name="get" scoped="" ref="0x7f86c1b3d990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b3db20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b3dcb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1b3de40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b3c020"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1b3c1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1b3c340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1b3c4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f86c1b377a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f86c1b377a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b37b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1b37cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1b37e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b36020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b361b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1b36340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f86c1b396d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f86c1b396d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1b39a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1b39be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b39d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1b38020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1b381b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b38340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1b384d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1b38660"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1b387f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f86c1b35c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f86c1b35c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b33020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f86c1b38ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f86c1b38ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b38e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1b37020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1b371b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1b37340"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1b374d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f86c1b36610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c1b36610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1b36990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1b36b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b36cb0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1b36e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b35020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b351b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1b35340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b354d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1b35660"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1b357f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1b35980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f86c1b2fcb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f86c1b2fcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b2e0a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1b2e230"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1b2e3c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b2e550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b2e6e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1b2e870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f86c1b31b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f86c1b31b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1b30020"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1b301b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b30340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1b304d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1b30660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b307f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1b30980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1b30b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1b30ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f86c1b2c2f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f86c1b2c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b2c670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f86c1b2f020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f86c1b2f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b2f3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1b2f530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1b2f6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1b2f850"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1b2f9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f86c1b2eb40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c1b2eb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1b2d020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1b2d1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b2d340"/>
        <function-ref name="get" scoped="" ref="0x7f86c1b2d4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b2d660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b2d7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1b2d980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b2db10"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1b2dca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1b2de30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1b2c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f86c1b272f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f86c1b272f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b27670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1b27800"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1b27990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b27b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b27cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1b27e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f86c1b29220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f86c1b29220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1b295a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1b29730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b298c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1b29a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1b29be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b29d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1b28020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1b281b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1b28340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f86c1b257a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f86c1b257a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b25b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f86c1b28610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f86c1b28610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b28990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1b28b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1b28cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1b28e40"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1b27020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f86c1b26160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c1b26160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1b264e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1b26670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b26800"/>
        <function-ref name="get" scoped="" ref="0x7f86c1b26990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b26b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b26cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1b26e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b25020"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1b251b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1b25340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1b254d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f86c1b1f7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f86c1b1f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b1fb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c1b1fcb0"/>
        <function-ref name="captured" scoped="" ref="0x7f86c1b1fe40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b1e020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b1e1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c1b1e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f86c1b216d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f86c1b216d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c1b21a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c1b21be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b21d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c1b20020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c1b201b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b20340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c1b204d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c1b20660"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c1b207f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f86c1b1dc50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f86c1b1dc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b1c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f86c1b20ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f86c1b20ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c1b20e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c1b1f020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c1b1f1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c1b1f340"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1b1f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f86c1b1e610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c1b1e610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1b1e990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1b1eb20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1b1ecb0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1b1ee40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1b1d020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1b1d1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1b1d340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1b1d4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1b1d660"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1b1d7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1b1d980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f86c1b17bc0" loc="7:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f86c1b17bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b16020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f86c1b183f0" loc="4:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f86c1b183f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b18770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f86c1b18b80" loc="5:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f86c1b18b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b17020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f86c1b17430" loc="6:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f86c1b17430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1b177b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f86c0789a80" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c0789a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c0789e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c0788020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c07881b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c0788340"/>
        <function-ref name="fired" scoped="" ref="0x7f86c07884d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f86c078b190" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c078b190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c078b510"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c078b6a0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c078b830"/>
        <function-ref name="get" scoped="" ref="0x7f86c078b9c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c078bb50"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c078bce0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c078be70"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c078a030"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c078a1c0"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c078a350"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c078a4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f86c078f020" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f86c078f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c078c870"/>
        <function-ref name="fired" scoped="" ref="0x7f86c078e840"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c078c220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c078ed00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c078cd30"/>
        <function-ref name="start" scoped="" ref="0x7f86c078fe30"/>
        <function-ref name="stop" scoped="" ref="0x7f86c078e380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c0790660" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c0790660"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c07909e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f86c078a770" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c078a770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c078aaf0"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c078ac80"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c078ae10"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c0789020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c07891b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c0789340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c07894d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c0789660"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c07897f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f86c1a8e8c0" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f86c1a8e8c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c1a92700"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1a910d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1a92bc0"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1a91590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f86c1a8c8e0" loc="43:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f86c1a8c8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c1a89780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1a87150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1a89c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1a87610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f86c1a77c50" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c1a77c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1a75020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1a751b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c1a75340"/>
        <function-ref name="get" scoped="" ref="0x7f86c1a754d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c1a75660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1a757f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1a75980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1a75b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1a75ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c1a75e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c1a74020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f86c1a85b80" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f86c1a85b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c1a849b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1a77360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1a84e70"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1a77820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f86c1a530f0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f86c1a530f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c1a52020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1a529a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1a524e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1a52e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f86c1a71cf0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f86c1a71cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c1a56b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1a54550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1a54090"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1a54a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f86c07a8890" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f86c07a8890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c07a40d0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c07a50d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c07a5a50"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c07a5590"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c07a4590"/>
        <function-ref name="start" scoped="" ref="0x7f86c07a76e0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c07a7bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f86c07a10a0" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f86c07a10a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c079eb30"/>
        <function-ref name="fired" scoped="" ref="0x7f86c079f9f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c079e4e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c079e020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c079d020"/>
        <function-ref name="start" scoped="" ref="0x7f86c079f020"/>
        <function-ref name="stop" scoped="" ref="0x7f86c079f530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f86c07a4c00" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f86c07a4c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c07a3a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c07a24e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c07a2020"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c07a29a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f86c19df9c0" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f86c19df9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c19dfd40"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c19dd020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f86c19e2850" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f86c19e2850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c19df090"/>
        <function-ref name="fired" scoped="" ref="0x7f86c19e0090"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c19e0a10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c19e0550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c19df550"/>
        <function-ref name="start" scoped="" ref="0x7f86c19e16a0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c19e1bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f86c19e82f0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c19e82f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c19e4870"/>
        <function-ref name="fired" scoped="" ref="0x7f86c19e6e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f86c19e5c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f86c19e5780"/>
        <function-ref name="getdt" scoped="" ref="0x7f86c19e21e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f86c19e4cf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c19e5300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f86c19e6020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f86c19e4260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f86c19e64f0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c19e69c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f86c1960020" loc="58:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f86c1960020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c195c630"/>
        <function-ref name="fired" scoped="" ref="0x7f86c195fa60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f86c195d920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f86c195d4a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f86c195b020"/>
        <function-ref name="gett0" scoped="" ref="0x7f86c195cab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c195d020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f86c1960c10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f86c195c020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f86c195f110"/>
        <function-ref name="stop" scoped="" ref="0x7f86c195f5e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f86c195b450" loc="59:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f86c195b450"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f86c195b7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f86c19678e0" loc="57:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c19678e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c1961020"/>
        <function-ref name="fired" scoped="" ref="0x7f86c19644c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f86c1963300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f86c1964e00"/>
        <function-ref name="getdt" scoped="" ref="0x7f86c1961960"/>
        <function-ref name="gett0" scoped="" ref="0x7f86c19614c0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c1964960"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f86c1966560"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f86c1963930"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f86c1966a50"/>
        <function-ref name="stop" scoped="" ref="0x7f86c1964020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f86c05aa100" loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f86c05aa100"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c05aa480"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c05aa610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f86c05b23d0" loc="65:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f86c05b23d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c05ae870"/>
        <function-ref name="fired" scoped="" ref="0x7f86c05b0e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f86c05afc00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f86c05af780"/>
        <function-ref name="getdt" scoped="" ref="0x7f86c05ac1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f86c05aecf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c05af300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f86c05b0020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f86c05ae260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f86c05b04f0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c05b09c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f86c05aba40" loc="67:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f86c05aba40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f86c05abdc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Platform" ref="0x7f86c05ac5d0" loc="66:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f86c05ac5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f86c05ab660"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f86c05ab7f0"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f86c05acc70"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f86c05ace00"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f86c05ab020"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f86c05ab1b0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f86c05ab340"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f86c05ab4d0"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f86c05ac950"/>
        <function-ref name="node_id" scoped="" ref="0x7f86c05acae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f86c05b9db0" loc="63:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c05b9db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c05b3470"/>
        <function-ref name="fired" scoped="" ref="0x7f86c05b69b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f86c05b57c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f86c05b5320"/>
        <function-ref name="getdt" scoped="" ref="0x7f86c05b3db0"/>
        <function-ref name="gett0" scoped="" ref="0x7f86c05b3910"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c05b6e50"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f86c05b8a80"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f86c05b5df0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f86c05b6020"/>
        <function-ref name="stop" scoped="" ref="0x7f86c05b6510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f86c1957020" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f86c1957020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c1957c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f86c194d300" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f86c194d300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c194c150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c194cad0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c194c610"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c194b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f86c193f260" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="SlaveAppC.TimerLeds"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c193f260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c193b6e0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c193eca0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f86c193da70"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f86c193d5f0"/>
        <function-ref name="getdt" scoped="" ref="0x7f86c193a020"/>
        <function-ref name="gett0" scoped="" ref="0x7f86c193bb60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c193d170"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f86c193fe50"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f86c193b0d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f86c193e350"/>
        <function-ref name="stop" scoped="" ref="0x7f86c193e820"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f86c192ccc0" loc="55:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f86c192ccc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f86c192b0a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f86c192b230"/>
        <function-ref name="start" scoped="" ref="0x7f86c192b3c0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c192b550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f86c19222c0" loc="64:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c19222c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f86c1922640"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f86c19227d0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f86c1922960"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f86c1922af0"/>
        <function-ref name="setCca" scoped="" ref="0x7f86c1922c80"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f86c1922e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f86c19121d0" loc="67:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f86c19121d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f86c1912650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f86c19278f0" loc="60:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f86c19278f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c1927c70"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f86c1927e00"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c1925020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c19251b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f86c1925340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f86c192bd20" loc="56:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f86c192bd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c192a0e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c192a270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c192a400"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c192a590"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c192a720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f86c1929c00" loc="58:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f86c1929c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c1928020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f86c1925610" loc="61:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c1925610"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f86c1925990"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f86c1925b20"/>
        <function-ref name="getRssi" scoped="" ref="0x7f86c1925cb0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f86c1925e40"/>
        <function-ref name="getPower" scoped="" ref="0x7f86c1924020"/>
        <function-ref name="getLqi" scoped="" ref="0x7f86c19241b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f86c190d130" loc="65:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f86c190d130"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f86c190d4b0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f86c190d640"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f86c190d7d0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f86c190d960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f86c1929020" loc="57:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f86c1929020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c19293a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f86c1923080" loc="62:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f86c1923080"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f86c1923400"/>
        <function-ref name="noAck" scoped="" ref="0x7f86c1923590"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f86c1923720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f86c1904430" loc="66:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f86c1904430"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f86c19047b0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f86c1904940"/>
        <function-ref name="getRetries" scoped="" ref="0x7f86c1904ad0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f86c1904c60"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f86c1904df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f86c19282d0" loc="59:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f86c19282d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f86c1928650"/>
        <function-ref name="source" scoped="" ref="0x7f86c19287e0"/>
        <function-ref name="address" scoped="" ref="0x7f86c1928970"/>
        <function-ref name="destination" scoped="" ref="0x7f86c1928b00"/>
        <function-ref name="setSource" scoped="" ref="0x7f86c1928c90"/>
        <function-ref name="setDestination" scoped="" ref="0x7f86c1928e20"/>
        <function-ref name="type" scoped="" ref="0x7f86c1927020"/>
        <function-ref name="setType" scoped="" ref="0x7f86c19271b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f86c1927340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f86c19274d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f86c1927660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f86c191a170" loc="63:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f86c191a170"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f86c191a4f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f86c18ff020" loc="43:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f86c18ff020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f86c18ff3a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f86c18ff530"/>
        <function-ref name="start" scoped="" ref="0x7f86c18ff6c0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c18ff850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f86c18ec9d0" loc="55:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f86c18ec9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f86c18ecd50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f86c18ebb70" loc="57:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f86c18ebb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f86c18ea020"/>
        <function-ref name="setRetries" scoped="" ref="0x7f86c18ea1b0"/>
        <function-ref name="getRetries" scoped="" ref="0x7f86c18ea340"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f86c18ea4d0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f86c18ea660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f86c18ed020" loc="53:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c18ed020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f86c18ed3a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f86c18ed530"/>
        <function-ref name="getRssi" scoped="" ref="0x7f86c18ed6c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f86c18ed850"/>
        <function-ref name="getPower" scoped="" ref="0x7f86c18ed9e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f86c18edb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f86c18f7a70" loc="50:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f86c18f7a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c18f7df0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c18ef020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c18ef1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c18ef340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c18ef4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f86c18eb080" loc="56:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f86c18eb080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f86c18eb400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f86c18eb590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f86c18eb720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f86c18eb8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f86c18f8690" loc="47:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f86c18f8690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c18f8a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f86c18ec020" loc="54:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f86c18ec020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f86c18ec3a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f86c18ec530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f86c18ec6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c18fe530" loc="45:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c18fe530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c18fe8b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c18fea40"/>
        <function-ref name="request" scoped="" ref="0x7f86c18febd0"/>
        <function-ref name="granted" scoped="" ref="0x7f86c18fed60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c18fd020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f86c18ee940" loc="46:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f86c18ee940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c18eecc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c18eee50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c18f8020"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c18f81b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c18f8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f86c18f8d50" loc="48:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f86c18f8d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c18f7100"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f86c18f7290"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c18f7420"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c18f75b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f86c18f7740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f86c18ef840" loc="51:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f86c18ef840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c18efbc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f86c18e7390" loc="44:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f86c18e7390"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f86c18e7710"/>
        <function-ref name="stopDone" scoped="" ref="0x7f86c18e78a0"/>
        <function-ref name="start" scoped="" ref="0x7f86c18e7a30"/>
        <function-ref name="stop" scoped="" ref="0x7f86c18e7bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f86c18e5330" loc="47:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c18e5330"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f86c18e56b0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f86c18e5840"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f86c18e59d0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f86c18e5b60"/>
        <function-ref name="setCca" scoped="" ref="0x7f86c18e5cf0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f86c18e5e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f86c18e7e80" loc="45:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f86c18e7e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c18e6220"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c18e63b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c18e6540"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c18e66d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c18e6860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f86c18e6b40" loc="46:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f86c18e6b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c18e5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f86c18e4e70" loc="39:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f86c18e4e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f86c18df220"/>
        <function-ref name="stopDone" scoped="" ref="0x7f86c18df3b0"/>
        <function-ref name="start" scoped="" ref="0x7f86c18df540"/>
        <function-ref name="stop" scoped="" ref="0x7f86c18df6d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f86c18de7e0" loc="41:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c18de7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f86c18deb60"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f86c18decf0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f86c18dee80"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f86c18dd030"/>
        <function-ref name="setCca" scoped="" ref="0x7f86c18dd1c0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f86c18dd350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f86c18d1060" loc="47:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f86c18d1060"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f86c18d13e0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f86c18d1570"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f86c18d1700"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f86c18d1890"/>
        <function-ref name="setCca" scoped="" ref="0x7f86c18d1a20"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f86c18d1bb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f86c18c8330" loc="50:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c18c8330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f86c18c86b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f86c18c8840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f86c18c89d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f86c18c8b60"/>
        <function-ref name="getPower" scoped="" ref="0x7f86c18c8cf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f86c18c8e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Transmit" ref="0x7f86c18cb2a0" loc="46:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f86c18cb2a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c18cb620"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c18cb7b0"/>
        <function-ref name="modify" scoped="" ref="0x7f86c18cb940"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c18cbad0"/>
        <function-ref name="resend" scoped="" ref="0x7f86c18cbc60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f86c18df990" loc="40:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f86c18df990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c18dfd10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c18de020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c18de1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c18de340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c18de4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f86c18c7420" loc="48:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f86c18c7420"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f86c18c77a0"/>
        <function-ref name="rand32" scoped="" ref="0x7f86c18c7930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f86c18d2760" loc="45:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f86c18d2760"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f86c18d2ae0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c18d2c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f86c18c0920" loc="51:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c18c0920"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f86c18c0ca0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f86c18c0e30"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f86c18c5020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Power" ref="0x7f86c18d5b50" loc="44:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f86c18d5b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f86c18db020"/>
        <function-ref name="rfOff" scoped="" ref="0x7f86c18db1b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7f86c18db340"/>
        <function-ref name="startVReg" scoped="" ref="0x7f86c18db4d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f86c18db660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f86c18db7f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f86c18db980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f86c18dbb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f86c18c7bf0" loc="49:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f86c18c7bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f86c18c9020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f86c18c91b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f86c18c9340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f86c18c94d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f86c18c9660"/>
        <function-ref name="get" scoped="" ref="0x7f86c18c97f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f86c18c9980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f86c18c8020"/>
        <function-ref name="set" scoped="" ref="0x7f86c18c9b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f86c18c9ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f86c18c9e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f86c18dd640" loc="43:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c18dd640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c18dd9c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c18ddb50"/>
        <function-ref name="request" scoped="" ref="0x7f86c18ddce0"/>
        <function-ref name="granted" scoped="" ref="0x7f86c18dde70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c18dc030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControlState" ref="0x7f86c18c4110" loc="52:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControlState" scoped="" ref="0x7f86c18c4110"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f86c18c4590"/>
        <function-ref name="toIdle" scoped="" ref="0x7f86c18c4720"/>
        <function-ref name="isState" scoped="" ref="0x7f86c18c48b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f86c18c4a40"/>
        <function-ref name="requestState" scoped="" ref="0x7f86c18c4bd0"/>
        <function-ref name="forceState" scoped="" ref="0x7f86c18c4d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendDone_task" ref="0x7f86c18b6b70" loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendDone_task" scoped="" ref="0x7f86c18b6b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c18b5020"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c18b51b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDone_task" ref="0x7f86c18b8ba0" loc="75:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDone_task" scoped="" ref="0x7f86c18b8ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c18b6020"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c18b61b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDone_task" ref="0x7f86c18b9c20" loc="74:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDone_task" scoped="" ref="0x7f86c18b9c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c18b8020"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c18b81b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f86c185fdc0" loc="45:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f86c185fdc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f86c186b180"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f86c186b310"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f86c186b4a0"/>
        <function-ref name="syncDone" scoped="" ref="0x7f86c186b630"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f86c186b7c0"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f86c186b950"/>
        <function-ref name="setChannel" scoped="" ref="0x7f86c186bae0"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f86c186bc70"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f86c186be00"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f86c186a020"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f86c186a1b0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f86c186a340"/>
        <function-ref name="sync" scoped="" ref="0x7f86c186a4d0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f86c186a760"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f86c186a8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f86c185b0c0" loc="47:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f86c185b0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c185bcb0"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c185a170"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f86c186abf0" loc="46:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f86c186abf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f86c185d020"/>
        <function-ref name="rfOff" scoped="" ref="0x7f86c185d1b0"/>
        <function-ref name="rxOn" scoped="" ref="0x7f86c185d340"/>
        <function-ref name="startVReg" scoped="" ref="0x7f86c185d4d0"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f86c185d660"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f86c185d7f0"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f86c185d980"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f86c185db10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c186f950" loc="44:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c186f950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c186fcd0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c186fe60"/>
        <function-ref name="request" scoped="" ref="0x7f86c186c020"/>
        <function-ref name="granted" scoped="" ref="0x7f86c186c1b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c186c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f86c1855970" loc="46:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f86c1855970"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f86c1855cf0"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f86c1855e80"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f86c1854030"/>
        <function-ref name="syncDone" scoped="" ref="0x7f86c18541c0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f86c1854350"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f86c18544e0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f86c1854670"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f86c1854800"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f86c1854990"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f86c1854b20"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f86c1854cb0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f86c1854e40"/>
        <function-ref name="sync" scoped="" ref="0x7f86c1853020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f86c18532b0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f86c1853440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXCTRL1" ref="0x7f86c18331e0" loc="66:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f86c18331e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1833560"/>
        <function-ref name="write" scoped="" ref="0x7f86c18336f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalIeeeEui64" ref="0x7f86c184e020" loc="50:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f86c184e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f86c184e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StartupTimer" ref="0x7f86c184ea10" loc="52:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StartupTimer" scoped="" ref="0x7f86c184ea10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c184a2a0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c184c2a0"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c184cc20"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c184c760"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c184a760"/>
        <function-ref name="start" scoped="" ref="0x7f86c184d890"/>
        <function-ref name="stop" scoped="" ref="0x7f86c184dda0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL0" ref="0x7f86c1837020" loc="64:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f86c1837020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c18373a0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1837530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7f86c1849e70" loc="54:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f86c1849e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1848220"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c18483b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1848540"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c18486d0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1848860"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c18489f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1848b80"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1848d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f86c1851b40" loc="48:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f86c1851b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1850750"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c1850bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="syncDone" ref="0x7f86c1821ca0" loc="126:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="syncDone" scoped="" ref="0x7f86c1821ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c18200a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c1820230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSI" ref="0x7f86c1833a80" loc="67:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f86c1833a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1833e00"/>
        <function-ref name="write" scoped="" ref="0x7f86c1832020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f86c18323c0" loc="68:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f86c18323c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1832740"/>
        <function-ref name="write" scoped="" ref="0x7f86c18328d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG0" ref="0x7f86c1834cd0" loc="62:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f86c1834cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c183c0a0"/>
        <function-ref name="write" scoped="" ref="0x7f86c183c230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f86c183d390" loc="57:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f86c183d390"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f86c183d710"/>
        <function-ref name="changed" scoped="" ref="0x7f86c183d8a0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f86c183da30"/>
        <function-ref name="setAddress" scoped="" ref="0x7f86c183dbc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f86c184ac50" loc="53:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f86c184ac50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1849020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c18491b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1849340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c18494d0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1849660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c18497f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1849980"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1849b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCOFF" ref="0x7f86c1830450" loc="71:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f86c1830450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c18309d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VREN" ref="0x7f86c18470f0" loc="55:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f86c18470f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1847470"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1847600"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1847790"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1847920"/>
        <function-ref name="get" scoped="" ref="0x7f86c1847ab0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1847c40"/>
        <function-ref name="set" scoped="" ref="0x7f86c1847dd0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1846020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c1856510" loc="44:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c1856510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c1856890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f86c18378f0" loc="65:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c18378f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1837c70"/>
        <function-ref name="write" scoped="" ref="0x7f86c1837e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCON" ref="0x7f86c1830d70" loc="72:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f86c1830d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c182f180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f86c182f520" loc="74:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f86c182f520"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c182f8a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c182fa30"/>
        <function-ref name="request" scoped="" ref="0x7f86c182fbc0"/>
        <function-ref name="granted" scoped="" ref="0x7f86c182fd50"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c182d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SyncResource" ref="0x7f86c182c180" loc="76:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SyncResource" scoped="" ref="0x7f86c182c180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c182c500"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c182c690"/>
        <function-ref name="request" scoped="" ref="0x7f86c182c820"/>
        <function-ref name="granted" scoped="" ref="0x7f86c182c9b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c182cb40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f86c1853740" loc="47:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f86c1853740"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f86c1853ac0"/>
        <function-ref name="rfOff" scoped="" ref="0x7f86c1853c50"/>
        <function-ref name="rxOn" scoped="" ref="0x7f86c1853de0"/>
        <function-ref name="startVReg" scoped="" ref="0x7f86c1851020"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f86c18511b0"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f86c1851340"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f86c18514d0"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f86c1851660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG1" ref="0x7f86c183c5d0" loc="63:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f86c183c5d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c183c950"/>
        <function-ref name="write" scoped="" ref="0x7f86c183cae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FSCTRL" ref="0x7f86c1834420" loc="61:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f86c1834420"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c18347a0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1834930"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXON" ref="0x7f86c182e570" loc="69:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f86c182e570"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c182e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f86c182ce00" loc="78:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f86c182ce00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f86c182a1c0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f86c182a350"/>
        <function-ref name="led1On" scoped="" ref="0x7f86c182a4e0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f86c182a670"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f86c182a800"/>
        <function-ref name="get" scoped="" ref="0x7f86c182a990"/>
        <function-ref name="led1Off" scoped="" ref="0x7f86c182ab20"/>
        <function-ref name="led2Off" scoped="" ref="0x7f86c18291b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c182acb0"/>
        <function-ref name="led0On" scoped="" ref="0x7f86c182ae40"/>
        <function-ref name="led2On" scoped="" ref="0x7f86c1829020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sync" ref="0x7f86c1822db0" loc="125:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sync" scoped="" ref="0x7f86c1822db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c1821180"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c1821310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c1856b80" loc="45:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c1856b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c1855020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c18551b0"/>
        <function-ref name="request" scoped="" ref="0x7f86c1855340"/>
        <function-ref name="granted" scoped="" ref="0x7f86c18554d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c1855660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PANID" ref="0x7f86c1838e20" loc="60:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f86c1838e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c18401c0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1840350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IEEEADR" ref="0x7f86c18384a0" loc="59:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f86c18384a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1838920"/>
        <function-ref name="write" scoped="" ref="0x7f86c1838ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptCCA" ref="0x7f86c1841c00" loc="56:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f86c1841c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c1845020"/>
        <function-ref name="disable" scoped="" ref="0x7f86c18451b0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f86c1845340"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f86c18454d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiResource" ref="0x7f86c182d3d0" loc="75:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RssiResource" scoped="" ref="0x7f86c182d3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c182d750"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c182d8e0"/>
        <function-ref name="request" scoped="" ref="0x7f86c182da70"/>
        <function-ref name="granted" scoped="" ref="0x7f86c182dc00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c182dd90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRFOFF" ref="0x7f86c182ec80" loc="70:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f86c182ec80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c18300a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c17aa7e0" loc="45:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c17aa7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c17aab60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f86c17a7220" loc="46:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f86c17a7220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c17a5b30"/>
        <function-ref name="fired" scoped="" ref="0x7f86c17a6a60"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c17a54e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c17a5020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c17a3020"/>
        <function-ref name="start" scoped="" ref="0x7f86c17a6090"/>
        <function-ref name="stop" scoped="" ref="0x7f86c17a65a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c17a1260" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c17a1260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c17a15e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f86c17a1af0" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f86c17a1af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c1767390"/>
        <function-ref name="fired" scoped="" ref="0x7f86c1768360"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c1768ce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c1768820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c1767850"/>
        <function-ref name="start" scoped="" ref="0x7f86c1769970"/>
        <function-ref name="stop" scoped="" ref="0x7f86c1769e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f86c0554020" loc="44:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f86c0554020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c0552870"/>
        <function-ref name="fired" scoped="" ref="0x7f86c0553840"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c0552220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c0553d00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c0552d30"/>
        <function-ref name="start" scoped="" ref="0x7f86c0554e30"/>
        <function-ref name="stop" scoped="" ref="0x7f86c0553380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c0555720" loc="43:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c0555720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c0555aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f86c054c020" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f86c054c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c054a870"/>
        <function-ref name="fired" scoped="" ref="0x7f86c054b840"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c054a220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c054bd00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c054ad30"/>
        <function-ref name="start" scoped="" ref="0x7f86c054ce30"/>
        <function-ref name="stop" scoped="" ref="0x7f86c054b380"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c054e760" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c054e760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c054eae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f86c05348f0" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c05348f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c0534c70"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c0534e00"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c0533020"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c05331b0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c0533340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f86c0538e70" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c0538e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c0536220"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c05363b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c0536540"/>
        <function-ref name="get" scoped="" ref="0x7f86c05366d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c0536860"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c05369f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c0536b80"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c0536d10"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c0535020"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c05351b0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c0535340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f86c05355d0" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c05355d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c0535950"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c0535ae0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c0535c70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c0535e00"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c0534020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c05341b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c0534340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c05344d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c0534660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f86c052a760" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f86c052a760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c052aae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f86c052ac70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f86c052ae00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f86c0529020"/>
        <function-ref name="fired" scoped="" ref="0x7f86c05291b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f86c052ddd0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c052ddd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c052c180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c052c310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c052c4a0"/>
        <function-ref name="get" scoped="" ref="0x7f86c052c630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c052c7c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c052c950"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c052cae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c052cc70"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c052ce00"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c052b020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c052b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f86c0531bd0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f86c0531bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c052d4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c052f4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c052fe60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c052f9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c052d9a0"/>
        <function-ref name="start" scoped="" ref="0x7f86c0530a80"/>
        <function-ref name="stop" scoped="" ref="0x7f86c052f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c0531340" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c0531340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c05316c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f86c052b440" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c052b440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c052b7c0"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c052b950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c052bae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c052bc70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c052be00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c052a020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c052a1b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c052a340"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c052a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f86c178b080" loc="43:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f86c178b080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c178a020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c178a9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c178a4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c178ae60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f86c17820f0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f86c17820f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c1781020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c17819a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c17814e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1781e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f86c1786cd0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f86c1786cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c1785b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1784550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1784090"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1784a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f86c05471d0" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f86c05471d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c0544b30"/>
        <function-ref name="fired" scoped="" ref="0x7f86c05469f0"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c05444e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c0544020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c0543020"/>
        <function-ref name="start" scoped="" ref="0x7f86c0546020"/>
        <function-ref name="stop" scoped="" ref="0x7f86c0546530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f86c0541b90" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f86c0541b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c053d4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c053e4e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c053ee60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c053e9a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c053d9a0"/>
        <function-ref name="start" scoped="" ref="0x7f86c05409d0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c053e020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f86c0543690" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f86c0543690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c05425b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c0541020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c0542a70"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c05414e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFO" ref="0x7f86c1760090" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f86c1760090"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1760410"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c17605a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1760730"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c17608c0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1760a50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1760be0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1760d70"/>
        <function-ref name="clr" scoped="" ref="0x7f86c175f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFOP" ref="0x7f86c175f390" loc="45:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f86c175f390"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c175f710"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c175f8a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c175fa30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c175fbc0"/>
        <function-ref name="get" scoped="" ref="0x7f86c175fd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c175e020"/>
        <function-ref name="set" scoped="" ref="0x7f86c175e1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c175e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7f86c175e6a0" loc="46:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f86c175e6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c175ea20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c175ebb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c175ed40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c175d020"/>
        <function-ref name="get" scoped="" ref="0x7f86c175d1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c175d340"/>
        <function-ref name="set" scoped="" ref="0x7f86c175d4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c175d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CSN" ref="0x7f86c1762e60" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f86c1762e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1761210"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c17613a0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1761530"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c17616c0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1761850"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c17619e0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1761b70"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1761d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VREN" ref="0x7f86c175cce0" loc="48:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f86c175cce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c175b0a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c175b230"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c175b3c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c175b550"/>
        <function-ref name="get" scoped="" ref="0x7f86c175b6e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c175b870"/>
        <function-ref name="set" scoped="" ref="0x7f86c175ba00"/>
        <function-ref name="clr" scoped="" ref="0x7f86c175bb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CCA" ref="0x7f86c17a8b10" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f86c17a8b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1762020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c17621b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1762340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c17624d0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1762660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c17627f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1762980"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1762b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFD" ref="0x7f86c175d9b0" loc="47:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f86c175d9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c175dd30"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c175c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c175c1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c175c340"/>
        <function-ref name="get" scoped="" ref="0x7f86c175c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c175c660"/>
        <function-ref name="set" scoped="" ref="0x7f86c175c7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c175c980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f86c17582f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c17582f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1758670"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1758800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1758990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1756660"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1758cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1758e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1757020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c17571b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1757340"/>
        <function-ref name="get" scoped="" ref="0x7f86c17574d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1757660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c17577f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1757980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1757c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1757da0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1756020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c17561b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1756340"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1758b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c17564d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f86c1759020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1759020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c17593a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1759530"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c17596c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1759850"/>
        <function-ref name="get" scoped="" ref="0x7f86c17599e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1759b70"/>
        <function-ref name="set" scoped="" ref="0x7f86c1759d00"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1758020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f86c17537a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c17537a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1753b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1753cb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1753e40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1751a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c17521b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1752340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c17524d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1752660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c17527f0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1752980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1752b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1752ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1752e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1751120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c17512b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1751440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c17515d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1751760"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1752020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c17518f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f86c1754630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1754630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c17549b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1754b40"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1754cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1754e60"/>
        <function-ref name="get" scoped="" ref="0x7f86c1753020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c17531b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1753340"/>
        <function-ref name="clr" scoped="" ref="0x7f86c17534d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f86c174dc60" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c174dc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c174c020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c174c1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c174c340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c174a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c174c660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c174c7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c174c980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c174cb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c174cca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c174ce30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c174b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c174b1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c174b340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c174b5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c174b760"/>
        <function-ref name="set" scoped="" ref="0x7f86c174b8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c174ba80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c174bc10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c174c4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c174bda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f86c174fb00" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f86c174fb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c174fe80"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c174d030"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c174d1c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c174d350"/>
        <function-ref name="get" scoped="" ref="0x7f86c174d4e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c174d670"/>
        <function-ref name="set" scoped="" ref="0x7f86c174d800"/>
        <function-ref name="clr" scoped="" ref="0x7f86c174d990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f86c17472f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c17472f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1747670"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1747800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1747990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1745660"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1747cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1747e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1746020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c17461b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1746340"/>
        <function-ref name="get" scoped="" ref="0x7f86c17464d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1746660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c17467f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1746980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1746c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1746da0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1745020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c17451b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1745340"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1747b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c17454d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f86c1748020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1748020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c17483a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1748530"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c17486c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1748850"/>
        <function-ref name="get" scoped="" ref="0x7f86c17489e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1748b70"/>
        <function-ref name="set" scoped="" ref="0x7f86c1748d00"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1747020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f86c17427a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c17427a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1742b20"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1742cb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1742e40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1740a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c17411b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1741340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c17414d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1741660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c17417f0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1741980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1741b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1741ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1741e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1740120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c17402b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1740440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c17405d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1740760"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1741020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c17408f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f86c1743630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1743630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c17439b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1743b40"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1743cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1743e60"/>
        <function-ref name="get" scoped="" ref="0x7f86c1742020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c17421b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1742340"/>
        <function-ref name="clr" scoped="" ref="0x7f86c17424d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f86c173dc60" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c173dc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c173c020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c173c1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c173c340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c173a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c173c660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c173c7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c173c980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c173cb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c173cca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c173ce30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c173b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c173b1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c173b340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c173b5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c173b760"/>
        <function-ref name="set" scoped="" ref="0x7f86c173b8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c173ba80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c173bc10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c173c4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c173bda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f86c173eaf0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f86c173eaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c173ee70"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c173d030"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c173d1c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c173d350"/>
        <function-ref name="get" scoped="" ref="0x7f86c173d4e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c173d670"/>
        <function-ref name="set" scoped="" ref="0x7f86c173d800"/>
        <function-ref name="clr" scoped="" ref="0x7f86c173d990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f86c17372f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c17372f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1737670"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1737800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1737990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1734660"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1737cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1737e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1735020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c17351b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1735340"/>
        <function-ref name="get" scoped="" ref="0x7f86c17354d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1735660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c17357f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1735980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1735c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1735da0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1734020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c17341b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1734340"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1737b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c17344d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f86c1738020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f86c1738020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c17383a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1738530"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c17386c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1738850"/>
        <function-ref name="get" scoped="" ref="0x7f86c17389e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1738b70"/>
        <function-ref name="set" scoped="" ref="0x7f86c1738d00"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1737020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureSFD" ref="0x7f86c171a700" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f86c171a700"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f86c171aa80"/>
        <function-ref name="disable" scoped="" ref="0x7f86c171ac10"/>
        <function-ref name="captured" scoped="" ref="0x7f86c171ada0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f86c171d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptCCA" ref="0x7f86c171d400" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f86c171d400"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c171d780"/>
        <function-ref name="disable" scoped="" ref="0x7f86c171d910"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f86c171daa0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f86c171dc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptFIFOP" ref="0x7f86c171c060" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f86c171c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c171c3e0"/>
        <function-ref name="disable" scoped="" ref="0x7f86c171c570"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f86c171c700"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f86c171c890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Capture" ref="0x7f86c16fea80" loc="50:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Capture" scoped="" ref="0x7f86c16fea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f86c16fee00"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f86c16fd020"/>
        <function-ref name="captured" scoped="" ref="0x7f86c16fd1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c16fd340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c16fd4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f86c16fd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f86c1717c20" loc="48:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f86c1717c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f86c16ff020"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16ff1b0"/>
        <function-ref name="captured" scoped="" ref="0x7f86c16ff340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f86c16ff4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f86c16ff760" loc="49:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f86c16ff760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f86c16ffae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f86c16ffc70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c16ffe00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f86c16fe020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f86c16fe1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c16fe340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f86c16fe4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f86c16fe660"/>
        <function-ref name="setControl" scoped="" ref="0x7f86c16fe7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x7f86c16fd930" loc="51:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f86c16fd930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c16fdcb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c16fde40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c16fc020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c16fbc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c16fc340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c16fc4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c16fc660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c16fc7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c16fc980"/>
        <function-ref name="get" scoped="" ref="0x7f86c16fcb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c16fcca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c16fce30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c16fb020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c16fb2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c16fb440"/>
        <function-ref name="set" scoped="" ref="0x7f86c16fb5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c16fb760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c16fb8f0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c16fc1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c16fba80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f86c16eb3f0" loc="46:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f86c16eb3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16eb770"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16eb900"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16eba90"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16ebc20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16ebdb0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16ea020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16ea1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16ea340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f86c16de3f0" loc="58:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f86c16de3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16de770"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16de900"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16dea90"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16dec20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16dedb0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16dd020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16dd1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16dd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f86c16e8d50" loc="49:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f86c16e8d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16e7100"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16e7290"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16e7420"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16e75b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16e7740"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16e78d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16e7a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16e7bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f86c16e53f0" loc="53:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f86c16e53f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16e5770"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16e5900"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16e5a90"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16e5c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16e5db0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16e4020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16e41b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16e4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f86c16f3bc0" loc="44:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f86c16f3bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16ed020"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16ed1b0"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16ed340"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16ed4d0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16ed660"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16ed7f0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16ed980"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16edb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f86c16e1d50" loc="56:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f86c16e1d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16e0210"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16e03a0"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16e0530"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16e06c0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16e0850"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16e09e0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16e0b70"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16e0d00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f86c16ea710" loc="47:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f86c16ea710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16eaa90"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16eac20"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16eadb0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16e9020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16e91b0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16e9340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16e94d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16e9660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f86c16dd710" loc="59:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f86c16dd710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16dda90"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16ddc20"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16dddb0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16dc020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16dc1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16dc340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16dc4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16dc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f86c16ee620" loc="42:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f86c16ee620"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16ee9a0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16eeb30"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16eecc0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16eee50"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16f4020"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16f41b0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16f4340"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16f44d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f86c16e4710" loc="54:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f86c16e4710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16e4a90"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16e4c20"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16e4db0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16e2020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16e21b0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16e2340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16e24d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16e2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f86c16ec020" loc="45:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f86c16ec020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16ec3a0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16ec530"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16ec6c0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16ec850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16ec9e0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16ecb70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16ecd00"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16eb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f86c16df100" loc="57:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f86c16df100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16df480"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16df610"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16df7a0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16df930"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16dfac0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16dfc50"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16dfde0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16de020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f86c16e9a30" loc="48:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f86c16e9a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16e9db0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16e8020"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16e81b0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16e8340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16e84d0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16e8660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16e87f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16e8980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f86c16e6020" loc="52:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f86c16e6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16e63a0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16e6530"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16e66c0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16e6850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16e69e0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16e6b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16e6d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16e5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f86c16f48a0" loc="43:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f86c16f48a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16f4c20"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16f4db0"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16f3020"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16f31b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16f3340"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16f34d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16f3660"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16f37f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f86c16e2a30" loc="55:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f86c16e2a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16e2db0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16e1020"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16e11b0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16e1340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16e14d0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16e1660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16e17f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16e1980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f86c16d43f0" loc="58:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f86c16d43f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16d4770"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16d4900"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16d4a90"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16d4c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16d4db0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16d3020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16d31b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16d3340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f86c16c83f0" loc="70:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f86c16c83f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16c8770"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16c8900"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16c8a90"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16c8c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16c8db0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16c7020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16c71b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16c7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f86c16d1d50" loc="61:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f86c16d1d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16d0100"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16d0290"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16d0420"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16d05b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16d0740"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16d08d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16d0a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16d0bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f86c16ce3f0" loc="65:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f86c16ce3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16ce770"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16ce900"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16cea90"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16cec20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16cedb0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16cd020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16cd1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16cd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f86c16d7d50" loc="56:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f86c16d7d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16d6100"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16d6290"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16d6420"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16d65b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16d6740"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16d68d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16d6a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16d6bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f86c16cbd50" loc="68:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f86c16cbd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16ca210"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16ca3a0"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16ca530"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16ca6c0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16ca850"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16ca9e0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16cab70"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16cad00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f86c16d3710" loc="59:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f86c16d3710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16d3a90"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16d3c20"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16d3db0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16d2020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16d21b0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16d2340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16d24d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16d2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f86c16c7710" loc="71:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f86c16c7710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16c7a90"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16c7c20"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16c7db0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16c6020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16c61b0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16c6340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16c64d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16c6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f86c16db7a0" loc="54:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f86c16db7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16dbb20"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16dbcb0"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16dbe40"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16d8020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16d81b0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16d8340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16d84d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16d8660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f86c16cd710" loc="66:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f86c16cd710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16cda90"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16cdc20"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16cddb0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16cc020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16cc1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16cc340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16cc4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16cc660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f86c16d5020" loc="57:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f86c16d5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16d53a0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16d5530"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16d56c0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16d5850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16d59e0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16d5b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16d5d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16d4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f86c16c9100" loc="69:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f86c16c9100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16c9480"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16c9610"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16c97a0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16c9930"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16c9ac0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16c9c50"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16c9de0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16c8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f86c16d2a30" loc="60:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f86c16d2a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16d2db0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16d1020"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16d11b0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16d1340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16d14d0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16d1660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16d17f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16d1980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f86c16cf020" loc="64:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f86c16cf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16cf3a0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16cf530"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16cf6c0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16cf850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16cf9e0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16cfb70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16cfd00"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16ce020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f86c16d8a30" loc="55:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f86c16d8a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16d8db0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16d7020"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16d71b0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16d7340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16d74d0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16d7660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16d77f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16d7980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f86c16cca30" loc="67:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f86c16cca30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c16ccdb0"/>
        <function-ref name="fired" scoped="" ref="0x7f86c16cb020"/>
        <function-ref name="disable" scoped="" ref="0x7f86c16cb1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f86c16cb340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c16cb4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c16cb660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c16cb7f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c16cb980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f86c15bb2f0" loc="52:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f86c15bb2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c15bb670"/>
        <function-ref name="fired" scoped="" ref="0x7f86c15bb800"/>
        <function-ref name="disable" scoped="" ref="0x7f86c15bb990"/>
        <function-ref name="edge" scoped="" ref="0x7f86c15bbb20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c15bbcb0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c15bbe40"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c15af020"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c15af1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f86c15bc680" loc="51:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f86c15bc680"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c15bca00"/>
        <function-ref name="disable" scoped="" ref="0x7f86c15bcb90"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f86c15bcd20"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f86c15bb020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f86c15ad7a0" loc="52:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f86c15ad7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c15adb20"/>
        <function-ref name="fired" scoped="" ref="0x7f86c15adcb0"/>
        <function-ref name="disable" scoped="" ref="0x7f86c15ade40"/>
        <function-ref name="edge" scoped="" ref="0x7f86c15ab020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f86c15ab1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f86c15ab340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f86c15ab4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f86c15ab660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f86c15aeb70" loc="51:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f86c15aeb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c15ad020"/>
        <function-ref name="disable" scoped="" ref="0x7f86c15ad1b0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f86c15ad340"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f86c15ad4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f86c114ce50" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f86c114ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c114b410"/>
        <function-ref name="write" scoped="" ref="0x7f86c114b5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f86c1155160" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f86c1155160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c11554e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f86c114fe50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f86c114fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c114e210"/>
        <function-ref name="write" scoped="" ref="0x7f86c114e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f86c1149880" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c1149880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1149c00"/>
        <function-ref name="write" scoped="" ref="0x7f86c1149d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f86c11410a0" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f86c11410a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1141420"/>
        <function-ref name="write" scoped="" ref="0x7f86c11415b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f86c11480a0" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f86c11480a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1148420"/>
        <function-ref name="write" scoped="" ref="0x7f86c11485b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f86c1136500" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f86c1136500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1136880"/>
        <function-ref name="write" scoped="" ref="0x7f86c1136a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f86c1138500" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f86c1138500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1138880"/>
        <function-ref name="write" scoped="" ref="0x7f86c1138a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f86c1154490" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f86c1154490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1154810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f86c113e880" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f86c113e880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c113ec00"/>
        <function-ref name="write" scoped="" ref="0x7f86c113ed90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f86c1139500" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f86c1139500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1139880"/>
        <function-ref name="write" scoped="" ref="0x7f86c1139a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f86c114ee50" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f86c114ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c114d210"/>
        <function-ref name="write" scoped="" ref="0x7f86c114d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f86c114de50" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f86c114de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c114c210"/>
        <function-ref name="write" scoped="" ref="0x7f86c114c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f86c1144880" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f86c1144880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1144c00"/>
        <function-ref name="write" scoped="" ref="0x7f86c1144d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f86c11450a0" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f86c11450a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1145420"/>
        <function-ref name="write" scoped="" ref="0x7f86c11455b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f86c1148880" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f86c1148880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1148c00"/>
        <function-ref name="write" scoped="" ref="0x7f86c1148d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f86c1158a90" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c1158a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f86c1158e10"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f86c1157020"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f86c11571b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f86c1153e00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f86c1153e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c11521c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f86c1152490" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f86c1152490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1152910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f86c113dc80" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f86c113dc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c113b0a0"/>
        <function-ref name="write" scoped="" ref="0x7f86c113b230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f86c1152be0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f86c1152be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1151020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f86c1139ce0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f86c1139ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c11380a0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1138230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f86c1153160" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f86c1153160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c11534e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f86c113e0a0" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f86c113e0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c113e420"/>
        <function-ref name="write" scoped="" ref="0x7f86c113e5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f86c114d670" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f86c114d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c114d9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c114db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f86c114e670" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c114e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c114e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c114eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f86c1157ad0" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f86c1157ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1157e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f86c113f0a0" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f86c113f0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c113f420"/>
        <function-ref name="write" scoped="" ref="0x7f86c113f5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f86c1141880" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f86c1141880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1141c00"/>
        <function-ref name="write" scoped="" ref="0x7f86c1141d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f86c113f880" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f86c113f880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c113fc00"/>
        <function-ref name="write" scoped="" ref="0x7f86c113fd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f86c1137ce0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f86c1137ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c11360a0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1136230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f86c1138ce0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f86c1138ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c11370a0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1137230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f86c1145880" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f86c1145880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1145c00"/>
        <function-ref name="write" scoped="" ref="0x7f86c1145d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f86c11400a0" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f86c11400a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1140420"/>
        <function-ref name="write" scoped="" ref="0x7f86c11405b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f86c113ace0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f86c113ace0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c11390a0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1139230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f86c1147880" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f86c1147880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1147c00"/>
        <function-ref name="write" scoped="" ref="0x7f86c1147d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f86c1136ce0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f86c1136ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c11340a0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c1134230"/>
        <function-ref name="write" scoped="" ref="0x7f86c11343c0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c1134550"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c11346e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f86c1157480" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f86c1157480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1157800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f86c114f670" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f86c114f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c114f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c114fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f86c114c670" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f86c114c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c114c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c114cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f86c11420a0" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f86c11420a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1142420"/>
        <function-ref name="write" scoped="" ref="0x7f86c11425b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f86c11470a0" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f86c11470a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1147420"/>
        <function-ref name="write" scoped="" ref="0x7f86c11475b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f86c1142880" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f86c1142880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1142c00"/>
        <function-ref name="write" scoped="" ref="0x7f86c1142d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f86c114b870" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f86c114b870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c114bbf0"/>
        <function-ref name="write" scoped="" ref="0x7f86c114bd80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f86c11557b0" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f86c11557b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1155b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f86c11490a0" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c11490a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1149420"/>
        <function-ref name="write" scoped="" ref="0x7f86c11495b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c1159e20" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c1159e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c11581c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c1158350"/>
        <function-ref name="request" scoped="" ref="0x7f86c11584e0"/>
        <function-ref name="granted" scoped="" ref="0x7f86c1158670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c1158800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f86c11512f0" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f86c11512f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1151670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f86c114f020" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f86c114f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c114f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f86c113a500" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f86c113a500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c113a880"/>
        <function-ref name="write" scoped="" ref="0x7f86c113aa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f86c113bce0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f86c113bce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c113a0a0"/>
        <function-ref name="write" scoped="" ref="0x7f86c113a230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f86c11537b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f86c11537b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1153b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f86c113b500" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f86c113b500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c113b880"/>
        <function-ref name="write" scoped="" ref="0x7f86c113ba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f86c1137500" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f86c1137500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1137880"/>
        <function-ref name="write" scoped="" ref="0x7f86c1137a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f86c11440a0" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f86c11440a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1144420"/>
        <function-ref name="write" scoped="" ref="0x7f86c11445b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f86c1140880" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f86c1140880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1140c00"/>
        <function-ref name="write" scoped="" ref="0x7f86c1140d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f86c1155e00" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f86c1155e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c11541c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f86c1154ae0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f86c1154ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1154e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f86c11460a0" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f86c11460a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1146420"/>
        <function-ref name="write" scoped="" ref="0x7f86c11465b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f86c1151940" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f86c1151940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1151cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f86c1146880" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f86c1146880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1146c00"/>
        <function-ref name="write" scoped="" ref="0x7f86c1146d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f86c113d0a0" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f86c113d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c113d820"/>
        <function-ref name="write" scoped="" ref="0x7f86c113d9b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f86c11349b0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f86c11349b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c1134d30"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c1133020"/>
        <function-ref name="write" scoped="" ref="0x7f86c11331b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c1133340"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c11334d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f86c15682c0" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f86c15682c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c1568640"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c15687d0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1568960"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c1568af0"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c1568c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f86c1569350" loc="40:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c1569350"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f86c15696d0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f86c1569860"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f86c15699f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f86c1567540" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f86c1567540"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c15678c0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1567a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f86c1565370" loc="43:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f86c1565370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c15656f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1565880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c156a4d0" loc="39:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c156a4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c156a850"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c156a9e0"/>
        <function-ref name="request" scoped="" ref="0x7f86c156ab70"/>
        <function-ref name="granted" scoped="" ref="0x7f86c156ad00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c1569020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f86c15641d0" loc="44:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f86c15641d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1564550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiPacket" ref="0x7f86c154e2e0" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f86c154e2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c154e660"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c154e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f86c155f890" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f86c155f890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c155fc10"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c155fda0"/>
        <function-ref name="write" scoped="" ref="0x7f86c155e020"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c155e1b0"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c155e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f86c1561660" loc="44:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c1561660"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f86c15619e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f86c1561b70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f86c1561d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiByte" ref="0x7f86c1557c70" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f86c1557c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f86c1559020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WorkingState" ref="0x7f86c154eb40" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="WorkingState" scoped="" ref="0x7f86c154eb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f86c1558020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f86c15581b0"/>
        <function-ref name="isState" scoped="" ref="0x7f86c1558340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f86c15584d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f86c1558660"/>
        <function-ref name="forceState" scoped="" ref="0x7f86c15587f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f86c155a060" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f86c155a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c155a3e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c155a570"/>
        <function-ref name="request" scoped="" ref="0x7f86c155a700"/>
        <function-ref name="granted" scoped="" ref="0x7f86c155a890"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c155aa20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f86c155eba0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f86c155eba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c155c020"/>
        <function-ref name="write" scoped="" ref="0x7f86c155c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f86c155ca30" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f86c155ca30"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c155cdb0"/>
        <function-ref name="write" scoped="" ref="0x7f86c155b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f86c1558a70" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f86c1558a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f86c1558df0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f86c1556020"/>
        <function-ref name="led1On" scoped="" ref="0x7f86c15561b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f86c1556340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f86c15564d0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1556660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f86c15567f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f86c1556e30"/>
        <function-ref name="set" scoped="" ref="0x7f86c1556980"/>
        <function-ref name="led0On" scoped="" ref="0x7f86c1556b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f86c1556ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c1560510" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c1560510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c1560890"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c1560a20"/>
        <function-ref name="request" scoped="" ref="0x7f86c1560bb0"/>
        <function-ref name="granted" scoped="" ref="0x7f86c1560d40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c155f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grant" ref="0x7f86c154bbd0" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grant" scoped="" ref="0x7f86c154bbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c154a020"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c154a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f86c155b8b0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f86c155b8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c155bc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f86c14f0770" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="CC2420SpiWireC.WorkingStateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f86c14f0770"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f86c14f0af0"/>
        <function-ref name="toIdle" scoped="" ref="0x7f86c14f0c80"/>
        <function-ref name="isState" scoped="" ref="0x7f86c14f0e10"/>
        <function-ref name="isIdle" scoped="" ref="0x7f86c14ec020"/>
        <function-ref name="requestState" scoped="" ref="0x7f86c14ec1b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f86c14ec340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f86c14eb1d0" loc="66:../../../tos/system/StateImplC.nc">
      <component-ref qname="StateImplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f86c14eb1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f86c14eb550"/>
        <function-ref name="toIdle" scoped="" ref="0x7f86c14eb6e0"/>
        <function-ref name="isState" scoped="" ref="0x7f86c14eb870"/>
        <function-ref name="isIdle" scoped="" ref="0x7f86c14eba00"/>
        <function-ref name="requestState" scoped="" ref="0x7f86c14ebb90"/>
        <function-ref name="forceState" scoped="" ref="0x7f86c14ebd20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c14e6020" loc="66:../../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c14e6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c14e63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f86c14e6b70" loc="67:../../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f86c14e6b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f86c14e5020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f86c14e51b0"/>
        <function-ref name="isState" scoped="" ref="0x7f86c14e5340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f86c14e54d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f86c14e5660"/>
        <function-ref name="forceState" scoped="" ref="0x7f86c14e57f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f86c117f020" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f86c117f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c117f3a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c117f530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f86c14cd8f0" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f86c14cd8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f86c14cdc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c14cec40" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c14cec40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c14cd020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c14cd1b0"/>
        <function-ref name="request" scoped="" ref="0x7f86c14cd340"/>
        <function-ref name="granted" scoped="" ref="0x7f86c14cd4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c14cd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f86c04545d0" loc="82:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f86c04545d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f86c0454950"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f86c0454ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f86c0452020" loc="87:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f86c0452020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c04523a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0452530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f86c04527c0" loc="89:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f86c04527c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f86c0452b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f86c0454d70" loc="83:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f86c0454d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f86c0453180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c0455940" loc="81:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c0455940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c0455cc0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c0455e50"/>
        <function-ref name="request" scoped="" ref="0x7f86c0454020"/>
        <function-ref name="granted" scoped="" ref="0x7f86c04541b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c0454340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f86c0453410" loc="85:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f86c0453410"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f86c0453790"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f86c0453920"/>
        <function-ref name="splitRead" scoped="" ref="0x7f86c0453ab0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0453c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f86c14638e0" loc="74:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c14638e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f86c1463c60"/>
        <function-ref name="configure" scoped="" ref="0x7f86c1463df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f86c1466850" loc="77:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f86c1466850"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c1466bd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c1466d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f86c1461a40" loc="80:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f86c1461a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f86c1461dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f86c1467110" loc="75:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f86c1467110"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f86c1467490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f86c1462690" loc="79:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f86c1462690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c1462a10"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c1462ba0"/>
        <function-ref name="request" scoped="" ref="0x7f86c1462d30"/>
        <function-ref name="granted" scoped="" ref="0x7f86c1461020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c14611b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c146cd80" loc="73:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c146cd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c1468180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c1468310"/>
        <function-ref name="request" scoped="" ref="0x7f86c14684a0"/>
        <function-ref name="granted" scoped="" ref="0x7f86c1468630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c14687c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f86c1467790" loc="76:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f86c1467790"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f86c1467b10"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f86c1467ca0"/>
        <function-ref name="splitRead" scoped="" ref="0x7f86c1467e30"/>
        <function-ref name="write" scoped="" ref="0x7f86c1466020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f86c145cb40" loc="81:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f86c145cb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f86c145f020"/>
        <function-ref name="txDone" scoped="" ref="0x7f86c145f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f86c13ecc40" loc="76:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c13ecc40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f86c13eb020"/>
        <function-ref name="configure" scoped="" ref="0x7f86c13eb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f86c13e9700" loc="79:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f86c13e9700"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c13e9aa0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c13e9c30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f86c13e8e00" loc="82:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f86c13e8e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f86c13e71c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f86c13eb440" loc="77:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f86c13eb440"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f86c13eb7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f86c13e7490" loc="83:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f86c13e7490"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f86c13e7810"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f86c13e79a0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f86c13e7b30"/>
        <function-ref name="enableUart" scoped="" ref="0x7f86c13e7cc0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f86c13e7e50"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f86c13e6020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f86c13e61b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f86c13e6340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f86c13e64d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f86c13e6660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f86c13e67f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f86c13e6980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f86c13e6b10"/>
        <function-ref name="getUbr" scoped="" ref="0x7f86c13e6da0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f86c13e5020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f86c13e51b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f86c13e5340"/>
        <function-ref name="isUart" scoped="" ref="0x7f86c13e54d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f86c13e5660"/>
        <function-ref name="isSpi" scoped="" ref="0x7f86c13e57f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f86c13e5980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f86c13e5b10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f86c13e5ca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f86c13e5e30"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c13e4020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f86c13e43b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f86c13e4540"/>
        <function-ref name="setUbr" scoped="" ref="0x7f86c13e46d0"/>
        <function-ref name="tx" scoped="" ref="0x7f86c13e4860"/>
        <function-ref name="getUctl" scoped="" ref="0x7f86c13e49f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f86c13e4b80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f86c13e4d10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f86c13e3020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f86c13e31b0"/>
        <function-ref name="rx" scoped="" ref="0x7f86c13e3340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f86c13e34d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f86c13e3660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f86c13e37f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f86c13e3980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f86c13e3b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f86c13e25a0" loc="85:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f86c13e25a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f86c13e2920"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f86c13e2ab0"/>
        <function-ref name="led1On" scoped="" ref="0x7f86c13e2c40"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f86c13e2dd0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f86c13e1020"/>
        <function-ref name="get" scoped="" ref="0x7f86c13e11b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f86c13e1340"/>
        <function-ref name="led2On" scoped="" ref="0x7f86c13e1980"/>
        <function-ref name="set" scoped="" ref="0x7f86c13e1660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f86c13e14d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f86c13e17f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f86c13e8060" loc="81:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f86c13e8060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c13e8400"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c13e8590"/>
        <function-ref name="request" scoped="" ref="0x7f86c13e8720"/>
        <function-ref name="granted" scoped="" ref="0x7f86c13e88b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c13e8a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c13ede80" loc="75:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c13ede80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c13ec240"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c13ec3d0"/>
        <function-ref name="request" scoped="" ref="0x7f86c13ec560"/>
        <function-ref name="granted" scoped="" ref="0x7f86c13ec6f0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c13ec880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f86c13eba50" loc="78:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f86c13eba50"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f86c13ebdd0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f86c13e9020"/>
        <function-ref name="splitRead" scoped="" ref="0x7f86c13e91b0"/>
        <function-ref name="write" scoped="" ref="0x7f86c13e9340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f86c13e3de0" loc="84:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f86c13e3de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f86c13e2180"/>
        <function-ref name="txDone" scoped="" ref="0x7f86c13e2310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalDone_task" ref="0x7f86c13e1c50" loc="102:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalDone_task" scoped="" ref="0x7f86c13e1c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c13e0020"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c13e01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f86c13d18a0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f86c13d18a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c13d1c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f86c13d43b0" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f86c13d43b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f86c13d4730"/>
        <function-ref name="txDone" scoped="" ref="0x7f86c13d48c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f86c13db8a0" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f86c13db8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f86c13dbc20"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f86c13dbdb0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f86c13d8020"/>
        <function-ref name="enableUart" scoped="" ref="0x7f86c13d81b0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f86c13d8340"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f86c13d84d0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f86c13d8660"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f86c13d87f0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f86c13d8980"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f86c13d8b10"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f86c13d8ca0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f86c13d8e30"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f86c13d7020"/>
        <function-ref name="getUbr" scoped="" ref="0x7f86c13d72b0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f86c13d7440"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f86c13d75d0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f86c13d7760"/>
        <function-ref name="isUart" scoped="" ref="0x7f86c13d78f0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f86c13d7a80"/>
        <function-ref name="isSpi" scoped="" ref="0x7f86c13d7c10"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f86c13d7da0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f86c13d6020"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f86c13d61b0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f86c13d6340"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c13d64d0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f86c13d6860"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f86c13d69f0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f86c13d6b80"/>
        <function-ref name="tx" scoped="" ref="0x7f86c13d6d10"/>
        <function-ref name="getUctl" scoped="" ref="0x7f86c13d5020"/>
        <function-ref name="disableUart" scoped="" ref="0x7f86c13d51b0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f86c13d5340"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f86c13d54d0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f86c13d5660"/>
        <function-ref name="rx" scoped="" ref="0x7f86c13d57f0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f86c13d5980"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f86c13d5b10"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f86c13d5ca0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f86c13d5e30"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f86c13d4020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f86c1396570" loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f86c1396570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c13968f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1396a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1396c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1394980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1395020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c13951b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1395340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c13954d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1395660"/>
        <function-ref name="get" scoped="" ref="0x7f86c13957f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1395980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1395b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1395ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1394020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c13941b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1394340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c13944d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1396da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1394660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c13947f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f86c13ca910" loc="56:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f86c13ca910"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f86c13cac90"/>
        <function-ref name="txDone" scoped="" ref="0x7f86c13cae20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f86c1394d40" loc="63:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f86c1394d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c13930e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1393270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1393400"/>
        <function-ref name="clr" scoped="" ref="0x7f86c13911b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1393720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c13938b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1393a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1393bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1393d60"/>
        <function-ref name="get" scoped="" ref="0x7f86c1392020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c13921b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1392340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c13924d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1392760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c13928f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1392a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1392c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1393590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1392da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1391020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f86c1391570" loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f86c1391570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c13918f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1391a80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1391c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c138f980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1390020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c13901b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1390340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c13904d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1390660"/>
        <function-ref name="get" scoped="" ref="0x7f86c13907f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1390980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1390b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1390ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c138f020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c138f1b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c138f340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c138f4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1391da0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c138f660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c138f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f86c13d2d00" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f86c13d2d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f86c13ce0a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f86c13ce230"/>
        <function-ref name="setUctl" scoped="" ref="0x7f86c13ce3c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f86c13ce550"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f86c13ce6e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f86c13ce870"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f86c13cea00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f86c13ceb90"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f86c13ced20"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f86c13cd020"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f86c13cd1b0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f86c13cd340"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f86c13cd4d0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f86c13cd760"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f86c13cd8f0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f86c13cda80"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f86c13cdc10"/>
        <function-ref name="isUart" scoped="" ref="0x7f86c13cdda0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f86c13cc020"/>
        <function-ref name="isSpi" scoped="" ref="0x7f86c13cc1b0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f86c13cc340"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f86c13cc4d0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f86c13cc660"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f86c13cc7f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c13cc980"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f86c13ccd10"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f86c13cb020"/>
        <function-ref name="setUbr" scoped="" ref="0x7f86c13cb1b0"/>
        <function-ref name="tx" scoped="" ref="0x7f86c13cb340"/>
        <function-ref name="getUctl" scoped="" ref="0x7f86c13cb4d0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f86c13cb660"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f86c13cb7f0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f86c13cb980"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f86c13cbb10"/>
        <function-ref name="rx" scoped="" ref="0x7f86c13cbca0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f86c13cbe30"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f86c13ca020"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f86c13ca1b0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f86c13ca340"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f86c13ca4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7f86c13a05b0" loc="59:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f86c13a05b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f86c13a0930"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f86c13a0ac0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f86c13a0c50"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f86c13a0de0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f86c13c8020"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f86c13c81b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f86c13c8340"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f86c13c84d0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c13c8660"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f86c13c87f0"/>
        <function-ref name="getData" scoped="" ref="0x7f86c13c8980"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f86c13c8b10"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f86c13c8ca0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f86c13c7020"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f86c13c71b0"/>
        <function-ref name="getIV" scoped="" ref="0x7f86c13c7340"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f86c13c74d0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f86c13c7660"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f86c13c77f0"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f86c13c7980"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f86c13c7b10"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f86c13c7ca0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f86c13c7e30"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f86c139f020"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f86c139f1b0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f86c139f540"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f86c139f6d0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f86c139f860"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f86c139f9f0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f86c139fb80"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f86c139fd10"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f86c139e020"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f86c139e1b0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f86c139e340"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f86c139e4d0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f86c139e660"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f86c139e7f0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f86c139e980"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f86c139eb10"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f86c139eca0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f86c139ee30"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f86c139d020"/>
        <function-ref name="setData" scoped="" ref="0x7f86c139d1b0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f86c139d340"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f86c139d4d0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f86c139d660"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f86c139d7f0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f86c139d980"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f86c139db10"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f86c139c420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f86c139c5b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f86c139c740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f86c139c8d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f86c139ca60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f86c139cbf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f86c139cd80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f86c139b020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f86c139b1b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f86c139b340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f86c1399e40" loc="61:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f86c1399e40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c13981e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1398370"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1398500"/>
        <function-ref name="clr" scoped="" ref="0x7f86c13961b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1398820"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c13989b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1398b40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1398cd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1398e60"/>
        <function-ref name="get" scoped="" ref="0x7f86c1397020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c13971b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c1397340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c13974d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1397760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c13978f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1397a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1397c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1398690"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1397da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1396020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f86c13c9290" loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f86c13c9290"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c13c9610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f86c139b700" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f86c139b700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c139ba80"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c139bc10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c139bda0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1399a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c139a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c139a340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c139a4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c139a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c139a7f0"/>
        <function-ref name="get" scoped="" ref="0x7f86c139a980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c139ab10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c139aca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c139ae30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c1399120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c13992b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1399440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c13995d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c139a020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1399760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c13998f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f86c044a020" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f86c044a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f86c044a3a0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f86c044a530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f86c0441440" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f86c0441440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c04417c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f86c043a760" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c043a760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f86c043aae0"/>
        <function-ref name="configure" scoped="" ref="0x7f86c043ac70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f86c0441a50" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f86c0441a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f86c0441dd0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f86c0440020"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f86c04401b0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f86c0440340"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f86c04404d0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f86c0440660"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f86c04407f0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f86c0440980"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c0440b10"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f86c0440ca0"/>
        <function-ref name="getData" scoped="" ref="0x7f86c0440e30"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f86c043f020"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f86c043f1b0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f86c043f440"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f86c043f5d0"/>
        <function-ref name="getIV" scoped="" ref="0x7f86c043f760"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f86c043f8f0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f86c043fa80"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f86c043fc10"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f86c043fda0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f86c043e020"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f86c043e1b0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f86c043e340"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f86c043e4d0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f86c043e660"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f86c043e9f0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f86c043eb80"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f86c043ed10"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f86c043d020"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f86c043d1b0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f86c043d340"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f86c043d4d0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f86c043d660"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f86c043d7f0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f86c043d980"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f86c043db10"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f86c043dca0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f86c043de30"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f86c043c020"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f86c043c1b0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f86c043c340"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f86c043c4d0"/>
        <function-ref name="setData" scoped="" ref="0x7f86c043c660"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f86c043c7f0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f86c043c980"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f86c043cb10"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f86c043cca0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f86c043ce30"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f86c043b020"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f86c043b5b0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f86c043b740"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f86c043b8d0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f86c043ba60"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f86c043bbf0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f86c043bd80"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f86c043a020"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f86c043a1b0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f86c043a340"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f86c043a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f86c0442c10" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f86c0442c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f86c0441020"/>
        <function-ref name="txDone" scoped="" ref="0x7f86c04411b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c044b340" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c044b340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c044b6c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c044b850"/>
        <function-ref name="request" scoped="" ref="0x7f86c044b9e0"/>
        <function-ref name="granted" scoped="" ref="0x7f86c044bb70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c044bd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f86c0449020" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f86c0449020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f86c04493a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f86c0449530"/>
        <function-ref name="setUctl" scoped="" ref="0x7f86c04496c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f86c0449850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f86c04499e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f86c0449b70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f86c0449d00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f86c0447020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f86c04471b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f86c0447340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f86c04474d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f86c0447660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f86c04477f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f86c0447a80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f86c0447c10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f86c0447da0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f86c0446020"/>
        <function-ref name="isUart" scoped="" ref="0x7f86c04461b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f86c0446340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f86c04464d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f86c0446660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f86c04467f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f86c0446980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f86c0446b10"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c0446ca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f86c0443220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f86c04433b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f86c0443540"/>
        <function-ref name="tx" scoped="" ref="0x7f86c04436d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f86c0443860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f86c04439f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f86c0443b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f86c0443d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f86c0442020"/>
        <function-ref name="rx" scoped="" ref="0x7f86c04421b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f86c0442340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f86c04424d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f86c0442660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f86c04427f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f86c0442980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f86c044a7c0" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f86c044a7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f86c044ab40"/>
        <function-ref name="userId" scoped="" ref="0x7f86c044acd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f86c12e98a0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f86c12e98a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f86c12e9c20"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f86c12e9db0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f86c12e6020" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c12e6020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f86c12e63a0"/>
        <function-ref name="configure" scoped="" ref="0x7f86c12e6530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f86c12eea80" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f86c12eea80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f86c12eee00"/>
        <function-ref name="txDone" scoped="" ref="0x7f86c12eb020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c12ea5c0" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c12ea5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c12ea940"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c12eaad0"/>
        <function-ref name="request" scoped="" ref="0x7f86c12eac60"/>
        <function-ref name="granted" scoped="" ref="0x7f86c12eadf0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c12e9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f86c12eb9a0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f86c12eb9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c12ebd20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f86c12e7130" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f86c12e7130"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f86c12e74b0"/>
        <function-ref name="userId" scoped="" ref="0x7f86c12e7640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f86c12d14b0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f86c12d14b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f86c12d1830"/>
        <function-ref name="userId" scoped="" ref="0x7f86c12d19c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f86c12e45c0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f86c12e45c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f86c12e4960"/>
        <function-ref name="txDone" scoped="" ref="0x7f86c12e4af0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f86c12d3e70" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f86c12d3e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c12d1220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f86c12d3020" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f86c12d3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c12d33c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f86c12d3690" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f86c12d3690"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f86c12d3a10"/>
        <function-ref name="txDone" scoped="" ref="0x7f86c12d3ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f86c1252530" loc="59:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f86c1252530"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f86c12528d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f86c1252a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f86c1250270" loc="64:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c1250270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f86c1250610"/>
        <function-ref name="configure" scoped="" ref="0x7f86c12507a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f86c1252cb0" loc="60:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f86c1252cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c12510a0"/>
        <function-ref name="requested" scoped="" ref="0x7f86c1251230"/>
        <function-ref name="granted" scoped="" ref="0x7f86c12513c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c1251550"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f86c12516e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c12536a0" loc="58:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c12536a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c1253a40"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c1253bd0"/>
        <function-ref name="request" scoped="" ref="0x7f86c1253d60"/>
        <function-ref name="granted" scoped="" ref="0x7f86c1252020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c12521b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f86c12509f0" loc="65:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f86c12509f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f86c1250d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f86c1251930" loc="61:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f86c1251930"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f86c1251cb0"/>
        <function-ref name="userId" scoped="" ref="0x7f86c1251e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c03cf020" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c03cf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c03cf3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f86c03cf630" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f86c03cf630"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f86c03cf9b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f86c03cfb40"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f86c03cfcd0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f86c03cfe60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f86c03cb6c0" loc="99:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f86c03cb6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f86c03cba60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f86c03cbbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f86c03c99d0" loc="105:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f86c03c99d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f86c03c9d70"/>
        <function-ref name="configure" scoped="" ref="0x7f86c03c8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f86c03c82b0" loc="106:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f86c03c82b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f86c03c8630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f86c03c87c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f86c03c8950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f86c03c8ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f86c03cbe40" loc="100:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f86c03cbe40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c03ca1e0"/>
        <function-ref name="requested" scoped="" ref="0x7f86c03ca370"/>
        <function-ref name="granted" scoped="" ref="0x7f86c03ca500"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c03ca690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f86c03ca820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f86c03c8d30" loc="107:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f86c03c8d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f86c03c70e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f86c03c7270"/>
        <function-ref name="led1On" scoped="" ref="0x7f86c03c7400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f86c03c7590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f86c03c7720"/>
        <function-ref name="get" scoped="" ref="0x7f86c03c78b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f86c03c7a40"/>
        <function-ref name="led0On" scoped="" ref="0x7f86c03c61b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c03c7d60"/>
        <function-ref name="led2On" scoped="" ref="0x7f86c03c7bd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f86c03c6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c03cc850" loc="98:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c03cc850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c03ccbf0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c03ccd80"/>
        <function-ref name="request" scoped="" ref="0x7f86c03cb020"/>
        <function-ref name="granted" scoped="" ref="0x7f86c03cb1b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c03cb340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f86c03c92d0" loc="104:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f86c03c92d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f86c03c9650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f86c03caa70" loc="101:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f86c03caa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f86c03cadf0"/>
        <function-ref name="userId" scoped="" ref="0x7f86c03c9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f86c03c6480" loc="155:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f86c03c6480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c03c6800"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c03c6990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f86c12488c0" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f86c12488c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f86c1248c40"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f86c1248dd0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f86c1245020"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f86c12451b0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f86c1245340"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f86c12454d0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f86c1245660"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f86c12457f0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1245980"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f86c1245b10"/>
        <function-ref name="getData" scoped="" ref="0x7f86c1245ca0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f86c1245e30"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f86c1244020"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f86c12442b0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f86c1244440"/>
        <function-ref name="getIV" scoped="" ref="0x7f86c12445d0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f86c1244760"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f86c12448f0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f86c1244a80"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f86c1244c10"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f86c1244da0"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f86c1243020"/>
        <function-ref name="isI2C" scoped="" ref="0x7f86c12431b0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f86c1243340"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f86c12434d0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f86c1243860"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f86c12439f0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f86c1243b80"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f86c1243d10"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f86c1242020"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f86c12421b0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f86c1242340"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f86c12424d0"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f86c1242660"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f86c12427f0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f86c1242980"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f86c1242b10"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f86c1242ca0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f86c1242e30"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f86c1241020"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f86c12411b0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f86c1241340"/>
        <function-ref name="setData" scoped="" ref="0x7f86c12414d0"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f86c1241660"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f86c12417f0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f86c1241980"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f86c1241b10"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f86c1241ca0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f86c1241e30"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f86c1240420"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f86c12405b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f86c1240740"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f86c12408d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f86c1240a60"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f86c1240bf0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f86c1240d80"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f86c123f020"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f86c123f1b0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f86c123f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7f86c1235250" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7f86c1235250"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f86c12355d0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f86c1235760"/>
        <function-ref name="setUctl" scoped="" ref="0x7f86c12358f0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f86c1235a80"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f86c1235c10"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f86c1235da0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f86c1234020"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f86c12341b0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f86c1234340"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f86c12344d0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f86c1234660"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f86c12347f0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f86c1234980"/>
        <function-ref name="getUbr" scoped="" ref="0x7f86c1234c10"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f86c1234da0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f86c1233020"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f86c12331b0"/>
        <function-ref name="isUart" scoped="" ref="0x7f86c1233340"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f86c12334d0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f86c1233660"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f86c12337f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f86c1233980"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f86c1233b10"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f86c1233ca0"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1233e30"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f86c1232220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f86c12323b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f86c1232540"/>
        <function-ref name="tx" scoped="" ref="0x7f86c12326d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f86c1232860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f86c12329f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f86c1232b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f86c1232d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f86c1231020"/>
        <function-ref name="rx" scoped="" ref="0x7f86c12311b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f86c1231340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f86c12314d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f86c1231660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f86c12317f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f86c1231980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f86c122e570" loc="52:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f86c122e570"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c122e8f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c122ea80"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c122ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c122c980"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c122d020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c122d1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c122d340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c122d4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c122d660"/>
        <function-ref name="get" scoped="" ref="0x7f86c122d7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c122d980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c122db10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c122dca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c122c020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c122c1b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c122c340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c122c4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c122eda0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c122c660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c122c7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7f86c123c390" loc="48:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f86c123c390"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f86c123c710"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f86c123c8a0"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f86c123ca30"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f86c123cbc0"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f86c123cd50"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f86c123b020"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f86c123b1b0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f86c123b340"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c123b4d0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f86c123b660"/>
        <function-ref name="getData" scoped="" ref="0x7f86c123b7f0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f86c123b980"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f86c123bb10"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f86c123bda0"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f86c123a020"/>
        <function-ref name="getIV" scoped="" ref="0x7f86c123a1b0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f86c123a340"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f86c123a4d0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f86c123a660"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f86c123a7f0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f86c123a980"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f86c123ab10"/>
        <function-ref name="isI2C" scoped="" ref="0x7f86c123aca0"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f86c123ae30"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f86c1239020"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f86c12393b0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f86c1239540"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f86c12396d0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f86c1239860"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f86c12399f0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f86c1239b80"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f86c1239d10"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f86c1238020"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f86c12381b0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f86c1238340"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f86c12384d0"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f86c1238660"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f86c12387f0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f86c1238980"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f86c1238b10"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f86c1238ca0"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f86c1238e30"/>
        <function-ref name="setData" scoped="" ref="0x7f86c1237020"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f86c12371b0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f86c1237340"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f86c12374d0"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f86c1237660"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f86c12377f0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f86c1237980"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f86c1236020"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f86c12361b0"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f86c1236340"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f86c12364d0"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f86c1236660"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f86c12367f0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f86c1236980"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f86c1236b10"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f86c1236ca0"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f86c1236e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f86c1231d40" loc="51:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f86c1231d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c12300e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1230270"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1230400"/>
        <function-ref name="clr" scoped="" ref="0x7f86c122e1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1230720"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c12308b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1230a40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1230bd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1230d60"/>
        <function-ref name="get" scoped="" ref="0x7f86c122f020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c122f1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c122f340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c122f4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c122f760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c122f8f0"/>
        <function-ref name="set" scoped="" ref="0x7f86c122fa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c122fc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1230590"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c122fda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c122e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f86c1119c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f86c1119c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1118210"/>
        <function-ref name="write" scoped="" ref="0x7f86c11183a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f86c1124da0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f86c1124da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1123180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f86c111db50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f86c111db50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c111c020"/>
        <function-ref name="write" scoped="" ref="0x7f86c111c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f86c1117670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c1117670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c11179f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1117b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f86c1110e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f86c1110e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c110f210"/>
        <function-ref name="write" scoped="" ref="0x7f86c110f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f86c1117e50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f86c1117e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1116210"/>
        <function-ref name="write" scoped="" ref="0x7f86c11163a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f86c11032f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f86c11032f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1103670"/>
        <function-ref name="write" scoped="" ref="0x7f86c1103800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f86c11052f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f86c11052f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1105670"/>
        <function-ref name="write" scoped="" ref="0x7f86c1105800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f86c1122120" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f86c1122120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c11224a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f86c110b670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f86c110b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c110b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c110bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f86c11072f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f86c11072f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1107670"/>
        <function-ref name="write" scoped="" ref="0x7f86c1107800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f86c111cc60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f86c111cc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c111a020"/>
        <function-ref name="write" scoped="" ref="0x7f86c111a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f86c111ac60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f86c111ac60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1119020"/>
        <function-ref name="write" scoped="" ref="0x7f86c11191b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f86c1111670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f86c1111670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c11119f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1111b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f86c1113e50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f86c1113e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1112210"/>
        <function-ref name="write" scoped="" ref="0x7f86c11123a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f86c1116670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f86c1116670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c11169f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1116b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f86c1125760" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c1125760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f86c1125ae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f86c1125c70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f86c1125e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f86c1120aa0" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f86c1120aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1120e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f86c111f120" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f86c111f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c111f5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f86c110aa70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f86c110aa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c110adf0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1109020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f86c111f870" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f86c111f870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c111fbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f86c1107ad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f86c1107ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1107e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c1105020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f86c1122dc0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f86c1122dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1120180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f86c110ce50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f86c110ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c110b210"/>
        <function-ref name="write" scoped="" ref="0x7f86c110b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f86c111a480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f86c111a480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c111a800"/>
        <function-ref name="write" scoped="" ref="0x7f86c111a990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f86c111c480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c111c480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c111c800"/>
        <function-ref name="write" scoped="" ref="0x7f86c111c990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f86c1124750" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f86c1124750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1124ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f86c110de50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f86c110de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c110c210"/>
        <function-ref name="write" scoped="" ref="0x7f86c110c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f86c110f670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f86c110f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c110f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c110fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f86c110c670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f86c110c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c110c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c110cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f86c1104ad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f86c1104ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1104e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c1103020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f86c1105ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f86c1105ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1105e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c1104020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f86c1112670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f86c1112670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c11129f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1112b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f86c110fe50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f86c110fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c110d210"/>
        <function-ref name="write" scoped="" ref="0x7f86c110d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f86c1108ad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f86c1108ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1108e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c1107020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f86c1115670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f86c1115670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c11159f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1115b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f86c1103ad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f86c1103ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c1103e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c1102020"/>
        <function-ref name="write" scoped="" ref="0x7f86c11021b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c1102340"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c11024d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f86c1124100" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f86c1124100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1124480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f86c111d370" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f86c111d370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c111d6f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c111d880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f86c1119480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f86c1119480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1119800"/>
        <function-ref name="write" scoped="" ref="0x7f86c1119990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f86c1111e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f86c1111e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1110210"/>
        <function-ref name="write" scoped="" ref="0x7f86c11103a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f86c1116e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f86c1116e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1115210"/>
        <function-ref name="write" scoped="" ref="0x7f86c11153a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f86c1110670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f86c1110670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c11109f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1110b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f86c1118670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f86c1118670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c11189f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1118b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f86c1123450" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f86c1123450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c11237d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f86c1118e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c1118e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1117210"/>
        <function-ref name="write" scoped="" ref="0x7f86c11173a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c1126a80" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c1126a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c1126e00"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c1125020"/>
        <function-ref name="request" scoped="" ref="0x7f86c11251b0"/>
        <function-ref name="granted" scoped="" ref="0x7f86c1125340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c11254d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f86c111e020" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f86c111e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c111e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f86c111ecc0" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f86c111ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c111d0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f86c11082f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f86c11082f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1108670"/>
        <function-ref name="write" scoped="" ref="0x7f86c1108800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f86c1109ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f86c1109ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1109e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c1108020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f86c1120450" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f86c1120450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c11207d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f86c11092f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f86c11092f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1109670"/>
        <function-ref name="write" scoped="" ref="0x7f86c1109800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f86c11042f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f86c11042f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1104670"/>
        <function-ref name="write" scoped="" ref="0x7f86c1104800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f86c1112e50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f86c1112e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1111210"/>
        <function-ref name="write" scoped="" ref="0x7f86c11113a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f86c110d670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f86c110d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c110d9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c110db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f86c1123aa0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f86c1123aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1123e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f86c1122770" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f86c1122770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c1122af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f86c1115e50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f86c1115e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1113210"/>
        <function-ref name="write" scoped="" ref="0x7f86c11133a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f86c111e670" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f86c111e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c111e9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f86c1113670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f86c1113670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c11139f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1113b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f86c110be50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f86c110be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c110a610"/>
        <function-ref name="write" scoped="" ref="0x7f86c110a7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f86c11027a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f86c11027a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c1102b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c1102cb0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1102e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c1101020"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c11011b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f86c10edc60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f86c10edc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10ec210"/>
        <function-ref name="write" scoped="" ref="0x7f86c10ec3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f86c10f8da0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f86c10f8da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f6180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f86c10f0b50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f86c10f0b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10ef020"/>
        <function-ref name="write" scoped="" ref="0x7f86c10ef1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f86c10ea670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c10ea670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10ea9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10eab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f86c10e3e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f86c10e3e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e2210"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e23a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f86c10eae50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f86c10eae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e9210"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e93a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f86c10d62f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f86c10d62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10d6670"/>
        <function-ref name="write" scoped="" ref="0x7f86c10d6800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f86c10d92f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f86c10d92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10d9670"/>
        <function-ref name="write" scoped="" ref="0x7f86c10d9800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f86c10f5120" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f86c10f5120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f54a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f86c10df670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f86c10df670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10df9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10dfb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f86c10da2f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f86c10da2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10da670"/>
        <function-ref name="write" scoped="" ref="0x7f86c10da800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f86c10efc60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f86c10efc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10ee020"/>
        <function-ref name="write" scoped="" ref="0x7f86c10ee1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f86c10eec60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f86c10eec60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10ed020"/>
        <function-ref name="write" scoped="" ref="0x7f86c10ed1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f86c10e4670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f86c10e4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e49f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e4b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f86c10e7e50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f86c10e7e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e6210"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e63a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f86c10e9670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f86c10e9670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e99f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e9b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f86c10f9760" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c10f9760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f86c10f9ae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f86c10f9c70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f86c10f9e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f86c10f4aa0" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f86c10f4aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f4e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f86c10f3120" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f86c10f3120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f35a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f86c10dea70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f86c10dea70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10dedf0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10dc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f86c10f3870" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f86c10f3870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f3bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f86c10daad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f86c10daad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10dae50"/>
        <function-ref name="write" scoped="" ref="0x7f86c10d9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f86c10f5dc0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f86c10f5dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f4180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f86c10e0e50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f86c10e0e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10df210"/>
        <function-ref name="write" scoped="" ref="0x7f86c10df3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f86c10ee480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f86c10ee480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10ee800"/>
        <function-ref name="write" scoped="" ref="0x7f86c10ee990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f86c10ef480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c10ef480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10ef800"/>
        <function-ref name="write" scoped="" ref="0x7f86c10ef990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f86c10f8750" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f86c10f8750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f8ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f86c10e1e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f86c10e1e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e0210"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e03a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f86c10e2670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f86c10e2670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e29f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e2b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f86c10e0670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f86c10e0670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e09f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e0b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f86c10d8ad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f86c10d8ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10d8e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c10d6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f86c10d9ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f86c10d9ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10d9e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c10d8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f86c10e6670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f86c10e6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e69f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e6b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f86c10e2e50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f86c10e2e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e1210"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f86c10dbad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f86c10dbad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10dbe50"/>
        <function-ref name="write" scoped="" ref="0x7f86c10da020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f86c10e8670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f86c10e8670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e89f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e8b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f86c10d6ad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f86c10d6ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c10d6e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c10d5020"/>
        <function-ref name="write" scoped="" ref="0x7f86c10d51b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c10d5340"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c10d54d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f86c10f8100" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f86c10f8100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f8480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f86c10f0370" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f86c10f0370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10f06f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10f0880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f86c10ed480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f86c10ed480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10ed800"/>
        <function-ref name="write" scoped="" ref="0x7f86c10ed990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f86c10e4e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f86c10e4e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e3210"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f86c10e9e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f86c10e9e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e8210"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e83a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f86c10e3670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f86c10e3670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e39f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e3b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f86c10ec670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f86c10ec670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10ec9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10ecb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f86c10f6450" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f86c10f6450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f67d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f86c10ece50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c10ece50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10ea210"/>
        <function-ref name="write" scoped="" ref="0x7f86c10ea3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c10fa9e0" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c10fa9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c10fad60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c10f9020"/>
        <function-ref name="request" scoped="" ref="0x7f86c10f91b0"/>
        <function-ref name="granted" scoped="" ref="0x7f86c10f9340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c10f94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f86c10f1020" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f86c10f1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f13a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f86c10f1cc0" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f86c10f1cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f00a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f86c10db2f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f86c10db2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10db670"/>
        <function-ref name="write" scoped="" ref="0x7f86c10db800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f86c10dcad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f86c10dcad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10dce50"/>
        <function-ref name="write" scoped="" ref="0x7f86c10db020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f86c10f4450" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f86c10f4450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f47d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f86c10dc2f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f86c10dc2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10dc670"/>
        <function-ref name="write" scoped="" ref="0x7f86c10dc800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f86c10d82f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f86c10d82f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10d8670"/>
        <function-ref name="write" scoped="" ref="0x7f86c10d8800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f86c10e6e50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f86c10e6e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e4210"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e43a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f86c10e1670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f86c10e1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e19f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e1b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f86c10f6aa0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f86c10f6aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f6e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f86c10f5770" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f86c10f5770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f5af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f86c10e8e50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f86c10e8e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e7210"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e73a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f86c10f1670" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f86c10f1670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c10f19f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f86c10e7670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f86c10e7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10e79f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10e7b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f86c10dfe50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f86c10dfe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10de610"/>
        <function-ref name="write" scoped="" ref="0x7f86c10de7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f86c10d57a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f86c10d57a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c10d5b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c10d5cb0"/>
        <function-ref name="write" scoped="" ref="0x7f86c10d5e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c10d4020"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c10d41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7f86c10cdb20" loc="54:../../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f86c10cdb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f86c10ca020"/>
        <function-ref name="changed" scoped="" ref="0x7f86c10ca1b0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f86c10ca340"/>
        <function-ref name="setAddress" scoped="" ref="0x7f86c10ca4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f86c10ccd20" loc="13:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <component-ref qname="LocalIeeeEui64C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f86c10ccd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f86c10b60e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f86c10b1310" loc="5:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f86c10b1310"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f86c10b1690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReadId48" ref="0x7f86c10ae880" loc="8:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f86c10ae880"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10aec00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f86c10a3020" loc="8:../../../tos/chips/ds2411/Ds2411C.nc">
      <component-ref qname="Ds2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f86c10a3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10a33a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="OneWire" ref="0x7f86c1099bd0" loc="14:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f86c1099bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c109c020"/>
        <function-ref name="write" scoped="" ref="0x7f86c109c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerControl" ref="0x7f86c109c530" loc="15:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerControl" scoped="" ref="0x7f86c109c530"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f86c109c8b0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c109ca40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f86c109d140" loc="11:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f86c109d140"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c109d4c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f86c10a2c50" loc="8:../../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f86c10a2c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c1089020"/>
        <function-ref name="write" scoped="" ref="0x7f86c10891b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f86c1089540" loc="11:../../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f86c1089540"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c10898c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1089a50"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1089be0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1089d70"/>
        <function-ref name="get" scoped="" ref="0x7f86c1088020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c10881b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c1088340"/>
        <function-ref name="clr" scoped="" ref="0x7f86c10884d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f86c107f950" loc="15:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f86c107f950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20cf640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f86c20cf9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f86c1083780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f86c1085150" loc="11:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f86c1085150"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c10854d0"/>
        <function-ref name="write" scoped="" ref="0x7f86c1085660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f86c10859f0" loc="14:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f86c10859f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1085d70"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1084020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c10841b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1084340"/>
        <function-ref name="get" scoped="" ref="0x7f86c10844d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1084660"/>
        <function-ref name="set" scoped="" ref="0x7f86c10847f0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1084980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f86c1087ca0" loc="41:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f86c1087ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20cf640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f86c20cf9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f86c105fae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f86c105da90" loc="54:../../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f86c105da90"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20cf640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f86c20cf9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f86c105c8d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f86c104c020" loc="55:../../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f86c104c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20cf640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f86c20cf9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c104ce30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c104b800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c104b340"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c104bcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430CounterMicro" ref="0x7f86c1047530" loc="46:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <component-ref qname="Msp430CounterMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f86c1047530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20cf640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f86c20cf9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c10463d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1046d50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c1046890"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1044260"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f86c1040020" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f86c1040020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c10403a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f86c1040530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f86c10406c0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1040850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f86c10409e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1040b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f86c1040d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c103e020"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c103e1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f86c103e340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f86c103e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f86c1043e50" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f86c1043e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20cf640"/>
            <typename><typedef-ref name="TMicro" ref="0x7f86c20cf9b0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c1042ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c1041670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c10411b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c1041b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Gpio" ref="0x7f86c108a590" loc="3:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <component-ref qname="HplDs2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Gpio" scoped="" ref="0x7f86c108a590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c108a910"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c108aaa0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c108ac30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c108adc0"/>
        <function-ref name="get" scoped="" ref="0x7f86c103a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c103a1b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c103a340"/>
        <function-ref name="clr" scoped="" ref="0x7f86c103a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f86c1038c50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f86c1038c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1037020"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c10371b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f86c1037340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f86c1035020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c1037660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c10377f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f86c1037980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f86c1037b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1037ca0"/>
        <function-ref name="get" scoped="" ref="0x7f86c1037e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f86c1036020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f86c10361b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f86c1036340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f86c10365d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f86c1036760"/>
        <function-ref name="set" scoped="" ref="0x7f86c10368f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f86c1036a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f86c1036c10"/>
        <function-ref name="clr" scoped="" ref="0x7f86c10374d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f86c1036da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f86c10399e0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f86c10399e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c1039d60"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c1038020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c10381b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c1038340"/>
        <function-ref name="get" scoped="" ref="0x7f86c10384d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c1038660"/>
        <function-ref name="set" scoped="" ref="0x7f86c10387f0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c1038980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f86c10301b0" loc="14:../../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <component-ref qname="Ds2411PowerControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f86c10301b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f86c1030530"/>
        <function-ref name="stop" scoped="" ref="0x7f86c10306c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f86c1021cb0" loc="46:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c1021cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f86c10200a0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f86c1020230"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f86c10203c0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f86c1020550"/>
        <function-ref name="setCca" scoped="" ref="0x7f86c10206e0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f86c1020870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f86c101d990" loc="47:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f86c101d990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f86c101dd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Transmit" ref="0x7f86c1021020" loc="45:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f86c1021020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c10213a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c1021530"/>
        <function-ref name="modify" scoped="" ref="0x7f86c10216c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c1021850"/>
        <function-ref name="resend" scoped="" ref="0x7f86c10219e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f86c10246c0" loc="44:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f86c10246c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f86c1024a40"/>
        <function-ref name="stop" scoped="" ref="0x7f86c1024bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f86c101f150" loc="48:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f86c101f150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f86c101f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f86c1013970" loc="51:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c1013970"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f86c1013cf0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f86c1013e80"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f86c1012030"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f86c10121c0"/>
        <function-ref name="setCca" scoped="" ref="0x7f86c1012350"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f86c10124e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f86c1004c60" loc="58:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f86c1004c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f86c1007210"/>
        <function-ref name="clear" scoped="" ref="0x7f86c1007940"/>
        <function-ref name="isValid" scoped="" ref="0x7f86c1008ac0"/>
        <function-ref name="set" scoped="" ref="0x7f86c0ffe090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f86c0feb020" loc="78:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c0feb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0feb3a0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0feb530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f86c0feb890" loc="79:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f86c0feb890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0febc10"/>
        <function-ref name="write" scoped="" ref="0x7f86c0febda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f86c1012900" loc="52:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f86c1012900"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f86c1012c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXONCCA" ref="0x7f86c0fee530" loc="72:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f86c0fee530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0fee8b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CaptureSFD" ref="0x7f86c0ffda80" loc="60:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f86c0ffda80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f86c0ffde00"/>
        <function-ref name="disable" scoped="" ref="0x7f86c0ffc020"/>
        <function-ref name="captured" scoped="" ref="0x7f86c0ffc1b0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f86c0ffc340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BackoffTimer" ref="0x7f86c100fae0" loc="55:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BackoffTimer" scoped="" ref="0x7f86c100fae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c100b390"/>
        <function-ref name="fired" scoped="" ref="0x7f86c100d360"/>
        <function-ref name="startAt" scoped="" ref="0x7f86c100dce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c100d820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f86c100b850"/>
        <function-ref name="start" scoped="" ref="0x7f86c100e970"/>
        <function-ref name="stop" scoped="" ref="0x7f86c100ee80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f86c100bd00" loc="56:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c100bd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f86c100a0a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f86c100a230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f86c100a3c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f86c100a550"/>
        <function-ref name="getPower" scoped="" ref="0x7f86c100a6e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f86c100a870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO_RAM" ref="0x7f86c0ff0550" loc="68:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f86c0ff0550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0ff08d0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0ff0a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f86c0ff0e00" loc="69:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f86c0ff0e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0fef1c0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0fef350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Receive" ref="0x7f86c0fe4d40" loc="83:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f86c0fe4d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0fe80e0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f86c0fe8270"/>
        <function-ref name="sfd" scoped="" ref="0x7f86c0fe8400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f86c1014bc0" loc="50:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f86c1014bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c1013020"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c10131b0"/>
        <function-ref name="modify" scoped="" ref="0x7f86c1013340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c10134d0"/>
        <function-ref name="resend" scoped="" ref="0x7f86c1013660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ChipSpiResource" ref="0x7f86c0ff2d10" loc="66:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c0ff2d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f86c0ff10e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f86c0ff1270"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f86c0ff1400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHTX" ref="0x7f86c0feec60" loc="73:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f86c0feec60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0fed020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f86c0ff69b0" loc="62:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f86c0ff69b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c0ff6d30"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c0ff4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c0ff41b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c0ff4340"/>
        <function-ref name="get" scoped="" ref="0x7f86c0ff44d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c0ff4660"/>
        <function-ref name="set" scoped="" ref="0x7f86c0ff47f0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c0ff4980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c1015c60" loc="48:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c1015c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c1014020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f86c100abb0" loc="57:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c100abb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f86c1009020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f86c10091b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f86c1009340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7f86c0ff7e80" loc="59:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f86c0ff7e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c0ffd220"/>
        <function-ref name="isSet" scoped="" ref="0x7f86c0ffd3b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0ffd540"/>
        <function-ref name="set" scoped="" ref="0x7f86c0ffd6d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f86c0fed3e0" loc="74:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c0fed3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0fed960"/>
        <function-ref name="write" scoped="" ref="0x7f86c0fedaf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f86c0ff2020" loc="65:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f86c0ff2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c0ff23a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c0ff2530"/>
        <function-ref name="request" scoped="" ref="0x7f86c0ff26c0"/>
        <function-ref name="granted" scoped="" ref="0x7f86c0ff2850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c0ff29e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CCA" ref="0x7f86c0ffc690" loc="61:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f86c0ffc690"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c0ffcb10"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c0ffcca0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c0ffce30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c0ff6020"/>
        <function-ref name="get" scoped="" ref="0x7f86c0ff61b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c0ff6340"/>
        <function-ref name="set" scoped="" ref="0x7f86c0ff64d0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c0ff6660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f86c0fea130" loc="80:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f86c0fea130"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0fea4b0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0fea640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXNONCE" ref="0x7f86c0fea9c0" loc="81:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f86c0fea9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0fead40"/>
        <function-ref name="write" scoped="" ref="0x7f86c0fe9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f86c0fef6d0" loc="70:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f86c0fef6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0fefa50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFD" ref="0x7f86c0ff4cd0" loc="63:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f86c0ff4cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c0ff30a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c0ff3230"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c0ff33c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c0ff3550"/>
        <function-ref name="get" scoped="" ref="0x7f86c0ff36e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c0ff3870"/>
        <function-ref name="set" scoped="" ref="0x7f86c0ff3a00"/>
        <function-ref name="clr" scoped="" ref="0x7f86c0ff3b90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f86c0fe86c0" loc="84:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f86c0fe86c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f86c0fe8a40"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f86c0fe8bd0"/>
        <function-ref name="led1On" scoped="" ref="0x7f86c0fe8d60"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f86c0fe7020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f86c0fe71b0"/>
        <function-ref name="get" scoped="" ref="0x7f86c0fe7340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f86c0fe74d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f86c0fe7b10"/>
        <function-ref name="set" scoped="" ref="0x7f86c0fe7660"/>
        <function-ref name="led0On" scoped="" ref="0x7f86c0fe77f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f86c0fe7980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f86c0fec5e0" loc="77:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c0fec5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0fec960"/>
        <function-ref name="write" scoped="" ref="0x7f86c0fecaf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f86c1014320" loc="49:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f86c1014320"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f86c10146a0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c1014830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO" ref="0x7f86c0ff1780" loc="67:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f86c0ff1780"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c0ff1b00"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c0ff1c90"/>
        <function-ref name="write" scoped="" ref="0x7f86c0ff1e20"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c0ff0020"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c0ff01b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXON" ref="0x7f86c0fefde0" loc="71:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f86c0fefde0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0fee180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXENC" ref="0x7f86c0fede80" loc="76:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f86c0fede80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0fec220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f86c100f0f0" loc="53:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f86c100f0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f86c100f470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f86c0f4ac60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f86c0f4ac60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f49210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f493a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f86c0f54020" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f86c0f54020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f543a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f86c0f4ec70" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f86c0f4ec70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f4c020"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f4c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f86c0f48670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c0f48670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f489f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f48b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f86c0f41e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f86c0f41e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f3f210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f3f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f86c0f48e50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f86c0f48e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f46210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f463a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f86c0f342f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f86c0f342f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f34670"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f34800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f86c0f362f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f86c0f362f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f36670"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f36800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f86c0f52370" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f86c0f52370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f526f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f86c0f3c670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f86c0f3c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f3c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f3cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f86c0f372f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f86c0f372f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f37670"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f37800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f86c0f4cc60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f86c0f4cc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f4b020"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f4b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f86c0f4bc60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f86c0f4bc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f4a020"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f4a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f86c0f42670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f86c0f42670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f429f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f42b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f86c0f44e50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f86c0f44e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f43210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f433a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f86c0f46670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f86c0f46670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f469f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f46b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f86c0f568f0" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c0f568f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f86c0f56c70"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f86c0f56e00"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f86c0f55020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f86c0f51d00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f86c0f51d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f500a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f86c0f50370" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f86c0f50370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f507f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f86c0f3ba70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f86c0f3ba70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f3bdf0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f3a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f86c0f50ac0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f86c0f50ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f50e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f86c0f37ad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f86c0f37ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f37e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f36020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f86c0f51060" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f86c0f51060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f513e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f86c0f3de50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f86c0f3de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f3c210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f3c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f86c0f4b480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f86c0f4b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f4b800"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f4b990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f86c0f4c480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c0f4c480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f4c800"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f4c990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f86c0f55940" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f86c0f55940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f55cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f86c0f3ee50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f86c0f3ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f3d210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f3d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f86c0f3f670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f86c0f3f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f3f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f3fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f86c0f3d670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f86c0f3d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f3d9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f3db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f86c0f35ad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f86c0f35ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f35e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f34020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f86c0f36ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f86c0f36ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f36e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f35020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f86c0f43670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f86c0f43670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f439f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f43b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f86c0f3fe50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f86c0f3fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f3e210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f3e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f86c0f38ad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f86c0f38ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f38e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f37020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f86c0f45670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f86c0f45670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f459f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f45b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f86c0f34ad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f86c0f34ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c0f34e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c0f33020"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f331b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c0f33340"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c0f334d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f86c0f552f0" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f86c0f552f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f55670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f86c0f4e490" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f86c0f4e490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f4e810"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f4e9a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f86c0f4a480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f86c0f4a480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f4a800"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f4a990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f86c0f42e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f86c0f42e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f41210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f413a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f86c0f46e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f86c0f46e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f45210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f453a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f86c0f41670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f86c0f41670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f419f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f41b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f86c0f49670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f86c0f49670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f499f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f49b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f86c0f54670" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f86c0f54670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f549f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f86c0f49e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c0f49e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f48210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f483a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c0f57c30" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c0f57c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c0f56020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c0f561b0"/>
        <function-ref name="request" scoped="" ref="0x7f86c0f56340"/>
        <function-ref name="granted" scoped="" ref="0x7f86c0f564d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c0f56660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f86c0f4f160" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f86c0f4f160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f4f4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f86c0f4fe00" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f86c0f4fe00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f4e1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f86c0f382f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f86c0f382f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f38670"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f38800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f86c0f3aad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f86c0f3aad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f3ae50"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f38020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f86c0f516b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f86c0f516b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f51a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f86c0f3a2f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f86c0f3a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f3a670"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f3a800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f86c0f352f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f86c0f352f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f35670"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f35800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f86c0f43e50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f86c0f43e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f42210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f423a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f86c0f3e670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f86c0f3e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f3e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f3eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f86c0f54cc0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f86c0f54cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f520a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f86c0f529c0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f86c0f529c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f52d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f86c0f45e50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f86c0f45e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f44210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f443a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f86c0f4f7b0" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f86c0f4f7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f4fb30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f86c0f44670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f86c0f44670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f449f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f44b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f86c0f3ce50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f86c0f3ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f3b610"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f3b7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f86c0f337a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f86c0f337a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c0f33b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c0f33cb0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f33e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c0f32020"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c0f321b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f86c0f26df0" loc="42:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f86c0f26df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0f231c0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f86c0f23350"/>
        <function-ref name="sfd" scoped="" ref="0x7f86c0f234e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f86c0f237c0" loc="43:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f86c0f237c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0f23b40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f86c0f22020" loc="44:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f86c0f22020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f86c0f223a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f86c0f265c0" loc="41:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f86c0f265c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f86c0f26940"/>
        <function-ref name="stop" scoped="" ref="0x7f86c0f26ad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFO" ref="0x7f86c0f1a380" loc="54:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f86c0f1a380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c0f1a700"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c0f1a890"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c0f1aa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c0f1abb0"/>
        <function-ref name="get" scoped="" ref="0x7f86c0f1ad40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c0f19020"/>
        <function-ref name="set" scoped="" ref="0x7f86c0f191b0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c0f19340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f86c0f13b90" loc="64:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f86c0f13b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f86c0f12020"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f86c0f121b0"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f86c0f12340"/>
        <function-ref name="syncDone" scoped="" ref="0x7f86c0f124d0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f86c0f12660"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f86c0f127f0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f86c0f12980"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f86c0f12b10"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f86c0f12ca0"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f86c0f12e30"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f86c0f11020"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f86c0f111b0"/>
        <function-ref name="sync" scoped="" ref="0x7f86c0f11340"/>
        <function-ref name="getChannel" scoped="" ref="0x7f86c0f115d0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f86c0f11760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveDone_task" ref="0x7f86c0efb9d0" loc="148:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveDone_task" scoped="" ref="0x7f86c0efb9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c0efbd50"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c0efa020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f86c0f11d70" loc="65:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f86c0f11d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f86c0f0e330"/>
        <function-ref name="clear" scoped="" ref="0x7f86c0f0ea60"/>
        <function-ref name="isValid" scoped="" ref="0x7f86c0f0fba0"/>
        <function-ref name="set" scoped="" ref="0x7f86c0f0d210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFOP" ref="0x7f86c0f196b0" loc="55:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f86c0f196b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c0f19a30"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c0f19bc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c0f19d50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c0f18020"/>
        <function-ref name="get" scoped="" ref="0x7f86c0f181b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c0f18340"/>
        <function-ref name="set" scoped="" ref="0x7f86c0f184d0"/>
        <function-ref name="clr" scoped="" ref="0x7f86c0f18660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f86c0f0ccb0" loc="69:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c0f0ccb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f0a0a0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f0a230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f86c0f0a590" loc="70:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f86c0f0a590"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f0a910"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f0aaa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXNONCE" ref="0x7f86c0f096d0" loc="72:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f86c0f096d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f09a50"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f09be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f86c0f14330" loc="62:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0f14330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f86c0f146b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f86c0f14840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f86c0f149d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f86c0f14b60"/>
        <function-ref name="getPower" scoped="" ref="0x7f86c0f14cf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f86c0f14e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f86c0f1d550" loc="49:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f86c0f1d550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0f1d8d0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f86c0f1da60"/>
        <function-ref name="sfd" scoped="" ref="0x7f86c0f1dbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SACK" ref="0x7f86c0f153a0" loc="60:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f86c0f153a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f15720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f86c0f1b020" loc="53:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f86c0f1b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f86c0f1b3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f86c0f1b530"/>
        <function-ref name="toggle" scoped="" ref="0x7f86c0f1b6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f86c0f1b850"/>
        <function-ref name="get" scoped="" ref="0x7f86c0f1b9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f86c0f1bb70"/>
        <function-ref name="set" scoped="" ref="0x7f86c0f1bd00"/>
        <function-ref name="clr" scoped="" ref="0x7f86c0f1a020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO_RAM" ref="0x7f86c0f08020" loc="73:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f86c0f08020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f083a0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f08530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c0f1e620" loc="47:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c0f1e620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c0f1e9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f86c0f131e0" loc="63:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0f131e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0f13560"/>
        <function-ref name="getHeader" scoped="" ref="0x7f86c0f136f0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f86c0f13880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f86c0f1c020" loc="50:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f86c0f1c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0f1c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f86c0f176e0" loc="58:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f86c0f176e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c0f17a60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c0f17bf0"/>
        <function-ref name="request" scoped="" ref="0x7f86c0f17d80"/>
        <function-ref name="granted" scoped="" ref="0x7f86c0f16020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c0f161b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f86c0f0ae00" loc="71:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f86c0f0ae00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f091c0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f09350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO" ref="0x7f86c0f16530" loc="59:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f86c0f16530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c0f168b0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c0f16a40"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f16bd0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c0f16d60"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c0f15020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f86c0f088b0" loc="74:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f86c0f088b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f08e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f86c0f1c7c0" loc="51:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f86c0f1c7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f86c0f1cb40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f86c0f07150" loc="76:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f86c0f07150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f86c0f074d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f86c0f07660"/>
        <function-ref name="led1On" scoped="" ref="0x7f86c0f077f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f86c0f07980"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f86c0f07b10"/>
        <function-ref name="get" scoped="" ref="0x7f86c0f07ca0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f86c0f07e30"/>
        <function-ref name="led2Off" scoped="" ref="0x7f86c0f064d0"/>
        <function-ref name="set" scoped="" ref="0x7f86c0f06020"/>
        <function-ref name="led0On" scoped="" ref="0x7f86c0f061b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f86c0f06340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f86c0f0c3e0" loc="68:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c0f0c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0f0c760"/>
        <function-ref name="write" scoped="" ref="0x7f86c0f0c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXDEC" ref="0x7f86c0f0db10" loc="67:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f86c0f0db10"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f0c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptFIFOP" ref="0x7f86c0f18a50" loc="56:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f86c0f18a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f86c0f18dd0"/>
        <function-ref name="disable" scoped="" ref="0x7f86c0f17020"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f86c0f171b0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f86c0f17340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHRX" ref="0x7f86c0f15ad0" loc="61:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f86c0f15ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0f14020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f86c0f1eca0" loc="48:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f86c0f1eca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f86c0f1d0a0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c0f1d230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f86c0e9ba70" loc="44:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f86c0e9ba70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f86c0e9bdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f86c0e9f670" loc="41:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0e9f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f86c0e9f9f0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f86c0e9fb80"/>
        <function-ref name="getRssi" scoped="" ref="0x7f86c0e9fd10"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f86c0e9c020"/>
        <function-ref name="getPower" scoped="" ref="0x7f86c0e9c1b0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f86c0e9c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f86c0e9a550" loc="46:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f86c0e9a550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f86c0e99b00"/>
        <function-ref name="clear" scoped="" ref="0x7f86c0e972a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f86c0e993d0"/>
        <function-ref name="set" scoped="" ref="0x7f86c0e979d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f86c0e9b0c0" loc="43:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0e9b0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0e9b440"/>
        <function-ref name="getHeader" scoped="" ref="0x7f86c0e9b5d0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f86c0e9b760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f86c0e92480" loc="48:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f86c0e92480"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c0e92800"/>
        <function-ref name="isSet" scoped="" ref="0x7f86c0e92990"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0e92b20"/>
        <function-ref name="set" scoped="" ref="0x7f86c0e92cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f86c0e96660" loc="47:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f86c0e96660"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f86c0e95ce0"/>
        <function-ref name="clear" scoped="" ref="0x7f86c0e93460"/>
        <function-ref name="isValid" scoped="" ref="0x7f86c0e955b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c0e93b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f86c0e9c6e0" loc="42:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f86c0e9c6e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f86c0e9ca60"/>
        <function-ref name="noAck" scoped="" ref="0x7f86c0e9cbf0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f86c0e9cd80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f86c0e8b020" loc="49:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f86c0e8b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f86c0e8b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f86c0e91d20" loc="46:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0e91d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f86c0e8e0e0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f86c0e8e270"/>
        <function-ref name="getRssi" scoped="" ref="0x7f86c0e8e400"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f86c0e8e590"/>
        <function-ref name="getPower" scoped="" ref="0x7f86c0e8e720"/>
        <function-ref name="getLqi" scoped="" ref="0x7f86c0e8e8b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f86c0e824a0" loc="56:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f86c0e824a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c0e82820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f86c0e829b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0e82b40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0e82cd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f86c0e82e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f86c0e8ba80" loc="51:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f86c0e8ba80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f86c0e89020"/>
        <function-ref name="clear" scoped="" ref="0x7f86c0e89750"/>
        <function-ref name="isValid" scoped="" ref="0x7f86c0e8a8d0"/>
        <function-ref name="set" scoped="" ref="0x7f86c0e89e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f86c0e8d640" loc="48:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0e8d640"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0e8d9c0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f86c0e8db50"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f86c0e8dce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f86c0e848b0" loc="53:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f86c0e848b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c0e84c30"/>
        <function-ref name="isSet" scoped="" ref="0x7f86c0e84dc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0e82020"/>
        <function-ref name="set" scoped="" ref="0x7f86c0e821b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime32khz" ref="0x7f86c0e813b0" loc="57:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime32khz" scoped="" ref="0x7f86c0e813b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c0e80020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f86c0e806e0" loc="58:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f86c0e806e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c0e7f3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f86c0e88af0" loc="52:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f86c0e88af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f86c0e850d0"/>
        <function-ref name="clear" scoped="" ref="0x7f86c0e85800"/>
        <function-ref name="isValid" scoped="" ref="0x7f86c0e86970"/>
        <function-ref name="set" scoped="" ref="0x7f86c0e84020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f86c0e8ec50" loc="47:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f86c0e8ec50"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f86c0e8d020"/>
        <function-ref name="noAck" scoped="" ref="0x7f86c0e8d1b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f86c0e8d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f86c0e2f020" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f86c0e2f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c0e2fc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f86c0e2e300" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f86c0e2e300"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f86c0e2d150"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f86c0e2dad0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f86c0e2d610"/>
        <function-ref name="overflow" scoped="" ref="0x7f86c0e2c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f86c0e29450" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="CC2420PacketC.DummyTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f86c0e29450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f86c0e26a20"/>
        <function-ref name="fired" scoped="" ref="0x7f86c0e27020"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f86c0e27da0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f86c0e27920"/>
        <function-ref name="getdt" scoped="" ref="0x7f86c0e254a0"/>
        <function-ref name="gett0" scoped="" ref="0x7f86c0e25020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f86c0e274a0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f86c0e28090"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f86c0e26410"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f86c0e28560"/>
        <function-ref name="stop" scoped="" ref="0x7f86c0e28a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f86c0e14c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f86c0e14c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e13210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e133a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f86c0e1e020" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f86c0e1e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e1e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f86c0e18c70" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f86c0e18c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e17020"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e171b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f86c0e12670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f86c0e12670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e129f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e12b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f86c0e0be50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f86c0e0be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e0a210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e0a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f86c0e12e50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f86c0e12e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e11210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e113a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f86c0dfe2f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f86c0dfe2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0dfe670"/>
        <function-ref name="write" scoped="" ref="0x7f86c0dfe800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f86c0e002f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f86c0e002f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e00670"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e00800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f86c0e1d370" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f86c0e1d370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e1d6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f86c0e06670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f86c0e06670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e069f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e06b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f86c0e022f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f86c0e022f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e02670"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e02800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f86c0e17c60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f86c0e17c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e15020"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e151b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f86c0e15c60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f86c0e15c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e14020"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e141b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f86c0e0c670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f86c0e0c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e0c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e0cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f86c0e0ee50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f86c0e0ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e0d210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e0d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f86c0e11670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f86c0e11670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e119f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e11b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f86c0e20970" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f86c0e20970"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f86c0e20cf0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f86c0e20e80"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f86c0e1f030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f86c0e1bd00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f86c0e1bd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e1a0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f86c0e1a370" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f86c0e1a370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e1a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f86c0e05a70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f86c0e05a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e05df0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e04020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f86c0e1aac0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f86c0e1aac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e1ae40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f86c0e02ad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f86c0e02ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e02e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e00020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f86c0e1b060" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f86c0e1b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e1b3e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f86c0e07e50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f86c0e07e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e06210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e063a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f86c0e15480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f86c0e15480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e15800"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e15990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f86c0e17480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f86c0e17480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e17800"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e17990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f86c0e1f950" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f86c0e1f950"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e1fcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f86c0e09e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f86c0e09e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e07210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e073a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f86c0e0a670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f86c0e0a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e0a9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e0ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f86c0e07670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f86c0e07670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e079f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e07b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f86c0dffad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f86c0dffad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0dffe50"/>
        <function-ref name="write" scoped="" ref="0x7f86c0dfe020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f86c0e00ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f86c0e00ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e00e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c0dff020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f86c0e0d670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f86c0e0d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e0d9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e0db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f86c0e0ae50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f86c0e0ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e09210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e093a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f86c0e03ad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f86c0e03ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e03e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e02020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f86c0e10670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f86c0e10670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e109f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e10b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f86c0dfead0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f86c0dfead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c0dfee50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c0dfd020"/>
        <function-ref name="write" scoped="" ref="0x7f86c0dfd1b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c0dfd340"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c0dfd4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f86c0e1f300" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f86c0e1f300"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e1f680"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f86c0e18490" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f86c0e18490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e18810"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e189a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f86c0e14480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f86c0e14480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e14800"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e14990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f86c0e0ce50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f86c0e0ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e0b210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e0b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f86c0e11e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f86c0e11e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e10210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e103a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f86c0e0b670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f86c0e0b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e0b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e0bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f86c0e13670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f86c0e13670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e139f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e13b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f86c0e1e670" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f86c0e1e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e1e9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f86c0e13e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f86c0e13e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e12210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e123a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c0e21d00" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c0e21d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c0e200a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c0e20230"/>
        <function-ref name="request" scoped="" ref="0x7f86c0e203c0"/>
        <function-ref name="granted" scoped="" ref="0x7f86c0e20550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c0e206e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f86c0e19160" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f86c0e19160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e194e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f86c0e19e00" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f86c0e19e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e181c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f86c0e032f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f86c0e032f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e03670"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e03800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f86c0e04ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f86c0e04ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e04e50"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e03020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f86c0e1b6b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f86c0e1b6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e1ba30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f86c0e042f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f86c0e042f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e04670"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e04800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f86c0dff2f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f86c0dff2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0dff670"/>
        <function-ref name="write" scoped="" ref="0x7f86c0dff800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f86c0e0de50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f86c0e0de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e0c210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e0c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f86c0e09670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f86c0e09670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e099f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e09b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f86c0e1ecc0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f86c0e1ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e1d0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f86c0e1d9c0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f86c0e1d9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e1dd40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f86c0e10e50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f86c0e10e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e0e210"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e0e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f86c0e197b0" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f86c0e197b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f86c0e19b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f86c0e0e670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f86c0e0e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e0e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e0eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f86c0e06e50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f86c0e06e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f86c0e05610"/>
        <function-ref name="write" scoped="" ref="0x7f86c0e057a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f86c0dfd7a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f86c0dfd7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f86c0dfdb20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f86c0dfdcb0"/>
        <function-ref name="write" scoped="" ref="0x7f86c0dfde40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f86c0dfc020"/>
        <function-ref name="readDone" scoped="" ref="0x7f86c0dfc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f86c0dd1a20" loc="46:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f86c0dd1a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f86c0dd1da0"/>
        <function-ref name="rand32" scoped="" ref="0x7f86c0dd0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f86c0dcf920" loc="45:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f86c0dcf920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c0dd1560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c0dd5990" loc="44:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c0dd5990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c0dd5d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f86c0dcba20" loc="48:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f86c0dcba20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f86c0dcbda0"/>
        <function-ref name="rand32" scoped="" ref="0x7f86c0dc9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f86c0dcc940" loc="47:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f86c0dcc940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c0dcb560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c0dcc080" loc="46:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c0dcc080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c0dcc400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f86c0dd3aa0" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="CC2420CsmaC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f86c0dd3aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f86c0dd3e20"/>
        <function-ref name="toIdle" scoped="" ref="0x7f86c0dcd020"/>
        <function-ref name="isState" scoped="" ref="0x7f86c0dcd1b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f86c0dcd340"/>
        <function-ref name="requestState" scoped="" ref="0x7f86c0dcd4d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f86c0dcd660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f86c0db3020" loc="44:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f86c0db3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0db33a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0db3530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0db36c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0db3850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0db39e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f86c0db4220" loc="40:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f86c0db4220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0db45a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0db4730"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0db48c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0db4a50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0db4be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f86c0dafe60" loc="45:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f86c0dafe60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0dae210"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0dae3a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0dae530"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0dae6c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0dae850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f86c0db2a10" loc="40:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f86c0db2a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0db2d90"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0daf020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0daf1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0daf340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0daf4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f86c0dad8f0" loc="47:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f86c0dad8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f86c0dadc70"/>
        <function-ref name="rand32" scoped="" ref="0x7f86c0dade00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c0daf750" loc="41:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c0daf750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c0dafad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f86c0dac170" loc="48:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0dac170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0dac4f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f86c0dac680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f86c0dac810"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="State" ref="0x7f86c0daeae0" loc="46:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f86c0daeae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f86c0daee60"/>
        <function-ref name="toIdle" scoped="" ref="0x7f86c0dad020"/>
        <function-ref name="isState" scoped="" ref="0x7f86c0dad1b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f86c0dad340"/>
        <function-ref name="requestState" scoped="" ref="0x7f86c0dad4d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f86c0dad660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f86c0db0690" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="UniqueSendC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f86c0db0690"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f86c0db0a10"/>
        <function-ref name="toIdle" scoped="" ref="0x7f86c0db0ba0"/>
        <function-ref name="isState" scoped="" ref="0x7f86c0db0d30"/>
        <function-ref name="isIdle" scoped="" ref="0x7f86c0d99020"/>
        <function-ref name="requestState" scoped="" ref="0x7f86c0d991b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f86c0d99340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f86c0d92950" loc="47:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f86c0d92950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0d92cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f86c0d95aa0" loc="42:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f86c0d95aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0d95e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f86c0d92200" loc="43:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f86c0d92200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0d92580"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f86c0d8d3f0" loc="49:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f86c0d8d3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0d8d770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c0d8eb70" loc="45:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c0d8eb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c0d8d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f86c0d91e30" loc="43:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f86c0d91e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0d8e1e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f86c0d8da70" loc="50:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0d8da70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0d8ddf0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f86c0d8c020"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f86c0d8c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f86c0d8e570" loc="44:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f86c0d8e570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0d8e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f86c0d5f020" loc="75:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f86c0d5f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0d5f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f86c0d5f6b0" loc="76:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f86c0d5f6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0d5fa30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0d5fbc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0d5fd50"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0d5e020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0d5e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f86c0d638e0" loc="65:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f86c0d638e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0d63c60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0d63df0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0d62020"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0d621b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0d62340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f86c0d62c90" loc="68:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f86c0d62c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0d610a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0d61230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0d613c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0d61550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0d616e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f86c0d625e0" loc="66:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f86c0d625e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0d62960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c0d64be0" loc="64:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c0d64be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c0d63020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c0d631b0"/>
        <function-ref name="request" scoped="" ref="0x7f86c0d63340"/>
        <function-ref name="granted" scoped="" ref="0x7f86c0d634d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c0d63660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f86c0d61a50" loc="69:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f86c0d61a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0d61dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f86c0d60170" loc="71:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f86c0d60170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c0d604f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f86c0d60680"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0d60810"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0d609a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f86c0d60b30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f86c0d55d70" loc="58:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f86c0d55d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0d54180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0d54310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0d544a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0d54630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0d547c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f86c0d54b10" loc="59:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f86c0d54b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0d53020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantTask" ref="0x7f86c0d26db0" loc="184:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantTask" scoped="" ref="0x7f86c0d26db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c0d24180"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c0d24310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f86c0d532f0" loc="60:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0d532f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f86c0d53670"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f86c0d53800"/>
        <function-ref name="getRssi" scoped="" ref="0x7f86c0d53990"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f86c0d53b20"/>
        <function-ref name="getPower" scoped="" ref="0x7f86c0d53cb0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f86c0d53e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f86c0d57a20" loc="51:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f86c0d57a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0d57da0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0d56020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0d561b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0d56340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0d564d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f86c0d52b70" loc="62:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f86c0d52b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f86c0d51020"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f86c0d511b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f86c0d51340"/>
        <function-ref name="dequeue" scoped="" ref="0x7f86c0d514d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f86c0d52170" loc="61:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0d52170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0d524f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f86c0d52680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f86c0d52810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f86c0d57370" loc="49:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f86c0d57370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0d576f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f86c0d597b0" loc="46:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f86c0d597b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c0d59b30"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c0d59cc0"/>
        <function-ref name="request" scoped="" ref="0x7f86c0d59e50"/>
        <function-ref name="granted" scoped="" ref="0x7f86c0d58020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c0d581b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f86c0d584d0" loc="48:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f86c0d584d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0d58850"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0d589e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0d58b70"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0d58d00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0d57020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f86c0d56840" loc="52:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f86c0d56840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0d56bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f86c0d55020" loc="54:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f86c0d55020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c0d553a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f86c0d55530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0d556c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0d55850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f86c0d559e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f86c0d05dd0" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f86c0d05dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f86c0d04180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f86c0d04410" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f86c0d04410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f86c0d04790"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f86c0d04920"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f86c0d04ab0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f86c0d04c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f86c0cf9b80" loc="46:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f86c0cf9b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f86c0cf8020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f86c0cf81b0"/>
        <function-ref name="start" scoped="" ref="0x7f86c0cf8340"/>
        <function-ref name="stop" scoped="" ref="0x7f86c0cf84d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f86c0cf7860" loc="51:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f86c0cf7860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0cf7be0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0cf7d70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0cf6020"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0cf61b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0cf6340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f86c0cf6690" loc="52:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f86c0cf6690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0cf6a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f86c0cfdce0" loc="43:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f86c0cfdce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0cfa0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0cfa230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0cfa3c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0cfa550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0cfa6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f86c0cf9080" loc="45:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f86c0cf9080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f86c0cf9400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f86c0cf9590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f86c0cf9720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f86c0cf98b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendState" ref="0x7f86c0cf8800" loc="47:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendState" scoped="" ref="0x7f86c0cf8800"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f86c0cf8b80"/>
        <function-ref name="toIdle" scoped="" ref="0x7f86c0cf8d10"/>
        <function-ref name="isState" scoped="" ref="0x7f86c0cf7020"/>
        <function-ref name="isIdle" scoped="" ref="0x7f86c0cf71b0"/>
        <function-ref name="requestState" scoped="" ref="0x7f86c0cf7340"/>
        <function-ref name="forceState" scoped="" ref="0x7f86c0cf74d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f86c0cf6d90" loc="53:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f86c0cf6d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f86c0cf5180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f86c0cf5310"/>
        <function-ref name="start" scoped="" ref="0x7f86c0cf54a0"/>
        <function-ref name="stop" scoped="" ref="0x7f86c0cf5630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f86c0cfa980" loc="44:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f86c0cfa980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0cfad00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f86c0cf22d0" loc="41:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <component-ref qname="DummyLplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f86c0cf22d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f86c0cf2650"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f86c0cf27e0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f86c0cf2970"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f86c0cf2b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f86c0cf4580" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="DummyLplC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f86c0cf4580"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f86c0cf4900"/>
        <function-ref name="toIdle" scoped="" ref="0x7f86c0cf4a90"/>
        <function-ref name="isState" scoped="" ref="0x7f86c0cf4c20"/>
        <function-ref name="isIdle" scoped="" ref="0x7f86c0cf4db0"/>
        <function-ref name="requestState" scoped="" ref="0x7f86c0cf3020"/>
        <function-ref name="forceState" scoped="" ref="0x7f86c0cf31b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f86c0ce4d70" loc="45:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f86c0ce4d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0ce3180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0ce3310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0ce34a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0ce3630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0ce37c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f86c0ce7350" loc="40:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f86c0ce7350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0ce76d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0ce7860"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0ce79f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0ce7b80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0ce7d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f86c0ce4020" loc="41:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f86c0ce4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f86c0ce43a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f86c0ce4530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f86c0ce46c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f86c0ce4850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f86c0ce49e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f86c0cdf1c0" loc="44:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f86c0cdf1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f86c0cdf540"/>
        <function-ref name="noAck" scoped="" ref="0x7f86c0cdf6d0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f86c0cdf860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f86c0ce2410" loc="40:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f86c0ce2410"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f86c0ce2790"/>
        <function-ref name="setRetries" scoped="" ref="0x7f86c0ce2920"/>
        <function-ref name="getRetries" scoped="" ref="0x7f86c0ce2ab0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f86c0ce2c40"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f86c0ce2dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f86c0cc0690" loc="59:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f86c0cc0690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0cc0a10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f86c0cc1860" loc="58:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f86c0cc1860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0cc1be0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0cc1d70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0cc0020"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0cc01b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0cc0340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f86c0cbd610" loc="62:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f86c0cbd610"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f86c0cbd990"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f86c0cbdb20"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f86c0cbdcb0"/>
        <function-ref name="syncDone" scoped="" ref="0x7f86c0cbde40"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f86c0cbc020"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f86c0cbc1b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f86c0cbc340"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f86c0cbc4d0"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f86c0cbc660"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f86c0cbc7f0"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f86c0cbc980"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f86c0cbcb10"/>
        <function-ref name="sync" scoped="" ref="0x7f86c0cbcca0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f86c0cbb020"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f86c0cbb1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f86c0cc28b0" loc="54:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f86c0cc28b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f86c0cc2c30"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f86c0cc2dc0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f86c0cc1020"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f86c0cc11b0"/>
        <function-ref name="setCca" scoped="" ref="0x7f86c0cc1340"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f86c0cc14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f86c0cc3ce0" loc="53:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f86c0cc3ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f86c0cc20a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f86c0cba1f0" loc="64:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f86c0cba1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f86c0cba570"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f86c0cba700"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f86c0cba890"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f86c0cbaa20"/>
        <function-ref name="setCca" scoped="" ref="0x7f86c0cbabb0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f86c0cbad40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f86c0cc4a80" loc="52:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f86c0cc4a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c0cc4e00"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f86c0cc3020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0cc31b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0cc3340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f86c0cc34d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f86c0cc8020" loc="48:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f86c0cc8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0cc83a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0cc8530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0cc86c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0cc8850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0cc89e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f86c0cc6df0" loc="50:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f86c0cc6df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0cc51c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f86c0cc0ce0" loc="60:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f86c0cc0ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f86c0cbe0a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f86c0cbe230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f86c0cbe3c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f86c0cbe550"/>
        <function-ref name="getPower" scoped="" ref="0x7f86c0cbe6e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f86c0cbe870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f86c0cbb4d0" loc="63:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f86c0cbb4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f86c0cbb950"/>
        <function-ref name="changed" scoped="" ref="0x7f86c0cbbae0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f86c0cbbc70"/>
        <function-ref name="setAddress" scoped="" ref="0x7f86c0cbbe00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f86c0cbeb70" loc="61:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f86c0cbeb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0cbd020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f86c0cbd1b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f86c0cbd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f86c0cc6210" loc="49:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f86c0cc6210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0cc6590"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f86c0cb9d30" loc="67:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f86c0cb9d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f86c0cb80e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f86c0cb8270"/>
        <function-ref name="led1On" scoped="" ref="0x7f86c0cb8400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f86c0cb8590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f86c0cb8720"/>
        <function-ref name="get" scoped="" ref="0x7f86c0cb88b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f86c0cb8a40"/>
        <function-ref name="led2Off" scoped="" ref="0x7f86c0cb71b0"/>
        <function-ref name="set" scoped="" ref="0x7f86c0cb8bd0"/>
        <function-ref name="led0On" scoped="" ref="0x7f86c0cb8d60"/>
        <function-ref name="led2On" scoped="" ref="0x7f86c0cb7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f86c0cc5470" loc="51:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f86c0cc5470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f86c0cc57f0"/>
        <function-ref name="source" scoped="" ref="0x7f86c0cc5980"/>
        <function-ref name="address" scoped="" ref="0x7f86c0cc5b10"/>
        <function-ref name="destination" scoped="" ref="0x7f86c0cc5ca0"/>
        <function-ref name="setSource" scoped="" ref="0x7f86c0cc5e30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f86c0cc4020"/>
        <function-ref name="type" scoped="" ref="0x7f86c0cc41b0"/>
        <function-ref name="setType" scoped="" ref="0x7f86c0cc4340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f86c0cc44d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f86c0cc4660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f86c0cc47f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioResource" ref="0x7f86c0cb90f0" loc="66:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioResource" scoped="" ref="0x7f86c0cb90f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f86c0cb9470"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f86c0cb9600"/>
        <function-ref name="request" scoped="" ref="0x7f86c0cb9790"/>
        <function-ref name="granted" scoped="" ref="0x7f86c0cb9920"/>
        <function-ref name="isOwner" scoped="" ref="0x7f86c0cb9ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f86c0c34360" loc="61:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f86c0c34360"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f86c0c346e0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f86c0c34870"/>
        <function-ref name="start" scoped="" ref="0x7f86c0c34a00"/>
        <function-ref name="stop" scoped="" ref="0x7f86c0c34b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f86c0c333f0" loc="63:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f86c0c333f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0c33770"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0c33900"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0c33a90"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0c33c20"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0c33db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f86c0c301d0" loc="65:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f86c0c301d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0c30550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f86c0c307e0" loc="67:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f86c0c307e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c0c30b60"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f86c0c30cf0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0c30e80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0c2f030"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f86c0c2f1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f86c0c2da20" loc="70:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f86c0c2da20"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0e30"/>
            <typename><typedef-ref name="T32khz" ref="0x7f86c20cf200"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f86c0c2b020"/>
        <function-ref name="clear" scoped="" ref="0x7f86c0c2b750"/>
        <function-ref name="isValid" scoped="" ref="0x7f86c0c2c890"/>
        <function-ref name="set" scoped="" ref="0x7f86c0c2be80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f86c0c23890" loc="72:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f86c0c23890"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f86c0c23c10"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f86c0c23da0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f86c0c22020"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f86c0c221b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f86c0c315c0" loc="64:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f86c0c315c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0c31940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f86c0c2eb20" loc="69:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f86c0c2eb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f86c0c2d020"/>
        <function-ref name="noAck" scoped="" ref="0x7f86c0c2d1b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f86c0c2d340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f86c0c2f470" loc="68:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f86c0c2f470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f86c0c2f7f0"/>
        <function-ref name="source" scoped="" ref="0x7f86c0c2f980"/>
        <function-ref name="address" scoped="" ref="0x7f86c0c2fb10"/>
        <function-ref name="destination" scoped="" ref="0x7f86c0c2fca0"/>
        <function-ref name="setSource" scoped="" ref="0x7f86c0c2fe30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f86c0c2e020"/>
        <function-ref name="type" scoped="" ref="0x7f86c0c2e1b0"/>
        <function-ref name="setType" scoped="" ref="0x7f86c0c2e340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f86c0c2e4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f86c0c2e660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f86c0c2e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f86c0c27af0" loc="71:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f86c0c27af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f86c20d0680"/>
            <typename><typedef-ref name="TMilli" ref="0x7f86c20d09f0"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f86c0c250d0"/>
        <function-ref name="clear" scoped="" ref="0x7f86c0c25800"/>
        <function-ref name="isValid" scoped="" ref="0x7f86c0c26970"/>
        <function-ref name="set" scoped="" ref="0x7f86c0c23020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f86c0b8e020" loc="49:../../../tos/system/AMSenderC.nc">
      <component-ref qname="SlaveAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f86c0b8e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0b8e3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0b8e530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0b8e6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0b8e850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0b8e9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f86c0b8ec30" loc="50:../../../tos/system/AMSenderC.nc">
      <component-ref qname="SlaveAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f86c0b8ec30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c0b8d020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f86c0b8d1b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0b8d340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0b8d4d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f86c0b8d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f86c0b8d8b0" loc="51:../../../tos/system/AMSenderC.nc">
      <component-ref qname="SlaveAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f86c0b8d8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f86c0b8dc30"/>
        <function-ref name="source" scoped="" ref="0x7f86c0b8ddc0"/>
        <function-ref name="address" scoped="" ref="0x7f86c0b8c020"/>
        <function-ref name="destination" scoped="" ref="0x7f86c0b8c1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f86c0b8c340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f86c0b8c4d0"/>
        <function-ref name="type" scoped="" ref="0x7f86c0b8c660"/>
        <function-ref name="setType" scoped="" ref="0x7f86c0b8c7f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f86c0b8c980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f86c0b8cb10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f86c0b8cca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f86c0b8b020" loc="52:../../../tos/system/AMSenderC.nc">
      <component-ref qname="SlaveAppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f86c0b8b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f86c0b8b3a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f86c0b8b530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f86c0b8b6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f86c0246e60" loc="49:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="SlaveAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f86c0246e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0245210"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c02453a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0245530"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c02456c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0245850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f86c0245aa0" loc="50:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="SlaveAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f86c0245aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c0245e20"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f86c0244020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c02441b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0244340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f86c02444d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f86c0244720" loc="51:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="SlaveAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f86c0244720"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f86c0244aa0"/>
        <function-ref name="source" scoped="" ref="0x7f86c0244c30"/>
        <function-ref name="address" scoped="" ref="0x7f86c0244dc0"/>
        <function-ref name="destination" scoped="" ref="0x7f86c0243020"/>
        <function-ref name="setSource" scoped="" ref="0x7f86c02431b0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f86c0243340"/>
        <function-ref name="type" scoped="" ref="0x7f86c02434d0"/>
        <function-ref name="setType" scoped="" ref="0x7f86c0243660"/>
        <function-ref name="isForMe" scoped="" ref="0x7f86c02437f0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f86c0243980"/>
        <function-ref name="localGroup" scoped="" ref="0x7f86c0243b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f86c0243da0" loc="52:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="SlaveAppC.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f86c0243da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f86c0242180"/>
        <function-ref name="noAck" scoped="" ref="0x7f86c0242310"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f86c02424a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f86c02397f0" loc="44:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="SlaveAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f86c02397f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0239b70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0239d00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0238020"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c02381b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0238340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f86c02385f0" loc="46:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="SlaveAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f86c02385f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0238970"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0238b00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0238c90"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0238e20"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0236020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f86c0236270" loc="47:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="SlaveAppC.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f86c0236270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f86c02365f0"/>
        <function-ref name="source" scoped="" ref="0x7f86c0236780"/>
        <function-ref name="address" scoped="" ref="0x7f86c0236910"/>
        <function-ref name="destination" scoped="" ref="0x7f86c0236aa0"/>
        <function-ref name="setSource" scoped="" ref="0x7f86c0236c30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f86c0236dc0"/>
        <function-ref name="type" scoped="" ref="0x7f86c0235020"/>
        <function-ref name="setType" scoped="" ref="0x7f86c02351b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f86c0235340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f86c02354d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f86c0235660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f86c0bf5930" loc="43:../../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f86c0bf5930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0bf5cb0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0bf5e40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0bf2020"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0bf21b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0bf2340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f86c0ba3400" loc="51:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f86c0ba3400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0ba37a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0ba3930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0ba3ac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0ba3c50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0ba3de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f86c0ba5df0" loc="47:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f86c0ba5df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f86c0ba41c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0ba4350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0ba44e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f86c0ba4670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f86c0ba4800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f86c0ba1720" loc="53:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f86c0ba1720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c0ba1aa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f86c0ba1c30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0ba1dc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0ba0020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f86c0ba01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBusy" ref="0x7f86c0ba4b80" loc="48:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBusy" scoped="" ref="0x7f86c0ba4b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBusy"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="busy" scoped="" ref="0x7f86c0ba3020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f86c0ba0480" loc="184:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7f86c0ba0480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c0ba0800"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c0ba0990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f86c0ba0c60" loc="140:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7f86c0ba0c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f86c0b9f020"/>
        <function-ref name="runTask" scoped="" ref="0x7f86c0b9f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f86c0ba2060" loc="52:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f86c0ba2060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f86c0ba23e0"/>
        <function-ref name="source" scoped="" ref="0x7f86c0ba2570"/>
        <function-ref name="address" scoped="" ref="0x7f86c0ba2700"/>
        <function-ref name="destination" scoped="" ref="0x7f86c0ba2890"/>
        <function-ref name="setSource" scoped="" ref="0x7f86c0ba2a20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f86c0ba2bb0"/>
        <function-ref name="type" scoped="" ref="0x7f86c0ba2d40"/>
        <function-ref name="setType" scoped="" ref="0x7f86c0ba1020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f86c0ba11b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f86c0ba1340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f86c0ba14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f86c0b81020" loc="46:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="SlaveAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f86c0b81020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f86c0b813a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f86c0b81530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f86c0b816c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f86c0b81850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f86c0b819e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f86c0b82910" loc="45:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="SlaveAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f86c0b82910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f86c0b82c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f86c0b81c30" loc="47:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="SlaveAppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f86c0b81c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f86c0b80020"/>
        <function-ref name="source" scoped="" ref="0x7f86c0b801b0"/>
        <function-ref name="address" scoped="" ref="0x7f86c0b80340"/>
        <function-ref name="destination" scoped="" ref="0x7f86c0b804d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f86c0b80660"/>
        <function-ref name="setDestination" scoped="" ref="0x7f86c0b807f0"/>
        <function-ref name="type" scoped="" ref="0x7f86c0b80980"/>
        <function-ref name="setType" scoped="" ref="0x7f86c0b80b10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f86c0b80ca0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f86c0b80e30"/>
        <function-ref name="localGroup" scoped="" ref="0x7f86c0b7f020"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f86c20c6a40" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f86c20c4650" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Platform" loc="51:../../../tos/interfaces/Platform.nc">
      <function command="" provided="0" name="jiffiesRawSize" ref="0x7f86c20bbd50" loc="109:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="node_id" ref="0x7f86c20b7c00" loc="182:../../../tos/interfaces/Platform.nc">
        <documentation loc="164:../../../tos/interfaces/Platform.nc">
          <short>&#10; Platform dependent node id.</short>
          <long>&#10; Platform dependent node id.&#10;&#10; Get a Platform defined node id.  This will typically be a serial number&#10; or mac address.&#10;&#10; Platform define PLATFORM_SERIAL_NUM_SIZE determines the&#10; size.  If not defined defaults to 4 bytes (uint32_t).  But platforms&#10; really should define it to be clear.  (see platform.h)&#10;&#10; input:  *lenp      pointer where to place the length of the number.&#10;&#10; output: *lenp      length filled in if non-null.&#10; return: *uint8_t   pointer to the serial_num or NULL.&#10;&#10; a Node Id is assumed to be a sequence of bytes starting with the&#10; msb first.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lenp" ref="0x7f86c20b7940" loc="182:../../../tos/interfaces/Platform.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRawSize" ref="0x7f86c20bc020" loc="79:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRaw" ref="0x7f86c20bd7b0" loc="78:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesExpired" ref="0x7f86c20bab40" loc="126:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f86c20ba550" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f86c20ba8b0" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIntPriority" ref="0x7f86c20b7020" loc="162:../../../tos/interfaces/Platform.nc">
        <documentation loc="153:../../../tos/interfaces/Platform.nc">
          <short>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.</short>
          <long>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.&#10;   modern computer hardware allows the assignment of different priorities&#10;   to interrupt sources.  This is inherently a platform thing.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="irq_number" ref="0x7f86c20b8cd0" loc="162:../../../tos/interfaces/Platform.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set_unaligned_traps" ref="0x7f86c20b85a0" loc="150:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on_off" ref="0x7f86c20b8320" loc="150:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesRaw" ref="0x7f86c20bb5b0" loc="108:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="localTime" ref="0x7f86c20bd020" loc="64:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsExpired" ref="0x7f86c20bcdc0" loc="95:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f86c20bc7d0" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f86c20bcb30" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f86c2079b40" loc="48:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f86c207cde0" loc="43:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f86c2079420" loc="47:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f86c207c700" loc="42:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f86c207b5a0" loc="45:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f86c207f8f0" loc="40:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f86c207c020" loc="41:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f86c207bcc0" loc="46:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f86c21e97e0" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f86c24b1700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f86c210fa80" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f86c210d1f0" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f86c210f2b0" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f86c2287020" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f86c2c27e80" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f86c256fe20" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f86c256f610" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f86c2563770" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event.&#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f86c2561020" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f86c2015020" loc="61:../../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f86c20157d0" loc="67:../../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f86c2014020" loc="72:../../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f86c2013020" loc="83:../../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f86c20117d0" loc="100:../../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f86c2010020" loc="117:../../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f86c20147b0" loc="77:../../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f86c2010b90" loc="134:../../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f86c2010910" loc="134:../../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f86c2016850" loc="56:../../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f86c2013800" loc="89:../../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f86c2011020" loc="94:../../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f86c20068a0" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f86c2005020" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f86c2008a40" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f86c2005e80" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f86c2006190" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f86c2005740" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f86c200bc40" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f86c2008350" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f86c1fdb880" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f86c1fda020" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f86c1fd6b10" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f86c1fd6890" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullUp" ref="0x7f86c1fd45d0" loc="126:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f86c1fdd120" loc="59:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f86c1fd9020" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f86c1fd4d60" loc="134:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="129:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDriveStrength" ref="0x7f86c1fd2860" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="136:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short> &#10; Set port drive strength.</short>
          <long> &#10; Set port drive strength.&#10; @param mode: MSP430_PORT_DRIVE_STRENGTH_*&#10; @return EINVAL if invalid mode or pin doesn't support drive&#10;     strength config.&#10; FAIL if pin is not an output&#10; SUCCESS if pin supports it, is an output, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f86c1fd25e0" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f86c1fda760" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f86c1fdb0e0" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getDriveStrength" ref="0x7f86c1fd1190" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get drive strength.</short>
          <long>&#10; Get drive strength.&#10; @return MSP430_PORT_DRIVE_STRENGTH_*&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f86c1fd7770" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullDown" ref="0x7f86c1fd5e30" loc="125:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f86c1fdd8c0" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorOff" ref="0x7f86c1fd53e0" loc="124:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; set resistor mode directly.</short>
          <long>&#10; set resistor mode directly.&#10;&#10; You have to know what you are doing when you use these.  These routines&#10; assume that the port is set for input (PxDIR).  The routines explicitly&#10; change the value of the bits setting in PxOUT.&#10;&#10; The advantage of using these routines is efficiency because there is no&#10; mode checking.  In addition, no error check is done to make sure that the&#10; port is in input mode.  The thing is, first, this is something that you&#10; get right once and then it doesn't change so why check and, second no&#10; one actually checks the error return because there really isn't any&#10; point to doing the check because this isn't something you actually need&#10; to check the return code for.  So why have one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f86c1fde270" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f86c1fd97a0" loc="91:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f86c1fd6020" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f86c1fd7020" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f86c1fde9a0" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f86c1ca8110" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f86c1cace40" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f86c1ca7600" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f86c1ca7380" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f86c1cac460" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f86c1ca8960" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <function command="" provided="0" name="clear" ref="0x7f86c1cd23f0" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1cd2170" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f86c1cd0490" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1cd0210" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f86c1cce7b0" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1cce1b0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f86c1cce4e0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f86c1ccc8a0" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f86c1ccf930" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1ccf370" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f86c1ccf6a0" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f86c1cb62c0" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f86c1ccb930" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f86c1ccbcb0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f86c1cb6020" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f86c1cb2970" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1cb2370" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f86c1cb26a0" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f86c1cb1a60" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f86c1cb5630" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1cb53b0" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f86c1cb4b80" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1cb45a0" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f86c1cb48f0" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Packet" loc="40:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <function command="" provided="0" name="setPower" ref="0x7f86c1ca32b0" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="49:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Set transmission power for a given packet.</short>
          <long>&#10; Set transmission power for a given packet. Valid ranges are&#10; between 0 and 31.&#10;&#10; @param p_msg the message.&#10; @param power transmission power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f86c1ca5b50" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="power" ref="0x7f86c1ca3020" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setNetwork" ref="0x7f86c1ca0980" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f86c1ca0380" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="networkId" ref="0x7f86c1ca06f0" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRssi" ref="0x7f86c1ca3d90" loc="64:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="58:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get rssi value for a given packet.</short>
          <long>&#10; Get rssi value for a given packet. For received packets, it is&#10; the received signal strength when receiving that packet. For sent&#10; packets, it is the received signal strength of the ack if an ack&#10; was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="signed char" size="I:1" alignment="I:1">
            <typename><typedef-ref name="int8_t" ref="0x7f86c2c1b110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f86c1ca3b10" loc="64:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNetwork" ref="0x7f86c1ca1880" loc="75:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f86c1ca1600" loc="75:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPower" ref="0x7f86c1ca5350" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="42:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get transmission power setting for current packet.</short>
          <long>&#10; Get transmission power setting for current packet.&#10;&#10; @param the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f86c1ca50d0" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLqi" ref="0x7f86c1ca2990" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="66:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get lqi value for a given packet.</short>
          <long>&#10; Get lqi value for a given packet. For received packets, it is the&#10; link quality indicator value when receiving that packet. For sent&#10; packets, it is the link quality indicator value of the ack if an&#10; ack was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f86c1ca2710" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f86c1cad9c0" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
              <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1cad060" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f86c1cad3b0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f86c1cad6e0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f86c1d35350" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f86c1d35350"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f86c1d2d1f0" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f86c1d32a60" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f86c1d30820" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f86c1d30250" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f86c1d30590" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f86c1d31a60" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f86c1d2c270" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f86c1d2d980" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f86c1d31270" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f86c1d34020" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f86c1d35c40" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f86c1d2f820" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f86c1d2f250" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f86c1d2f590" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f86c1d34ae0" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f86c1d34860" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f86c1d32350" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f86c1cbc2a0" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f86c1ce3180"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f86c1cbc020" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f86c1cc6d60" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f86c1cc6ae0" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f86c1cc91f0" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f86c1cc9cb0" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f86c1cc9a30" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f86c1cc37a0" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f86c1cc31c0" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f86c1cc3510" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f86c1cc42b0" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f86c1cc7c40" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f86c1cc4020" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f86c1cc0bf0" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f86c1cc0970" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f86c1cc2020" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f86c1cbe9a0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f86c1cbecc0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f86c1ce5d50"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f86c1cc19f0" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f86c1cc1770" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f86c1cbb730" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f86c1ce3180"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f86c1cbb150" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f86c1cbb4a0" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f86c1ce3180"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f86c1cba580" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f86c1ce3180"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f86c1c556d0" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f86c1c556d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f86c1c52020" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f86c1c4d070" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f86c1c4d070"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f86c1c4d2b0" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1c4d2b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f86c1c49e00" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1c4d2b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f86c1c4be40" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f86c1c49460" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1c4d2b0"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1c4d2b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f86c1c4ae60" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1c4d2b0"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f86c1c491d0" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1c4d2b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f86c1c4a640" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f86c1c48620" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1c4d2b0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f86c1c4de10" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1c4d2b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f86c1c4db90" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1c4d2b0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f86c1c4b680" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f86c1c27270" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f86c1c27bf0" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f86c1c27970" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f86c1c25610" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f86c1c25390" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f86c1c24020" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f86c1c25d60" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f86c1c24710" loc="46:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f86c1c35ad0" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f86c1c32400" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f86c1c32180" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f86c1c34270" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f86c1c3ad30" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f86c1c349b0" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f86c1c37c50" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f86c1c353e0" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f86c1c37510" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f86c1c36390" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f86c1c36ca0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f86c1c36a20" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f86c1c32e10" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f86c1c32b90" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f86c1c2b8f0" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10;&#10; It has a predefined idea of what mode that capture should occur in.&#10; If that doesn't work for you, use setControl.&#10;&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; @param ccis configures which input channel to use.&#10;&#10; Msp430Timer.h has convenience definitions:&#10;&#10;     MSP430TIMER_CM_NONE,            MSP430TIMER_CCI_A&#10;     MSP430TIMER_CM_RISING,          MSP430TIMER_CCI_B&#10;     MSP430TIMER_CM_FALLING,         MSP430TIMER_CCI_GND&#10;     MSP430TIMER_CM_BOTH             MSP430TIMER_CCI_VCC&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f86c1c2b320" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
          <variable name="ccis" ref="0x7f86c1c2b660" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f86c1c2f7d0" loc="41:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f86c2070550"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f86c206e020"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f86c1c2a2b0" loc="76:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f86c1c291f0" loc="78:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f86c1c2ca30" loc="56:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short>&#10; Sets the time in compare mode.</short>
          <long>&#10; Sets the time in compare mode.&#10;&#10; setControlAsCompare has a predefined, hardcoded idea of&#10; how the control register should be set for doing a compare.&#10;&#10; Your mileage may vary and this may not work for you.   In&#10; which case you set use setControl.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f86c1c2a9f0" loc="77:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f86c1c2e020" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f86c1c2e7b0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f86c1c2c2a0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f86c2070550"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f86c206e020"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f86c1c2c020" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f86c2070550"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f86c206e020"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f86c1c15d60" loc="45:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="42:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f86c1c10400" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="76:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f86c1c10180" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f86c1c0e020" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="87:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f86c1c10d10" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f86c1c119a0" loc="74:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="71:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f86c1c110e0" loc="69:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="59:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f86c1c12740" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f86c1c124c0" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f86c1be51f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f86c1a95e10" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f86c1a95e10"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f86c1a90070" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1a90070"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f86c1a90990" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return counter value.</short>
          <long>&#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1a90070"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f86c1a8fad0" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f86c1a8f270" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f86c1a8e270" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSkew" loc="51:../../../tos/lib/timer/TimeSkew.nc">
      <documentation loc="35:../../../tos/lib/timer/TimeSkew.nc">
        <short>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.</short>
        <long>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.  Under various circumstances&#10; adjustments may be made by this underlying timing that can result&#10; in time skew.&#10;&#10; Typically this can occur when the RTC (Real Time Clock) subsystem&#10; has had its time adjusted for example via a GPS providing synchronized&#10; time.  If this skew is below a reasonable threshold (platform dependent)&#10; TimeSkew.skew(skew_val) will be signalled.  Beyond that threshold&#10; it might be better to reboot and reestablish reasonable time via&#10; those mechanisms.&#10;&#10; @author Eric B.Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function event="" provided="0" name="skew" ref="0x7f86c19cce80" loc="62:../../../tos/lib/timer/TimeSkew.nc">
        <documentation loc="52:../../../tos/lib/timer/TimeSkew.nc">
          <short>&#10; Signaled when the underlying timing system has detected timing&#10; skew.</short>
          <long>&#10; Signaled when the underlying timing system has detected timing&#10; skew.&#10;&#10; @param skew    estimated skew computed.  in millisecs (units platform&#10;                dependent, typically binary millisecs).&#10;                > 0, time has been moved into the future (we were slow).&#10;                &#60; 0, time has been shifted backwards, (we were fast).&#10;                = 0, skew is beyond platform limits.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSkew"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f86c2c1b930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skew" ref="0x7f86c19ccc00" loc="62:../../../tos/lib/timer/TimeSkew.nc">
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f86c2c1b930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioBackoff" loc="54:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <short>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.</short>
        <long>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.  &#10; &#10; This is because of fan-out issues with multiple components wanting to&#10; affect backoffs for whatever they're interested in:&#10; If you signal out an *event* to request an initial backoff and&#10; several components happen to be listening, then those components&#10; would be required to return a backoff value.  We don't want that&#10; behavior.&#10; With this strategy, components can listen for the requests and then&#10; decide if they want to affect the behavior.  If the component wants to&#10; affect the behavior, it calls back using the setXYZBackoff(..) command.&#10; If several components call back, then the last component to get its &#10; word in has the final say. &#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="requestCca" ref="0x7f86c1915980" loc="95:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="90:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on whether or not to use CCA on the outbound packet.</short>
          <long>&#10; Request for input on whether or not to use CCA on the outbound packet.&#10; Replies should come in the form of setCca(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1915700" loc="95:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestInitialBackoff" ref="0x7f86c1917c30" loc="81:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="76:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; </short>
          <long>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c19179b0" loc="81:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCongestionBackoff" ref="0x7f86c1919350" loc="66:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="62:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestCongestionBackoff event&#10; </short>
          <long>&#10; Must be called within a requestCongestionBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f86c19190d0" loc="66:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInitialBackoff" ref="0x7f86c191b800" loc="60:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="56:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestInitialBackoff event&#10; </short>
          <long>&#10; Must be called within a requestInitialBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f86c191b580" loc="60:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCca" ref="0x7f86c1919d80" loc="73:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="68:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Enable CCA for the outbound packet.</short>
          <long>&#10; Enable CCA for the outbound packet.  Must be called within a requestCca&#10; event&#10; @param ccaOn TRUE to enable CCA, which is the default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ccaOn" ref="0x7f86c1919b00" loc="73:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestCongestionBackoff" ref="0x7f86c1916b10" loc="88:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="83:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; </short>
          <long>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1916890" loc="88:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7f86c19032b0" loc="59:../../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7f86c1913c50" loc="59:../../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f86c1903020" loc="59:../../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7f86c1910680" loc="65:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1910060" loc="65:../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7f86c19103f0" loc="65:../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7f86c190e850" loc="71:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c190e5d0" loc="71:../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7f86c1911810" loc="57:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7f86c191de10" loc="52:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7f86c191db90" loc="52:../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f86c19212e0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1921060" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f86c1920510" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1920290" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f86c191f680" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c191f400" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7f86c1907b30" loc="65:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c19078b0" loc="65:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7f86c190cb90" loc="46:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c190c570" loc="46:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7f86c190c900" loc="46:../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7f86c190bad0" loc="59:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c190b850" loc="59:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7f86c190b020" loc="53:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c190a960" loc="53:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7f86c190acf0" loc="53:../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7f86c1905b70" loc="71:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c19058f0" loc="71:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7f86c191c780" loc="47:../../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c191c500" loc="47:../../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f86c18f62b0" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c18fdc40" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f86c18f6020" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f86c18f2890" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c18f2290" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f86c18f25c0" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f86c18f19b0" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f86c18f55f0" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c18f5370" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f86c18f4ac0" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c18f44e0" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f86c18f4830" loc="100:../../../tos/interfaces/Send.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f86c18fa120" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.&#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource&#10;&#10; @note This command should never be called between putting in a request&#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event,&#10;       we have opted to keep thing simple and warn you about the potential&#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f86c18fb120" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f86c18fc770" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f86c18fb910" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f86c18fab70" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Transmit" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <short>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f86c18d03a0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send a message&#10;&#10; </short>
          <long>&#10; Send a message&#10;&#10; @param p_msg message to send.&#10; @param useCca TRUE if this Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f86c18d4dc0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="useCca" ref="0x7f86c18d0110" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f86c18ce6a0" loc="65:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="60:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Cancel sending of the message.</short>
          <long>&#10; Cancel sending of the message.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="modify" ref="0x7f86c18cce70" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="75:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Modify the contents of a packet.</short>
          <long>&#10; Modify the contents of a packet. This command can only be used&#10; when an SFD capture event for the sending packet is signalled.&#10;&#10; @param offset in the message to start modifying.&#10; @param buf to data to write&#10; @param len of bytes to write&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f86c18cc060" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f86c18cc8a0" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f86c18ccbd0" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f86c18cd840" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="67:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Signal that a message has been sent&#10;&#10; </short>
          <long>&#10; Signal that a message has been sent&#10;&#10; @param p_msg message to send.&#10; @param error notifaction of how the operation went.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f86c18cd260" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f86c18cd5b0" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resend" ref="0x7f86c18d0e30" loc="58:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send the previous message again&#10; </short>
          <long>&#10; Send the previous message again&#10; @param useCca TRUE if this re-Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="useCca" ref="0x7f86c18d0bb0" loc="58:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../../tos/interfaces/Random.nc">
      <documentation loc="34:../../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7f86c18c70e0" loc="52:../../../tos/interfaces/Random.nc">
        <documentation loc="48:../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7f86c18ca870" loc="46:../../../tos/interfaces/Random.nc">
        <documentation loc="42:../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f86c18daa40" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f86c18d2270" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420PacketBody" loc="37:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <short>&#10; Internal interface for the CC2420 to get portions of a packet.</short>
        <long>&#10; Internal interface for the CC2420 to get portions of a packet.&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="getPayload" ref="0x7f86c18c22e0" loc="49:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="45:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the payload region of the message, after any headers&#10;    works with extended addressing mode&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c18c2020" loc="49:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getHeader" ref="0x7f86c18c3710" loc="42:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="39:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_header_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_header" ref="0x7f86c1d1f410"/>
              <typename><typedef-ref name="cc2420_header_t" ref="0x7f86c1d1dd70"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c18c3410" loc="42:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMetadata" ref="0x7f86c18c0620" loc="53:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="50:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_metadata_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_metadata" ref="0x7f86c1d1c860"/>
              <typename><typedef-ref name="cc2420_metadata_t" ref="0x7f86c1d1a180"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c18c0320" loc="53:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Power" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio power operations (e.g. voltage&#10; regulator, oscillator, etc). However, it does not include&#10; transmission power, see the CC2420Config interface.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="startOscillator" ref="0x7f86c18d86e0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="65:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the oscillator.</short>
          <long>&#10; Start the oscillator. On SUCCESS, &#60;code>startOscillator&#60;/code>&#10; will be signalled when the oscillator has been started.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rfOff" ref="0x7f86c18d5840" loc="97:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="92:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Disable RX.</short>
          <long>&#10; Disable RX.&#10;&#10; @return SUCCESS if receive mode has been disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxOn" ref="0x7f86c18d5070" loc="90:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="85:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Enable RX.</short>
          <long>&#10; Enable RX.&#10;&#10; @return SUCCESS if receive mode has been enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startVReg" ref="0x7f86c18dce20" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the voltage regulator on the CC2420.</short>
          <long>&#10; Start the voltage regulator on the CC2420. On SUCCESS,&#10; &#60;code>startVReg()&#60;/code> will be signalled when the voltage&#10; regulator is fully on.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopVReg" ref="0x7f86c18d9e80" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="58:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the voltage regulator immediately.</short>
          <long>&#10; Stop the voltage regulator immediately.&#10;&#10; @return SUCCESS always&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startOscillatorDone" ref="0x7f86c18d7020" loc="76:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="73:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the oscillator has been started.</short>
          <long>&#10; Signals that the oscillator has been started.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopOscillator" ref="0x7f86c18d7840" loc="83:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="78:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the oscillator.</short>
          <long>&#10; Stop the oscillator.&#10;&#10; @return SUCCESS if the oscillator was stopped, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startVRegDone" ref="0x7f86c18d96c0" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the voltage regulator has been started.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="State" loc="38:../../../tos/interfaces/State.nc">
      <documentation loc="33:../../../tos/interfaces/State.nc">
        <short>&#10; State machine interface&#10; </short>
        <long>&#10; State machine interface&#10; @author David Moss - dmm@rincon.com&#10;</long>
      </documentation>
      <function command="" provided="0" name="getState" ref="0x7f86c18bbd00" loc="71:../../../tos/interfaces/State.nc">
        <documentation loc="68:../../../tos/interfaces/State.nc">
          <short>&#10; Get the current state&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toIdle" ref="0x7f86c18bd350" loc="56:../../../tos/interfaces/State.nc">
        <documentation loc="53:../../../tos/interfaces/State.nc">
          <short>&#10; Set the current state back to S_IDLE&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isState" ref="0x7f86c18bb530" loc="66:../../../tos/interfaces/State.nc">
        <documentation loc="63:../../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in the given state&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="myState" ref="0x7f86c18bb2b0" loc="66:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isIdle" ref="0x7f86c18bdac0" loc="61:../../../tos/interfaces/State.nc">
        <documentation loc="58:../../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in S_IDLE&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requestState" ref="0x7f86c18be020" loc="45:../../../tos/interfaces/State.nc">
        <documentation loc="40:../../../tos/interfaces/State.nc">
          <short>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.</short>
          <long>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.&#10; @return SUCCESS if the state is change, FAIL if it isn't&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f86c18c5c90" loc="45:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="forceState" ref="0x7f86c18bead0" loc="51:../../../tos/interfaces/State.nc">
        <documentation loc="47:../../../tos/interfaces/State.nc">
          <short>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.</short>
          <long>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f86c18be850" loc="51:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Config" loc="46:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio configurations. All get() and set()&#10; commands are single-phase. After setting some values, a call to&#10; sync() is required for the changes to propagate to the cc2420&#10; hardware chip. This interface allows setting multiple parameters&#10; before calling sync().&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/06/16 15:33:32 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setAutoAck" ref="0x7f86c1860870" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="100:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync must be called for acknowledgement changes to take effect&#10; </short>
          <long>&#10; Sync must be called for acknowledgement changes to take effect&#10; @param enableAutoAck TRUE to enable auto acknowledgements&#10; @param hwAutoAck TRUE to default to hardware auto acks, FALSE to&#10;     default to software auto acknowledgements&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAutoAck" ref="0x7f86c1860290" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </variable>
          <variable name="hwAutoAck" ref="0x7f86c18605e0" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAddressRecognitionEnabled" ref="0x7f86c18611f0" loc="93:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="90:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddressRecognition" ref="0x7f86c1862880" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="81:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @param enableAddressRecognition TRUE to turn address recognition on&#10; @param useHwAddressRecognition TRUE to perform address recognition first&#10;     in hardware. This doesn't affect software address recognition. The&#10;     driver must sync with the chip after changing this value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAddressRecognition" ref="0x7f86c1862210" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </variable>
          <variable name="useHwAddressRecognition" ref="0x7f86c18625f0" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="syncDone" ref="0x7f86c1869c10" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f86c1869990" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAddressRecognitionDefault" ref="0x7f86c1861a70" loc="98:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="95:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is performed first in hardware.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShortAddr" ref="0x7f86c1865730" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f86c18654b0" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f86c1867d30" loc="61:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f86c1867ab0" loc="61:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAutoAckEnabled" ref="0x7f86c185fae0" loc="117:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="114:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if auto acks are enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPanAddr" ref="0x7f86c18649c0" loc="78:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f86c1864740" loc="78:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAutoAckDefault" ref="0x7f86c185f2b0" loc="112:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="108:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if hardware auto acks are the default, FALSE if software&#10;     acks are the default&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getExtAddr" ref="0x7f86c18664d0" loc="66:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="63:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Get the long address of the radio: set in hardware&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f86c1939ac0"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f86c1936240"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShortAddr" ref="0x7f86c1866cc0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="68:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the short address of the radio.</short>
          <long>&#10; Change the short address of the radio.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sync" ref="0x7f86c18691f0" loc="54:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="48:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync configuration changes with the radio hardware.</short>
          <long>&#10; Sync configuration changes with the radio hardware. This only&#10; applies to set commands below.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f86c1867390" loc="60:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the channel of the radio, between 11 and 26&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPanAddr" ref="0x7f86c1864020" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="74:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the PAN address of the radio.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../../tos/interfaces/Read.nc">
      <documentation loc="33:../../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10;&#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f86c185c4a0" loc="49:../../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f86c185c4a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f86c185cd60" loc="55:../../../tos/interfaces/Read.nc">
        <documentation loc="50:../../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10;&#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f86c1859ac0" loc="63:../../../tos/interfaces/Read.nc">
        <documentation loc="57:../../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f86c185c4a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f86c1859510" loc="63:../../../tos/interfaces/Read.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </variable>
          <variable name="val" ref="0x7f86c1859830" loc="63:../../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f86c185c4a0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Register" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
      <documentation loc="33:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <short>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio.</short>
        <long>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio. The return values (when appropriate) refer to the&#10; status byte returned on the CC2420 SO pin. A full list of RW&#10; registers can be found on page 61 of the CC2420 datasheet (rev&#10; 1.2). Page 25 of the same document describes the protocol for&#10; interacting with these registers over the CC2420 SPI bus.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f86c1836520" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="49:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Read a 16-bit data word from the register.</short>
          <long>&#10; Read a 16-bit data word from the register.&#10;&#10; @param data pointer to place the register value.&#10; @return status byte from the read.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f86c1d23600"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f86c18362a0" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f86c1834030" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Write a 16-bit data word to the register.</short>
          <long>&#10; Write a 16-bit data word to the register.&#10; &#10; @param data value to write to register.&#10; @return status byte from the write.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f86c1d23600"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f86c1836d80" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalIeeeEui64" loc="43:../../../tos/interfaces/LocalIeeeEui64.nc">
      <documentation loc="39:../../../tos/interfaces/LocalIeeeEui64.nc">
        <short>&#10; Interface to read the 64-bit IEEE EUI.</short>
        <long>&#10; Interface to read the 64-bit IEEE EUI.&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="getId" ref="0x7f86c184fc50" loc="48:../../../tos/interfaces/LocalIeeeEui64.nc">
        <documentation loc="44:../../../tos/interfaces/LocalIeeeEui64.nc">
          <short>&#10; Get the 64-bit IEEE EUI.</short>
          <long>&#10; Get the 64-bit IEEE EUI.&#10; @returns the 64-bit IEEE EUI type, defined in tos/types/IeeeEui64.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalIeeeEui64"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f86c1939ac0"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f86c1936240"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7f86c183e0e0" loc="50:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7f86c183d070" loc="60:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7f86c183e8c0" loc="55:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f86c1ce3180"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7f86c183f860" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f86c1ce3180"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7f86c183f280" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f86c1ce3180"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7f86c183f5d0" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f86c1ce3560"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Strobe" loc="44:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
      <documentation loc="33:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <short>&#10; Interface representing one of the CC2420 command strobe registers.</short>
        <long>&#10; Interface representing one of the CC2420 command strobe registers.&#10; Writing to one of these registers enacts a command on the CC2420,&#10; such as power-up, transmission, or clear a FIFO.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="strobe" ref="0x7f86c182e120" loc="53:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <documentation loc="46:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
          <short>&#10; Send a command strobe to the register.</short>
          <long>&#10; Send a command strobe to the register. The return value is the&#10; CC2420 status register. Table 5 on page 27 of the CC2420&#10; datasheet (v1.2) describes the contents of this register.&#10; &#10; @return Status byte from the CC2420.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Strobe"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f86c1d23600"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Ram" loc="41:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <short>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f86c183a840" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="43:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Read data from a RAM.</short>
          <long>&#10; Read data from a RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f86c1d23600"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f86c18449b0" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f86c183a250" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f86c183a5a0" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f86c1838020" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="54:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Write data to RAM.</short>
          <long>&#10; Write data to RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f86c1d23600"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f86c1839150" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f86c18399c0" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f86c1839d10" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:../../../tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:../../../tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f86c18417e0" loc="68:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:../../../tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f86c1841020" loc="61:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:../../../tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x7f86c1843720" loc="54:../../../tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x7f86c1846db0" loc="53:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:../../../tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7f86c171b190" loc="54:../../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f86c171a350" loc="66:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f86c171bb30" loc="61:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f86c171b8b0" loc="61:../../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7f86c171e8f0" loc="53:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Interrupt" loc="39:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
      <documentation loc="34:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f86c16f2800" loc="54:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.</short>
          <long> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f86c16ee270" loc="85:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port.</short>
          <long>&#10; Signalled when an interrupt occurs on a port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f86c16f2070" loc="49:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Disables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Disables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x7f86c16ef9a0" loc="80:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets whether the edge should be high to low or low to high.</short>
          <long>&#10; Sets whether the edge should be high to low or low to high.&#10;&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition.&#10;&#10; DEPRECATED.&#10;&#10; The if generates extra code that doesn't need to be there.   Replaced&#10; by edge{Rising,Falling}();&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x7f86c16ef720" loc="80:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeFalling" ref="0x7f86c16ef020" loc="67:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7f86c16f5870" loc="44:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Enables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Enables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeRising" ref="0x7f86c16f1810" loc="66:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="63:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets rising or falling edge for the interrupt generation&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x7f86c16f1030" loc="61:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Gets the current input value of a port.</short>
          <long> &#10; Gets the current input value of a port.&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ChipSpiResource" loc="17:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
      <documentation loc="2:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <short>&#10; Interface for the SPI resource for an entire chip.</short>
        <long>&#10; Interface for the SPI resource for an entire chip.  The chip accesses&#10; the platform SPI resource one time, but can have multiple clients &#10; using the SPI bus on top.  When all of the clients are released, the&#10; chip will normally try to release itself from the platforms SPI bus.&#10; In some cases, this isn't desirable - so even though upper components&#10; aren't actively using the SPI bus, they can tell the chip to hold onto&#10; it so they can have immediate access when they need. &#10;&#10; Any component that aborts a release MUST attempt the release at a later&#10; time if they don't acquire and release the SPI bus naturally after the&#10; abort.&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="releasing" ref="0x7f86c159c810" loc="24:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="19:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; The SPI bus is about to be automatically released.</short>
          <long>&#10; The SPI bus is about to be automatically released.  Modules that aren't&#10; using the SPI bus but still want the SPI bus to stick around must call&#10; abortRelease() within the event.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="abortRelease" ref="0x7f86c159b0e0" loc="31:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="27:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Abort the release of the SPI bus.</short>
          <long>&#10; Abort the release of the SPI bus.  This must be called only with the&#10; releasing() event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="attemptRelease" ref="0x7f86c159b920" loc="39:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="33:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Release the SPI bus if there are no objections&#10; </short>
          <long>&#10; Release the SPI bus if there are no objections&#10; @return SUCCESS if the SPI bus is released from the chip.&#10;      FAIL if the SPI bus is already in use.&#10;      EBUSY if some component aborted the release.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Fifo" loc="40:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <short>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="continueRead" ref="0x7f86c1574420" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Continue reading from the FIFO without having to send the address&#10; byte again.</short>
          <long>&#10; Continue reading from the FIFO without having to send the address&#10; byte again. The &#60;code>readDone&#60;/code> event will be signalled&#10; upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f86c1575e10" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f86c1574190" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7f86c156f700" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="84:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a write operation.</short>
          <long>&#10; Signals the completion of a write operation.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes written.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f86c1570d90" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f86c156f110" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f86c156f460" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f86c1570020" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="73:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start writing the FIFO.</short>
          <long>&#10; Start writing the FIFO. The &#60;code>writeDone&#60;/code> event will be&#10; signalled upon completion.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f86c1d23600"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f86c1571970" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f86c1571cc0" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="beginRead" ref="0x7f86c1575020" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="42:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start reading from the FIFO.</short>
          <long>&#10; Start reading from the FIFO. The &#60;code>readDone&#60;/code> event will&#10; be signalled upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f86c1d23600"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f86c15769d0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f86c1576d20" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f86c1573b90" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="64:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a read operation.</short>
          <long>&#10; Signals the completion of a read operation.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes read.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f86c1573250" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f86c15735a0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f86c15738f0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f86c1555a40" loc="76:../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f86c15550d0" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f86c1555460" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f86c15557a0" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f86c1551020" loc="88:../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f86c15532a0" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f86c1553630" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f86c1553970" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f86c1553ce0" loc="89:../../../tos/interfaces/SpiPacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
              <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7f86c15578f0" loc="45:../../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7f86c1557670" loc="45:../../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f86c1476b70" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f86c14734e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430SpiConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <short>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; </short>
        <long>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f86c1472aa0" loc="39:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <interfacedef-ref qname="Msp430SpiConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f86c14a82b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f86c14a9e00"/></type-tag>
            </type-qualified>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7f86c14716f0" loc="62:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f86c1471470" loc="62:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7f86c1470b30" loc="74:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f86c14708b0" loc="74:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7f86c1470020" loc="68:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f86c146f5f0" loc="81:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f86c146f370" loc="81:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f86c1463020" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f86c1465750" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART. &#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information.&#10;&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f86c145c740" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f86c145c4c0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f86c1460cd0" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART.&#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information. I.e. calling &#60;code>tx&#60;/done> will transmit a byte of&#10; data in the mode (SPI or UART) the USART has been set to before.&#10;&#10; @author Vlado Handziski (handzisk@tkn.tu-berlin.de)&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f86c1438390" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f86c14431f0" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f86c1450020" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f86c14c4020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f86c14c4860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f86c1453cf0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f86c14c4020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f86c14c4860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f86c1446350" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f86c144d530" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f86c14bf020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f86c14bf860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f86c144d2b0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f86c14bf020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f86c14bf860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f86c143d750" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f86c143acf0" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f86c144fa90" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f86c14c3ec0"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f86c14c2680"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f86c144dd20" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f86c14bf020"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f86c14bf860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f86c144ab90" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f86c144a910" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f86c144a1f0" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f86c143d020" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f86c144f2a0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f86c14c3ec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f86c14c2680"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f86c144f020" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f86c14c3ec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f86c14c2680"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f86c144b020" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f86c143de80" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f86c144ba00" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f86c144b780" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f86c1447420" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f86c1447ba0" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f86c143e190" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f86c14410e0" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f86c1445270" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f86c143e8d0" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f86c14439d0" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f86c143c5c0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f86c1448390" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f86c14cad80"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f86c14c64d0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f86c143cd60" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f86c1439bd0" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f86c144c700" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f86c144c480" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f86c1438d30" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f86c1438ab0" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f86c1450800" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f86c14c4020"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f86c14c4860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f86c1446ac0" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f86c1442190" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f86c143f940" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f86c1494b50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f86c1494730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f86c143f6c0" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f86c1494b50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f86c1494730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f86c1441bf0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f86c14a82b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f86c14a9e00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f86c1441970" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f86c14a82b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f86c14a9e00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f86c1436590" loc="227:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="222:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return byte received&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f86c143a570" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f86c1448b40" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f86c1439480" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f86c1442900" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f86c1445a50" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f86c13d1600" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <function command="" provided="0" name="disableOwnAddress" ref="0x7f86c13a9070" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7f86c13bc780" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7f86c13b1d50" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f86c13b1ad0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7f86c13c5cb0" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7f86c13ad350" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7f86c13b6cf0" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7f86c13bd770" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7f86c13bb770" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f86c13bf600" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7f86c13bf380" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7f86c13c1b00" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7f86c13b8790" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7f86c13afc80" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7f86c13aa8f0" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7f86c13b1390" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7f86c13a5b60" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7f86c13a0270" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7f86c13c4b30" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7f86c13b8020" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7f86c13b7910" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7f86c13bd020" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7f86c13c69a0" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7f86c13b2ba0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f86c13b2920" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7f86c13c6270" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7f86c13aeb80" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7f86c13a97d0" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7f86c13a3350" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7f86c13a2a90" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7f86c13ac270" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7f86c13a8020" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7f86c13af520" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7f86c13a6bb0" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7f86c13c2270" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7f86c13b3020" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7f86c13a6020" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7f86c13aa190" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7f86c13b6520" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7f86c13b62a0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7f86c13a3af0" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7f86c13b21f0" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7f86c13adac0" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7f86c13c5550" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f86c14804a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f86c1480080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f86c13c52d0" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f86c14804a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f86c1480080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7f86c13b9770" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7f86c13c1390" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f86c13c1110" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7f86c13b7120" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f86c13b8e70" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7f86c13a53b0" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7f86c13c0c40" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7f86c13c29e0" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7f86c13b39e0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7f86c13b3760" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f86c2c1a520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7f86c13c4420" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7f86c13a8740" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7f86c13ac9e0" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7f86c13ae420" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7f86c13b4740" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7f86c13b44c0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7f86c13b9020" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7f86c13bc020" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7f86c13a22b0" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7f86c13c04b0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f86c13c0230" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7f86c13a4350" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7f86c13bb020" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7f86c13a4b10" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f86c1301780" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f86c1300020" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="38:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f86c12c68b0" loc="54:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f86c12c59c0" loc="71:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f86c12c6020" loc="44:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="39:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f86c12c5190" loc="63:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f86c12c4350" loc="79:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwnerInfo" loc="2:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
      <function command="" provided="0" name="inUse" ref="0x7f86c12c1460" loc="9:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
        <documentation loc="3:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
          <short>&#10; Check whether a DefaultOwner has an active client.</short>
          <long>&#10; Check whether a DefaultOwner has an active client.&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f86c12b9de0" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f86c12c3d90"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f86c12b9b60" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f86c12c3d90"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f86c12bde00" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f86c12ba960" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f86c12c3d90"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f86c12ba6e0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f86c12c3d90"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f86c12b92b0" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f86c12c3d90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadId48" loc="8:../../../tos/chips/ds2411/ReadId48.nc">
      <documentation loc="4:../../../tos/chips/ds2411/ReadId48.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f86c10ae5e0" loc="13:../../../tos/chips/ds2411/ReadId48.nc">
        <interfacedef-ref qname="ReadId48"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f86c10ae360" loc="13:../../../tos/chips/ds2411/ReadId48.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="OneWireReadWrite" loc="9:../../../tos/lib/onewire/OneWireReadWrite.nc">
      <documentation loc="5:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f86c109ab00" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f86c109a1c0" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f86c109a530" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f86c109a860" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f86c1099880" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f86c10992c0" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f86c10995f0" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f86c1081530" loc="59:../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f86c1081530"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f86c1081770" loc="59:../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1081770"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7f86c107f2e0" loc="66:../../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1081770"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f86c107f060" loc="66:../../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1081770"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveIndicator" loc="37:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <short>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; </short>
        <long>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="isReceiving" ref="0x7f86c101d580" loc="43:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <documentation loc="39:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the indicator is showing we are actively receiving at this&#10; level&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveIndicator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f86c1009af0" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f86c1009af0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f86c1009d30" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1009d30"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7f86c1003bc0" loc="63:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1009d30"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1003940" loc="63:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f86c1002d80" loc="70:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1002b00" loc="70:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7f86c1006920" loc="49:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c10066a0" loc="49:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f86c10040c0" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1009d30"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c1001a80" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f86c1001de0" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f86c1009d30"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Receive" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <short>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2008-06-17 07:28:24 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f86c0fe49e0" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Signals that a message has been received.</short>
          <long>&#10; Signals that a message has been received.&#10;&#10; @param type of the message received.&#10; @param message pointer to message received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0x7f86c0fe4020" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
            </type-int>
          </variable>
          <variable name="message" ref="0x7f86c0fe4750" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd_dropped" ref="0x7f86c0fe57f0" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="51:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that the packet has been dropped by the radio&#10; (e.g.</short>
          <long>&#10; Notification that the packet has been dropped by the radio&#10; (e.g. due to address rejection).&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd" ref="0x7f86c0fe5020" loc="49:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that an SFD capture has occured.</short>
          <long>&#10; Notification that an SFD capture has occured.&#10;&#10; @param time at which the capture happened.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f86c0fe9d30" loc="49:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f86c2c1a920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeSyncOffset" loc="43:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
      <function command="" provided="0" name="get" ref="0x7f86c0ffa5f0" loc="58:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="52:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns the offset of where the timesync timestamp is sotred in a&#10; CC2420 packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f86c2c1a160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c0ffa370" loc="58:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7f86c0ffb5f0" loc="50:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="45:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns TRUE if the current message should be timestamped.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c0ffb370" loc="50:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f86c0ff75f0" loc="72:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="67:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10; Cancels any pending requests to timestamp the message in MAC.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c0ff7370" loc="72:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f86c0ff85f0" loc="65:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="60:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10;  Sets the current message to be timestamped in the MAC layer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f86c0ff8370" loc="65:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f86c1cd4350"/>
                <typename><typedef-ref name="message_t" ref="0x7f86c1cd39a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7f86c0dd25e0" loc="53:../../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f86c0dd25e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7f86c0dcf2a0" loc="64:../../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f86c256d020"/>
            <typename><typedef-ref name="error_t" ref="0x7f86c25651b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f86c0dd25e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7f86c0dcf020" loc="64:../../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f86c0dd25e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBusy" loc="2:../../../tos/interfaces/SendBusy.nc">
      <function command="" provided="0" name="busy" ref="0x7f86c0bea1f0" loc="9:../../../tos/interfaces/SendBusy.nc">
        <documentation loc="3:../../../tos/interfaces/SendBusy.nc">
          <short>&#10; Check whether send queue entry is in use&#10;&#10; </short>
          <long>&#10; Check whether send queue entry is in use&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBusy"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f86c2573090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
