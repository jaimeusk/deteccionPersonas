<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="16:MaestroApp.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f85d89921c0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f85d8a48560"/></to>
    </wire>
    <wire loc="72:../../../tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x7f85d8a48560"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x7f85d8a45aa0"/></to>
    </wire>
    <wire loc="19:MaestroApp.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f85d898ca80"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f85d754f5c0"/></to>
    </wire>
    <wire loc="61:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f85d754f5c0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f85d74e38d0"/></to>
    </wire>
    <wire loc="21:MaestroApp.nc">
      <from><interface-ref name="UartSend" scoped="" ref="0x7f85d893eba0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f85d754c600"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f85d754c600"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f85d74ec110"/></to>
    </wire>
    <wire loc="22:MaestroApp.nc">
      <from><interface-ref name="UartReceive" scoped="" ref="0x7f85d8939bc0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d754b800"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f85d754b800"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d74ece70"/></to>
    </wire>
    <wire loc="23:MaestroApp.nc">
      <from><interface-ref name="UartPacket" scoped="" ref="0x7f85d892f6c0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f85d754be10"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f85d754be10"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f85d74eaa40"/></to>
    </wire>
    <wire loc="24:MaestroApp.nc">
      <from><interface-ref name="UartAMPacket" scoped="" ref="0x7f85d89208c0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f85d7549ab0"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f85d7549ab0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f85d74eb490"/></to>
    </wire>
    <wire loc="34:MaestroApp.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f85d8931020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f85d711ac30"/></to>
    </wire>
    <wire loc="65:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f85d711ac30"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f85d669a590"/></to>
    </wire>
    <wire loc="35:MaestroApp.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f85d8931c90"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f85d71198b0"/></to>
    </wire>
    <wire loc="66:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f85d71198b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f85d6699270"/></to>
    </wire>
    <wire loc="36:MaestroApp.nc">
      <from><interface-ref name="AMControl" scoped="" ref="0x7f85d89916b0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f85d859d760"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f85d859d760"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f85d856bcc0"/></to>
    </wire>
    <wire loc="37:MaestroApp.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f85d891d440"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f85d711a020"/></to>
    </wire>
    <wire loc="64:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f85d711a020"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f85d669b920"/></to>
    </wire>
    <wire loc="38:MaestroApp.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f85d891c0c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d710e910"/></to>
    </wire>
    <wire loc="54:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f85d710e910"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d8599b20"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="40:MaestroApp.nc">
      <from><interface-ref name="TimerTramaTDMA" scoped="" ref="0x7f85d891b270"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d71b3060"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d71b3060"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f85d7751610"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:MaestroApp.nc">
      <from><interface-ref name="TimerLeds" scoped="" ref="0x7f85d890b650"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d71adb00"/></to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d71adb00"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f85d7751610"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="43:MaestroApp.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f85d88f9500"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f85d88745f0"/></to>
    </wire>
    <wire loc="51:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f85d88745f0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f85d886d020"/></to>
    </wire>
    <wire loc="73:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d66ee020"/></to>
    </wire>
    <wire loc="59:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d74e3280"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d7625dd0"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d76aeb70"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d76cc750"/></to>
    </wire>
    <wire loc="52:../../../tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d76e9080"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d78563a0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d7956620"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d7a44c60"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d83e7c70"/></to>
    </wire>
    <wire loc="73:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d6a12020"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateImplC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d7f17020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d84984a0"/></to>
    </wire>
    <wire loc="67:../../../tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f85d89ab140"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f85d8ef21e0"/></to>
    </wire>
    <wire loc="53:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x7f85d8ef21e0"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x7f85d8a97140"/></to>
    </wire>
    <wire loc="68:../../../tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x7f85d89abb60"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d8a4a960"/></to>
    </wire>
    <wire loc="48:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f85d8a4a960"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d8a42cb0"/></to>
    </wire>
    <wire loc="71:../../../tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d89aa3a0"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></to>
    </wire>
    <wire loc="49:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f85d8a3ab60"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f85d8a37390"/></to>
    </wire>
    <wire loc="50:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f85d8a369f0"/></from>
      <to><interface-ref name="MoteClockInit" scoped="" ref="0x7f85d8a1f390"/></to>
    </wire>
    <wire loc="46:../../../tos/platforms/telosb/MoteClockC.nc">
      <from><interface-ref name="MoteClockInit" scoped="" ref="0x7f85d8a1f390"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d8a04280"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x7f85d8a35120"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d8a1d1a0"/></to>
    </wire>
    <wire loc="56:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="LedsInit" scoped="" ref="0x7f85d8a35800"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d8845c40"/></to>
    </wire>
    <wire loc="46:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f85d8a04280"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d89edae0"/></to>
    </wire>
    <wire loc="47:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f85d89fd850"/></from>
      <to><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f85d89ea180"/></to>
    </wire>
    <wire loc="48:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x7f85d8b6dc80"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x7f85d89e9320"/></to>
    </wire>
    <wire loc="54:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8a96040"/></to>
    </wire>
    <wire loc="56:../../../tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x7f85d8a91490"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x7f85d8cca9a0"/></to>
    </wire>
    <wire loc="90:MaestroC.nc">
      <from><interface-ref name="RadioSendTask" scoped="" ref="0x7f85d88ec9e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:MaestroC.nc">
      <from><interface-ref name="uartSendTask" scoped="" ref="0x7f85d88ed9f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="53:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f85d8845c40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d88708d0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f85d88657b0"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x7f85d8848360"/></to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x7f85d8848360"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f85d85c89e0"/></to>
    </wire>
    <wire loc="55:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f85d886b980"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x7f85d88476a0"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x7f85d88476a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f85d85b2020"/></to>
    </wire>
    <wire loc="56:../../../tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f85d886aca0"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x7f85d88469c0"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x7f85d88469c0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f85d85ad630"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d85b7c50"/></from>
      <to><interface-ref name="Port54" scoped="" ref="0x7f85d87d8020"/></to>
    </wire>
    <wire loc="737:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port54" scoped="" ref="0x7f85d87d8020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8682540"/></to>
    </wire>
    <wire loc="62:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d85b12f0"/></from>
      <to><interface-ref name="Port55" scoped="" ref="0x7f85d87d68a0"/></to>
    </wire>
    <wire loc="738:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port55" scoped="" ref="0x7f85d87d68a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d867cb90"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d85ab7a0"/></from>
      <to><interface-ref name="Port56" scoped="" ref="0x7f85d87d3020"/></to>
    </wire>
    <wire loc="739:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port56" scoped="" ref="0x7f85d87d3020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8676060"/></to>
    </wire>
    <wire loc="693:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f85d882ad50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8731b90"/></to>
    </wire>
    <wire loc="706:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f85d8811e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86f9060"/></to>
    </wire>
    <wire loc="844:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SDA" scoped="" ref="0x7f85d87863d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86e9060"/></to>
    </wire>
    <wire loc="864:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC6" scoped="" ref="0x7f85d878c3e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d864bb90"/></to>
    </wire>
    <wire loc="845:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI0" scoped="" ref="0x7f85d87b43f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86e4540"/></to>
    </wire>
    <wire loc="711:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port30" scoped="" ref="0x7f85d880ce50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86efb90"/></to>
    </wire>
    <wire loc="724:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port42" scoped="" ref="0x7f85d87f1020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86b8060"/></to>
    </wire>
    <wire loc="748:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port64" scoped="" ref="0x7f85d87c3020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8655060"/></to>
    </wire>
    <wire loc="848:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD0" scoped="" ref="0x7f85d87af3f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86d9060"/></to>
    </wire>
    <wire loc="858:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC0" scoped="" ref="0x7f85d879b3e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d866cb90"/></to>
    </wire>
    <wire loc="870:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSIN" scoped="" ref="0x7f85d877c3f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8645060"/></to>
    </wire>
    <wire loc="696:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f85d8822580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8720b90"/></to>
    </wire>
    <wire loc="849:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD0" scoped="" ref="0x7f85d87adbc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86d3540"/></to>
    </wire>
    <wire loc="701:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f85d881d580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8715540"/></to>
    </wire>
    <wire loc="714:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port33" scoped="" ref="0x7f85d8804710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86dfb90"/></to>
    </wire>
    <wire loc="727:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port45" scoped="" ref="0x7f85d87ea8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86a7060"/></to>
    </wire>
    <wire loc="740:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port57" scoped="" ref="0x7f85d87d18a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8671540"/></to>
    </wire>
    <wire loc="751:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port67" scoped="" ref="0x7f85d87bc8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8645060"/></to>
    </wire>
    <wire loc="691:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f85d882fd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d873b060"/></to>
    </wire>
    <wire loc="704:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f85d8816d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d87056d0"/></to>
    </wire>
    <wire loc="717:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port36" scoped="" ref="0x7f85d87fce50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86ceb90"/></to>
    </wire>
    <wire loc="843:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO0" scoped="" ref="0x7f85d87b7bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86e9060"/></to>
    </wire>
    <wire loc="861:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC3" scoped="" ref="0x7f85d8794bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d865cb90"/></to>
    </wire>
    <wire loc="868:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC1" scoped="" ref="0x7f85d877fbb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8645060"/></to>
    </wire>
    <wire loc="854:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK1" scoped="" ref="0x7f85d87a3bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8687060"/></to>
    </wire>
    <wire loc="722:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port40" scoped="" ref="0x7f85d87f7e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86c3740"/></to>
    </wire>
    <wire loc="735:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port52" scoped="" ref="0x7f85d87dd020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d868db90"/></to>
    </wire>
    <wire loc="746:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port62" scoped="" ref="0x7f85d87c9020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8661540"/></to>
    </wire>
    <wire loc="862:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC4" scoped="" ref="0x7f85d87913e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8655060"/></to>
    </wire>
    <wire loc="851:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE1" scoped="" ref="0x7f85d87aa3e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8697060"/></to>
    </wire>
    <wire loc="694:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f85d8827580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d872b060"/></to>
    </wire>
    <wire loc="707:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f85d880e710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86f4540"/></to>
    </wire>
    <wire loc="744:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port60" scoped="" ref="0x7f85d87ce020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d866cb90"/></to>
    </wire>
    <wire loc="712:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port31" scoped="" ref="0x7f85d8809710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86e9060"/></to>
    </wire>
    <wire loc="725:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port43" scoped="" ref="0x7f85d87ef8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86b3540"/></to>
    </wire>
    <wire loc="749:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port65" scoped="" ref="0x7f85d87c18a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8650540"/></to>
    </wire>
    <wire loc="853:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SOMI1" scoped="" ref="0x7f85d87a53f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d868db90"/></to>
    </wire>
    <wire loc="689:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f85d8833cb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8746540"/></to>
    </wire>
    <wire loc="702:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f85d881bd50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8710b90"/></to>
    </wire>
    <wire loc="715:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port34" scoped="" ref="0x7f85d8802e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86d9060"/></to>
    </wire>
    <wire loc="728:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port46" scoped="" ref="0x7f85d87e7020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86a2540"/></to>
    </wire>
    <wire loc="855:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UTXD1" scoped="" ref="0x7f85d87a03f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86ceb90"/></to>
    </wire>
    <wire loc="859:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC1" scoped="" ref="0x7f85d8799bb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8666060"/></to>
    </wire>
    <wire loc="865:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC7" scoped="" ref="0x7f85d878abb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8645060"/></to>
    </wire>
    <wire loc="733:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port50" scoped="" ref="0x7f85d87e2020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8697060"/></to>
    </wire>
    <wire loc="856:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="URXD1" scoped="" ref="0x7f85d879ebc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86c8060"/></to>
    </wire>
    <wire loc="692:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f85d882c580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8736540"/></to>
    </wire>
    <wire loc="705:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f85d8813710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8700b90"/></to>
    </wire>
    <wire loc="718:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port37" scoped="" ref="0x7f85d87f9710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86c8060"/></to>
    </wire>
    <wire loc="852:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SIMO1" scoped="" ref="0x7f85d87a8bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8692540"/></to>
    </wire>
    <wire loc="863:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC5" scoped="" ref="0x7f85d878fbb0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8650540"/></to>
    </wire>
    <wire loc="723:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port41" scoped="" ref="0x7f85d87f48a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86beb90"/></to>
    </wire>
    <wire loc="736:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port53" scoped="" ref="0x7f85d87db8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8687060"/></to>
    </wire>
    <wire loc="747:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port63" scoped="" ref="0x7f85d87c78a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d865cb90"/></to>
    </wire>
    <wire loc="695:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f85d8825d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8725540"/></to>
    </wire>
    <wire loc="745:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port61" scoped="" ref="0x7f85d87cc8a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8666060"/></to>
    </wire>
    <wire loc="700:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f85d8820d50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d871a060"/></to>
    </wire>
    <wire loc="713:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port32" scoped="" ref="0x7f85d8807e50"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86e4540"/></to>
    </wire>
    <wire loc="726:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port44" scoped="" ref="0x7f85d87ec020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86aeb90"/></to>
    </wire>
    <wire loc="750:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port66" scoped="" ref="0x7f85d87be020"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d864bb90"/></to>
    </wire>
    <wire loc="690:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f85d8831580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8741b90"/></to>
    </wire>
    <wire loc="703:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f85d8818580"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d870a060"/></to>
    </wire>
    <wire loc="716:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port35" scoped="" ref="0x7f85d87ff710"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86d3540"/></to>
    </wire>
    <wire loc="729:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port47" scoped="" ref="0x7f85d87e58a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d869db90"/></to>
    </wire>
    <wire loc="860:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="ADC2" scoped="" ref="0x7f85d87963e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8661540"/></to>
    </wire>
    <wire loc="847:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SCL" scoped="" ref="0x7f85d8784ba0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86dfb90"/></to>
    </wire>
    <wire loc="846:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="UCLK0" scoped="" ref="0x7f85d87b2bc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86dfb90"/></to>
    </wire>
    <wire loc="734:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="Port51" scoped="" ref="0x7f85d87e08a0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8692540"/></to>
    </wire>
    <wire loc="867:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="DAC0" scoped="" ref="0x7f85d87813e0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d864bb90"/></to>
    </wire>
    <wire loc="871:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="SVSOUT" scoped="" ref="0x7f85d877abc0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d8671540"/></to>
    </wire>
    <wire loc="842:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <from><interface-ref name="STE0" scoped="" ref="0x7f85d87b9060"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x7f85d86efb90"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f85d856bcc0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f85d8541020"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f85d859a7f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f85d856ad20"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f85d856ad20"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f85d75e7020"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f85d8598880"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f85d8568c00"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x7f85d8568c00"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x7f85d75e6df0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f85d8597020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f85d85668f0"/></to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f85d85668f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f85d75e4a80"/></to>
    </wire>
    <wire loc="89:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f85d8592310"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f85d78d2550"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f85d78d2550"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f85d78c3a80"/></to>
    </wire>
    <wire loc="86:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f85d8578130"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f85d855acb0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f85d855acb0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f85d852d080"/></to>
    </wire>
    <wire loc="81:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f85d8599b20"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d8568020"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f85d8568020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d75e6210"/></to>
    </wire>
    <wire loc="85:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d8593080"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d8564990"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d8564990"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d852e020"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f85d8597c90"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f85d85672d0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f85d85672d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f85d75e5470"/></to>
    </wire>
    <wire loc="90:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f85d85843f0"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f85d78ce660"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f85d78ce660"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f85d78c0af0"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f85d8541020"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f85d7618b80"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d8551e30"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d75e18b0"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SendNotifier" scoped="" ref="0x7f85d8545d20"/></from>
      <to><interface-ref name="SendNotifier" scoped="" ref="0x7f85d75e3ce0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d855c9b0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d852f020"/></to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d852f020"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d78d7670"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f85d852d080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f85d7618080"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d852e020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f85d78d46e0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f85d8550020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f85d852db70"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f85d852db70"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f85d7604020"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f85d8559c70"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f85d852e9d0"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f85d852e9d0"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f85d78d3a70"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="RadioResource" scoped="" ref="0x7f85d75d90f0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d8540530"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f85d75e0860"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f85d8539a70"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f85d8539a70"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f85d7681c90"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f85d75df690"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f85d8532840"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f85d8532840"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f85d7680a50"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f85d75db4d0"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f85d7afdb20"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d75dfce0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d78d7670"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d78d7670"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d78c9d20"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d75deb70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d78d30c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d78d30c0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d78c4640"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f85d75dd610"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f85d84a1b80"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f85d84a1b80"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f85d8497970"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f85d75da1f0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d8527330"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d8527330"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d85217e0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f85d75d9d30"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f85d88745f0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f85d7618b80"/></from>
      <to><interface-ref name="SubControl" scoped="" ref="0x7f85d7615d90"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f85d78d3a70"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f85d78c3020"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketLink" scoped="" ref="0x7f85d7604020"/></from>
      <to><interface-ref name="PacketLink" scoped="" ref="0x7f85d7602410"/></to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveSend" scoped="" ref="0x7f85d7681c90"/></from>
      <to><interface-ref name="ActiveSend" scoped="" ref="0x7f85d7677a20"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x7f85d7618080"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x7f85d76112d0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareReceive" scoped="" ref="0x7f85d853a690"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d76815e0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f85d76815e0"/></from>
      <to><interface-ref name="BareReceive" scoped="" ref="0x7f85d7677370"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f85d78d46e0"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f85d78c5c50"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d8540530"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7684be0"/></to>
    </wire>
    <wire loc="96:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d7684be0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d76797b0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BareSend" scoped="" ref="0x7f85d8530940"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f85d76838e0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f85d76838e0"/></from>
      <to><interface-ref name="BareSend" scoped="" ref="0x7f85d76784d0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f85d853ad50"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f85d767f170"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="BarePacket" scoped="" ref="0x7f85d767f170"/></from>
      <to><interface-ref name="BarePacket" scoped="" ref="0x7f85d7674020"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="ActiveReceive" scoped="" ref="0x7f85d7680a50"/></from>
      <to><interface-ref name="ActiveReceive" scoped="" ref="0x7f85d7675840"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f85d7615d90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f85d8529390"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f85d8529390"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f85d8526e70"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f85d767e6b0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f85d76d2220"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f85d76d2220"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f85d76cfa10"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f85d76d0020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f85d7607350"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f85d7607350"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f85d7604d70"/></to>
    </wire>
    <wire loc="103:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f85d7604d70"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f85d761dce0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f85d761dce0"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f85d7616860"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f85d7616860"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f85d8529e80"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f85d8529e80"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f85d8523990"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f85d767e020"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d761a980"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f85d761a980"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f85d7615690"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f85d7615690"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d76b5aa0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f85d76b5aa0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d76b1e30"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f85d76b2950"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d8528b40"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f85d8528b40"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d795a7c0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f85d795a7c0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d7954020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d8520640"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d84b1720"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d84b1720"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d8498b10"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f85d8518b00"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f85d84aca60"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CC2420Power" scoped="" ref="0x7f85d84aca60"/></from>
      <to><interface-ref name="CC2420Power" scoped="" ref="0x7f85d8495740"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f85d8515610"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f85d7a546c0"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubControl" scoped="" ref="0x7f85d8515610"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f85d795d5c0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f85d795d5c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f85d7956ca0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f85d7a546c0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f85d7a42320"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f85d850e260"/></from>
      <to><interface-ref name="CC2420Transmit" scoped="" ref="0x7f85d7a51020"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Transmit" scoped="" ref="0x7f85d7a51020"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f85d7a42bc0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SubBackoff" scoped="" ref="0x7f85d8517020"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d7a51cb0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d7a51cb0"/></from>
      <to><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d7a41970"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d850b330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d78d7670"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d8502920"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d78d30c0"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f85d850a3b0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f85d76f2a20"/></to>
    </wire>
    <wire loc="56:../../../tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f85d76f2a20"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f85d76e8a20"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="SplitControlState" scoped="" ref="0x7f85d8506020"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f85d76f5aa0"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f85d76f5aa0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f85d7f1b1d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f85d850ab80"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f85d88745f0"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="sendDone_task" scoped="" ref="0x7f85d84f89e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="stopDone_task" scoped="" ref="0x7f85d84faa10"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <from><interface-ref name="startDone_task" scoped="" ref="0x7f85d84fba00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ReadRssi" scoped="" ref="0x7f85d849e020"/></from>
      <to><interface-ref name="ReadRssi" scoped="" ref="0x7f85d8494b40"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="StartupTimer" scoped="" ref="0x7f85d8488d90"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f85d83e4690"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f85d83e4690"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f85d83de5f0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f85d8485060"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f85d8193690"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f85d8193690"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f85d8185020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f85d8484380"/></from>
      <to><interface-ref name="RSTN" scoped="" ref="0x7f85d818f020"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="RSTN" scoped="" ref="0x7f85d818f020"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f85d8174020"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f85d84836a0"/></from>
      <to><interface-ref name="VREN" scoped="" ref="0x7f85d818d6a0"/></to>
    </wire>
    <wire loc="77:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="VREN" scoped="" ref="0x7f85d818d6a0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f85d816ab00"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f85d84810e0"/></from>
      <to><interface-ref name="InterruptCCA" scoped="" ref="0x7f85d814b400"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptCCA" scoped="" ref="0x7f85d814b400"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f85d7fee680"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f85d846b1d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7b87e20"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d7b87e20"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7f9a4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f85d846a2b0"/></from>
      <to><interface-ref name="SRXON" scoped="" ref="0x7f85d7b847b0"/></to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f85d7b847b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f85d846a9c0"/></from>
      <to><interface-ref name="SRFOFF" scoped="" ref="0x7f85d7b82ae0"/></to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f85d7b82ae0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f85d846ca40"/></from>
      <to><interface-ref name="SXOSCON" scoped="" ref="0x7f85d7b85ad0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f85d7b85ad0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f85d846c120"/></from>
      <to><interface-ref name="SXOSCOFF" scoped="" ref="0x7f85d7b81160"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f85d7b81160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f85d8470b00"/></from>
      <to><interface-ref name="FSCTRL" scoped="" ref="0x7f85d7b79870"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f85d7b79870"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f85d84773d0"/></from>
      <to><interface-ref name="IOCFG0" scoped="" ref="0x7f85d7b76880"/></to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f85d7b76880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f85d8477c80"/></from>
      <to><interface-ref name="IOCFG1" scoped="" ref="0x7f85d7b750a0"/></to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f85d7b750a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f85d84735f0"/></from>
      <to><interface-ref name="MDMCTRL0" scoped="" ref="0x7f85d7b7ee50"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f85d7b7ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d846f020"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7b7c670"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7b7c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f85d847c520"/></from>
      <to><interface-ref name="PANID" scoped="" ref="0x7f85d7b68500"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f85d7b68500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f85d8474a90"/></from>
      <to><interface-ref name="IEEEADR" scoped="" ref="0x7f85d7b6ace0"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f85d7b6ace0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f85d846f8e0"/></from>
      <to><interface-ref name="RXCTRL1" scoped="" ref="0x7f85d7b7ae50"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f85d7b7ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f85d846e1c0"/></from>
      <to><interface-ref name="RSSI" scoped="" ref="0x7f85d7b7ce50"/></to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f85d7b7ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f85d846ea70"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f85d7b7be50"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f85d7b7be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="SyncResource" scoped="" ref="0x7f85d8468d90"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7b56a80"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d7b56a80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7f9a4d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="RssiResource" scoped="" ref="0x7f85d8468020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7b2a9e0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d7b2a9e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7f9a4d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="97:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f85d8479810"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f85d7afdb20"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f85d8490020"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f85d7afcd20"/></to>
    </wire>
    <wire loc="23:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f85d7afcd20"/></from>
      <to><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f85d7ae2310"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="syncDone" scoped="" ref="0x7f85d845d820"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <from><interface-ref name="sync" scoped="" ref="0x7f85d845e940"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f85d83e7c70"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d83dfd40"/></to>
    </wire>
    <wire loc="51:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f85d83dfd40"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d6d1a340"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <from><interface-ref name="Alarm32khz32" scoped="" ref="0x7f85d83de5f0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f85d6d1ab90"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f85d6d1a340"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d6d123d0"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f85d6d1ab90"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f85d6d0c020"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f85d6d123d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d6cf7ca0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f85d6d06780"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f85d6d12c20"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f85d6d12c20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f85d6cf65b0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f85d6d083d0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f85d82198c0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f85d82198c0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f85d81fccf0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d6cf2710"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d6cfc9d0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d6cfc9d0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d83b4cd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d6cf1da0"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d6cfa120"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d6cfa120"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d83aba40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d6cde0c0"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d6cf9440"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d6cf9440"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d83a83f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="58:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d83b4cd0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f85d8394cd0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerB" scoped="" ref="0x7f85d8394cd0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d833e260"/></to>
    </wire>
    <wire loc="59:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d83aba40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB0" scoped="" ref="0x7f85d83925a0"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB0" scoped="" ref="0x7f85d83925a0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f85d82dc6d0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d83a83f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB0" scoped="" ref="0x7f85d8391a20"/></to>
    </wire>
    <wire loc="140:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB0" scoped="" ref="0x7f85d8391a20"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f85d82dbac0"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d83b4cd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f85d8394cd0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d83aba40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB2" scoped="" ref="0x7f85d838cd40"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB2" scoped="" ref="0x7f85d838cd40"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f85d82cc220"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d83a83f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB2" scoped="" ref="0x7f85d838a160"/></to>
    </wire>
    <wire loc="154:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB2" scoped="" ref="0x7f85d838a160"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f85d82cb610"/></to>
    </wire>
    <wire loc="70:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d83b4cd0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f85d8394cd0"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d83aba40"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB3" scoped="" ref="0x7f85d8388020"/></to>
    </wire>
    <wire loc="161:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB3" scoped="" ref="0x7f85d8388020"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f85d82c46d0"/></to>
    </wire>
    <wire loc="72:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d83a83f0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB3" scoped="" ref="0x7f85d8387570"/></to>
    </wire>
    <wire loc="162:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB3" scoped="" ref="0x7f85d8387570"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f85d82c3ac0"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d83b4cd0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f85d8394cd0"/></to>
    </wire>
    <wire loc="75:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d83aba40"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB4" scoped="" ref="0x7f85d8385410"/></to>
    </wire>
    <wire loc="168:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB4" scoped="" ref="0x7f85d8385410"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f85d82bdb30"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d83a83f0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB4" scoped="" ref="0x7f85d8384890"/></to>
    </wire>
    <wire loc="169:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB4" scoped="" ref="0x7f85d8384890"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f85d82bb020"/></to>
    </wire>
    <wire loc="78:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d83b4cd0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f85d8394cd0"/></to>
    </wire>
    <wire loc="79:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d83aba40"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB5" scoped="" ref="0x7f85d83828c0"/></to>
    </wire>
    <wire loc="175:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB5" scoped="" ref="0x7f85d83828c0"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f85d82b4220"/></to>
    </wire>
    <wire loc="80:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d83a83f0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB5" scoped="" ref="0x7f85d8381d40"/></to>
    </wire>
    <wire loc="176:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB5" scoped="" ref="0x7f85d8381d40"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f85d82b3610"/></to>
    </wire>
    <wire loc="82:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d83b4cd0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f85d8394cd0"/></to>
    </wire>
    <wire loc="83:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d83aba40"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ControlB6" scoped="" ref="0x7f85d837fa50"/></to>
    </wire>
    <wire loc="182:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB6" scoped="" ref="0x7f85d837fa50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f85d82ad6d0"/></to>
    </wire>
    <wire loc="84:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d83a83f0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB6" scoped="" ref="0x7f85d837c020"/></to>
    </wire>
    <wire loc="183:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB6" scoped="" ref="0x7f85d837c020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f85d82acac0"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA2" scoped="" ref="0x7f85d8397a50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f85d82e3220"/></to>
    </wire>
    <wire loc="121:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA1" scoped="" ref="0x7f85d8399a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f85d82eacb0"/></to>
    </wire>
    <wire loc="163:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB3" scoped="" ref="0x7f85d83863e0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f85d82c27a0"/></to>
    </wire>
    <wire loc="120:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA1" scoped="" ref="0x7f85d839fbb0"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f85d82ea020"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB6" scoped="" ref="0x7f85d837cda0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f85d82ab7a0"/></to>
    </wire>
    <wire loc="112:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA0" scoped="" ref="0x7f85d83a3280"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f85d83386d0"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB1" scoped="" ref="0x7f85d838dda0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f85d82d2cb0"/></to>
    </wire>
    <wire loc="147:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareB1" scoped="" ref="0x7f85d838d020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f85d82d2020"/></to>
    </wire>
    <wire loc="146:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlB1" scoped="" ref="0x7f85d838fa50"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f85d82d4b30"/></to>
    </wire>
    <wire loc="128:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA2" scoped="" ref="0x7f85d8395da0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f85d82e12f0"/></to>
    </wire>
    <wire loc="170:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB4" scoped="" ref="0x7f85d8383890"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f85d82bbcb0"/></to>
    </wire>
    <wire loc="127:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA2" scoped="" ref="0x7f85d8395020"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f85d82e2610"/></to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="TimerA" scoped="" ref="0x7f85d83a7a30"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d83463e0"/></to>
    </wire>
    <wire loc="119:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="ControlA1" scoped="" ref="0x7f85d83a0730"/></from>
      <to><interface-ref name="Control" scoped="" ref="0x7f85d82ecb30"/></to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureA0" scoped="" ref="0x7f85d839a690"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f85d82f17a0"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB2" scoped="" ref="0x7f85d8389020"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f85d82ca2f0"/></to>
    </wire>
    <wire loc="113:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CompareA0" scoped="" ref="0x7f85d83a2700"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x7f85d82f2ac0"/></to>
    </wire>
    <wire loc="177:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB5" scoped="" ref="0x7f85d8380ae0"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f85d82b22f0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="CaptureB0" scoped="" ref="0x7f85d8390a20"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f85d82d97a0"/></to>
    </wire>
    <wire loc="107:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f85d83432f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f85d8344bf0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f85d8343940"/></from>
      <to><interface-ref name="VectorTimerA0" scoped="" ref="0x7f85d82a33f0"/></to>
    </wire>
    <wire loc="109:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f85d8342020"/></from>
      <to><interface-ref name="VectorTimerA1" scoped="" ref="0x7f85d82a3b80"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d82f0610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d83463e0"/></to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f85d82efc50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f85d8344bf0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d82e8b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d83463e0"/></to>
    </wire>
    <wire loc="123:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f85d82e62f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f85d8344bf0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d82e0160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d83463e0"/></to>
    </wire>
    <wire loc="130:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f85d82df7a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f85d8344bf0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Overflow" scoped="" ref="0x7f85d833c100"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f85d833da60"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX0" scoped="" ref="0x7f85d833c750"/></from>
      <to><interface-ref name="VectorTimerB0" scoped="" ref="0x7f85d82a2430"/></to>
    </wire>
    <wire loc="136:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="VectorTimerX1" scoped="" ref="0x7f85d833cda0"/></from>
      <to><interface-ref name="VectorTimerB1" scoped="" ref="0x7f85d82a2bc0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d82d8610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d833e260"/></to>
    </wire>
    <wire loc="143:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f85d82d7c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f85d833da60"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d82d1b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d833e260"/></to>
    </wire>
    <wire loc="150:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f85d82cf2f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f85d833da60"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d82c8160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d833e260"/></to>
    </wire>
    <wire loc="157:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f85d82c77a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f85d833da60"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d82c1610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d833e260"/></to>
    </wire>
    <wire loc="165:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f85d82c0c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f85d833da60"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d82b9b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d833e260"/></to>
    </wire>
    <wire loc="172:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f85d82b72f0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f85d833da60"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d82b1160"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d833e260"/></to>
    </wire>
    <wire loc="179:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f85d82b07a0"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f85d833da60"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d82aa610"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d833e260"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <from><interface-ref name="Event" scoped="" ref="0x7f85d82a8c50"/></from>
      <to><interface-ref name="Event" scoped="" ref="0x7f85d833da60"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f85d81de0f0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f85d82178e0"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f85d82178e0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f85d8210b80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d8202c50"/></from>
      <to><interface-ref name="TimerB" scoped="" ref="0x7f85d8394cd0"/></to>
    </wire>
    <wire loc="73:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f85d81929c0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f85d8180630"/></to>
    </wire>
    <wire loc="74:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f85d8191cf0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f85d817ab00"/></to>
    </wire>
    <wire loc="71:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f85d81943e0"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f85d818ba20"/></to>
    </wire>
    <wire loc="76:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f85d818e370"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f85d816f630"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d818ac50"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f85d882ad50"/></to>
    </wire>
    <wire loc="64:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d81842f0"/></from>
      <to><interface-ref name="Port42" scoped="" ref="0x7f85d87f1020"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d817f7a0"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f85d882c580"/></to>
    </wire>
    <wire loc="66:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d8179c60"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f85d8833cb0"/></to>
    </wire>
    <wire loc="67:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d81732f0"/></from>
      <to><interface-ref name="Port46" scoped="" ref="0x7f85d87e7020"/></to>
    </wire>
    <wire loc="68:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d816e7a0"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f85d87f48a0"/></to>
    </wire>
    <wire loc="69:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d8169c60"/></from>
      <to><interface-ref name="Port45" scoped="" ref="0x7f85d87ea8a0"/></to>
    </wire>
    <wire loc="63:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f85d8147700"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x7f85d8144c20"/></to>
    </wire>
    <wire loc="65:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f85d814a060"/></from>
      <to><interface-ref name="Interrupt" scoped="" ref="0x7f85d7fdfb70"/></to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d8131760"/></from>
      <to><interface-ref name="ControlB1" scoped="" ref="0x7f85d838fa50"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="Msp430Capture" scoped="" ref="0x7f85d8130a80"/></from>
      <to><interface-ref name="CaptureB1" scoped="" ref="0x7f85d838dda0"/></to>
    </wire>
    <wire loc="55:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="GeneralIO" scoped="" ref="0x7f85d812f930"/></from>
      <to><interface-ref name="Port41" scoped="" ref="0x7f85d87f48a0"/></to>
    </wire>
    <wire loc="60:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f85d7fed2f0"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f85d811c020"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port14" scoped="" ref="0x7f85d811c020"/></from>
      <to><interface-ref name="Port14" scoped="" ref="0x7f85d81053f0"/></to>
    </wire>
    <wire loc="61:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <from><interface-ref name="HplInterrupt" scoped="" ref="0x7f85d7fde7a0"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f85d811f3d0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port10" scoped="" ref="0x7f85d811f3d0"/></from>
      <to><interface-ref name="Port10" scoped="" ref="0x7f85d810c7a0"/></to>
    </wire>
    <wire loc="82:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port26" scoped="" ref="0x7f85d81103f0"/></from>
      <to><interface-ref name="Port26" scoped="" ref="0x7f85d80f93f0"/></to>
    </wire>
    <wire loc="73:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port17" scoped="" ref="0x7f85d8119a30"/></from>
      <to><interface-ref name="Port17" scoped="" ref="0x7f85d8102d50"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port21" scoped="" ref="0x7f85d8116020"/></from>
      <to><interface-ref name="Port21" scoped="" ref="0x7f85d80ff3f0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port12" scoped="" ref="0x7f85d8125a30"/></from>
      <to><interface-ref name="Port12" scoped="" ref="0x7f85d8108d50"/></to>
    </wire>
    <wire loc="80:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port24" scoped="" ref="0x7f85d8113a30"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f85d80fcd50"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port15" scoped="" ref="0x7f85d811b3f0"/></from>
      <to><interface-ref name="Port15" scoped="" ref="0x7f85d8104710"/></to>
    </wire>
    <wire loc="83:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port27" scoped="" ref="0x7f85d810e710"/></from>
      <to><interface-ref name="Port27" scoped="" ref="0x7f85d80f8710"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port22" scoped="" ref="0x7f85d81153f0"/></from>
      <to><interface-ref name="Port22" scoped="" ref="0x7f85d80fe710"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port13" scoped="" ref="0x7f85d811ed50"/></from>
      <to><interface-ref name="Port13" scoped="" ref="0x7f85d8106020"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port25" scoped="" ref="0x7f85d8111020"/></from>
      <to><interface-ref name="Port25" scoped="" ref="0x7f85d80fa100"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port16" scoped="" ref="0x7f85d811a710"/></from>
      <to><interface-ref name="Port16" scoped="" ref="0x7f85d8103a30"/></to>
    </wire>
    <wire loc="76:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port20" scoped="" ref="0x7f85d8118d50"/></from>
      <to><interface-ref name="Port20" scoped="" ref="0x7f85d8100020"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port11" scoped="" ref="0x7f85d8126710"/></from>
      <to><interface-ref name="Port11" scoped="" ref="0x7f85d8109a30"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <from><interface-ref name="Port23" scoped="" ref="0x7f85d8114710"/></from>
      <to><interface-ref name="Port23" scoped="" ref="0x7f85d80fda30"/></to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f85d7b84160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d7b78880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f85d7b6f0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f85d7b760a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f85d7b64500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f85d7b66500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f85d7b82490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f85d7b6c880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f85d7b67500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f85d7b72880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f85d7b730a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7b86a90"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7f99350"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7f99350"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7f91660"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f85d7b81e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f85d7b80490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f85d7b6bc80"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f85d7b80be0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f85d7b67ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f85d7b6c0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f85d7b7b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f85d7b6d0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f85d7b6f880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f85d7b6d880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f85d7b65ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f85d7b66ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f85d7b73880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f85d7b6e0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f85d7b68ce0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f85d7b75880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f85d7b64ce0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f85d7f982c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f85d7b85480"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f85d7b7e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f85d7b7a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f85d7b710a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f85d7b71880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7b780a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f85d7b7f2f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f85d7b7e020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f85d7b817b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f85d7b6a500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f85d7b65500"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f85d7b720a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f85d7b6e880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f85d7b84e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f85d7b740a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f85d7b7f940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f85d7b74880"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f85d7b6b0a0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f85d7b639b0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f85d7f982c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Fifo" scoped="" ref="0x7f85d7f982c0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f85d7f8f890"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f8eba0"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f8da30"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d7f9a4d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7f90510"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f8b8b0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="WorkingState" scoped="" ref="0x7f85d7f7fb40"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f85d7f20770"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f85d7f20770"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f85d7f1b1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f85d7f8a060"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7efec40"/></to>
    </wire>
    <wire loc="52:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d7efec40"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d6a93a00"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f85d7f87c70"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f85d7efd8f0"/></to>
    </wire>
    <wire loc="53:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f85d7efd8f0"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f85d6a91020"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f85d7f7f2e0"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f85d7baf020"/></to>
    </wire>
    <wire loc="54:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f85d7baf020"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f85d6a90120"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f85d7f88a70"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f85d88745f0"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <from><interface-ref name="grant" scoped="" ref="0x7f85d7f7bbd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/system/StateImplC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f85d7f1b1d0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f85d7f17b70"/></to>
    </wire>
    <wire loc="110:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f85d6a90120"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f85d7e94850"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="106:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f85d6a91020"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f85d7e97110"/></to>
    </wire>
    <wire loc="105:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d6a93a00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7e9dd80"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="114:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d6a92760"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d6a872c0"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d6a872c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d7d182c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiByte" scoped="" ref="0x7f85d7e97110"/></from>
      <to><interface-ref name="SpiByte" scoped="" ref="0x7f85d7e1ca10"/></to>
    </wire>
    <wire loc="108:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f85d6a91630"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f85d7e97790"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="FastSpiByte" scoped="" ref="0x7f85d7e97790"/></from>
      <to><interface-ref name="FastSpiByte" scoped="" ref="0x7f85d7e1b060"/></to>
    </wire>
    <wire loc="111:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f85d7e92a40"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f85d6a908c0"/></to>
    </wire>
    <wire loc="115:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d6a78760"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7e958e0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="116:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f85d7e93690"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d6a89640"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d6a89640"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7d19020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="117:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f85d7e8eb40"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f85d6a82c10"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f85d6a82c10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f85d7d1b4d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7e958e0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7e1c250"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="SpiPacket" scoped="" ref="0x7f85d7e94850"/></from>
      <to><interface-ref name="SpiPacket" scoped="" ref="0x7f85d7e1bc50"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d7e9dd80"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7e1d470"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f85d7e183e0"/></from>
      <to><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f85d7e92a40"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f85d7e195b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f85d7e93690"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f85d7e13480"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f85d7e8eb40"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f85d7e18a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f85d7e09020"/></to>
    </wire>
    <wire loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f85d7e09020"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f85d7dff700"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f85d7e13c20"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f85d88745f0"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <from><interface-ref name="signalDone_task" scoped="" ref="0x7f85d7e112f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f85d7e012c0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f85d7dfac20"/></to>
    </wire>
    <wire loc="86:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f85d7e05d10"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f85d7dfa2d0"/></to>
    </wire>
    <wire loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f85d7dcbbb0"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f85d87b7bc0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f85d7dc83e0"/></from>
      <to><interface-ref name="SOMI0" scoped="" ref="0x7f85d87b43f0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f85d7dc6bb0"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f85d87b2bc0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f85d7dc33e0"/></from>
      <to><interface-ref name="URXD0" scoped="" ref="0x7f85d87adbc0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f85d7dc1bb0"/></from>
      <to><interface-ref name="UTXD0" scoped="" ref="0x7f85d87af3f0"/></to>
    </wire>
    <wire loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplI2C" scoped="" ref="0x7f85d7dd1d10"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f85d7c6ed40"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f85d6a81440"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f85d7d1a3f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f85d6a81a50"/></from>
      <to><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f85d7c75020"/></to>
    </wire>
    <wire loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f85d7c75020"/></from>
      <to><interface-ref name="HplI2C" scoped="" ref="0x7f85d7c6ed40"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f85d6a862b0"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f85d7e09020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d6a87a60"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7d18ad0"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7d18ad0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7c81e80"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7d178a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d6a78760"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d7d182c0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d7c82a60"/></to>
    </wire>
    <wire loc="81:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d7c82a60"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d6a0e6c0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f85d7d1b4d0"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f85d7d14d60"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d7d19020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7c83ca0"/></to>
    </wire>
    <wire loc="80:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d7c83ca0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d6a0f850"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="I2CInterrupts" scoped="" ref="0x7f85d7d1a3f0"/></from>
      <to><interface-ref name="I2CInterrupts" scoped="" ref="0x7f85d7d13710"/></to>
    </wire>
    <wire loc="83:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7c81e80"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d6a0da70"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7c80790"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7d178a0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7d02bf0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7c81e80"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f85d7d13d80"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f85d7e05d10"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <from><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f85d7d025e0"/></from>
      <to><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f85d7e012c0"/></to>
    </wire>
    <wire loc="82:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d7c81270"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d6a0ee40"/></to>
    </wire>
    <wire loc="84:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d6a0c9d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7c80790"/></to>
    </wire>
    <wire loc="85:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f85d6a0c2d0"/></from>
      <to><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f85d7c7f020"/></to>
    </wire>
    <wire loc="87:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f85d6a0b2b0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f85d6a12630"/></to>
    </wire>
    <wire loc="155:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f85d6a08480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="HplUsart" scoped="" ref="0x7f85d7c65bb0"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f85d7dff700"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f85d7c60700"/></from>
      <to><interface-ref name="SIMO0" scoped="" ref="0x7f85d87b7bc0"/></to>
    </wire>
    <wire loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f85d7c5ee40"/></from>
      <to><interface-ref name="UCLK0" scoped="" ref="0x7f85d87b2bc0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f85d7b49c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f85d7b54da0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f85d7b4db50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d7b47670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f85d7b40e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f85d7b47e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f85d7b332f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f85d7b362f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f85d7b52120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f85d7b3b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f85d7b372f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f85d7b4cc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f85d7b4bc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f85d7b41670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f85d7b44e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f85d7b46670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7b55760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7f99350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f85d7b51aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f85d7b4f120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f85d7b3aa70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f85d7b4f870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f85d7b37ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f85d7b52dc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f85d7b3ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f85d7b4b480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7b4c480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f85d7b54750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f85d7b3ee50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f85d7b3f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f85d7b3c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f85d7b34ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f85d7b36ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f85d7b42670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f85d7b3fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f85d7b38ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f85d7b45670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f85d7b33ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f85d7f982c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f85d7b54100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f85d7b4d370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f85d7b49480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f85d7b41e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f85d7b46e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f85d7b40670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f85d7b48670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f85d7b53450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7b48e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f85d7b4e020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f85d7b4ecc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f85d7b382f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f85d7b39ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f85d7b51450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f85d7b392f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f85d7b342f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f85d7b42e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f85d7b3e670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f85d7b53aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f85d7b52770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f85d7b45e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f85d7b4e670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f85d7b44670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f85d7b3be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f85d7b327a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f85d7f982c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f85d7b1dc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f85d7b28da0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f85d7b20b50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d7b1b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f85d7b13e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f85d7b1be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f85d7b072f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f85d7b092f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f85d7b25120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f85d7b0f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f85d7b0a2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f85d7b1fc60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f85d7b1ec60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f85d7b15670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f85d7b17e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f85d7b19670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7b29760"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7f99350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f85d7b24aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f85d7b23120"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f85d7b0ea70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f85d7b23870"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f85d7b0aad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f85d7b25dc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f85d7b10e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f85d7b1e480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7b1f480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f85d7b28750"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f85d7b11e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f85d7b12670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f85d7b10670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f85d7b08ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f85d7b09ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f85d7b16670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f85d7b12e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f85d7b0bad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f85d7b18670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f85d7b07ad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f85d7f982c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f85d7b28100"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f85d7b20370"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f85d7b1d480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f85d7b15e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f85d7b19e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f85d7b13670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f85d7b1c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f85d7b26450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7b1ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f85d7b22020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f85d7b22cc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f85d7b0b2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f85d7b0dad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f85d7b24450"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f85d7b0d2f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f85d7b082f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f85d7b16e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f85d7b11670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f85d7b26aa0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f85d7b25770"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f85d7b18e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f85d7b22670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f85d7b17670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f85d7b0fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f85d7b057a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f85d7f982c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="21:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f85d7adf880"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f85d7ad4020"/></to>
    </wire>
    <wire loc="20:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="ReadId48" scoped="" ref="0x7f85d7ad4020"/></from>
      <to><interface-ref name="ReadId48" scoped="" ref="0x7f85d7acf140"/></to>
    </wire>
    <wire loc="16:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f85d7acabd0"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f85d7ad3c50"/></to>
    </wire>
    <wire loc="21:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="OneWire" scoped="" ref="0x7f85d7ad3c50"/></from>
      <to><interface-ref name="OneWire" scoped="" ref="0x7f85d7ab6150"/></to>
    </wire>
    <wire loc="17:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="PowerControl" scoped="" ref="0x7f85d7ace530"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f85d7a601b0"/></to>
    </wire>
    <wire loc="18:../../../tos/chips/ds2411/Ds2411C.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f85d7aba540"/></from>
      <to><interface-ref name="Gpio" scoped="" ref="0x7f85d7abb590"/></to>
    </wire>
    <wire loc="11:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="Gpio" scoped="" ref="0x7f85d7abb590"/></from>
      <to><interface-ref name="GeneralIO" scoped="" ref="0x7f85d7a699e0"/></to>
    </wire>
    <wire loc="18:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f85d7ab1950"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f85d7ab8ca0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x7f85d7ab8ca0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x7f85d7a8ea90"/></to>
    </wire>
    <wire loc="19:../../../tos/lib/onewire/OneWireMasterC.nc">
      <from><interface-ref name="Pin" scoped="" ref="0x7f85d7ab69f0"/></from>
      <to><interface-ref name="Pin" scoped="" ref="0x7f85d7aba540"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f85d7a7d020"/></from>
      <to><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f85d7a77530"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f85d7a77530"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f85d7a73e50"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d7a70020"/></from>
      <to><interface-ref name="TimerA" scoped="" ref="0x7f85d83a7a30"/></to>
    </wire>
    <wire loc="9:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <from><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d7a68c50"/></from>
      <to><interface-ref name="Port24" scoped="" ref="0x7f85d8816d50"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="EnergyIndicator" scoped="" ref="0x7f85d7a4d990"/></from>
      <to><interface-ref name="EnergyIndicator" scoped="" ref="0x7f85d7a40900"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ByteIndicator" scoped="" ref="0x7f85d7a4f150"/></from>
      <to><interface-ref name="ByteIndicator" scoped="" ref="0x7f85d7a3f0f0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="BackoffTimer" scoped="" ref="0x7f85d7a3fae0"/></from>
      <to><interface-ref name="Alarm32khz32" scoped="" ref="0x7f85d83e4690"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CCA" scoped="" ref="0x7f85d7a33500"/></from>
      <to><interface-ref name="CCA" scoped="" ref="0x7f85d81943e0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f85d7a2d820"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f85d8193690"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFD" scoped="" ref="0x7f85d7a2bb40"/></from>
      <to><interface-ref name="SFD" scoped="" ref="0x7f85d818e370"/></to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CaptureSFD" scoped="" ref="0x7f85d7a34880"/></from>
      <to><interface-ref name="CaptureSFD" scoped="" ref="0x7f85d8147700"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f85d7a29020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d798ec30"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d798ec30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7f9a4d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7a29d10"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d798d8f0"/></to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d798d8f0"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7f99350"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f85d7a266d0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f85d798c2f0"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f85d798c2f0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f85d7a26de0"/></from>
      <to><interface-ref name="STXON" scoped="" ref="0x7f85d798bcc0"/></to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f85d798bcc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f85d7a25530"/></from>
      <to><interface-ref name="STXONCCA" scoped="" ref="0x7f85d7989370"/></to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f85d7989370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f85d7a25c60"/></from>
      <to><interface-ref name="SFLUSHTX" scoped="" ref="0x7f85d7988d00"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f85d7988d00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f85d7a27e00"/></from>
      <to><interface-ref name="TXCTRL" scoped="" ref="0x7f85d7982c60"/></to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f85d7982c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f85d7a28780"/></from>
      <to><interface-ref name="TXFIFO" scoped="" ref="0x7f85d79697a0"/></to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f85d79697a0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f85d7f982c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f85d7a27550"/></from>
      <to><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f85d796e2f0"/></to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f85d796e2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7a243e0"/></from>
      <to><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7983480"/></to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7983480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7a235e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7980e50"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7980e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d7a22020"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d797f670"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d797f670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="89:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f85d7a24e80"/></from>
      <to><interface-ref name="STXENC" scoped="" ref="0x7f85d79867b0"/></to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f85d79867b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="90:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f85d7a219c0"/></from>
      <to><interface-ref name="TXNONCE" scoped="" ref="0x7f85d796cad0"/></to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f85d796cad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="91:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f85d7a22890"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f85d796d2f0"/></to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f85d796d2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="92:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f85d7a21130"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f85d796dad0"/></to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f85d796dad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="95:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f85d7a1bd40"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f85d795ddf0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Receive" scoped="" ref="0x7f85d795ddf0"/></from>
      <to><interface-ref name="CC2420Receive" scoped="" ref="0x7f85d7955550"/></to>
    </wire>
    <wire loc="98:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d7a3bd00"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d78d7670"/></to>
    </wire>
    <wire loc="99:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d7a3abb0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d78d30c0"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f85d7a39950"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f85d78d2550"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f85d7a2ebe0"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f85d78ca480"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f85d78ca480"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f85d78bc8b0"/></to>
    </wire>
    <wire loc="104:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f85d7a1e6c0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f85d88745f0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f85d7981c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f85d798b020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f85d7984c70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f85d7977e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f85d797fe50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f85d796b2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f85d7973670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f85d7983c60"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f85d7979670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f85d797be50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f85d797d670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f85d7987370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f85d7972a70"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f85d7987ac0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f85d796ead0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f85d7988060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f85d7974e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f85d7982480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f85d798c940"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f85d7975e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f85d7976670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f85d7974670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f85d797a670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f85d7976e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f85d796fad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f85d797c670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f85d796bad0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f85d7f982c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f85d7984490"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f85d7981480"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f85d7979e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f85d797de50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f85d7977670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f85d7980670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f85d798b670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f85d7986160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f85d7986e00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f85d796f2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f85d7971ad0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f85d79886b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f85d79712f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f85d796c2f0"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f85d797ae50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f85d7975670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f85d79899c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f85d797ce50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f85d797b670"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f85d7973e50"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketIndicator" scoped="" ref="0x7f85d7959020"/></from>
      <to><interface-ref name="PacketIndicator" scoped="" ref="0x7f85d79547c0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f85d793f150"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f85d88745f0"/></to>
    </wire>
    <wire loc="68:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CSN" scoped="" ref="0x7f85d7953020"/></from>
      <to><interface-ref name="CSN" scoped="" ref="0x7f85d8193690"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFO" scoped="" ref="0x7f85d7952380"/></from>
      <to><interface-ref name="FIFO" scoped="" ref="0x7f85d81929c0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="FIFOP" scoped="" ref="0x7f85d79516b0"/></from>
      <to><interface-ref name="FIFOP" scoped="" ref="0x7f85d8191cf0"/></to>
    </wire>
    <wire loc="71:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f85d7950a50"/></from>
      <to><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f85d814a060"/></to>
    </wire>
    <wire loc="72:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SpiResource" scoped="" ref="0x7f85d794f6e0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7741250"/></to>
    </wire>
    <wire loc="126:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d7741250"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7f9a4d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="73:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f85d794e530"/></from>
      <to><interface-ref name="RXFIFO" scoped="" ref="0x7f85d771d120"/></to>
    </wire>
    <wire loc="195:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO" scoped="" ref="0x7f85d771d120"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f85d7f982c0"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="74:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f85d794dad0"/></from>
      <to><interface-ref name="SFLUSHRX" scoped="" ref="0x7f85d773cd00"/></to>
    </wire>
    <wire loc="137:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHRX" scoped="" ref="0x7f85d773cd00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="75:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f85d794d3a0"/></from>
      <to><interface-ref name="SACK" scoped="" ref="0x7f85d773b9c0"/></to>
    </wire>
    <wire loc="139:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACK" scoped="" ref="0x7f85d773b9c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="76:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d794c330"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d78d7670"/></to>
    </wire>
    <wire loc="77:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d794b1e0"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d78d30c0"/></to>
    </wire>
    <wire loc="78:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f85d7948d70"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f85d78d2550"/></to>
    </wire>
    <wire loc="79:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="CC2420Config" scoped="" ref="0x7f85d794bb90"/></from>
      <to><interface-ref name="CC2420Config" scoped="" ref="0x7f85d84a1b80"/></to>
    </wire>
    <wire loc="81:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d79433e0"/></from>
      <to><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7732500"/></to>
    </wire>
    <wire loc="155:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7732500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:25">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="82:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d7943cb0"/></from>
      <to><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d7732ce0"/></to>
    </wire>
    <wire loc="156:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d7732ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:26">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="83:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f85d7945b10"/></from>
      <to><interface-ref name="SRXDEC" scoped="" ref="0x7f85d773a7b0"/></to>
    </wire>
    <wire loc="141:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXDEC" scoped="" ref="0x7f85d773a7b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="84:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f85d79416d0"/></from>
      <to><interface-ref name="RXNONCE" scoped="" ref="0x7f85d771f900"/></to>
    </wire>
    <wire loc="192:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXNONCE" scoped="" ref="0x7f85d771f900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:272">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="85:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f85d7942590"/></from>
      <to><interface-ref name="KEY0" scoped="" ref="0x7f85d7721900"/></to>
    </wire>
    <wire loc="188:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY0" scoped="" ref="0x7f85d7721900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:256">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="86:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f85d7942e00"/></from>
      <to><interface-ref name="KEY1" scoped="" ref="0x7f85d7720120"/></to>
    </wire>
    <wire loc="189:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="KEY1" scoped="" ref="0x7f85d7720120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:304">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="87:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f85d7940020"/></from>
      <to><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f85d7721120"/></to>
    </wire>
    <wire loc="187:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f85d7721120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:128">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="88:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f85d79408b0"/></from>
      <to><interface-ref name="SNOP" scoped="" ref="0x7f85d7740990"/></to>
    </wire>
    <wire loc="129:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SNOP" scoped="" ref="0x7f85d7740990"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <from><interface-ref name="receiveDone_task" scoped="" ref="0x7f85d79339d0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f85d7865a60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f85d82198c0"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTime32khz" scoped="" ref="0x7f85d78b6820"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f85d7866790"/></to>
    </wire>
    <wire loc="69:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f85d78b8b80"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f85d784f610"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x7f85d784f610"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x7f85d7764a20"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f85d78541d0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d77738e0"/></to>
    </wire>
    <wire loc="63:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d77738e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d6868bc0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f85d78563a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d7820020"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f85d7820020"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d68d99d0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f85d776b020"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x7f85d77f32f0"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f85d77ee850"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f85d7820870"/></to>
    </wire>
    <wire loc="53:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f85d7820870"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f85d68d25f0"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f85d7763d20"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f85d783fb70"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f85d783fb70"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f85d7837610"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f85d68d99d0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d68bc360"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="AlarmFrom" scoped="" ref="0x7f85d68ccd20"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f85d68d8260"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x7f85d68d8260"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x7f85d68bcbf0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f85d68cf9b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f85d783fb70"/></to>
    </wire>
    <wire loc="54:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d68b7dd0"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d68c2020"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d68c2020"/></from>
      <to><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d83b4cd0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d68b5440"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d68c1760"/></to>
    </wire>
    <wire loc="50:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d68c1760"/></from>
      <to><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d83aba40"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d68b3760"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d68c0a80"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <from><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d68c0a80"/></from>
      <to><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d83a83f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x7f85d7834b90"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f85d82178e0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <from><interface-ref name="fired" scoped="" ref="0x7f85d77ea9c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="64:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x7f85d6861180"/></from>
      <to><interface-ref name="TimerFrom" scoped="" ref="0x7f85d776b020"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="TimeSkew" scoped="" ref="0x7f85d685b8b0"/></from>
      <to><interface-ref name="TimeSkew" scoped="" ref="0x7f85d7766450"/></to>
    </wire>
    <wire loc="68:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <from><interface-ref name="Platform" scoped="" ref="0x7f85d685c410"/></from>
      <to><interface-ref name="Platform" scoped="" ref="0x7f85d8a3ab60"/></to>
    </wire>
    <wire loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x7f85d685a020"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:../../../tos/system/TimerMilliC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x7f85d775ace0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f85d7751610"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="54:../../../tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x7f85d7751610"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x7f85d78541d0"/></to>
    </wire>
    <wire loc="153:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL1" scoped="" ref="0x7f85d77342f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:23">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="131:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXCAL" scoped="" ref="0x7f85d773e670"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="147:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL0" scoped="" ref="0x7f85d77372f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="170:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST0" scoped="" ref="0x7f85d772a500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:39">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="157:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="BATTMON" scoped="" ref="0x7f85d7731500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:27">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="134:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXONCCA" scoped="" ref="0x7f85d773d9c0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="177:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="DACTST" scoped="" ref="0x7f85d7727ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:46">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f85d7722900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RSSI" scoped="" ref="0x7f85d77362f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="151:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXCTRL" scoped="" ref="0x7f85d77352f0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="167:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST0" scoped="" ref="0x7f85d772dce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:36">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="163:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANAND" scoped="" ref="0x7f85d772e500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:33">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG0" scoped="" ref="0x7f85d7731ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:28">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="125:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7740020"/></from>
      <to><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7f99350"/></to>
    </wire>
    <wire loc="138:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SFLUSHTX" scoped="" ref="0x7f85d773b370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f85d7724120"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SACKPEND" scoped="" ref="0x7f85d773a160"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="136:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCOFF" scoped="" ref="0x7f85d773c6b0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="176:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="ADCTST" scoped="" ref="0x7f85d7727500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:45">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="150:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SYNCWORD" scoped="" ref="0x7f85d7736ad0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="148:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7737ad0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="130:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SXOSCON" scoped="" ref="0x7f85d773e020"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="174:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXBPFTST" scoped="" ref="0x7f85d7728500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:43">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="171:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST1" scoped="" ref="0x7f85d772ace0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:40">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMSTATE" scoped="" ref="0x7f85d7728ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:44">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXNONCE" scoped="" ref="0x7f85d771f120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:320">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="164:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANOR" scoped="" ref="0x7f85d772ece0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:34">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST2" scoped="" ref="0x7f85d7729500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:41">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="185:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SHORTADR" scoped="" ref="0x7f85d7722120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:362">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDL" scoped="" ref="0x7f85d7730ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:30">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="146:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MAIN" scoped="" ref="0x7f85d7738ae0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="152:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXCTRL0" scoped="" ref="0x7f85d7735ad0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="168:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST1" scoped="" ref="0x7f85d772b500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:37">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="159:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IOCFG1" scoped="" ref="0x7f85d7730500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:29">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="169:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCTST2" scoped="" ref="0x7f85d772bce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:38">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="154:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSCTRL" scoped="" ref="0x7f85d7734cd0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:24">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="132:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRXON" scoped="" ref="0x7f85d773ecc0"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="143:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SAES" scoped="" ref="0x7f85d7738490"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="PANID" scoped="" ref="0x7f85d7723900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:360">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="183:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="IEEEADR" scoped="" ref="0x7f85d7723120"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:352">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="180:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f85d7724900"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:63">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="190:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SABUF" scoped="" ref="0x7f85d7720900"/></from>
      <to><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/>
      <arguments>
        <value cst="I:288">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="165:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="AGCCTRL" scoped="" ref="0x7f85d772d500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:35">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="173:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSTST3" scoped="" ref="0x7f85d7729ce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:42">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="133:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXON" scoped="" ref="0x7f85d773d370"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="135:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="SRFOFF" scoped="" ref="0x7f85d773c060"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="MANFIDH" scoped="" ref="0x7f85d772f500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:31">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="142:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="STXENC" scoped="" ref="0x7f85d773ae00"/></from>
      <to><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="162:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="FSMTC" scoped="" ref="0x7f85d772fce0"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:32">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TOPTST" scoped="" ref="0x7f85d7726500"/></from>
      <to><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/>
      <arguments>
        <value cst="I:47">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <from><interface-ref name="TXFIFO" scoped="" ref="0x7f85d771ddb0"/></from>
      <to><interface-ref name="Fifo" scoped="" ref="0x7f85d7f982c0"/>
      <arguments>
        <value cst="I:62">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x7f85d76f1920"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x7f85d76e9940"/></to>
    </wire>
    <wire loc="54:../../../tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f85d76f7990"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d76e9080"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f85d76cce60"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f85d76d0020"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f85d76cbae0"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f85d76cd690"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f85d76cd690"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f85d7f1b1d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x7f85d76ca8f0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x7f85d76f2a20"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d76c9170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d78d30c0"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="DuplicateReceive" scoped="" ref="0x7f85d76b2200"/></from>
      <to><interface-ref name="DuplicateReceive" scoped="" ref="0x7f85d76ae570"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f85d76ad3f0"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f85d76b2950"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d76ada70"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d78d30c0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f85d7674d70"/></from>
      <to><interface-ref name="SubSend" scoped="" ref="0x7f85d767e6b0"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f85d7673b10"/></from>
      <to><interface-ref name="SubReceive" scoped="" ref="0x7f85d767e020"/></to>
    </wire>
    <wire loc="100:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d76722f0"/></from>
      <to><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d78d7670"/></to>
    </wire>
    <wire loc="101:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d7671170"/></from>
      <to><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d78d30c0"/></to>
    </wire>
    <wire loc="102:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f85d7671b70"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f85d7624410"/></to>
    </wire>
    <wire loc="184:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <from><interface-ref name="grantTask" scoped="" ref="0x7f85d7645db0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <from><interface-ref name="SendState" scoped="" ref="0x7f85d7617800"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f85d7613580"/></to>
    </wire>
    <wire loc="74:../../../tos/system/StateC.nc">
      <from><interface-ref name="State" scoped="" ref="0x7f85d7613580"/></from>
      <to><interface-ref name="State" scoped="" ref="0x7f85d7f1b1d0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d75ff1c0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d852e020"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x7f85d74e38d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x7f85d74d62f0"/></to>
    </wire>
    <wire loc="67:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d75471a0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d74e9720"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x7f85d74e3280"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x7f85d74d9c70"/></to>
    </wire>
    <wire loc="60:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f85d74dedc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f85d7547b20"/></to>
    </wire>
    <wire loc="69:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x7f85d74e8120"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f85d74e0480"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x7f85d74e8d70"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d74e1940"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f85d74de4a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x7f85d71c4a30"/></to>
    </wire>
    <wire loc="64:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f85d74e0480"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f85d73a5830"/></to>
    </wire>
    <wire loc="65:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x7f85d74e1940"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x7f85d73a5110"/></to>
    </wire>
    <wire loc="66:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x7f85d73a4760"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f85d74de4a0"/></to>
    </wire>
    <wire loc="70:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f85d74d38e0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f85d74dedc0"/></to>
    </wire>
    <wire loc="71:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f85d73a1590"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f85d74dedc0"/></to>
    </wire>
    <wire loc="72:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f85d7399cc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f85d74dedc0"/></to>
    </wire>
    <wire loc="74:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f85d73a30e0"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f85d74cc5c0"/></to>
    </wire>
    <wire loc="75:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x7f85d73a39d0"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x7f85d74cf130"/></to>
    </wire>
    <wire loc="77:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x7f85d74c68e0"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x7f85d739db60"/></to>
    </wire>
    <wire loc="78:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x7f85d74c5060"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f85d7373080"/></to>
    </wire>
    <wire loc="17:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x7f85d7373080"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x7f85d71d7080"/></to>
    </wire>
    <wire loc="80:../../../tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f85d7390d20"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f85d7373890"/></to>
    </wire>
    <wire loc="13:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f85d7373890"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f85d71dd440"/></to>
    </wire>
    <wire loc="332:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x7f85d746fe40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x7f85d74a6d10"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x7f85d7471400"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:../../../tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f85d746a0c0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="receiveTask" scoped="" ref="0x7f85d73a0c50"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <from><interface-ref name="signalSendDone" scoped="" ref="0x7f85d739f480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="14:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f85d7371020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f85d71dc440"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f85d71dc440"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f85d735c020"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f85d71dd440"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f85d735f860"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="18:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f85d71db020"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f85d71d78e0"/></to>
    </wire>
    <wire loc="19:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d71d5020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d71de020"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d71de020"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d73617a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d71dec70"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d675aa90"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d675aa90"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d7221510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f85d735a450"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f85d71db020"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d6754be0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7360a30"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f85d735b1d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d675be00"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d675be00"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7222280"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="68:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f85d73591d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f85d6754440"/></to>
    </wire>
    <wire loc="63:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f85d6754440"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f85d7224510"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7360a30"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d72eedc0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x7f85d735c020"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x7f85d72eb890"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x7f85d735f860"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x7f85d72ec6d0"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d73617a0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d72ee020"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f85d72e93e0"/></from>
      <to><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f85d735a450"/></to>
    </wire>
    <wire loc="60:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartResource" scoped="" ref="0x7f85d72ea5b0"/></from>
      <to><interface-ref name="UsartResource" scoped="" ref="0x7f85d735b1d0"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="UsartInterrupts" scoped="" ref="0x7f85d72e45b0"/></from>
      <to><interface-ref name="UsartInterrupts" scoped="" ref="0x7f85d73591d0"/></to>
    </wire>
    <wire loc="64:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Usart" scoped="" ref="0x7f85d72e9a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f85d72d4d30"/></to>
    </wire>
    <wire loc="88:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f85d72d4d30"/></from>
      <to><interface-ref name="Usart" scoped="" ref="0x7f85d72cd3c0"/></to>
    </wire>
    <wire loc="67:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f85d72e3020"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x7f85d723e7c0"/></to>
    </wire>
    <wire loc="49:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x7f85d723e7c0"/></from>
      <to><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f85d82178e0"/></to>
    </wire>
    <wire loc="70:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x7f85d72e0120"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x7f85d88745f0"/></to>
    </wire>
    <wire loc="89:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f85d72d1860"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f85d72c8020"/></to>
    </wire>
    <wire loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f85d72d4500"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f85d72d09c0"/></to>
    </wire>
    <wire loc="91:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SIMO" scoped="" ref="0x7f85d72c88f0"/></from>
      <to><interface-ref name="SIMO1" scoped="" ref="0x7f85d87a8bc0"/></to>
    </wire>
    <wire loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="SOMI" scoped="" ref="0x7f85d72c5020"/></from>
      <to><interface-ref name="SOMI1" scoped="" ref="0x7f85d87a53f0"/></to>
    </wire>
    <wire loc="93:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UCLK" scoped="" ref="0x7f85d72c3890"/></from>
      <to><interface-ref name="UCLK1" scoped="" ref="0x7f85d87a3bc0"/></to>
    </wire>
    <wire loc="94:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="URXD" scoped="" ref="0x7f85d72c0020"/></from>
      <to><interface-ref name="URXD1" scoped="" ref="0x7f85d879ebc0"/></to>
    </wire>
    <wire loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <from><interface-ref name="UTXD" scoped="" ref="0x7f85d72be890"/></from>
      <to><interface-ref name="UTXD1" scoped="" ref="0x7f85d87a03f0"/></to>
    </wire>
    <wire loc="66:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f85d6759a50"/></from>
      <to><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f85d72d4d30"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d67592b0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7221d20"/></to>
    </wire>
    <wire loc="58:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7221d20"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7214060"/></to>
    </wire>
    <wire loc="61:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7220af0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d6754be0"/></to>
    </wire>
    <wire loc="56:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d7221510"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d7216bd0"/></to>
    </wire>
    <wire loc="81:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d7216bd0"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d66ea6c0"/></to>
    </wire>
    <wire loc="51:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Interrupts" scoped="" ref="0x7f85d7224510"/></from>
      <to><interface-ref name="Interrupts" scoped="" ref="0x7f85d721e230"/></to>
    </wire>
    <wire loc="55:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d7222280"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d7217e30"/></to>
    </wire>
    <wire loc="80:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x7f85d7217e30"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x7f85d66eb850"/></to>
    </wire>
    <wire loc="83:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7214060"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d66e9a70"/></to>
    </wire>
    <wire loc="52:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="RawInterrupts" scoped="" ref="0x7f85d721d2f0"/></from>
      <to><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f85d72d1860"/></to>
    </wire>
    <wire loc="57:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7214950"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7220af0"/></to>
    </wire>
    <wire loc="59:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d721b120"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7214060"/></to>
    </wire>
    <wire loc="62:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d720ed50"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d7215400"/></to>
    </wire>
    <wire loc="82:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d7215400"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d66eae40"/></to>
    </wire>
    <wire loc="65:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f85d720e020"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f85d72d4500"/></to>
    </wire>
    <wire loc="84:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d66e89d0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7214950"/></to>
    </wire>
    <wire loc="85:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f85d66e82d0"/></from>
      <to><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f85d72130f0"/></to>
    </wire>
    <wire loc="87:../../../tos/system/FcfsArbiterC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x7f85d66e72b0"/></from>
      <to><interface-ref name="FcfsQueue" scoped="" ref="0x7f85d66ee630"/></to>
    </wire>
    <wire loc="155:../../../tos/system/ArbiterP.nc">
      <from><interface-ref name="grantedTask" scoped="" ref="0x7f85d66e5480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="80:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x7f85d66b06a0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x7f85d720e020"/></to>
    </wire>
    <wire loc="82:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f85d66b0e00"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f85d720e780"/></to>
    </wire>
    <wire loc="84:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d66af410"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d720ed50"/></to>
    </wire>
    <wire loc="85:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d66ae060"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d71f7990"/></to>
    </wire>
    <wire loc="63:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f85d669b920"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f85d668e390"/></to>
    </wire>
    <wire loc="64:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f85d669a590"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f85d8597020"/></to>
    </wire>
    <wire loc="65:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f85d6699270"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f85d8597c90"/></to>
    </wire>
    <wire loc="67:../../../tos/system/AMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f85d7117020"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x7f85d66988f0"/></to>
    </wire>
    <wire loc="66:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Acks" scoped="" ref="0x7f85d66988f0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d8593080"/></to>
    </wire>
    <wire loc="60:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f85d668d060"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f85d7181930"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:../../../tos/system/DirectAMSenderC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f85d668dc70"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f85d8597c90"/></to>
    </wire>
    <wire loc="53:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x7f85d7181930"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x7f85d7131df0"/></to>
    </wire>
    <wire loc="54:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x7f85d712f400"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x7f85d859a7f0"/></to>
    </wire>
    <wire loc="55:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f85d712e060"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f85d8597c90"/></to>
    </wire>
    <wire loc="56:../../../tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f85d712d720"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f85d8597020"/></to>
    </wire>
    <wire loc="184:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="errorTask" scoped="" ref="0x7f85d712c480"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="140:../../../tos/system/AMQueueImplP.nc">
      <from><interface-ref name="CancelTask" scoped="" ref="0x7f85d712cc60"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x7f85d710d020"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x7f85d8597020"/></to>
    </wire>
    <wire loc="56:../../../tos/system/AMReceiverC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x7f85d710dc30"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x7f85d8597c90"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="MainC" loc="56:../../../tos/system/MainC.nc">
      <documentation loc="45:../../../tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="41:../../../tos/platforms/telosa/PlatformC.nc">
      <documentation loc="35:../../../tos/platforms/telosa/PlatformC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre and Cory Sharp&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="3:../../../tos/platforms/telosa/PlatformP.nc" safe="">
      <module/>
    </component>
    <component qname="MotePlatformC" loc="1:../../../tos/platforms/telosb/MotePlatformC.nc" safe="">
      <module/>
    </component>
    <component qname="MoteClockC" loc="37:../../../tos/platforms/telosb/MoteClockC.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockC" loc="37:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <documentation loc="33:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430ClockP" loc="200:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="49:../../../tos/chips/msp430/x1xxx/McuSleepC.nc" safe="">
      <documentation loc="36:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the MSP430. Code for low power calculation copied from older&#10; msp430hardware.h by Vlado Handziski, Joe Polastre, and Cory Sharp.&#10;&#10;&#10; @author Philip Levis&#10; @author Vlado Handziski&#10; @author Joe Polastre&#10; @author Cory Sharp&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MoteClockP" loc="38:../../../tos/platforms/telosb/MoteClockP.nc">
      <documentation loc="33:../../../tos/platforms/telosb/MoteClockP.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlind.de>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="65:../../../tos/system/RealMainP.nc" safe="">
      <documentation loc="49:../../../tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="45:../../../tos/system/TinySchedulerC.nc">
      <documentation loc="33:../../../tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="53:../../../tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="MaestroC" loc="15:MaestroC.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="45:../../../tos/system/LedsC.nc">
      <documentation loc="34:../../../tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:../../../tos/system/LedsP.nc" safe="">
      <documentation loc="35:../../../tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="40:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/PlatformLedsC.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC" loc="47:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <documentation loc="37:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
        <short>&#10; Digital pin i/o abstraction, TI MSP430 processors.</short>
        <long>&#10; Digital pin i/o abstraction, TI MSP430 processors.&#10;&#10; @author Joe Polastre&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Peter A. Bigot &#60;pab@peoplepowerco.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @author Joao Goncalves &#60;joao.m.goncalves@ist.utl.pt>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOC.P10" loc="79(HplMsp430GeneralIOC.P10):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P11" loc="79(HplMsp430GeneralIOC.P11):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P12" loc="79(HplMsp430GeneralIOC.P12):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P13" loc="79(HplMsp430GeneralIOC.P13):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P14" loc="79(HplMsp430GeneralIOC.P14):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P15" loc="79(HplMsp430GeneralIOC.P15):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P16" loc="79(HplMsp430GeneralIOC.P16):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P17" loc="79(HplMsp430GeneralIOC.P17):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:38">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P20" loc="79(HplMsp430GeneralIOC.P20):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P21" loc="79(HplMsp430GeneralIOC.P21):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P22" loc="79(HplMsp430GeneralIOC.P22):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P23" loc="79(HplMsp430GeneralIOC.P23):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P24" loc="79(HplMsp430GeneralIOC.P24):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P25" loc="79(HplMsp430GeneralIOC.P25):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P26" loc="79(HplMsp430GeneralIOC.P26):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P27" loc="79(HplMsp430GeneralIOC.P27):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:40">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:41">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:42">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:46">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P30" loc="79(HplMsp430GeneralIOC.P30):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P31" loc="79(HplMsp430GeneralIOC.P31):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P32" loc="79(HplMsp430GeneralIOC.P32):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P33" loc="79(HplMsp430GeneralIOC.P33):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P34" loc="79(HplMsp430GeneralIOC.P34):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P35" loc="79(HplMsp430GeneralIOC.P35):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P36" loc="79(HplMsp430GeneralIOC.P36):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P37" loc="79(HplMsp430GeneralIOC.P37):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:27">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P40" loc="79(HplMsp430GeneralIOC.P40):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P41" loc="79(HplMsp430GeneralIOC.P41):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P42" loc="79(HplMsp430GeneralIOC.P42):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P43" loc="79(HplMsp430GeneralIOC.P43):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P44" loc="79(HplMsp430GeneralIOC.P44):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P45" loc="79(HplMsp430GeneralIOC.P45):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P46" loc="79(HplMsp430GeneralIOC.P46):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P47" loc="79(HplMsp430GeneralIOC.P47):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:28">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:29">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:30">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:31">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P50" loc="79(HplMsp430GeneralIOC.P50):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P51" loc="79(HplMsp430GeneralIOC.P51):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P52" loc="79(HplMsp430GeneralIOC.P52):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P53" loc="79(HplMsp430GeneralIOC.P53):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P54" loc="79(HplMsp430GeneralIOC.P54):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P55" loc="79(HplMsp430GeneralIOC.P55):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P56" loc="79(HplMsp430GeneralIOC.P56):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P57" loc="79(HplMsp430GeneralIOC.P57):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:48">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:50">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P60" loc="79(HplMsp430GeneralIOC.P60):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P61" loc="79(HplMsp430GeneralIOC.P61):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P62" loc="79(HplMsp430GeneralIOC.P62):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P63" loc="79(HplMsp430GeneralIOC.P63):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P64" loc="79(HplMsp430GeneralIOC.P64):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P65" loc="79(HplMsp430GeneralIOC.P65):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P66" loc="79(HplMsp430GeneralIOC.P66):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430GeneralIOC.P67" loc="79(HplMsp430GeneralIOC.P67):../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplMsp430GeneralIOP"/>
        <arguments>
          <value cst="I:52">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:53">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led0Impl" loc="42(PlatformLedsC.Led0Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led1Impl" loc="42(PlatformLedsC.Led1Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="PlatformLedsC.Led2Impl" loc="42(PlatformLedsC.Led2Impl):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="59:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <documentation loc="49:../../../tos/platforms/telosa/ActiveMessageC.nc">
        <short>&#10;&#10; The Active Message layer on the Telos platform.</short>
        <long>&#10;&#10; The Active Message layer on the Telos platform. This is a naming wrapper&#10; around the CC2420 Active Message layer.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.9 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ActiveMessageC" loc="53:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <configuration/>
    </component>
    <component qname="CC2420RadioC" loc="41:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <documentation loc="24:../../../tos/chips/cc2420/CC2420RadioC.nc">
        <short>&#10; Radio wiring for the CC2420.</short>
        <long>&#10; Radio wiring for the CC2420.  This layer seperates the common&#10; wiring of the lower-layer components of the CC2420 stack and makes&#10; them available to clients like the AM stack and the IEEE802.15.4&#10; stack.&#10;&#10; This component provides the highest-level internal interface to&#10; other components of the CC2420 stack.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10; @author Stephen Dawson-Haggerty&#10; @version $Revision: 1.2 $ $Date: 2009/08/20 01:37:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaC" loc="42:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
        <short>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.</short>
        <long>&#10; Basic implementation of a CSMA MAC for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-05-14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420CsmaP" loc="37:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.12 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ControlC" loc="42:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
        <short>&#10; Implementation for configuring a ChipCon CC2420 radio.</short>
        <long>&#10; Implementation for configuring a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/05/14 21:33:07 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ControlP" loc="42:../../../tos/chips/cc2420/control/CC2420ControlP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Urs Hunkeler (ReadRssi implementation)&#10; @version $Revision: 1.7 $ $Date: 2008/06/24 04:07:28 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="AlarmMultiplexC" loc="43:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
        <short>&#10; A component that multiplexes the use of an alarm.</short>
        <long>&#10; A component that multiplexes the use of an alarm. The assumption is&#10; that its use is mutually exclusive and users check whether the&#10; events are for them.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm" loc="40(AlarmMultiplexC.Alarm):../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420AlarmC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C):../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC" loc="41(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer" loc="37(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzMapC" loc="48:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <documentation loc="34:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
        <short>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.</short>
        <long>&#10; MSP430Timer32khzMapC presents as paramaterized interfaces all of&#10; the 32khz hardware timers on the MSP430 that are available for&#10; compile time allocation by &#34;new Alarm32khz16C()&#34;, &#34;new&#10; AlarmMilli32C()&#34;, and so on.  &#10;&#10; Platforms based on the MSP430 are * encouraged to copy in and&#10; override this file, presenting only the * hardware timers that are&#10; available for allocation on that platform.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @version $Revision: 1.5 $ $Date: 2010-06-29 22:07:55 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC" loc="48:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <documentation loc="36:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA" loc="41(Msp430TimerC.Msp430TimerA):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:302">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:368">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:352">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB" loc="41(Msp430TimerC.Msp430TimerB):../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerP"/>
        <arguments>
          <value cst="I:286">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:400">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:384">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:4">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:256">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:512">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA0" loc="41(Msp430TimerC.Msp430TimerA0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:354">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:370">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA1" loc="41(Msp430TimerC.Msp430TimerA1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:356">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:372">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerA2" loc="41(Msp430TimerC.Msp430TimerA2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:358">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:374">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB0" loc="41(Msp430TimerC.Msp430TimerB0):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:386">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:402">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB1" loc="41(Msp430TimerC.Msp430TimerB1):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:388">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:404">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB2" loc="41(Msp430TimerC.Msp430TimerB2):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:390">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:406">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB3" loc="41(Msp430TimerC.Msp430TimerB3):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:392">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:408">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB4" loc="41(Msp430TimerC.Msp430TimerB4):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:394">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:410">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB5" loc="41(Msp430TimerC.Msp430TimerB5):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:396">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:412">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerC.Msp430TimerB6" loc="41(Msp430TimerC.Msp430TimerB6):../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430TimerCapComP"/>
        <arguments>
          <value cst="I:398">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
          <value cst="I:414">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430TimerCommonP" loc="2:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc" safe="">
      <module/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm" loc="43(AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="41:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
        <short>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz32C provides at 32-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC" loc="41:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
        <short>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.</short>
        <long>&#10; Msp430Counter32khC provides the standard 32khz counter for the MSP430.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Counter32khzC.Counter" loc="42(Msp430Counter32khzC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C.Transform" loc="54(Counter32khz32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform" loc="51(AlarmMultiplexC.Alarm.Alarm32khz32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
        <short>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of general-purpose I/O for the ChipCon CC2420&#10; radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420PinsC.CCAM" loc="42(HplCC2420PinsC.CCAM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.CSNM" loc="42(HplCC2420PinsC.CSNM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOM" loc="42(HplCC2420PinsC.FIFOM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.FIFOPM" loc="42(HplCC2420PinsC.FIFOPM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.RSTNM" loc="42(HplCC2420PinsC.RSTNM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.SFDM" loc="42(HplCC2420PinsC.SFDM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420PinsC.VRENM" loc="42(HplCC2420PinsC.VRENM):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
        <short>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of interrupts and captures for the ChipCon&#10; CC2420 radio connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC2420InterruptsC.CaptureSFDC" loc="47(HplCC2420InterruptsC.CaptureSFDC):../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="GpioCaptureC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430InterruptC" loc="39:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
        <short>&#10; HPL for the TI MSP430 family of microprocessors.</short>
        <long>&#10; HPL for the TI MSP430 family of microprocessors. This provides an&#10; abstraction for GPIO interrupts.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430InterruptP" loc="51:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc" safe="">
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptCCAC" loc="50(HplCC2420InterruptsC.InterruptCCAC):../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="HplCC2420InterruptsC.InterruptFIFOPC" loc="50(HplCC2420InterruptsC.InterruptFIFOPC):../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430InterruptC"/>
      </instance>
      <module/>
    </component>
    <component qname="CC2420ControlC.Spi" loc="39(CC2420ControlC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC" loc="37:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:16 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420SpiP" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Roman Lim&#10; @author Razvan Musaloie-E.&#10; @author Jeonggil Ko&#10; @version $Revision: 1.4 $ $Date: 2008-06-23 20:25:15 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.WorkingStateC" loc="65(CC2420SpiWireC.WorkingStateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="StateImplC" loc="64:../../../tos/system/StateImplC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="StateImplP" loc="64:../../../tos/system/StateImplP.nc" safe="">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC" loc="40(CC2420SpiWireC.HplCC2420SpiC):../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplCC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC" loc="79(CC2420SpiWireC.HplCC2420SpiC.SpiC):../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <instance number="0">
        <component-ref qname="Msp430Spi0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P" loc="71:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDma0P.SpiP" loc="73(Msp430SpiNoDma0P.SpiP):../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430SpiNoDmaP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart0C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <documentation loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
        <short>&#10; An HPL abstraction of USART0 on the MSP430.</short>
        <long>&#10; An HPL abstraction of USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart0P" loc="54:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC" loc="39(CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart0C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.UsartShareP" loc="37(Msp430UsartShare0P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC" loc="56(Msp430UsartShare0P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart0.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Queue" loc="42(Msp430UsartShare0P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="1">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare0P.ArbiterC.Arbiter" loc="96(Msp430UsartShare0P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430I2C0C" loc="2:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <configuration/>
    </component>
    <component qname="HplMsp430I2C0P" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420ControlC.SyncSpiC" loc="39(CC2420ControlC.SyncSpiC):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ControlC.RssiResource" loc="39(CC2420ControlC.RssiResource):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:../../../tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:../../../tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LocalIeeeEui64C" loc="11:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <configuration/>
    </component>
    <component qname="LocalIeeeEui64P" loc="3:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <module/>
    </component>
    <component qname="Ds2411C" loc="7:../../../tos/chips/ds2411/Ds2411C.nc">
      <configuration/>
    </component>
    <component qname="Ds2411P" loc="9:../../../tos/chips/ds2411/Ds2411P.nc">
      <module/>
    </component>
    <component qname="OneWireMasterC" loc="6:../../../tos/lib/onewire/OneWireMasterC.nc">
      <documentation loc="1:../../../tos/lib/onewire/OneWireMasterC.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10;</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="OneWireMasterP" loc="9:../../../tos/lib/onewire/OneWireMasterP.nc">
      <documentation loc="2:../../../tos/lib/onewire/OneWireMasterP.nc">
        <short>&#10; Dallas/Maxim 1wire bus master&#10;&#10; Only supports one device on the 1-wire bus.</short>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="39:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="BusyWaitMicroC.BusyWaitCounterC" loc="52(BusyWaitMicroC.BusyWaitCounterC):../../../tos/lib/timer/BusyWaitCounterC.nc">
      <documentation loc="36:../../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="BusyWaitCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8918460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f85d89187d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430CounterMicroC" loc="44:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
        <short>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.</short>
        <long>&#10; Msp430CounterMicroC provides the standard 1 uis (or 1 us) counter for the&#10; MSP430.   If your base clock is in units of binary hertz then 1 uis, decimal&#10; hertz it will be 1us.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430CounterMicroC.Counter" loc="42(Msp430CounterMicroC.Counter):../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8918460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f85d89187d0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplDs2411C" loc="1:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <configuration/>
    </component>
    <component qname="HplDs2411C.MspGpio" loc="42(HplDs2411C.MspGpio):../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="Msp430GpioC"/>
      </instance>
      <module/>
    </component>
    <component qname="Ds2411PowerControlC" loc="12:../../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <module/>
    </component>
    <component qname="CC2420TransmitC" loc="41:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
        <short>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the transmit path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TransmitP" loc="46:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc" safe="">
      <module/>
    </component>
    <component qname="CC2420TransmitC.Spi" loc="39(CC2420TransmitC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC" loc="39:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
        <short>&#10; Implementation of the receive path for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of the receive path for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveP" loc="45:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Jung Il Choi&#10; @author JeongGil Ko&#10; @author Razvan Musaloiu-E&#10; @version $Revision: 1.21 $ $Date: 2009/09/17 23:36:36 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC" loc="38:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420PacketP" loc="43:../../../tos/chips/cc2420/packet/CC2420PacketP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420PacketC.CounterToLocalTimeC" loc="46(CC2420PacketC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC" loc="43:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
        <short>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.</short>
        <long>&#10; HilTimerMilliC provides a parameterized interface to a virtualized&#10; millisecond timer.  TimerMilliC in tos/system/ uses this component to&#10; allocate new timers.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C" loc="41(HilTimerMilliC.AlarmMilli32C):../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmMilli32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom" loc="41(HilTimerMilliC.AlarmMilli32C.AlarmFrom):../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer" loc="37(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer):../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430Timer32khzC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm" loc="43(HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm):../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430AlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMilli32C" loc="41:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
        <short>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.</short>
        <long>&#10; CounterMilli32C provides at 32-bit counter at 1024 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterMilli32C.Transform" loc="54(CounterMilli32C.Transform):../../../tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmMilli32C.Transform" loc="51(HilTimerMilliC.AlarmMilli32C.Transform):../../../tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):../../../tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="55(HilTimerMilliC.VirtualizeTimerC):../../../tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC.VT" loc="61(HilTimerMilliC.VirtualizeTimerC.VT):../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerImplP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f85d77e5530"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CC2420PacketC.DummyTimer" loc="44(CC2420PacketC.DummyTimer):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:../../../tos/system/TimerMilliP.nc">
      <documentation loc="34:../../../tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420ReceiveC.Spi" loc="39(CC2420ReceiveC.Spi):../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="CC2420SpiC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="RandomC" loc="43:../../../tos/system/RandomC.nc">
      <documentation loc="33:../../../tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:../../../tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:../../../tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420CsmaC.StateC" loc="65(CC2420CsmaC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueSendC" loc="38:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
        <short>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; </short>
        <long>&#10; Generate a unique dsn byte for this outgoing packet&#10; This should sit at the top of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueSendP" loc="38:../../../tos/chips/cc2420/unique/UniqueSendP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
        <short>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.</short>
        <long>&#10; This layer is responsible for supplying a unique data sequence number (dsn)&#10; to each outgoing message.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="UniqueSendC.StateC" loc="65(UniqueSendC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="UniqueReceiveC" loc="40:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
        <short>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long>&#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; This should sit at the bottom of the stack&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="UniqueReceiveP" loc="41:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
        <short> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.</short>
        <long> &#10; This layer keeps a history of the past RECEIVE_HISTORY_SIZE received messages&#10; If the source address and dsn number of a newly received message matches&#10; our recent history, we drop the message because we've already seen it.&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC" loc="62:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
        <short>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.</short>
        <long>&#10; Original TinyOS T-Frames use a packet header that is not compatible with&#10; other 6LowPAN networks.  They do not include the network byte &#10; responsible for identifying the packing as being sourced from a TinyOS&#10; network.&#10;&#10; TinyOS I-Frames are interoperability packets that do include a network&#10; byte as defined by 6LowPAN specifications.  The I-Frame header type is&#10; the default packet header used in TinyOS networks.&#10;&#10; Since either packet header is acceptable, this layer must do some &#10; preprocessing (sorry) to figure out whether or not it needs to include &#10; the functionality to process I-frames.  If I-Frames are used, then&#10; the network byte is added on the way out and checked on the way in.&#10; If the packet came from a network different from a TinyOS network, the&#10; user may access it through the DispatchP's NonTinyosReceive[] Receive &#10; interface and process it in a different radio stack.&#10;&#10; If T-Frames are used instead, this layer is simply pass-through wiring to the&#10; layer beneath.  &#10;&#10; Define &#34;CC2420_IFRAME_TYPE&#34; to use the interoperability frame and &#10; this layer&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC2420TinyosNetworkP" loc="44:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc" safe="">
      <documentation loc="32:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
        <short>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.</short>
        <long>&#10; Fills in the network ID byte for outgoing packets for compatibility with&#10; other 6LowPAN networks.  Filters incoming packets that are not&#10; TinyOS network compatible.  Provides the 6LowpanSnoop interface to&#10; sniff for packets that were not originated from TinyOS.&#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420TinyosNetworkC.FcfsResourceQueueC" loc="42(CC2420TinyosNetworkC.FcfsResourceQueueC):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="DummyLplC" loc="41:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Sleep interval is always 0, and duty cycle is always 100%&#10; @author David Moss&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="DummyLplP" loc="39:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <documentation loc="32:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
        <short>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.</short>
        <long>&#10; Dummy low power listening interface used when LowPowerListening is not&#10; compiled in with the application.&#10; Wakeup interval is always 0 (always on)&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DummyLplC.StateC" loc="65(DummyLplC.StateC):../../../tos/system/StateC.nc">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="StateC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyC" loc="38:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <documentation loc="32:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
        <short>&#10; Dummy configuration for PacketLink Layer&#10; </short>
        <long>&#10; Dummy configuration for PacketLink Layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PacketLinkDummyP" loc="38:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <documentation loc="32:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
        <short>&#10; Dummy module for Packet Link layer&#10; </short>
        <long>&#10; Dummy module for Packet Link layer&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420ActiveMessageP" loc="46:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc" safe="">
      <documentation loc="33:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
        <short>&#10; Active message implementation on top of the CC2420 radio.</short>
        <long>&#10; Active message implementation on top of the CC2420 radio. This&#10; implementation uses the 16-bit addressing mode of 802.15.4: the&#10; only additional byte it adds is the AM id byte, as the first byte&#10; of the data payload.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.22 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):../../../tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:../../../tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:../../../tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:../../../tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):../../../tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:../../../tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="2:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC" loc="42(PlatformSerialC.UartC):../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
        <short>&#10; An implementation of the UART on USART1 for the MSP430.</short>
        <long>&#10; An implementation of the UART on USART1 for the MSP430.&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire81@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Uart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P" loc="39:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430Uart1P.UartP" loc="44(Msp430Uart1P.UartP):../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <documentation loc="36:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplMsp430Usart1C" loc="74:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <documentation loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
        <short>&#10; An HPL abstraction of USART1 on the MSP430.</short>
        <long>&#10; An HPL abstraction of USART1 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Joe Polastre&#10; @version $Revision: 1.7 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplMsp430Usart1P" loc="59:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="41:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
        <short>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.</short>
        <long>&#10; Counter32khz16C provides at 16-bit counter at 32768 ticks per second.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformSerialC.UartC.UsartC" loc="40(PlatformSerialC.UartC.UsartC):../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Msp430Usart1C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P" loc="38:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
        <short>&#10; </short>
        <long>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.6 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.UsartShareP" loc="37(Msp430UsartShare1P.UsartShareP):../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Msp430UsartShareP"/>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC" loc="56(Msp430UsartShare1P.ArbiterC):../../../tos/system/FcfsArbiterC.nc">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="FcfsArbiterC"/>
        <arguments>
          <value cst="S:Msp430Usart1.Resource">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Queue" loc="42(Msp430UsartShare1P.ArbiterC.Queue):../../../tos/system/FcfsResourceQueueC.nc">
      <instance number="2">
        <component-ref qname="FcfsResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.ArbiterC.Arbiter" loc="96(Msp430UsartShare1P.ArbiterC.Arbiter):../../../tos/system/ArbiterP.nc">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC" loc="67(Msp430UsartShare1P.PowerManagerC):../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Msp430UsartShare1P.PowerManagerC.PowerManager" loc="58(Msp430UsartShare1P.PowerManagerC.PowerManager):../../../tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:../../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="TelosSerialP" loc="1:../../../tos/platforms/telosa/TelosSerialP.nc">
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MaestroApp.TimerTramaTDMA" loc="44(MaestroApp.TimerTramaTDMA):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MaestroApp.TimerLeds" loc="44(MaestroApp.TimerLeds):../../../tos/system/TimerMilliC.nc">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="MaestroApp.AMSenderC" loc="47(MaestroApp.AMSenderC):../../../tos/system/AMSenderC.nc">
      <documentation loc="33:../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:17">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MaestroApp.AMSenderC.SenderC" loc="47(MaestroApp.AMSenderC.SenderC):../../../tos/system/DirectAMSenderC.nc">
      <documentation loc="33:../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="MaestroApp.AMSenderC.SenderC.AMQueueEntryP" loc="43(MaestroApp.AMSenderC.SenderC.AMQueueEntryP):../../../tos/system/AMQueueEntryP.nc">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:../../../tos/system/AMQueueP.nc">
      <documentation loc="33:../../../tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):../../../tos/system/AMQueueImplP.nc">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MaestroApp.AMReceiverC" loc="43(MaestroApp.AMReceiverC):../../../tos/system/AMReceiverC.nc">
      <documentation loc="33:../../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:17">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplMsp430GeneralIOP" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
        <short>&#10; Low level digital port access for Msp430 chips.</short>
        <long>&#10; Low level digital port access for Msp430 chips.&#10; should work on all three major families, x1, x2, and x5.&#10;&#10; Simple GeneralIO.&#10;&#10; Depending on the optimization level of the toolchain and which toolchain,&#10; access may or may not be single instructions (ie. atomic).  When not sure&#10; of exactly what instructions are being used one should use the default&#10; which is to surround accesses with &#34;atomic&#34;.&#10;&#10; The define MSP430_PINS_ATOMIC_LOWLEVEL is used to control whether accesses&#10; are protected from interrupts (via &#34;atomic&#34;).  If not defined, it will&#10; default to &#34;atomic&#34;.   To generated optimized accesses, define it to be&#10; empty.  From your Makefile, you can do&#10;&#10;    &#34;CFLAGS += -DMSP430_PINS_ATOMIC_LOWLEVEL=&#34;.&#10;&#10; Any override will typically be done either in the platform's hardware.h&#10; or in the applications &#34;Makefile&#34;.&#10;&#10; WARNING: When MSP430_PINS_ATOMIC_LOWLEVEL is blank, this code makes&#10; the assumption that access to the various registers occurs with single&#10; instructions and thus is atomic.  It has been verified that with -Os&#10; optimization, that indeed register access is via single instructions.&#10; Other optimizations may not result in single instructions.  In those&#10; cases, you should use the default value which causes &#34;atomic&#34; to protect&#10; access from interrupts.&#10;&#10; If you turn off the atomic protection it is assumed that you know&#10; what you are doing and will make sure the machine state is reasonable&#10; for what you are doing.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_in_addr" ref="0x7f85d8774810" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_out_addr" ref="0x7f85d8774bc0" loc="81:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_dir_addr" ref="0x7f85d8773020" loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="port_sel_addr" ref="0x7f85d87733d0" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
        </constant>
        <constant name="pin" ref="0x7f85d8773740" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
          <component-ref qname="HplMsp430GeneralIOP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430GpioC" loc="42:../../../tos/chips/msp430/pins/Msp430GpioC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
        <short>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the general-purpose I/O abstraction&#10; for the TI MSP430 microcontroller.&#10;&#10; @author Joe Polastre&#10; @see  Please refer to TEP 117 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="HplCC2420AlarmC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
        <short>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of 32khz alarms for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz32C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Alarm32khz16C" loc="41:../../../tos/chips/msp430/timer/Alarm32khz16C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
        <short>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; </short>
        <long>&#10; Alarm32khzC is the alarm for async 32khz alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Timer32khzC" loc="37:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430TimerP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerP.nc" abstract="" safe="">
      <documentation loc="1:../../../tos/chips/msp430/msp430regtypes.h">
        <short>&#10; Copyright (c) 2011, 2014, 2016 Eric B.</short>
        <long>&#10; Copyright (c) 2011, 2014, 2016 Eric B. Decker&#10; Copyright (c) 2009 DEXMA SENSORS SL&#10; Copyright (c) 2000-2003 The Regents of the University of California.  &#10; All rights reserved.&#10;&#10; Redistribution and use in source and binary forms, with or without&#10; modification, are permitted provided that the following conditions&#10; are met:&#10;&#10; - Redistributions of source code must retain the above copyright&#10;   notice, this list of conditions and the following disclaimer.&#10;&#10; - Redistributions in binary form must reproduce the above copyright&#10;   notice, this list of conditions and the following disclaimer in the&#10;   documentation and/or other materials provided with the&#10;   distribution.&#10;&#10; - Neither the name of the copyright holder nor the names of&#10;   its contributors may be used to endorse or promote products derived&#10;   from this software without specific prior written permission.&#10;&#10; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10; &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS&#10; FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL&#10; THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,&#10; INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES&#10; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR&#10; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)&#10; HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,&#10; STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)&#10; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED&#10; OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Xavier Orduna &#60;xorduna@dexmatech.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxIV_addr" ref="0x7f85d8377930" loc="42:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxR_addr" ref="0x7f85d8377cd0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCTL_addr" ref="0x7f85d83760d0" loc="44:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIFG" ref="0x7f85d8376450" loc="45:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCLR" ref="0x7f85d83767d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxIE" ref="0x7f85d8376b40" loc="47:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL0" ref="0x7f85d8375020" loc="48:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxSSEL1" ref="0x7f85d83753b0" loc="49:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </constant>
        <constant name="isClockSourceAsync" ref="0x7f85d8375780" loc="50:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
          <component-ref qname="Msp430TimerP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430TimerCapComP" loc="41:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author: Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="TxCCTLx_addr" ref="0x7f85d833ac80" loc="42:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </constant>
        <constant name="TxCCRx_addr" ref="0x7f85d83370d0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
          <component-ref qname="Msp430TimerCapComP"/>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430AlarmC" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
        <short>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.</short>
        <long>&#10; Msp430Alarm is a generic component that wraps the MSP430 HPL timers and&#10; compares into a TinyOS Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f85d8254cb0" loc="43:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
          <component-ref qname="Msp430AlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f85d8254cb0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430CounterC" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
        <short>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.</short>
        <long>&#10; Msp430Counter is a generic component that wraps the MSP430 HPL timers into a&#10; TinyOS Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x7f85d8211a40" loc="42:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
          <component-ref qname="Msp430CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x7f85d8211a40"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:../../../tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f85d81fb570" loc="55:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f85d81fb570"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f85d81fbd40" loc="56:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f85d81fbd40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f85d81fa160" loc="57:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f85d81fa160"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f85d81fa940" loc="58:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f85d81fa940"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f85d81fad10" loc="59:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f85d81f9540" loc="60:../../../tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f85d81f9540"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="51:../../../tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f85d81d8620" loc="52:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f85d81d8620"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f85d81d8df0" loc="53:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f85d81d8df0"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f85d81d7220" loc="54:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f85d81d7220"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f85d81d7a00" loc="55:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f85d81d7a00"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f85d81d7dd0" loc="56:../../../tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="GpioCaptureC" loc="47:../../../tos/chips/msp430/timer/GpioCaptureC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; The default for GpioCapture is CCIxA.  Other channels are available&#10; (like B) but they need to be hardcoded in another module.  See&#10; tos/platforms/exp5438_2520/hardware/cc2520/P81SfdCaptureC.nc&#10;&#10; Lower levels have been modified to support being able to change&#10; CCIS in the control registers.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430InterruptC" loc="50:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
        <short>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.</short>
        <long>&#10; Implementation of the GPIO interrupt abstraction for&#10; the TI MSP430 microcontroller.   X1/X2 processors.&#10;&#10; The X5 processors clear the highest IFG automatically when the IV&#10; has been read.   While the X1/X2 processors don't do this.   This&#10; means the interrupt handler on the X1/X2 puppies have to do it&#10; themselves.  Hence different files.&#10;&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @see  Please refer to TEP 117 for more information about this component&#10;          and its intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="CC2420SpiC" loc="39:../../../tos/chips/cc2420/spi/CC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
        <short>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.</short>
        <long>&#10; Implementation of basic SPI primitives for the ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2009-08-14 20:33:43 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="StateC" loc="65:../../../tos/system/StateC.nc" abstract="">
      <documentation loc="32:../../../tos/types/State.h">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplCC2420SpiC" loc="40:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc" abstract="">
      <documentation loc="32:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
        <short>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.</short>
        <long>&#10; HPL implementation of the SPI bus for the ChipCon CC2420 radio&#10; connected to a TI MSP430 processor.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:44 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430Spi0C" loc="79:../../../tos/chips/msp430/usart/Msp430Spi0C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430SpiNoDmaP" loc="73:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc" abstract="">
      <documentation loc="66:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de> (bugfix in continueOp())&#10; @version $Revision: 1.8 $ $Date: 2010-06-29 22:07:45 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart0C" loc="39:../../../tos/chips/msp430/usart/Msp430Usart0C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
        <short>&#10; Provides an interface for USART0 on the MSP430.</short>
        <long>&#10; Provides an interface for USART0 on the MSP430.&#10;&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UsartShareP" loc="37:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc" abstract="" safe="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-26 04:39:08 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="FcfsArbiterC" loc="56:../../../tos/system/FcfsArbiterC.nc" abstract="">
      <documentation loc="35:../../../tos/system/FcfsArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; an FCFS fashion.  An array is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in FCFS order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default&#10; user.  If a new request is made, the default user will release the resource,&#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x7f85d7cfc5e0" loc="56:../../../tos/system/FcfsArbiterC.nc">
          <component-ref qname="FcfsArbiterC"/>
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="FcfsResourceQueueC" loc="42:../../../tos/system/FcfsResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x7f85d7cf19b0" loc="42:../../../tos/system/FcfsResourceQueueC.nc">
          <component-ref qname="FcfsResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="96:../../../tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="31:../../../tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo,&#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10;&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this&#10;        resource&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;&#10; WARNING: This Arbiter differs from the main TinyOS trunk Arbiter!.....   It&#10; has the following features/bug fixes:&#10;&#10; ResourceRequested can be used to allow a holder of a resource to release&#10; and request upon an incoming request from another client.&#10;&#10; The previous arbiter (if no other resources queued up) would always immediately&#10; grant to the original holder (ie. the new requester would be starved).   And other&#10; strange, out of order behaviour.&#10;&#10; The following is the sequence we are talking about:&#10;&#10;  Client 1:                Client 2:&#10;  Holding resource&#10;                           new request comes up&#10;  Sees ResourceRequested&#10;      releases (this should let the new resource (or any other queued client) get the resource)&#10;      requests&#10;                           client 2 gains control.&#10;&#10; There does need to be a mechanism to let a holder of the resource to check to see&#10; if (and possibly how many) other clients are waiting for the resource.  There are&#10; cases where using the event (ResourceRequested) doesn't work because the clients&#10; have already posted their requests prior to the eventual resource holder gaining&#10; control.   IT IS VERY EASY TO HANG THE ARBITER BECAUSE OF MISSED EVENTS.  Use&#10; Request/Release at your own risk.&#10;&#10;&#10; Protection has been put in to insure that a given client can not end up with&#10; multiple requests queued up.   This would give the client an unfair advantage&#10; and also would occur non-uniformly (depends on the sequence of execution).   This&#10; problem could occur because while the Queueing mechanism does protect against multiple&#10; instances of the id in the queue, there is also the reqResId cell which is effectively&#10; the head of the queue.   This must also be properly handled to prevent a client from&#10; getting into the queue multiple times.&#10;&#10;&#10; Provisions have been made to support DefaultOwners actually doing something with the&#10; hardware vs. just handling power.  PREGRANT helps with this.  Also the resId being&#10; default_owner_id indicates that h/w events should be steered to the DefaultOwner.&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x7f85d7cd5cc0" loc="96:../../../tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="BusyWaitCounterC" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc" abstract="">
      <documentation loc="36:../../../tos/lib/timer/BusyWaitCounterC.nc">
        <short>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses).</short>
        <long>&#10; BusyWaitCounterC uses a Counter to implement the BusyWait interface&#10; (block until a specified amount of time elapses). See TEP102 for more&#10; details.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for the&#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f85d7a8b020" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f85d7a8b020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f85d7a8b7b0" loc="52:../../../tos/lib/timer/BusyWaitCounterC.nc">
          <component-ref qname="BusyWaitCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d7a8b7b0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f85d7867d00" loc="46:../../../tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f85d7867d00"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmMilli32C" loc="41:../../../tos/chips/msp430/timer/AlarmMilli32C.nc" abstract="">
      <documentation loc="33:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
        <short>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; </short>
        <long>&#10; AlarmMilliC is the alarm for async millisecond alarms&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @see  Please refer to TEP 102 for more information about this component and its&#10;          intended use.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmToTimerC" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:../../../tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f85d781bcc0" loc="46:../../../tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f85d781bcc0"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:../../../tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10; See VirtualizeTimerImplC.nc for the details of the implementation.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; TimeSkew is optional.  A Platform will export TimeSkew if it supports&#10; updating underlying time h/w.  Advanced topic.&#10;&#10; If a platform doesn't export TimeSkew, there is no impact on the operation&#10; inside VirtualizeTimerImpl.  The Platform is responsible for wiring to&#10; TimeSkew.  For example, the exp_msp432 Platform exports TimeSkew which&#10; is wired by tos/chips/msp432/timer/HilTimerMilliC.nc.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f85d77e5530" loc="55:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f85d77e5530"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f85d77e5880" loc="56:../../../tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="VirtualizeTimerImplP" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being&#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10;&#10; DEFINES:&#10;&#10;   TRACE_VTIMERS:     Define TRACE_VTIMERS in your platform.h to enable&#10;                      tracing of virtual timers.&#10;&#10;   TRACE_VTIMERS_ENTRIES: number of entries in the trace buffer.  Its&#10;                      circular.  Defaults to (max_timers) * 8.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f85d77d7980" loc="61:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f85d77d7980"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x7f85d77d7cd0" loc="62:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
          <component-ref qname="VirtualizeTimerImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:../../../tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:../../../tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:../../../tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:../../../tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:../../../tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Uart1C" loc="42:../../../tos/chips/msp430/usart/Msp430Uart1C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
        <short>&#10; An implementation of the UART on USART1 for the MSP430.</short>
        <long>&#10; An implementation of the UART on USART1 for the MSP430.&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire81@gmail.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Msp430UartP" loc="44:../../../tos/chips/msp430/usart/Msp430UartP.nc" abstract="">
      <documentation loc="36:../../../tos/chips/msp430/usart/Msp430UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Msp430Usart1C" loc="40:../../../tos/chips/msp430/usart/Msp430Usart1C.nc" abstract="">
      <documentation loc="32:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
        <short>&#10; Provides an interface for USART1 on the MSP430.</short>
        <long>&#10; Provides an interface for USART1 on the MSP430.&#10;&#10; @author Vlado Handziski &#60;handisk@tkn.tu-berlin.de>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-05-21 22:11:57 $&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:../../../tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:../../../tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:../../../tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:../../../tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f85d71a4360" loc="47:../../../tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:../../../tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:../../../tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f85d719c140" loc="47:../../../tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:../../../tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f85d7195020" loc="43:../../../tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:../../../tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:../../../tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @author Eric B. Decker (cire831@gmail.com)&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f85d717dc80" loc="45:../../../tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMReceiverC" loc="43:../../../tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="33:../../../tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f85d7113330" loc="43:../../../tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="SoftwareInit" ref="0x7f85d8a46a10" loc="58:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d8a46a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8a46d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f85d8a48560" loc="57:../../../tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f85d8a48560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f85d8a488e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d8a4a960" loc="42:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d8a4a960"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8a4ace0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f85d8a3ab60" loc="43:../../../tos/platforms/telosa/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f85d8a3ab60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f85d8a43ca0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f85d8a43e30"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f85d8a43340"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f85d8a434d0"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f85d8a43660"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f85d8a437f0"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f85d8a43980"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f85d8a43b10"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f85d8a43020"/>
        <function-ref name="node_id" scoped="" ref="0x7f85d8a431b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x7f85d8a35120" loc="7:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteInit" scoped="" ref="0x7f85d8a35120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8a354a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d8a42cb0" loc="4:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d8a42cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8a370a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteClockInit" ref="0x7f85d8a369f0" loc="6:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f85d8a369f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8a36d70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LedsInit" ref="0x7f85d8a35800" loc="8:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LedsInit" scoped="" ref="0x7f85d8a35800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8a35b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Platform" ref="0x7f85d8a37390" loc="5:../../../tos/platforms/telosa/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f85d8a37390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f85d8a364d0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f85d8a36660"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f85d8a37a30"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f85d8a37bc0"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f85d8a37d50"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f85d8a36020"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f85d8a361b0"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f85d8a36340"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f85d8a37710"/>
        <function-ref name="node_id" scoped="" ref="0x7f85d8a378a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d8a1d1a0" loc="2:../../../tos/platforms/telosb/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d8a1d1a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8a1d520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MoteClockInit" ref="0x7f85d8a1f390" loc="39:../../../tos/platforms/telosb/MoteClockC.nc">
      <component-ref qname="MoteClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MoteClockInit" scoped="" ref="0x7f85d8a1f390"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8a1f710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f85d89fd850" loc="40:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f85d89fd850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f85d8a037f0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f85d89fdd60"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f85d8a03020"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f85d8a031b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f85d89fdbd0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f85d8a03340"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f85d8a034d0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f85d8a03660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d8a04280" loc="39:../../../tos/chips/msp430/clock_bcs/Msp430ClockC.nc">
      <component-ref qname="Msp430ClockC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d8a04280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8a04600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430ClockInit" ref="0x7f85d89ea180" loc="203:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f85d89ea180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f85d89e9020"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f85d89ea690"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f85d89ea820"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f85d89ea9b0"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f85d89ea500"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f85d89eab40"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f85d89eacd0"/>
        <function-ref name="initClocks" scoped="" ref="0x7f85d89eae60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x7f85d89e9320" loc="204:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f85d89e9320"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f85d89e96a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d89edae0" loc="202:../../../tos/chips/msp430/clock_bcs/Msp430ClockP.nc">
      <component-ref qname="Msp430ClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d89edae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d89ede60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x7f85d8b6dc80" loc="55:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerOverride" scoped="" ref="0x7f85d8b6dc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x7f85d8d480a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x7f85d8cca9a0" loc="51:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f85d8cca9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f85d8ccad20"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f85d8de5020"/>
        <function-ref name="sleep" scoped="" ref="0x7f85d8de51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x7f85d8c0b3d0" loc="52:../../../tos/chips/msp430/x1xxx/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuPowerState" scoped="" ref="0x7f85d8c0b3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x7f85d8c0b750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430ClockInit" ref="0x7f85d89b8240" loc="39:../../../tos/platforms/telosb/MoteClockP.nc">
      <component-ref qname="MoteClockP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430ClockInit" scoped="" ref="0x7f85d89b8240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430ClockInit"/>
      </instance>
      <interface-functions>
        <function-ref name="defaultInitClocks" scoped="" ref="0x7f85d89b71b0"/>
        <function-ref name="initTimerB" scoped="" ref="0x7f85d89b8750"/>
        <function-ref name="defaultInitTimerA" scoped="" ref="0x7f85d89b88e0"/>
        <function-ref name="initTimerA" scoped="" ref="0x7f85d89b8a70"/>
        <function-ref name="defaultInitTimerB" scoped="" ref="0x7f85d89b85c0"/>
        <function-ref name="defaultSetupDcoCalibrate" scoped="" ref="0x7f85d89b8c00"/>
        <function-ref name="setupDcoCalibrate" scoped="" ref="0x7f85d89b8d90"/>
        <function-ref name="initClocks" scoped="" ref="0x7f85d89b7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x7f85d89aa3a0" loc="69:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SoftwareInit" scoped="" ref="0x7f85d89aa3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d89aa720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x7f85d8a45aa0" loc="66:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f85d8a45aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f85d8a45e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x7f85d89abb60" loc="68:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PlatformInit" scoped="" ref="0x7f85d89abb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d89aa020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x7f85d89ab140" loc="67:../../../tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f85d89ab140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d89ab4c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f85d89ab650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f85d89ab7e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f85d8ee5940" loc="47:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8ee5940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d8ee5cc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d8ee5e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f85d8ef21e0" loc="46:../../../tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f85d8ef21e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8ef2560"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f85d8ef26f0"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f85d8ef2880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x7f85d8a96040" loc="55:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TaskBasic" scoped="" ref="0x7f85d8a96040"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d8a963c0"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d8a96550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x7f85d8a91490" loc="56:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="McuSleep" scoped="" ref="0x7f85d8a91490"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="irq_preamble" scoped="" ref="0x7f85d8a91810"/>
        <function-ref name="irq_postamble" scoped="" ref="0x7f85d8a919a0"/>
        <function-ref name="sleep" scoped="" ref="0x7f85d8a91b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x7f85d8a97140" loc="54:../../../tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Scheduler" scoped="" ref="0x7f85d8a97140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8a974c0"/>
        <function-ref name="taskLoop" scoped="" ref="0x7f85d8a97650"/>
        <function-ref name="runNextTask" scoped="" ref="0x7f85d8a977e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMControl" ref="0x7f85d89916b0" loc="19:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMControl" scoped="" ref="0x7f85d89916b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f85d8991a30"/>
        <function-ref name="stopDone" scoped="" ref="0x7f85d8991bc0"/>
        <function-ref name="start" scoped="" ref="0x7f85d8991d50"/>
        <function-ref name="stop" scoped="" ref="0x7f85d8990020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioSendTask" ref="0x7f85d88ec9e0" loc="90:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioSendTask" scoped="" ref="0x7f85d88ec9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d88ecd60"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d88ea020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x7f85d89921c0" loc="17:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Boot" scoped="" ref="0x7f85d89921c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x7f85d8992540"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f85d898ca80" loc="18:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f85d898ca80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f85d898ce00"/>
        <function-ref name="stopDone" scoped="" ref="0x7f85d8991020"/>
        <function-ref name="start" scoped="" ref="0x7f85d89911b0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d8991340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartReceive" ref="0x7f85d8939bc0" loc="22:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartReceive" scoped="" ref="0x7f85d8939bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d893f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f85d8931020" loc="29:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f85d8931020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d89313a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d8931530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d89316c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d8931850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d89319e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f85d891d440" loc="31:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f85d891d440"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d891d7c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d891d950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d891dae0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d891dc70"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d891de00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerTramaTDMA" ref="0x7f85d891b270" loc="34:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerTramaTDMA" scoped="" ref="0x7f85d891b270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d890c6e0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d891acb0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f85d890da70"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f85d890d5f0"/>
        <function-ref name="getdt" scoped="" ref="0x7f85d890b020"/>
        <function-ref name="gett0" scoped="" ref="0x7f85d890cb60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d890d170"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f85d891be60"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f85d890c0d0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f85d891a360"/>
        <function-ref name="stop" scoped="" ref="0x7f85d891a830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="uartSendTask" ref="0x7f85d88ed9f0" loc="89:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="uartSendTask" scoped="" ref="0x7f85d88ed9f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d88edd70"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d88ec020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x7f85d891c0c0" loc="32:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d891c0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d891c440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d88f9500" loc="36:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d88f9500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d88f9880"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d88f9a10"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d88f9ba0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d88f9d30"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d8904020"/>
        <function-ref name="get" scoped="" ref="0x7f85d89041b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d8904340"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d8904980"/>
        <function-ref name="set" scoped="" ref="0x7f85d89044d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d8904660"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d89047f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartPacket" ref="0x7f85d892f6c0" loc="23:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartPacket" scoped="" ref="0x7f85d892f6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d892fa40"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d892fbd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d892fd60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d893d020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d893d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartSend" ref="0x7f85d893eba0" loc="21:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartSend" scoped="" ref="0x7f85d893eba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d898b020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d898b1b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d898b340"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d898b4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d898b660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartAMPacket" ref="0x7f85d89208c0" loc="24:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartAMPacket" scoped="" ref="0x7f85d89208c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f85d8920c40"/>
        <function-ref name="source" scoped="" ref="0x7f85d8920dd0"/>
        <function-ref name="address" scoped="" ref="0x7f85d893a020"/>
        <function-ref name="destination" scoped="" ref="0x7f85d893a1b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f85d893a340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f85d893a4d0"/>
        <function-ref name="type" scoped="" ref="0x7f85d893a660"/>
        <function-ref name="setType" scoped="" ref="0x7f85d893a7f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f85d893a980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f85d893ab10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f85d893aca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f85d8931c90" loc="30:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f85d8931c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f85d891e0a0"/>
        <function-ref name="source" scoped="" ref="0x7f85d891e230"/>
        <function-ref name="address" scoped="" ref="0x7f85d891e3c0"/>
        <function-ref name="destination" scoped="" ref="0x7f85d891e550"/>
        <function-ref name="setSource" scoped="" ref="0x7f85d891e6e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f85d891e870"/>
        <function-ref name="type" scoped="" ref="0x7f85d891ea00"/>
        <function-ref name="setType" scoped="" ref="0x7f85d891eb90"/>
        <function-ref name="isForMe" scoped="" ref="0x7f85d891ed20"/>
        <function-ref name="setGroup" scoped="" ref="0x7f85d891d020"/>
        <function-ref name="localGroup" scoped="" ref="0x7f85d891d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerLeds" ref="0x7f85d890b650" loc="35:MaestroC.nc">
      <component-ref qname="MaestroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerLeds" scoped="" ref="0x7f85d890b650"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d8907c40"/>
        <function-ref name="fired" scoped="" ref="0x7f85d89081e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f85d8907020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f85d8908ae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f85d8906590"/>
        <function-ref name="gett0" scoped="" ref="0x7f85d8906110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d8908660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f85d8909390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f85d8907630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f85d8909860"/>
        <function-ref name="stop" scoped="" ref="0x7f85d8909d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f85d88745f0" loc="46:../../../tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d88745f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d8874970"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d8874b00"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d8874c90"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d8874e20"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d8871020"/>
        <function-ref name="get" scoped="" ref="0x7f85d88711b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d8871340"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d8871980"/>
        <function-ref name="set" scoped="" ref="0x7f85d88714d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d8871660"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d88717f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x7f85d88657b0" loc="50:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f85d88657b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8865b30"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8865cc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8865e50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d886b020"/>
        <function-ref name="get" scoped="" ref="0x7f85d886b1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d886b340"/>
        <function-ref name="set" scoped="" ref="0x7f85d886b4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d886b660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d88708d0" loc="46:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d88708d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8870c50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x7f85d886b980" loc="51:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f85d886b980"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d886bd00"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d886a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d886a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d886a340"/>
        <function-ref name="get" scoped="" ref="0x7f85d886a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d886a660"/>
        <function-ref name="set" scoped="" ref="0x7f85d886a7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d886a980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x7f85d886d020" loc="47:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d886d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d886d3a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d886d530"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d886d6c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d886d850"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d886d9e0"/>
        <function-ref name="get" scoped="" ref="0x7f85d886db70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d886dd00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d886c4d0"/>
        <function-ref name="set" scoped="" ref="0x7f85d886c020"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d886c1b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d886c340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x7f85d886aca0" loc="52:../../../tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f85d886aca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d88640a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8864230"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d88643c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8864550"/>
        <function-ref name="get" scoped="" ref="0x7f85d88646e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8864870"/>
        <function-ref name="set" scoped="" ref="0x7f85d8864a00"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8864b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x7f85d8848360" loc="41:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led0" scoped="" ref="0x7f85d8848360"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d88486e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8848870"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8848a00"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8848b90"/>
        <function-ref name="get" scoped="" ref="0x7f85d8848d20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8847020"/>
        <function-ref name="set" scoped="" ref="0x7f85d88471b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8847340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x7f85d88476a0" loc="42:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led1" scoped="" ref="0x7f85d88476a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8847a20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8847bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8847d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8846020"/>
        <function-ref name="get" scoped="" ref="0x7f85d88461b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8846340"/>
        <function-ref name="set" scoped="" ref="0x7f85d88464d0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8846660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x7f85d8845c40" loc="44:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d8845c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8844020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x7f85d88469c0" loc="43:../../../tos/platforms/telosa/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Led2" scoped="" ref="0x7f85d88469c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8846d40"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8845020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d88451b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8845340"/>
        <function-ref name="get" scoped="" ref="0x7f85d88454d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8845660"/>
        <function-ref name="set" scoped="" ref="0x7f85d88457f0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8845980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f85d882ad50" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f85d882ad50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8829100"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8829290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8829420"/>
        <function-ref name="clr" scoped="" ref="0x7f85d88271b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8829740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d88298d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8829a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8829bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8829d80"/>
        <function-ref name="get" scoped="" ref="0x7f85d8828020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d88281b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8828340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d88284d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8828760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d88288f0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8828a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8828c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d88295b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8828da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8827020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f85d8811e50" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f85d8811e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8810210"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d88103a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8810530"/>
        <function-ref name="clr" scoped="" ref="0x7f85d880e340"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8810850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d88109e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8810b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8810d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d880f020"/>
        <function-ref name="get" scoped="" ref="0x7f85d880f1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d880f340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d880f4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d880f660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d880f8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d880fa80"/>
        <function-ref name="set" scoped="" ref="0x7f85d880fc10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d880fda0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d88106c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d880e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d880e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SDA" ref="0x7f85d87863d0" loc="205:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SDA" scoped="" ref="0x7f85d87863d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8786750"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87868e0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8786a70"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87847f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8786d90"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8785020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87851b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8785340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87854d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8785660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87857f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8785980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8785b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8785da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8784020"/>
        <function-ref name="set" scoped="" ref="0x7f85d87841b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8784340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8786c00"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87844d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8784660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC6" ref="0x7f85d878c3e0" loc="201:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC6" scoped="" ref="0x7f85d878c3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d878c760"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d878c8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d878ca80"/>
        <function-ref name="clr" scoped="" ref="0x7f85d878a7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d878cda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d878b020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d878b1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d878b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d878b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d878b660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d878b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d878b980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d878bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d878bda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d878a020"/>
        <function-ref name="set" scoped="" ref="0x7f85d878a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d878a340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d878cc10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d878a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d878a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI0" ref="0x7f85d87b43f0" loc="183:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI0" scoped="" ref="0x7f85d87b43f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87b4770"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87b4900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87b4a90"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87b27f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87b4db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87b3020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87b31b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87b3340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87b34d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87b3660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87b37f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87b3980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87b3b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87b3da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87b2020"/>
        <function-ref name="set" scoped="" ref="0x7f85d87b21b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87b2340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87b4c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87b24d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87b2660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port30" ref="0x7f85d880ce50" loc="72:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port30" scoped="" ref="0x7f85d880ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d880b210"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d880b3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d880b530"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8809340"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d880b850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d880b9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d880bb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d880bd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d880a020"/>
        <function-ref name="get" scoped="" ref="0x7f85d880a1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d880a340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d880a4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d880a660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d880a8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d880aa80"/>
        <function-ref name="set" scoped="" ref="0x7f85d880ac10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d880ada0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d880b6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8809020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d88091b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port42" ref="0x7f85d87f1020" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port42" scoped="" ref="0x7f85d87f1020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87f13a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87f1530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87f16c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87ef4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87f19e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87f1b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87f1d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87f0020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87f01b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87f0340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87f04d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87f0660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87f07f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87f0a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87f0c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d87f0da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87ef020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87f1850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87ef1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87ef340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port54" ref="0x7f85d87d8020" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port54" scoped="" ref="0x7f85d87d8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87d83a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87d8530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87d86c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87d64d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87d89e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87d8b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87d8d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87d7020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87d71b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87d7340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87d74d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87d7660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87d77f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87d7a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87d7c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d87d7da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87d6020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87d8850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87d61b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87d6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port64" ref="0x7f85d87c3020" loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port64" scoped="" ref="0x7f85d87c3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87c33a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87c3530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87c36c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87c14d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87c39e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87c3b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87c3d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87c2020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87c21b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87c2340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87c24d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87c2660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87c27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87c2a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87c2c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d87c2da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87c1020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87c3850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87c11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87c1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD0" ref="0x7f85d87af3f0" loc="185:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD0" scoped="" ref="0x7f85d87af3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87af770"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87af900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87afa90"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87ad7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87afdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87ae020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87ae1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87ae340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87ae4d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87ae660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87ae7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87ae980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87aeb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87aeda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87ad020"/>
        <function-ref name="set" scoped="" ref="0x7f85d87ad1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87ad340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87afc20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87ad4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87ad660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC0" ref="0x7f85d879b3e0" loc="195:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC0" scoped="" ref="0x7f85d879b3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d879b760"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d879b8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d879ba80"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87997f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d879bda0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d879a020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d879a1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d879a340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d879a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d879a660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d879a7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d879a980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d879ab10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d879ada0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8799020"/>
        <function-ref name="set" scoped="" ref="0x7f85d87991b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8799340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d879bc10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87994d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8799660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSIN" ref="0x7f85d877c3f0" loc="211:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSIN" scoped="" ref="0x7f85d877c3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d877c770"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d877c900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d877ca90"/>
        <function-ref name="clr" scoped="" ref="0x7f85d877a7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d877cdb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d877b020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d877b1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d877b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d877b4d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d877b660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d877b7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d877b980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d877bb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d877bda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d877a020"/>
        <function-ref name="set" scoped="" ref="0x7f85d877a1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d877a340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d877cc20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d877a4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d877a660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f85d8822580" loc="57:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f85d8822580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8822900"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8822a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8822c20"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8820980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8821020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d88211b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8821340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d88214d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8821660"/>
        <function-ref name="get" scoped="" ref="0x7f85d88217f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8821980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8821b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8821ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8820020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d88201b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8820340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d88204d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8822db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8820660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d88207f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD0" ref="0x7f85d87adbc0" loc="186:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD0" scoped="" ref="0x7f85d87adbc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87ac020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87ac1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87ac340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87aa020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87ac660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87ac7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87ac980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87acb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87acca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87ace30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87ab020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87ab1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87ab340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87ab5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87ab760"/>
        <function-ref name="set" scoped="" ref="0x7f85d87ab8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87aba80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87ac4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87abc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87abda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f85d881d580" loc="62:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f85d881d580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d881d900"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d881da90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d881dc20"/>
        <function-ref name="clr" scoped="" ref="0x7f85d881b980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d881c020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d881c1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d881c340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d881c4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d881c660"/>
        <function-ref name="get" scoped="" ref="0x7f85d881c7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d881c980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d881cb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d881cca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d881b020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d881b1b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d881b340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d881b4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d881ddb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d881b660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d881b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port33" ref="0x7f85d8804710" loc="75:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port33" scoped="" ref="0x7f85d8804710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8804a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8804c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8804db0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8802a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d88031b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8803340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d88034d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8803660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d88037f0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8803980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8803b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8803ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8803e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8802120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d88022b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8802440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d88025d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8803020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8802760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d88028f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port45" ref="0x7f85d87ea8a0" loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port45" scoped="" ref="0x7f85d87ea8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87eac20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87eadb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87e9020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87e8c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87e9340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87e94d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87e9660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87e97f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87e9980"/>
        <function-ref name="get" scoped="" ref="0x7f85d87e9b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87e9ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87e9e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87e8020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87e82b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87e8440"/>
        <function-ref name="set" scoped="" ref="0x7f85d87e85d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87e8760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87e91b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87e88f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87e8a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port57" ref="0x7f85d87d18a0" loc="101:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port57" scoped="" ref="0x7f85d87d18a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87d1c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87d1db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87d0020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87cfc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87d0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87d04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87d0660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87d07f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87d0980"/>
        <function-ref name="get" scoped="" ref="0x7f85d87d0b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87d0ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87d0e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87cf020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87cf2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87cf440"/>
        <function-ref name="set" scoped="" ref="0x7f85d87cf5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87cf760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87d01b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87cf8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87cfa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port67" ref="0x7f85d87bc8a0" loc="112:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port67" scoped="" ref="0x7f85d87bc8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87bcc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87bcdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87bb020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87bac10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87bb340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87bb4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87bb660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87bb7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87bb980"/>
        <function-ref name="get" scoped="" ref="0x7f85d87bbb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87bbca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87bbe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87ba020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87ba2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87ba440"/>
        <function-ref name="set" scoped="" ref="0x7f85d87ba5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87ba760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87bb1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87ba8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87baa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f85d882fd50" loc="52:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f85d882fd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d882e100"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d882e290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d882e420"/>
        <function-ref name="clr" scoped="" ref="0x7f85d882c1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d882e740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d882e8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d882ea60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d882ebf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d882ed80"/>
        <function-ref name="get" scoped="" ref="0x7f85d882d020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d882d1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d882d340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d882d4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d882d760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d882d8f0"/>
        <function-ref name="set" scoped="" ref="0x7f85d882da80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d882dc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d882e5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d882dda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d882c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f85d8816d50" loc="65:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f85d8816d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8815210"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d88153a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8815530"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8813340"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8815850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d88159e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8815b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8815d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8814020"/>
        <function-ref name="get" scoped="" ref="0x7f85d88141b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8814340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d88144d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8814660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d88148f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8814a80"/>
        <function-ref name="set" scoped="" ref="0x7f85d8814c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8814da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d88156c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8813020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d88131b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port36" ref="0x7f85d87fce50" loc="78:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port36" scoped="" ref="0x7f85d87fce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87fb210"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87fb3a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87fb530"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87f9340"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87fb850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87fb9e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87fbb70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87fbd00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87fa020"/>
        <function-ref name="get" scoped="" ref="0x7f85d87fa1b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87fa340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87fa4d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87fa660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87fa8f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87faa80"/>
        <function-ref name="set" scoped="" ref="0x7f85d87fac10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87fada0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87fb6c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87f9020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87f91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO0" ref="0x7f85d87b7bc0" loc="182:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO0" scoped="" ref="0x7f85d87b7bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87b6020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87b61b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87b6340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87b4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87b6660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87b67f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87b6980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87b6b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87b6ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87b6e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87b5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87b51b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87b5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87b55d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87b5760"/>
        <function-ref name="set" scoped="" ref="0x7f85d87b58f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87b5a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87b64d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87b5c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87b5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC3" ref="0x7f85d8794bb0" loc="198:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC3" scoped="" ref="0x7f85d8794bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8793020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87931b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8793340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8791020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8793660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87937f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8793980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8793b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8793ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8793e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8792020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87921b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8792340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87925d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8792760"/>
        <function-ref name="set" scoped="" ref="0x7f85d87928f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8792a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87934d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8792c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8792da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC1" ref="0x7f85d877fbb0" loc="209:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC1" scoped="" ref="0x7f85d877fbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d877e020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d877e1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d877e340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d877c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d877e660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d877e7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d877e980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d877eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d877eca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d877ee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d877d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d877d1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d877d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d877d5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d877d760"/>
        <function-ref name="set" scoped="" ref="0x7f85d877d8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d877da80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d877e4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d877dc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d877dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK1" ref="0x7f85d87a3bc0" loc="191:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK1" scoped="" ref="0x7f85d87a3bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87a2020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87a21b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87a2340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87a0020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87a2660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87a27f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87a2980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87a2b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87a2ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87a2e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87a1020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87a11b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87a1340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87a15d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87a1760"/>
        <function-ref name="set" scoped="" ref="0x7f85d87a18f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87a1a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87a24d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87a1c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87a1da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port40" ref="0x7f85d87f7e50" loc="83:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port40" scoped="" ref="0x7f85d87f7e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87f6410"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87f65a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87f6730"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87f44d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87f6a50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87f6be0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87f6d70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87f5020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87f51b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87f5340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87f54d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87f5660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87f57f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87f5a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87f5c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d87f5da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87f4020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87f68c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87f41b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87f4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port52" ref="0x7f85d87dd020" loc="96:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port52" scoped="" ref="0x7f85d87dd020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87dd3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87dd530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87dd6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87db4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87dd9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87ddb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87ddd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87dc020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87dc1b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87dc340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87dc4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87dc660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87dc7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87dca80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87dcc10"/>
        <function-ref name="set" scoped="" ref="0x7f85d87dcda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87db020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87dd850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87db1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87db340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port62" ref="0x7f85d87c9020" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port62" scoped="" ref="0x7f85d87c9020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87c93a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87c9530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87c96c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87c74d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87c99e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87c9b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87c9d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87c8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87c81b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87c8340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87c84d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87c8660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87c87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87c8a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87c8c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d87c8da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87c7020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87c9850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87c71b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87c7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC4" ref="0x7f85d87913e0" loc="199:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC4" scoped="" ref="0x7f85d87913e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8791760"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87918f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8791a80"/>
        <function-ref name="clr" scoped="" ref="0x7f85d878f7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8791da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8790020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87901b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8790340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87904d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8790660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87907f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8790980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8790b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8790da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d878f020"/>
        <function-ref name="set" scoped="" ref="0x7f85d878f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d878f340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8791c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d878f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d878f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE1" ref="0x7f85d87aa3e0" loc="188:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE1" scoped="" ref="0x7f85d87aa3e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87aa760"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87aa8f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87aaa80"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87a87f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87aada0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87a9020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87a91b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87a9340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87a94d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87a9660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87a97f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87a9980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87a9b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87a9da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87a8020"/>
        <function-ref name="set" scoped="" ref="0x7f85d87a81b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87a8340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87aac10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87a84d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87a8660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f85d8827580" loc="55:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f85d8827580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8827900"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8827a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8827c20"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8825980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8826020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d88261b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8826340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d88264d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8826660"/>
        <function-ref name="get" scoped="" ref="0x7f85d88267f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8826980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8826b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8826ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8825020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d88251b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8825340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d88254d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8827db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8825660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d88257f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f85d880e710" loc="68:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f85d880e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d880ea90"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d880ec20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d880edb0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d880ca80"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d880d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d880d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d880d4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d880d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d880d7f0"/>
        <function-ref name="get" scoped="" ref="0x7f85d880d980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d880db10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d880dca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d880de30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d880c120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d880c2b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d880c440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d880c5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d880d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d880c760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d880c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port60" ref="0x7f85d87ce020" loc="105:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port60" scoped="" ref="0x7f85d87ce020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87ce3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87ce530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87ce6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87cc4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87ce9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87ceb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87ced00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87cd020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87cd1b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87cd340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87cd4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87cd660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87cd7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87cda80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87cdc10"/>
        <function-ref name="set" scoped="" ref="0x7f85d87cdda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87cc020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87ce850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87cc1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87cc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port31" ref="0x7f85d8809710" loc="73:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port31" scoped="" ref="0x7f85d8809710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8809a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8809c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8809db0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8807a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d88081b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8808340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d88084d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8808660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d88087f0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8808980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8808b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8808ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8808e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8807120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d88072b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8807440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d88075d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8808020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8807760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d88078f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port43" ref="0x7f85d87ef8a0" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port43" scoped="" ref="0x7f85d87ef8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87efc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87efdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87ee020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87edc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87ee340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87ee4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87ee660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87ee7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87ee980"/>
        <function-ref name="get" scoped="" ref="0x7f85d87eeb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87eeca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87eee30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87ed020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87ed2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87ed440"/>
        <function-ref name="set" scoped="" ref="0x7f85d87ed5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87ed760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87ee1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87ed8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87eda80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port55" ref="0x7f85d87d68a0" loc="99:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port55" scoped="" ref="0x7f85d87d68a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87d6c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87d6db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87d5020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87d4c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87d5340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87d54d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87d5660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87d57f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87d5980"/>
        <function-ref name="get" scoped="" ref="0x7f85d87d5b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87d5ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87d5e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87d4020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87d42b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87d4440"/>
        <function-ref name="set" scoped="" ref="0x7f85d87d45d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87d4760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87d51b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87d48f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87d4a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port65" ref="0x7f85d87c18a0" loc="110:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port65" scoped="" ref="0x7f85d87c18a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87c1c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87c1db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87c0020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87bfc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87c0340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87c04d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87c0660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87c07f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87c0980"/>
        <function-ref name="get" scoped="" ref="0x7f85d87c0b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87c0ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87c0e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87bf020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87bf2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87bf440"/>
        <function-ref name="set" scoped="" ref="0x7f85d87bf5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87bf760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87c01b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87bf8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87bfa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SOMI1" ref="0x7f85d87a53f0" loc="190:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI1" scoped="" ref="0x7f85d87a53f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87a5770"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87a5900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87a5a90"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87a37f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87a5db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87a4020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87a41b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87a4340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87a44d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87a4660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87a47f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87a4980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87a4b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87a4da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87a3020"/>
        <function-ref name="set" scoped="" ref="0x7f85d87a31b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87a3340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87a5c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87a34d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87a3660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f85d8833cb0" loc="50:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f85d8833cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d88400a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8840230"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d88403c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d88311b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d88406e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8840870"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8840a00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8840b90"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8840d20"/>
        <function-ref name="get" scoped="" ref="0x7f85d883f020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d883f1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d883f340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d883f4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d883f760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d883f8f0"/>
        <function-ref name="set" scoped="" ref="0x7f85d883fa80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d883fc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8840550"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d883fda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8831020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f85d881bd50" loc="63:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f85d881bd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d881a100"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d881a290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d881a420"/>
        <function-ref name="clr" scoped="" ref="0x7f85d88181b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d881a740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d881a8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d881aa60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d881abf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d881ad80"/>
        <function-ref name="get" scoped="" ref="0x7f85d8819020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d88191b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8819340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d88194d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8819760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d88198f0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8819a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8819c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d881a5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8819da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8818020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port34" ref="0x7f85d8802e50" loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port34" scoped="" ref="0x7f85d8802e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8801210"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d88013a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8801530"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87ff340"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8801850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d88019e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8801b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8801d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8800020"/>
        <function-ref name="get" scoped="" ref="0x7f85d88001b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8800340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d88004d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8800660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d88008f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8800a80"/>
        <function-ref name="set" scoped="" ref="0x7f85d8800c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8800da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d88016c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87ff020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87ff1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port46" ref="0x7f85d87e7020" loc="89:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port46" scoped="" ref="0x7f85d87e7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87e73a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87e7530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87e76c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87e54d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87e79e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87e7b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87e7d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87e6020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87e61b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87e6340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87e64d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87e6660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87e67f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87e6a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87e6c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d87e6da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87e5020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87e7850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87e51b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87e5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UTXD1" ref="0x7f85d87a03f0" loc="192:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD1" scoped="" ref="0x7f85d87a03f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87a0770"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87a0900"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87a0a90"/>
        <function-ref name="clr" scoped="" ref="0x7f85d879e7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87a0db0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d879f020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d879f1b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d879f340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d879f4d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d879f660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d879f7f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d879f980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d879fb10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d879fda0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d879e020"/>
        <function-ref name="set" scoped="" ref="0x7f85d879e1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d879e340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87a0c20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d879e4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d879e660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC1" ref="0x7f85d8799bb0" loc="196:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC1" scoped="" ref="0x7f85d8799bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8798020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87981b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8798340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8796020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8798660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87987f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8798980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8798b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8798ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8798e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8797020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87971b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8797340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87975d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8797760"/>
        <function-ref name="set" scoped="" ref="0x7f85d87978f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8797a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87984d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8797c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8797da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC7" ref="0x7f85d878abb0" loc="202:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC7" scoped="" ref="0x7f85d878abb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8788020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87881b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8788340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8786020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8788660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87887f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8788980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8788b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8788ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8788e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8787020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87871b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8787340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87875d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8787760"/>
        <function-ref name="set" scoped="" ref="0x7f85d87878f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8787a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87884d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8787c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8787da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port50" ref="0x7f85d87e2020" loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port50" scoped="" ref="0x7f85d87e2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87e23a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87e2530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87e26c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87e04d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87e29e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87e2b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87e2d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87e1020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87e11b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87e1340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87e14d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87e1660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87e17f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87e1a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87e1c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d87e1da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87e0020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87e2850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87e01b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87e0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="URXD1" ref="0x7f85d879ebc0" loc="193:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD1" scoped="" ref="0x7f85d879ebc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d879d020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d879d1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d879d340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d879b020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d879d660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d879d7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d879d980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d879db10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d879dca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d879de30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d879c020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d879c1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d879c340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d879c5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d879c760"/>
        <function-ref name="set" scoped="" ref="0x7f85d879c8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d879ca80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d879d4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d879cc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d879cda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f85d882c580" loc="53:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f85d882c580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d882c900"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d882ca90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d882cc20"/>
        <function-ref name="clr" scoped="" ref="0x7f85d882a980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d882b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d882b1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d882b340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d882b4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d882b660"/>
        <function-ref name="get" scoped="" ref="0x7f85d882b7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d882b980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d882bb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d882bca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d882a020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d882a1b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d882a340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d882a4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d882cdb0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d882a660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d882a7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f85d8813710" loc="66:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f85d8813710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8813a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8813c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8813db0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8811a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d88121b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8812340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d88124d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8812660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d88127f0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8812980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8812b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8812ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8812e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8811120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d88112b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8811440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d88115d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8812020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8811760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d88118f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port37" ref="0x7f85d87f9710" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port37" scoped="" ref="0x7f85d87f9710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87f9a90"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87f9c20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87f9db0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87f7a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87f81b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87f8340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87f84d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87f8660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87f87f0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87f8980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87f8b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87f8ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87f8e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87f7120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87f72b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d87f7440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87f75d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87f8020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87f7760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87f78f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SIMO1" ref="0x7f85d87a8bc0" loc="189:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO1" scoped="" ref="0x7f85d87a8bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87a7020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87a71b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87a7340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87a5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87a7660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87a77f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87a7980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87a7b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87a7ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87a7e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87a6020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87a61b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87a6340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87a65d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87a6760"/>
        <function-ref name="set" scoped="" ref="0x7f85d87a68f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87a6a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87a74d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87a6c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87a6da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC5" ref="0x7f85d878fbb0" loc="200:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC5" scoped="" ref="0x7f85d878fbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d878e020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d878e1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d878e340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d878c020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d878e660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d878e7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d878e980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d878eb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d878eca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d878ee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d878d020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d878d1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d878d340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d878d5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d878d760"/>
        <function-ref name="set" scoped="" ref="0x7f85d878d8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d878da80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d878e4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d878dc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d878dda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port41" ref="0x7f85d87f48a0" loc="84:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port41" scoped="" ref="0x7f85d87f48a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87f4c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87f4db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87f3020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87f2c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87f3340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87f34d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87f3660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87f37f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87f3980"/>
        <function-ref name="get" scoped="" ref="0x7f85d87f3b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87f3ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87f3e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87f2020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87f22b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87f2440"/>
        <function-ref name="set" scoped="" ref="0x7f85d87f25d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87f2760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87f31b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87f28f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87f2a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port53" ref="0x7f85d87db8a0" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port53" scoped="" ref="0x7f85d87db8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87dbc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87dbdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87da020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87d9c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87da340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87da4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87da660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87da7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87da980"/>
        <function-ref name="get" scoped="" ref="0x7f85d87dab10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87daca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87dae30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87d9020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87d92b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87d9440"/>
        <function-ref name="set" scoped="" ref="0x7f85d87d95d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87d9760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87da1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87d98f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87d9a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port63" ref="0x7f85d87c78a0" loc="108:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port63" scoped="" ref="0x7f85d87c78a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87c7c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87c7db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87c6020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87c5c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87c6340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87c64d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87c6660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87c67f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87c6980"/>
        <function-ref name="get" scoped="" ref="0x7f85d87c6b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87c6ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87c6e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87c5020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87c52b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87c5440"/>
        <function-ref name="set" scoped="" ref="0x7f85d87c55d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87c5760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87c61b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87c58f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87c5a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f85d8825d50" loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f85d8825d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8824100"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8824290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8824420"/>
        <function-ref name="clr" scoped="" ref="0x7f85d88221b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8824740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d88248d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8824a60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8824bf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8824d80"/>
        <function-ref name="get" scoped="" ref="0x7f85d8823020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d88231b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8823340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d88234d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8823760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d88238f0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8823a80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8823c10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d88245b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8823da0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8822020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port61" ref="0x7f85d87cc8a0" loc="106:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port61" scoped="" ref="0x7f85d87cc8a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87ccc20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87ccdb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87cb020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87cac10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87cb340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87cb4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87cb660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87cb7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87cb980"/>
        <function-ref name="get" scoped="" ref="0x7f85d87cbb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87cbca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87cbe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87ca020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87ca2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87ca440"/>
        <function-ref name="set" scoped="" ref="0x7f85d87ca5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87ca760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87cb1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87ca8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87caa80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f85d8820d50" loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f85d8820d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d881f100"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d881f290"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d881f420"/>
        <function-ref name="clr" scoped="" ref="0x7f85d881d1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d881f740"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d881f8d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d881fa60"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d881fbf0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d881fd80"/>
        <function-ref name="get" scoped="" ref="0x7f85d881e020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d881e1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d881e340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d881e4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d881e760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d881e8f0"/>
        <function-ref name="set" scoped="" ref="0x7f85d881ea80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d881ec10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d881f5b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d881eda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d881d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port32" ref="0x7f85d8807e50" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port32" scoped="" ref="0x7f85d8807e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8806210"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d88063a0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8806530"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8804340"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8806850"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d88069e0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8806b70"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8806d00"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8805020"/>
        <function-ref name="get" scoped="" ref="0x7f85d88051b0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8805340"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d88054d0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8805660"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d88058f0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8805a80"/>
        <function-ref name="set" scoped="" ref="0x7f85d8805c10"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8805da0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d88066c0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8804020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d88041b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port44" ref="0x7f85d87ec020" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port44" scoped="" ref="0x7f85d87ec020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87ec3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87ec530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87ec6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87ea4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87ec9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87ecb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87ecd00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87eb020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87eb1b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87eb340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87eb4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87eb660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87eb7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87eba80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87ebc10"/>
        <function-ref name="set" scoped="" ref="0x7f85d87ebda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87ea020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87ec850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87ea1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87ea340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port56" ref="0x7f85d87d3020" loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port56" scoped="" ref="0x7f85d87d3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87d33a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87d3530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87d36c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87d14d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87d39e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87d3b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87d3d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87d2020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87d21b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87d2340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87d24d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87d2660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87d27f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87d2a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87d2c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d87d2da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87d1020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87d3850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87d11b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87d1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port66" ref="0x7f85d87be020" loc="111:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port66" scoped="" ref="0x7f85d87be020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87be3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87be530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87be6c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87bc4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87be9e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87beb70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87bed00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87bd020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87bd1b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87bd340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87bd4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87bd660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87bd7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87bda80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87bdc10"/>
        <function-ref name="set" scoped="" ref="0x7f85d87bdda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87bc020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87be850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87bc1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87bc340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f85d8831580" loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f85d8831580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8831900"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8831a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8831c20"/>
        <function-ref name="clr" scoped="" ref="0x7f85d882f980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8830020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d88301b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8830340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d88304d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8830660"/>
        <function-ref name="get" scoped="" ref="0x7f85d88307f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8830980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8830b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8830ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d882f020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d882f1b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d882f340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d882f4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8831db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d882f660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d882f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f85d8818580" loc="64:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f85d8818580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8818900"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8818a90"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8818c20"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8816980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8817020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d88171b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8817340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d88174d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8817660"/>
        <function-ref name="get" scoped="" ref="0x7f85d88177f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8817980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8817b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8817ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8816020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d88161b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8816340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d88164d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8818db0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8816660"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d88167f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port35" ref="0x7f85d87ff710" loc="77:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port35" scoped="" ref="0x7f85d87ff710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87ffa90"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87ffc20"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87ffdb0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87fca80"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87fd1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87fd340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87fd4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87fd660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87fd7f0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87fd980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87fdb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87fdca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87fde30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87fc120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87fc2b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d87fc440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87fc5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87fd020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87fc760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87fc8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port47" ref="0x7f85d87e58a0" loc="90:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port47" scoped="" ref="0x7f85d87e58a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87e5c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87e5db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87e4020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87e3c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87e4340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87e44d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87e4660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87e47f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87e4980"/>
        <function-ref name="get" scoped="" ref="0x7f85d87e4b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87e4ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87e4e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87e3020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87e32b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87e3440"/>
        <function-ref name="set" scoped="" ref="0x7f85d87e35d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87e3760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87e41b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87e38f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87e3a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADC2" ref="0x7f85d87963e0" loc="197:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADC2" scoped="" ref="0x7f85d87963e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8796760"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87968f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8796a80"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87947f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8796da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8795020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87951b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8795340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87954d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8795660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87957f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8795980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8795b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8795da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8794020"/>
        <function-ref name="set" scoped="" ref="0x7f85d87941b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8794340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8796c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87944d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8794660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SCL" ref="0x7f85d8784ba0" loc="206:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SCL" scoped="" ref="0x7f85d8784ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8783020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87831b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8783340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8781020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8783660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87837f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8783980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8783b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8783ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8783e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8782020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87821b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8782340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87825d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8782760"/>
        <function-ref name="set" scoped="" ref="0x7f85d87828f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8782a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87834d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8782c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8782da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UCLK0" ref="0x7f85d87b2bc0" loc="184:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK0" scoped="" ref="0x7f85d87b2bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87b1020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87b11b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87b1340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87af020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87b1660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87b17f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87b1980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87b1b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87b1ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87b1e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87b0020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87b01b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87b0340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87b05d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87b0760"/>
        <function-ref name="set" scoped="" ref="0x7f85d87b08f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87b0a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87b14d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87b0c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87b0da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port51" ref="0x7f85d87e08a0" loc="95:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port51" scoped="" ref="0x7f85d87e08a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87e0c20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87e0db0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87df020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87dec10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87df340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87df4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87df660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87df7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87df980"/>
        <function-ref name="get" scoped="" ref="0x7f85d87dfb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87dfca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87dfe30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87de020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87de2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87de440"/>
        <function-ref name="set" scoped="" ref="0x7f85d87de5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87de760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87df1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87de8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87dea80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DAC0" ref="0x7f85d87813e0" loc="208:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DAC0" scoped="" ref="0x7f85d87813e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8781760"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87818f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8781a80"/>
        <function-ref name="clr" scoped="" ref="0x7f85d877f7f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8781da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8780020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87801b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8780340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87804d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8780660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87807f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8780980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8780b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8780da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d877f020"/>
        <function-ref name="set" scoped="" ref="0x7f85d877f1b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d877f340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8781c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d877f4d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d877f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SVSOUT" ref="0x7f85d877abc0" loc="212:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SVSOUT" scoped="" ref="0x7f85d877abc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8779020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87791b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8779340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8777020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8779660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87797f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8779980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8779b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8779ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8779e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8778020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87781b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8778340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87785d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8778760"/>
        <function-ref name="set" scoped="" ref="0x7f85d87788f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8778a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87794d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8778c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8778da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STE0" ref="0x7f85d87b9060" loc="181:../../../tos/chips/msp430/pins/HplMsp430GeneralIOC.nc">
      <component-ref qname="HplMsp430GeneralIOC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STE0" scoped="" ref="0x7f85d87b9060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87b97e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87b9970"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d87b9b00"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87b77f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87b9e20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87b8020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87b81b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87b8340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87b84d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d87b8660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87b87f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d87b8980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87b8b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d87b8da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87b7020"/>
        <function-ref name="set" scoped="" ref="0x7f85d87b71b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87b7340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87b9c90"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87b74d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87b7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8746540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P10"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8746540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87468c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8746a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8746be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8744980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8745020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87451b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8745340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87454d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8745660"/>
        <function-ref name="get" scoped="" ref="0x7f85d87457f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8745980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8745b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8745ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8744020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87441b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8744340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87444d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8744660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8746d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87447f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8741b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P11"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8741b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8740020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87401b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8740340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d873e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8740660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87407f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8740980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8740b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8740ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8740e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d873f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d873f1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d873f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d873f5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d873f760"/>
        <function-ref name="set" scoped="" ref="0x7f85d873f8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d873fa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d873fc10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87404d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d873fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d873b060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P12"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d873b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d873b3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d873b570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d873b700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87394d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d873ba20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d873bbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d873bd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d873a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d873a1b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d873a340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d873a4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d873a660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d873a7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d873aa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d873ac10"/>
        <function-ref name="set" scoped="" ref="0x7f85d873ada0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8739020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87391b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d873b890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8739340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8736540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P13"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8736540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87368c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8736a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8736be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8734980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8735020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87351b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8735340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87354d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8735660"/>
        <function-ref name="get" scoped="" ref="0x7f85d87357f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8735980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8735b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8735ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8734020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87341b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8734340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87344d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8734660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8736d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87347f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8731b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P14"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8731b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8730020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d87301b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8730340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d872e020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8730660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87307f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8730980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8730b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8730ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8730e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d872f020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d872f1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d872f340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d872f5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d872f760"/>
        <function-ref name="set" scoped="" ref="0x7f85d872f8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d872fa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d872fc10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d87304d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d872fda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d872b060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P15"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d872b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d872b3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d872b570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d872b700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87284d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d872ba20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d872bbb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d872bd40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8729020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87291b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8729340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87294d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8729660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87297f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8729a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8729c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d8729da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8728020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87281b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d872b890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8728340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8725540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P16"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8725540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87258c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8725a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8725be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8723980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8724020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87241b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8724340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87244d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8724660"/>
        <function-ref name="get" scoped="" ref="0x7f85d87247f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8724980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8724b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8724ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8723020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87231b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8723340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87234d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8723660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8725d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87237f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8720b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P17"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8720b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d871f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d871f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d871f340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d871d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d871f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d871f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d871f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d871fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d871fca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d871fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d871e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d871e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d871e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d871e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d871e760"/>
        <function-ref name="set" scoped="" ref="0x7f85d871e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d871ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d871ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d871f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d871eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d871a060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P20"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d871a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d871a3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d871a570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d871a700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87184d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d871aa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d871abb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d871ad40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8719020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87191b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8719340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87194d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8719660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87197f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8719a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8719c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d8719da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8718020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87181b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d871a890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8718340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8715540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P21"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8715540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d87158c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8715a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8715be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8713980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8714020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d87141b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8714340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d87144d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8714660"/>
        <function-ref name="get" scoped="" ref="0x7f85d87147f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8714980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8714b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8714ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8713020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87131b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8713340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87134d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8713660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8715d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87137f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8710b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P22"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8710b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d870f020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d870f1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d870f340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d870d020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d870f660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d870f7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d870f980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d870fb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d870fca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d870fe30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d870e020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d870e1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d870e340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d870e5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d870e760"/>
        <function-ref name="set" scoped="" ref="0x7f85d870e8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d870ea80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d870ec10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d870f4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d870eda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d870a060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P23"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d870a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d870a3e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d870a570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d870a700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d87084d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d870aa20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d870abb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d870ad40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8709020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87091b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8709340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d87094d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8709660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d87097f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8709a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8709c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d8709da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8708020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d87081b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d870a890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8708340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d87056d0" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P24"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d87056d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8705a50"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8705be0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8705d70"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8703a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d87041b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8704340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d87044d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8704660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d87047f0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8704980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8704b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8704ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8704e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8703120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d87032b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8703440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d87035d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8703760"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8704020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d87038f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8700b90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P25"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8700b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86fe020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86fe1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86fe340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86fc020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86fe660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86fe7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86fe980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86feb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86feca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d86fee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86fd020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86fd1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86fd340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86fd5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86fd760"/>
        <function-ref name="set" scoped="" ref="0x7f85d86fd8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86fda80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86fdc10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86fe4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86fdda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86f9060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P26"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86f9060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86f93e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86f9570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86f9700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86f74d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86f9a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86f9bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86f9d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86f8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86f81b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d86f8340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86f84d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86f8660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86f87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86f8a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86f8c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d86f8da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86f7020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86f71b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86f9890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86f7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86f4540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P27"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86f4540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86f48c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86f4a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86f4be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86f2980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86f3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86f31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86f3340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86f34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86f3660"/>
        <function-ref name="get" scoped="" ref="0x7f85d86f37f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86f3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86f3b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86f3ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86f2020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86f21b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d86f2340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86f24d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86f2660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86f4d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86f27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86efb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P30"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86efb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86ee020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86ee1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86ee340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86ec020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86ee660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86ee7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86ee980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86eeb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86eeca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d86eee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86ed020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86ed1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86ed340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86ed5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86ed760"/>
        <function-ref name="set" scoped="" ref="0x7f85d86ed8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86eda80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86edc10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86ee4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86edda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86e9060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P31"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86e9060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86e93e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86e9570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86e9700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86e74d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86e9a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86e9bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86e9d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86e8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86e81b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d86e8340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86e84d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86e8660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86e87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86e8a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86e8c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d86e8da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86e7020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86e71b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86e9890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86e7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86e4540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P32"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86e4540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86e48c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86e4a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86e4be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86e2980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86e3020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86e31b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86e3340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86e34d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86e3660"/>
        <function-ref name="get" scoped="" ref="0x7f85d86e37f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86e3980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86e3b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86e3ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86e2020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86e21b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d86e2340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86e24d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86e2660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86e4d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86e27f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86dfb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P33"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86dfb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86de020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86de1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86de340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86dc020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86de660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86de7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86de980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86deb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86deca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d86dee30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86dd020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86dd1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86dd340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86dd5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86dd760"/>
        <function-ref name="set" scoped="" ref="0x7f85d86dd8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86dda80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86ddc10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86de4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86ddda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86d9060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P34"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86d9060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86d93e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86d9570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86d9700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86d74d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86d9a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86d9bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86d9d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86d8020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86d81b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d86d8340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86d84d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86d8660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86d87f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86d8a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86d8c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d86d8da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86d7020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86d71b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86d9890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86d7340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86d3540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P35"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86d3540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86d38c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86d3a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86d3be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86d1980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86d2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86d21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86d2340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86d24d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86d2660"/>
        <function-ref name="get" scoped="" ref="0x7f85d86d27f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86d2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86d2b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86d2ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86d1020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86d11b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d86d1340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86d14d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86d1660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86d3d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86d17f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86ceb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P36"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86ceb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86cd020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86cd1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86cd340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86cb020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86cd660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86cd7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86cd980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86cdb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86cdca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d86cde30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86cc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86cc1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86cc340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86cc5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86cc760"/>
        <function-ref name="set" scoped="" ref="0x7f85d86cc8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86cca80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86ccc10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86cd4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86ccda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86c8060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P37"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86c8060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86c83e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86c8570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86c8700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86c64d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86c8a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86c8bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86c8d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86c7020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86c71b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d86c7340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86c74d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86c7660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86c77f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86c7a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86c7c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d86c7da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86c6020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86c61b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86c8890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86c6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86c3740" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P40"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86c3740"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86c3ac0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86c3c50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86c3de0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86c1a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86c21b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86c2340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86c24d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86c2660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86c27f0"/>
        <function-ref name="get" scoped="" ref="0x7f85d86c2980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86c2b10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86c2ca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86c2e30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86c1120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86c12b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d86c1440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86c15d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86c1760"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86c2020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86c18f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86beb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P41"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86beb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86bd020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86bd1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86bd340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86bb020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86bd660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86bd7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86bd980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86bdb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86bdca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d86bde30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86bc020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86bc1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86bc340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86bc5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86bc760"/>
        <function-ref name="set" scoped="" ref="0x7f85d86bc8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86bca80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86bcc10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86bd4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86bcda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86b8060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P42"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86b8060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86b83e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86b8570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86b8700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86b64d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86b8a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86b8bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86b8d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86b7020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86b71b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d86b7340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86b74d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86b7660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86b77f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86b7a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86b7c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d86b7da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86b6020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86b61b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86b8890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86b6340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86b3540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P43"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86b3540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86b38c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86b3a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86b3be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86b1980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86b2020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86b21b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86b2340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86b24d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86b2660"/>
        <function-ref name="get" scoped="" ref="0x7f85d86b27f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86b2980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86b2b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86b2ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86b1020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86b11b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d86b1340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86b14d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86b1660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86b3d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86b17f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86aeb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P44"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86aeb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86ac020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86ac1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86ac340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86aa020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86ac660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86ac7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86ac980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86acb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86acca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d86ace30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86ab020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86ab1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86ab340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86ab5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86ab760"/>
        <function-ref name="set" scoped="" ref="0x7f85d86ab8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86aba80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86abc10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86ac4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86abda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86a7060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P45"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86a7060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86a73e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86a7570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86a7700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86a54d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86a7a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86a7bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86a7d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86a6020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86a61b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d86a6340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86a64d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86a6660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86a67f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86a6a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86a6c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d86a6da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86a5020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86a51b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86a7890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86a5340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d86a2540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P46"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d86a2540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86a28c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d86a2a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d86a2be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86a0980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d86a1020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86a11b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d86a1340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86a14d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86a1660"/>
        <function-ref name="get" scoped="" ref="0x7f85d86a17f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86a1980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86a1b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86a1ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86a0020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86a01b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d86a0340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86a04d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86a0660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d86a2d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86a07f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d869db90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P47"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d869db90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d869c020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d869c1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d869c340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d869a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d869c660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d869c7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d869c980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d869cb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d869cca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d869ce30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d869b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d869b1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d869b340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d869b5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d869b760"/>
        <function-ref name="set" scoped="" ref="0x7f85d869b8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d869ba80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d869bc10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d869c4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d869bda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8697060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P50"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8697060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86973e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8697570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8697700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86954d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8697a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8697bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8697d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8696020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86961b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8696340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86964d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8696660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86967f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8696a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8696c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d8696da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8695020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86951b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8697890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8695340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8692540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P51"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8692540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86928c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8692a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8692be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8690980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8691020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86911b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8691340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86914d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8691660"/>
        <function-ref name="get" scoped="" ref="0x7f85d86917f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8691980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8691b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8691ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8690020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d86901b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8690340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d86904d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8690660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8692d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d86907f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d868db90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P52"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d868db90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d868c020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d868c1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d868c340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d868a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d868c660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d868c7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d868c980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d868cb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d868cca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d868ce30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d868b020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d868b1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d868b340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d868b5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d868b760"/>
        <function-ref name="set" scoped="" ref="0x7f85d868b8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d868ba80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d868bc10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d868c4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d868bda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8687060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P53"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8687060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86873e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8687570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8687700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86854d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8687a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8687bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8687d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8686020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86861b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8686340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86864d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8686660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86867f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8686a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8686c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d8686da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8685020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86851b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8687890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8685340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8682540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P54"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8682540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86828c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8682a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8682be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d867f980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8680020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86801b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8680340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86804d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8680660"/>
        <function-ref name="get" scoped="" ref="0x7f85d86807f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8680980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8680b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8680ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d867f020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d867f1b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d867f340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d867f4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d867f660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8682d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d867f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d867cb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P55"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d867cb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d867b020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d867b1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d867b340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8679020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d867b660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d867b7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d867b980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d867bb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d867bca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d867be30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d867a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d867a1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d867a340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d867a5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d867a760"/>
        <function-ref name="set" scoped="" ref="0x7f85d867a8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d867aa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d867ac10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d867b4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d867ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8676060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P56"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8676060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86763e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8676570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8676700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86744d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8676a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8676bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8676d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8675020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86751b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8675340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86754d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8675660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86757f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8675a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8675c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d8675da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8674020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86741b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8676890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8674340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8671540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P57"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8671540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86718c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8671a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8671be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d866f980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8670020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86701b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8670340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86704d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8670660"/>
        <function-ref name="get" scoped="" ref="0x7f85d86707f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8670980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8670b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8670ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d866f020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d866f1b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d866f340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d866f4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d866f660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8671d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d866f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d866cb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P60"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d866cb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d866b020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d866b1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d866b340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8669020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d866b660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d866b7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d866b980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d866bb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d866bca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d866be30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d866a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d866a1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d866a340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d866a5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d866a760"/>
        <function-ref name="set" scoped="" ref="0x7f85d866a8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d866aa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d866ac10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d866b4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d866ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8666060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P61"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8666060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86663e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8666570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8666700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86644d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8666a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8666bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8666d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8665020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86651b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8665340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86654d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8665660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86657f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8665a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8665c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d8665da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8664020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86641b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8666890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8664340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8661540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P62"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8661540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86618c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8661a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8661be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d865f980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8660020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d86601b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8660340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d86604d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8660660"/>
        <function-ref name="get" scoped="" ref="0x7f85d86607f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8660980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8660b10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8660ca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d865f020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d865f1b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d865f340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d865f4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d865f660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8661d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d865f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d865cb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P63"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d865cb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d865b020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d865b1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d865b340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8659020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d865b660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d865b7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d865b980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d865bb10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d865bca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d865be30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d865a020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d865a1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d865a340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d865a5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d865a760"/>
        <function-ref name="set" scoped="" ref="0x7f85d865a8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d865aa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d865ac10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d865b4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d865ada0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8655060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P64"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8655060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86553e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8655570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8655700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86534d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8655a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8655bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8655d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8654020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86541b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8654340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86544d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8654660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86547f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8654a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8654c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d8654da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8653020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86531b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8655890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8653340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8650540" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P65"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8650540"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86508c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8650a50"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8650be0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d864e980"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d864f020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d864f1b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d864f340"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d864f4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d864f660"/>
        <function-ref name="get" scoped="" ref="0x7f85d864f7f0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d864f980"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d864fb10"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d864fca0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d864e020"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d864e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d864e340"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d864e4d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d864e660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8650d70"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d864e7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d864bb90" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P66"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d864bb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d864a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d864a1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d864a340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8648020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d864a660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d864a7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d864a980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d864ab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d864aca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d864ae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8649020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d86491b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8649340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d86495d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8649760"/>
        <function-ref name="set" scoped="" ref="0x7f85d86498f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8649a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8649c10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d864a4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8649da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x7f85d8645060" loc="87:../../../tos/chips/msp430/pins/HplMsp430GeneralIOP.nc">
      <component-ref qname="HplMsp430GeneralIOC.P67"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IO" scoped="" ref="0x7f85d8645060"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d86453e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8645570"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8645700"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d86434d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8645a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8645bb0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8645d40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8644020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d86441b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8644340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d86444d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d8644660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d86447f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8644a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8644c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d8644da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8643020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d86431b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8645890"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8643340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f85d85b7c50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d85b7c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d85b6020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d85b61b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d85b6340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d85b4020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d85b6660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d85b67f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d85b6980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d85b6b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d85b6ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d85b6e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d85b5020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d85b51b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d85b5340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d85b55d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d85b5760"/>
        <function-ref name="set" scoped="" ref="0x7f85d85b58f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d85b5a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d85b5c10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d85b64d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d85b5da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f85d85c89e0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led0Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f85d85c89e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d85c8d60"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d85b7020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d85b71b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d85b7340"/>
        <function-ref name="get" scoped="" ref="0x7f85d85b74d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d85b7660"/>
        <function-ref name="set" scoped="" ref="0x7f85d85b77f0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d85b7980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f85d85b12f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d85b12f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d85b1670"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d85b1800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d85b1990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d85af660"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d85b1cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d85b1e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d85b0020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d85b01b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d85b0340"/>
        <function-ref name="get" scoped="" ref="0x7f85d85b04d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d85b0660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d85b07f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d85b0980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d85b0c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d85b0da0"/>
        <function-ref name="set" scoped="" ref="0x7f85d85af020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d85af1b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d85af340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d85b1b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d85af4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f85d85b2020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led1Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f85d85b2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d85b23a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d85b2530"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d85b26c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d85b2850"/>
        <function-ref name="get" scoped="" ref="0x7f85d85b29e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d85b2b70"/>
        <function-ref name="set" scoped="" ref="0x7f85d85b2d00"/>
        <function-ref name="clr" scoped="" ref="0x7f85d85b1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f85d85ab7a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d85ab7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d85abb20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d85abcb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d85abe40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d85a9a80"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d85aa1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d85aa340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d85aa4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d85aa660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d85aa7f0"/>
        <function-ref name="get" scoped="" ref="0x7f85d85aa980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d85aab10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d85aaca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d85aae30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d85a9120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d85a92b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d85a9440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d85a95d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d85a9760"/>
        <function-ref name="clr" scoped="" ref="0x7f85d85aa020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d85a98f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f85d85ad630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="PlatformLedsC.Led2Impl"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f85d85ad630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d85ad9b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d85adb40"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d85adcd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d85ade60"/>
        <function-ref name="get" scoped="" ref="0x7f85d85ab020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d85ab1b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d85ab340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d85ab4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f85d859d760" loc="61:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f85d859d760"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f85d859dae0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f85d859dc70"/>
        <function-ref name="start" scoped="" ref="0x7f85d859de00"/>
        <function-ref name="stop" scoped="" ref="0x7f85d859a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f85d859a7f0" loc="63:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f85d859a7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d859ab70"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d859ad00"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d8599020"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d85991b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d8599340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f85d8598880" loc="65:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f85d8598880"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d8598c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f85d8597020" loc="67:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f85d8597020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d85973a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d8597530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d85976c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d8597850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d85979e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f85d8592310" loc="70:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f85d8592310"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f85d8586880"/>
        <function-ref name="clear" scoped="" ref="0x7f85d8585020"/>
        <function-ref name="isValid" scoped="" ref="0x7f85d8586150"/>
        <function-ref name="set" scoped="" ref="0x7f85d8585750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f85d8578130" loc="72:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f85d8578130"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f85d85784b0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f85d8578640"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f85d85787d0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f85d8578960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d8599b20" loc="64:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d8599b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d8598020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f85d8593080" loc="69:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d8593080"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f85d8593400"/>
        <function-ref name="noAck" scoped="" ref="0x7f85d8593590"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f85d8593720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f85d8597c90" loc="68:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f85d8597c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f85d85960a0"/>
        <function-ref name="source" scoped="" ref="0x7f85d8596230"/>
        <function-ref name="address" scoped="" ref="0x7f85d85963c0"/>
        <function-ref name="destination" scoped="" ref="0x7f85d8596550"/>
        <function-ref name="setSource" scoped="" ref="0x7f85d85966e0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f85d8596870"/>
        <function-ref name="type" scoped="" ref="0x7f85d8596a00"/>
        <function-ref name="setType" scoped="" ref="0x7f85d8596b90"/>
        <function-ref name="isForMe" scoped="" ref="0x7f85d8596d20"/>
        <function-ref name="setGroup" scoped="" ref="0x7f85d8595020"/>
        <function-ref name="localGroup" scoped="" ref="0x7f85d85951b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f85d85843f0" loc="71:../../../tos/platforms/telosa/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f85d85843f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f85d8582970"/>
        <function-ref name="clear" scoped="" ref="0x7f85d85810d0"/>
        <function-ref name="isValid" scoped="" ref="0x7f85d8582240"/>
        <function-ref name="set" scoped="" ref="0x7f85d8581800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f85d856bcc0" loc="55:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f85d856bcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f85d856a0a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f85d856a230"/>
        <function-ref name="start" scoped="" ref="0x7f85d856a3c0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d856a550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f85d8551e30" loc="64:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d8551e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f85d855a1e0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f85d855a370"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f85d855a500"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f85d855a690"/>
        <function-ref name="setCca" scoped="" ref="0x7f85d855a820"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f85d855a9b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f85d8545d20" loc="67:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f85d8545d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f85d854f1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f85d85668f0" loc="60:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f85d85668f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8566c70"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d8566e00"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d8565020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d85651b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d8565340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f85d856ad20" loc="56:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f85d856ad20"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d85690e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d8569270"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d8569400"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d8569590"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d8569720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f85d8568c00" loc="58:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f85d8568c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d8567020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f85d855c9b0" loc="61:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d855c9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f85d855cd30"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f85d8564020"/>
        <function-ref name="getRssi" scoped="" ref="0x7f85d85641b0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f85d8564340"/>
        <function-ref name="getPower" scoped="" ref="0x7f85d85644d0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f85d8564660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f85d855acb0" loc="65:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f85d855acb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f85d85580a0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f85d8558230"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f85d85583c0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f85d8558550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d8568020" loc="57:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d8568020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d85683a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f85d8564990" loc="62:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d8564990"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f85d8564d10"/>
        <function-ref name="noAck" scoped="" ref="0x7f85d8563020"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f85d85631b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f85d8550020" loc="66:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f85d8550020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f85d85503a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f85d8550530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f85d85506c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f85d8550850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f85d85509e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f85d85672d0" loc="59:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f85d85672d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f85d8567650"/>
        <function-ref name="source" scoped="" ref="0x7f85d85677e0"/>
        <function-ref name="address" scoped="" ref="0x7f85d8567970"/>
        <function-ref name="destination" scoped="" ref="0x7f85d8567b00"/>
        <function-ref name="setSource" scoped="" ref="0x7f85d8567c90"/>
        <function-ref name="setDestination" scoped="" ref="0x7f85d8567e20"/>
        <function-ref name="type" scoped="" ref="0x7f85d8566020"/>
        <function-ref name="setType" scoped="" ref="0x7f85d85661b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f85d8566340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f85d85664d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f85d8566660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f85d8559c70" loc="63:../../../tos/chips/cc2420/CC2420ActiveMessageC.nc">
      <component-ref qname="CC2420ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f85d8559c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f85d855b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f85d8541020" loc="43:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f85d8541020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f85d85413a0"/>
        <function-ref name="stopDone" scoped="" ref="0x7f85d8541530"/>
        <function-ref name="start" scoped="" ref="0x7f85d85416c0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d8541850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f85d852e9d0" loc="55:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f85d852e9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f85d852ed50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f85d852db70" loc="57:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f85d852db70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f85d852c020"/>
        <function-ref name="setRetries" scoped="" ref="0x7f85d852c1b0"/>
        <function-ref name="getRetries" scoped="" ref="0x7f85d852c340"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f85d852c4d0"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f85d852c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f85d852f020" loc="53:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d852f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f85d852f3a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f85d852f530"/>
        <function-ref name="getRssi" scoped="" ref="0x7f85d852f6c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f85d852f850"/>
        <function-ref name="getPower" scoped="" ref="0x7f85d852f9e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f85d852fb70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f85d8539a70" loc="50:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f85d8539a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d8539df0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d8532020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d85321b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d8532340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d85324d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f85d852d080" loc="56:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f85d852d080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f85d852d400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f85d852d590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f85d852d720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f85d852d8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f85d853a690" loc="47:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f85d853a690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d853aa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f85d852e020" loc="54:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d852e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f85d852e3a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f85d852e530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f85d852e6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d8540530" loc="45:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d8540530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d85408b0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d8540a40"/>
        <function-ref name="request" scoped="" ref="0x7f85d8540bd0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d8540d60"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d853b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f85d8530940" loc="46:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f85d8530940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d8530cc0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d8530e50"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d853a020"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d853a1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d853a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f85d853ad50" loc="48:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f85d853ad50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8539100"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d8539290"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d8539420"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d85395b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d8539740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f85d8532840" loc="51:../../../tos/chips/cc2420/CC2420RadioC.nc">
      <component-ref qname="CC2420RadioC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f85d8532840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d8532bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f85d8529390" loc="44:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f85d8529390"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f85d8529710"/>
        <function-ref name="stopDone" scoped="" ref="0x7f85d85298a0"/>
        <function-ref name="start" scoped="" ref="0x7f85d8529a30"/>
        <function-ref name="stop" scoped="" ref="0x7f85d8529bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f85d8527330" loc="47:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d8527330"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f85d85276b0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f85d8527840"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f85d85279d0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f85d8527b60"/>
        <function-ref name="setCca" scoped="" ref="0x7f85d8527cf0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f85d8527e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f85d8529e80" loc="45:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f85d8529e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d8528220"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d85283b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d8528540"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d85286d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d8528860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d8528b40" loc="46:../../../tos/chips/cc2420/csma/CC2420CsmaC.nc">
      <component-ref qname="CC2420CsmaC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d8528b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d8527020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f85d8526e70" loc="39:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f85d8526e70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f85d8523220"/>
        <function-ref name="stopDone" scoped="" ref="0x7f85d85233b0"/>
        <function-ref name="start" scoped="" ref="0x7f85d8523540"/>
        <function-ref name="stop" scoped="" ref="0x7f85d85236d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f85d85217e0" loc="41:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d85217e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f85d8521b60"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f85d8521cf0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f85d8521e80"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f85d8520030"/>
        <function-ref name="setCca" scoped="" ref="0x7f85d85201c0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f85d8520350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f85d8517020" loc="47:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f85d8517020"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f85d85173a0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f85d8517530"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f85d85176c0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f85d8517850"/>
        <function-ref name="setCca" scoped="" ref="0x7f85d85179e0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f85d8517b70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f85d850b330" loc="50:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d850b330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f85d850b6b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f85d850b840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f85d850b9d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f85d850bb60"/>
        <function-ref name="getPower" scoped="" ref="0x7f85d850bcf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f85d850be80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Transmit" ref="0x7f85d850e260" loc="46:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f85d850e260"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d850e5e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d850e770"/>
        <function-ref name="modify" scoped="" ref="0x7f85d850e900"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d850ea90"/>
        <function-ref name="resend" scoped="" ref="0x7f85d850ec20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f85d8523990" loc="40:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f85d8523990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d8523d10"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d8521020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d85211b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d8521340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d85214d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f85d850a3b0" loc="48:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f85d850a3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f85d850a730"/>
        <function-ref name="rand32" scoped="" ref="0x7f85d850a8c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f85d8515610" loc="45:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f85d8515610"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d8515990"/>
        <function-ref name="stop" scoped="" ref="0x7f85d8515b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f85d8502920" loc="51:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d8502920"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f85d8502ca0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f85d8502e30"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f85d8508020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Power" ref="0x7f85d8518b00" loc="44:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f85d8518b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f85d8518e80"/>
        <function-ref name="rfOff" scoped="" ref="0x7f85d851e030"/>
        <function-ref name="rxOn" scoped="" ref="0x7f85d851e1c0"/>
        <function-ref name="startVReg" scoped="" ref="0x7f85d851e350"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f85d851e4e0"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f85d851e670"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f85d851e800"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f85d851e990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d850ab80" loc="49:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d850ab80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d850c020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d850c1b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d850c340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d850c4d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d850c660"/>
        <function-ref name="get" scoped="" ref="0x7f85d850c7f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d850c980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d850b020"/>
        <function-ref name="set" scoped="" ref="0x7f85d850cb10"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d850cca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d850ce30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f85d8520640" loc="43:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d8520640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d85209c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d8520b50"/>
        <function-ref name="request" scoped="" ref="0x7f85d8520ce0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d8520e70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d851f030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SplitControlState" ref="0x7f85d8506020" loc="52:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControlState" scoped="" ref="0x7f85d8506020"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f85d85064a0"/>
        <function-ref name="toIdle" scoped="" ref="0x7f85d8506630"/>
        <function-ref name="isState" scoped="" ref="0x7f85d85067c0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f85d8506950"/>
        <function-ref name="requestState" scoped="" ref="0x7f85d8506ae0"/>
        <function-ref name="forceState" scoped="" ref="0x7f85d8506c70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendDone_task" ref="0x7f85d84f89e0" loc="76:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sendDone_task" scoped="" ref="0x7f85d84f89e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d84f8d60"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d84f7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDone_task" ref="0x7f85d84faa10" loc="75:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDone_task" scoped="" ref="0x7f85d84faa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d84fad90"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d84f8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDone_task" ref="0x7f85d84fba00" loc="74:../../../tos/chips/cc2420/csma/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDone_task" scoped="" ref="0x7f85d84fba00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d84fbd80"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d84fa020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f85d84a1b80" loc="45:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f85d84a1b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f85d84ad020"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f85d84ad1b0"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f85d84ad340"/>
        <function-ref name="syncDone" scoped="" ref="0x7f85d84ad4d0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f85d84ad660"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f85d84ad7f0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f85d84ad980"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f85d84adb10"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f85d84adca0"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f85d84ade30"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f85d84ac020"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f85d84ac1b0"/>
        <function-ref name="sync" scoped="" ref="0x7f85d84ac340"/>
        <function-ref name="getChannel" scoped="" ref="0x7f85d84ac5d0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f85d84ac760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f85d849e020" loc="47:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f85d849e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d849ec10"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d849d0d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f85d84aca60" loc="46:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f85d84aca60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f85d84acde0"/>
        <function-ref name="rfOff" scoped="" ref="0x7f85d849f020"/>
        <function-ref name="rxOn" scoped="" ref="0x7f85d849f1b0"/>
        <function-ref name="startVReg" scoped="" ref="0x7f85d849f340"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f85d849f4d0"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f85d849f660"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f85d849f7f0"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f85d849f980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d84b1720" loc="44:../../../tos/chips/cc2420/control/CC2420ControlC.nc">
      <component-ref qname="CC2420ControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d84b1720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d84b1aa0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d84b1c30"/>
        <function-ref name="request" scoped="" ref="0x7f85d84b1dc0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d84ae020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d84ae1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Config" ref="0x7f85d8497970" loc="46:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f85d8497970"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f85d8497cf0"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f85d8497e80"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f85d8496030"/>
        <function-ref name="syncDone" scoped="" ref="0x7f85d84961c0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f85d8496350"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f85d84964e0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f85d8496670"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f85d8496800"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f85d8496990"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f85d8496b20"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f85d8496cb0"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f85d8496e40"/>
        <function-ref name="sync" scoped="" ref="0x7f85d8495020"/>
        <function-ref name="getChannel" scoped="" ref="0x7f85d84952b0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f85d8495440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXCTRL1" ref="0x7f85d846f8e0" loc="66:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f85d846f8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d846fc60"/>
        <function-ref name="write" scoped="" ref="0x7f85d846fdf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalIeeeEui64" ref="0x7f85d8490020" loc="50:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f85d8490020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f85d84903a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="StartupTimer" ref="0x7f85d8488d90" loc="52:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StartupTimer" scoped="" ref="0x7f85d8488d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d8486670"/>
        <function-ref name="fired" scoped="" ref="0x7f85d848e5d0"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d8486020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d848ea90"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d8486b30"/>
        <function-ref name="start" scoped="" ref="0x7f85d848fbc0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d848e110"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL0" ref="0x7f85d84735f0" loc="64:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f85d84735f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d8473970"/>
        <function-ref name="write" scoped="" ref="0x7f85d8473b00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSTN" ref="0x7f85d8484380" loc="54:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f85d8484380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8484700"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8484890"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8484a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8484bb0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8484d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8483020"/>
        <function-ref name="set" scoped="" ref="0x7f85d84831b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8483340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadRssi" ref="0x7f85d8494b40" loc="48:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadRssi" scoped="" ref="0x7f85d8494b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d8492750"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d8492bd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="syncDone" ref="0x7f85d845d820" loc="126:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="syncDone" scoped="" ref="0x7f85d845d820"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d845dba0"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d845dd30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RSSI" ref="0x7f85d846e1c0" loc="67:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f85d846e1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d846e540"/>
        <function-ref name="write" scoped="" ref="0x7f85d846e6d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f85d846ea70" loc="68:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f85d846ea70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d846edf0"/>
        <function-ref name="write" scoped="" ref="0x7f85d846d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG0" ref="0x7f85d84773d0" loc="62:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f85d84773d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d8477750"/>
        <function-ref name="write" scoped="" ref="0x7f85d84778e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f85d8479810" loc="57:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f85d8479810"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f85d8479b90"/>
        <function-ref name="changed" scoped="" ref="0x7f85d8479d20"/>
        <function-ref name="amGroup" scoped="" ref="0x7f85d8480020"/>
        <function-ref name="setAddress" scoped="" ref="0x7f85d84801b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f85d8485060" loc="53:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f85d8485060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d84853e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8485570"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8485700"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8485890"/>
        <function-ref name="get" scoped="" ref="0x7f85d8485a20"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8485bb0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8485d40"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8484020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCOFF" ref="0x7f85d846c120" loc="71:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f85d846c120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d846c6a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VREN" ref="0x7f85d84836a0" loc="55:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f85d84836a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8483a20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8483bb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8483d40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8482020"/>
        <function-ref name="get" scoped="" ref="0x7f85d84821b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8482340"/>
        <function-ref name="set" scoped="" ref="0x7f85d84824d0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8482660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d84984a0" loc="44:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d84984a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d8498820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f85d846f020" loc="65:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d846f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d846f3a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d846f530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SXOSCON" ref="0x7f85d846ca40" loc="72:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f85d846ca40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d846cdc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f85d846b1d0" loc="74:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f85d846b1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d846b550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d846b6e0"/>
        <function-ref name="request" scoped="" ref="0x7f85d846b870"/>
        <function-ref name="granted" scoped="" ref="0x7f85d846ba00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d846bb90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SyncResource" ref="0x7f85d8468d90" loc="76:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SyncResource" scoped="" ref="0x7f85d8468d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d8467180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d8467310"/>
        <function-ref name="request" scoped="" ref="0x7f85d84674a0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d8467630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d84677c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Power" ref="0x7f85d8495740" loc="47:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Power" scoped="" ref="0x7f85d8495740"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Power"/>
      </instance>
      <interface-functions>
        <function-ref name="startOscillator" scoped="" ref="0x7f85d8495ac0"/>
        <function-ref name="rfOff" scoped="" ref="0x7f85d8495c50"/>
        <function-ref name="rxOn" scoped="" ref="0x7f85d8495de0"/>
        <function-ref name="startVReg" scoped="" ref="0x7f85d8494020"/>
        <function-ref name="stopVReg" scoped="" ref="0x7f85d84941b0"/>
        <function-ref name="startOscillatorDone" scoped="" ref="0x7f85d8494340"/>
        <function-ref name="stopOscillator" scoped="" ref="0x7f85d84944d0"/>
        <function-ref name="startVRegDone" scoped="" ref="0x7f85d8494660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IOCFG1" ref="0x7f85d8477c80" loc="63:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f85d8477c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d84730a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d8473230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FSCTRL" ref="0x7f85d8470b00" loc="61:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f85d8470b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d8470e80"/>
        <function-ref name="write" scoped="" ref="0x7f85d8477030"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXON" ref="0x7f85d846a2b0" loc="69:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f85d846a2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d846a630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d8467a80" loc="78:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d8467a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d8467e00"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d8466020"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d84661b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d8466340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d84664d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8466660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d84667f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d8466e30"/>
        <function-ref name="set" scoped="" ref="0x7f85d8466980"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d8466b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d8466ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sync" ref="0x7f85d845e940" loc="125:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="sync" scoped="" ref="0x7f85d845e940"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d845ecc0"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d845ee50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d8498b10" loc="45:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d8498b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d8497020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d84971b0"/>
        <function-ref name="request" scoped="" ref="0x7f85d8497340"/>
        <function-ref name="granted" scoped="" ref="0x7f85d84974d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d8497660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PANID" ref="0x7f85d847c520" loc="60:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f85d847c520"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d847c8a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d847ca30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="IEEEADR" ref="0x7f85d8474a90" loc="59:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f85d8474a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d847c020"/>
        <function-ref name="write" scoped="" ref="0x7f85d847c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptCCA" ref="0x7f85d84810e0" loc="56:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f85d84810e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d8481460"/>
        <function-ref name="disable" scoped="" ref="0x7f85d84815f0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f85d8481780"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f85d8481910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiResource" ref="0x7f85d8468020" loc="75:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RssiResource" scoped="" ref="0x7f85d8468020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d84683a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d8468530"/>
        <function-ref name="request" scoped="" ref="0x7f85d84686c0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d8468850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d84689e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRFOFF" ref="0x7f85d846a9c0" loc="70:../../../tos/chips/cc2420/control/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f85d846a9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d846ad40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d83e7c70" loc="45:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d83e7c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d83e4020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f85d83e4690" loc="46:../../../tos/chips/cc2420/alarm/AlarmMultiplexC.nc">
      <component-ref qname="AlarmMultiplexC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f85d83e4690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d83e0020"/>
        <function-ref name="fired" scoped="" ref="0x7f85d83e2020"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d83e29a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d83e24e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d83e04e0"/>
        <function-ref name="start" scoped="" ref="0x7f85d83e35b0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d83e3ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d83dfd40" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d83dfd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d83de0e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm32khz32" ref="0x7f85d83de5f0" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm32khz32" scoped="" ref="0x7f85d83de5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d8199e50"/>
        <function-ref name="fired" scoped="" ref="0x7f85d819ae00"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d8199800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d8199340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d8198340"/>
        <function-ref name="start" scoped="" ref="0x7f85d819a430"/>
        <function-ref name="stop" scoped="" ref="0x7f85d819a940"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f85d6d1ab90" loc="44:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f85d6d1ab90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d6d164e0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d6d184e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d6d18e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d6d189a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d6d169a0"/>
        <function-ref name="start" scoped="" ref="0x7f85d6d199d0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d6d18020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d6d1a340" loc="43:../../../tos/chips/msp430/timer/Alarm32khz32C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d6d1a340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d6d1a6c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f85d6d12c20" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f85d6d12c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d6d0f4e0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d6d104e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d6d10e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d6d109a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d6d0f9a0"/>
        <function-ref name="start" scoped="" ref="0x7f85d6d11a80"/>
        <function-ref name="stop" scoped="" ref="0x7f85d6d10020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d6d123d0" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d6d123d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d6d12750"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f85d6cf9440" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d6cf9440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d6cf97c0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d6cf9950"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d6cf9ae0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d6cf9c70"/>
        <function-ref name="fired" scoped="" ref="0x7f85d6cf9e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f85d6cfc9d0" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d6cfc9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d6cfcd50"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d6cfb020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d6cfb1b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d6cfb340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d6cfb4d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d6cfb660"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d6cfb7f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d6cfb980"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d6cfbb10"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d6cfbca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d6cfbe30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f85d6cfa120" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d6cfa120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d6cfa4a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d6cfa630"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d6cfa7c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d6cfa950"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d6cfaae0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d6cfac70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d6cfae00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d6cf9020"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d6cf91b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f85d83a83f0" loc="52:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d83a83f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d83a8770"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d83a8900"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d83a8a90"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d83a8c20"/>
        <function-ref name="fired" scoped="" ref="0x7f85d83a8db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f85d83b4cd0" loc="50:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d83b4cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d83ac0a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d83ac230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d83ac3c0"/>
        <function-ref name="get" scoped="" ref="0x7f85d83ac550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d83ac6e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d83ac870"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d83aca00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d83acb90"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d83acd20"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d83ab020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d83ab1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f85d83aba40" loc="51:../../../tos/platforms/telosa/Msp430Timer32khzMapC.nc">
      <component-ref qname="Msp430Timer32khzMapC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d83aba40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d83abdc0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d83a9020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d83a91b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d83a9340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d83a94d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d83a9660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d83a97f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d83a9980"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d83a9b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA2" ref="0x7f85d8397a50" loc="56:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA2" scoped="" ref="0x7f85d8397a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d8397dd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d8396020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d83961b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d8396340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d83964d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d8396660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d83967f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d8396980"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d8396b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB0" ref="0x7f85d83925a0" loc="61:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB0" scoped="" ref="0x7f85d83925a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d8392920"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d8392ab0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d8392c40"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d8392dd0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d8391020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d83911b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d8391340"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d83914d0"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d8391660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA1" ref="0x7f85d8399a20" loc="55:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA1" scoped="" ref="0x7f85d8399a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d8399da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d8397020"/>
        <function-ref name="captured" scoped="" ref="0x7f85d83971b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d8397340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d83974d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d8397660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB3" ref="0x7f85d83863e0" loc="73:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB3" scoped="" ref="0x7f85d83863e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d8386760"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d83868f0"/>
        <function-ref name="captured" scoped="" ref="0x7f85d8386a80"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d8386c10"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d8386da0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d8385020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA1" ref="0x7f85d839fbb0" loc="54:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA1" scoped="" ref="0x7f85d839fbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d8399020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d83991b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d8399340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d83994d0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8399660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB3" ref="0x7f85d8387570" loc="72:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB3" scoped="" ref="0x7f85d8387570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d83878f0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d8387a80"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d8387c10"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d8387da0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8386020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB6" ref="0x7f85d837cda0" loc="82:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB6" scoped="" ref="0x7f85d837cda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d837b180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d837b310"/>
        <function-ref name="captured" scoped="" ref="0x7f85d837b4a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d837b630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d837b7c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d837b950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB4" ref="0x7f85d8385410" loc="74:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB4" scoped="" ref="0x7f85d8385410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d8385790"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d8385920"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d8385ab0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d8385c40"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d8385dd0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d8384020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d83841b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d8384340"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d83844d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA0" ref="0x7f85d83a3280" loc="50:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA0" scoped="" ref="0x7f85d83a3280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d83a3600"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d83a3790"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d83a3920"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d83a3ab0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d83a3c40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d83a3dd0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d83a2020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d83a21b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d83a2340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB1" ref="0x7f85d838dda0" loc="66:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB1" scoped="" ref="0x7f85d838dda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d838c180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d838c310"/>
        <function-ref name="captured" scoped="" ref="0x7f85d838c4a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d838c630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d838c7c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d838c950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB1" ref="0x7f85d838d020" loc="65:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB1" scoped="" ref="0x7f85d838d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d838d3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d838d530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d838d6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d838d850"/>
        <function-ref name="fired" scoped="" ref="0x7f85d838d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB1" ref="0x7f85d838fa50" loc="64:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB1" scoped="" ref="0x7f85d838fa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d838fdd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d838e020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d838e1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d838e340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d838e4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d838e660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d838e7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d838e980"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d838eb10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA2" ref="0x7f85d8395da0" loc="58:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA2" scoped="" ref="0x7f85d8395da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d8394180"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d8394310"/>
        <function-ref name="captured" scoped="" ref="0x7f85d83944a0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d8394630"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d83947c0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d8394950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB4" ref="0x7f85d8383890" loc="76:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB4" scoped="" ref="0x7f85d8383890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d8383c10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d8383da0"/>
        <function-ref name="captured" scoped="" ref="0x7f85d8382020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d83821b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d8382340"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d83824d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB2" ref="0x7f85d838cd40" loc="67:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB2" scoped="" ref="0x7f85d838cd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d838b0e0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d838b270"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d838b400"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d838b590"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d838b720"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d838b8b0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d838ba40"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d838bbd0"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d838bd60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA2" ref="0x7f85d8395020" loc="57:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA2" scoped="" ref="0x7f85d8395020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d83953a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d8395530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d83956c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d8395850"/>
        <function-ref name="fired" scoped="" ref="0x7f85d83959e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerA" ref="0x7f85d83a7a30" loc="49:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerA" scoped="" ref="0x7f85d83a7a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d83a7db0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d83a4020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d83a41b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d83a4340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d83a44d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d83a4660"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d83a47f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d83a4980"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d83a4b10"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d83a4ca0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d83a4e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB4" ref="0x7f85d8384890" loc="75:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB4" scoped="" ref="0x7f85d8384890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d8384e10"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d8383020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d83831b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d8383340"/>
        <function-ref name="fired" scoped="" ref="0x7f85d83834d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlA1" ref="0x7f85d83a0730" loc="53:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlA1" scoped="" ref="0x7f85d83a0730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d83a0ab0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d83a0c40"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d83a0dd0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d839f020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d839f1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d839f340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d839f4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d839f660"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d839f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB5" ref="0x7f85d83828c0" loc="77:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB5" scoped="" ref="0x7f85d83828c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d8382c40"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d8382dd0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d8381020"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d83811b0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d8381340"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d83814d0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d8381660"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d83817f0"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d8381980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureA0" ref="0x7f85d839a690" loc="52:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureA0" scoped="" ref="0x7f85d839a690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d839aa10"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d839aba0"/>
        <function-ref name="captured" scoped="" ref="0x7f85d839ad30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d83a0020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d83a01b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d83a0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB2" ref="0x7f85d8389020" loc="69:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB2" scoped="" ref="0x7f85d8389020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d83893a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d8389530"/>
        <function-ref name="captured" scoped="" ref="0x7f85d83896c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d8389850"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d83899e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d8389b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA0" ref="0x7f85d83a2700" loc="51:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareA0" scoped="" ref="0x7f85d83a2700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d83a2a80"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d83a2c10"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d83a2da0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d83a1020"/>
        <function-ref name="fired" scoped="" ref="0x7f85d83a11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB2" ref="0x7f85d838a160" loc="68:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB2" scoped="" ref="0x7f85d838a160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d838a4e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d838a670"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d838a800"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d838a990"/>
        <function-ref name="fired" scoped="" ref="0x7f85d838ab20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB5" ref="0x7f85d8380ae0" loc="79:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB5" scoped="" ref="0x7f85d8380ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d8380e60"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d837f020"/>
        <function-ref name="captured" scoped="" ref="0x7f85d837f1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d837f340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d837f4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d837f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB3" ref="0x7f85d8388020" loc="71:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB3" scoped="" ref="0x7f85d8388020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d83883a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d8388530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d83886c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d8388850"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d83889e0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d8388b70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d8388d00"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d8387020"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d83871b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerB" ref="0x7f85d8394cd0" loc="60:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerB" scoped="" ref="0x7f85d8394cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d83930a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d8393230"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d83933c0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8393550"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d83936e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d8393870"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d8393a00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d8393b90"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d8393d20"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d8392020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d83921b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureB0" ref="0x7f85d8390a20" loc="63:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureB0" scoped="" ref="0x7f85d8390a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d8390da0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d838f020"/>
        <function-ref name="captured" scoped="" ref="0x7f85d838f1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d838f340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d838f4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d838f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB5" ref="0x7f85d8381d40" loc="78:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB5" scoped="" ref="0x7f85d8381d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d83800e0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d8380270"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d8380400"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d8380590"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8380720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB6" ref="0x7f85d837c020" loc="81:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB6" scoped="" ref="0x7f85d837c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d837c3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d837c530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d837c6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d837c850"/>
        <function-ref name="fired" scoped="" ref="0x7f85d837c9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB0" ref="0x7f85d8391a20" loc="62:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CompareB0" scoped="" ref="0x7f85d8391a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d8390020"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d83901b0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d8390340"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d83904d0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8390660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ControlB6" ref="0x7f85d837fa50" loc="80:../../../tos/chips/msp430/x1x2/timer/Msp430TimerC.nc">
      <component-ref qname="Msp430TimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ControlB6" scoped="" ref="0x7f85d837fa50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d837fdd0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d837d020"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d837d1b0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d837d340"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d837d4d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d837d660"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d837d7f0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d837d980"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d837db10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f85d8343940" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f85d8343940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d8343cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f85d83432f0" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f85d83432f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d8343670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f85d8342020" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f85d8342020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d83423a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f85d8344bf0" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f85d8344bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d8343020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f85d83463e0" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d83463e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8346760"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d83468f0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d8346a80"/>
        <function-ref name="get" scoped="" ref="0x7f85d8346c10"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d8346da0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d8344020"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d83441b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d8344340"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d83444d0"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d8344660"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d83447f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX0" ref="0x7f85d833c750" loc="55:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX0" scoped="" ref="0x7f85d833c750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d833cad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Overflow" ref="0x7f85d833c100" loc="54:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Overflow" scoped="" ref="0x7f85d833c100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d833c480"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="VectorTimerX1" ref="0x7f85d833cda0" loc="56:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerX1" scoped="" ref="0x7f85d833cda0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d833b180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Event" ref="0x7f85d833da60" loc="53:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f85d833da60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d833de00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f85d833e260" loc="52:../../../tos/chips/msp430/timer/Msp430TimerP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d833e260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d833e5e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d833e770"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d833e900"/>
        <function-ref name="get" scoped="" ref="0x7f85d833ea90"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d833ec20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d833edb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d833d020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d833d1b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d833d340"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d833d4d0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d833d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f85d82f17a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f85d82f17a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82f1b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d82f1cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f85d82f1e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82f0020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82f01b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d82f0340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f85d83386d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f85d83386d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d8338a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d8338be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d8338d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d82f2020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d82f21b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82f2340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d82f24d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d82f2660"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d82f27f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f85d82efc50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f85d82efc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82ee020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f85d82f2ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f85d82f2ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82f2e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d82f1020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d82f11b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d82f1340"/>
        <function-ref name="fired" scoped="" ref="0x7f85d82f14d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f85d82f0610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d82f0610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d82f0990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d82f0b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82f0cb0"/>
        <function-ref name="get" scoped="" ref="0x7f85d82f0e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82ef020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82ef1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d82ef340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82ef4d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d82ef660"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d82ef7f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d82ef980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f85d82eacb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f85d82eacb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82e80a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d82e8230"/>
        <function-ref name="captured" scoped="" ref="0x7f85d82e83c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82e8550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82e86e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d82e8870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f85d82ecb30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f85d82ecb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d82eb020"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d82eb1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82eb340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d82eb4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d82eb660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82eb7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d82eb980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d82ebb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d82ebca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f85d82e62f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f85d82e62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82e6670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f85d82ea020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f85d82ea020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82ea3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d82ea530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d82ea6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d82ea850"/>
        <function-ref name="fired" scoped="" ref="0x7f85d82ea9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f85d82e8b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d82e8b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d82e7020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d82e71b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82e7340"/>
        <function-ref name="get" scoped="" ref="0x7f85d82e74d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82e7660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82e77f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d82e7980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82e7b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d82e7ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d82e7e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d82e6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f85d82e12f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f85d82e12f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82e1670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d82e1800"/>
        <function-ref name="captured" scoped="" ref="0x7f85d82e1990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82e1b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82e1cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d82e1e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f85d82e3220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f85d82e3220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d82e35a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d82e3730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82e38c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d82e3a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d82e3be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82e3d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d82e2020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d82e21b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d82e2340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f85d82df7a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f85d82df7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82dfb20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f85d82e2610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f85d82e2610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82e2990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d82e2b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d82e2cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d82e2e40"/>
        <function-ref name="fired" scoped="" ref="0x7f85d82e1020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f85d82e0160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerA2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d82e0160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d82e04e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d82e0670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82e0800"/>
        <function-ref name="get" scoped="" ref="0x7f85d82e0990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82e0b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82e0cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d82e0e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82df020"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d82df1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d82df340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d82df4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f85d82d97a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f85d82d97a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82d9b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d82d9cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f85d82d9e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82d8020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82d81b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d82d8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f85d82dc6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f85d82dc6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d82dca50"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d82dcbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82dcd70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d82db020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d82db1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82db340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d82db4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d82db660"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d82db7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f85d82d7c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f85d82d7c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82d6020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f85d82dbac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f85d82dbac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82dbe40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d82d9020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d82d91b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d82d9340"/>
        <function-ref name="fired" scoped="" ref="0x7f85d82d94d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f85d82d8610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB0"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d82d8610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d82d8990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d82d8b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82d8cb0"/>
        <function-ref name="get" scoped="" ref="0x7f85d82d8e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82d7020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82d71b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d82d7340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82d74d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d82d7660"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d82d77f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d82d7980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f85d82d2cb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f85d82d2cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82d10a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d82d1230"/>
        <function-ref name="captured" scoped="" ref="0x7f85d82d13c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82d1550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82d16e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d82d1870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f85d82d4b30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f85d82d4b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d82d3020"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d82d31b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82d3340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d82d34d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d82d3660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82d37f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d82d3980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d82d3b10"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d82d3ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f85d82cf2f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f85d82cf2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82cf670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f85d82d2020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f85d82d2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82d23a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d82d2530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d82d26c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d82d2850"/>
        <function-ref name="fired" scoped="" ref="0x7f85d82d29e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f85d82d1b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB1"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d82d1b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d82d0020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d82d01b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82d0340"/>
        <function-ref name="get" scoped="" ref="0x7f85d82d04d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82d0660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82d07f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d82d0980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82d0b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d82d0ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d82d0e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d82cf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f85d82ca2f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f85d82ca2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82ca670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d82ca800"/>
        <function-ref name="captured" scoped="" ref="0x7f85d82ca990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82cab20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82cacb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d82cae40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f85d82cc220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f85d82cc220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d82cc5a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d82cc730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82cc8c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d82cca50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d82ccbe0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82ccd70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d82cb020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d82cb1b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d82cb340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f85d82c77a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f85d82c77a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82c7b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f85d82cb610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f85d82cb610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82cb990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d82cbb20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d82cbcb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d82cbe40"/>
        <function-ref name="fired" scoped="" ref="0x7f85d82ca020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f85d82c8160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB2"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d82c8160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d82c84e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d82c8670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82c8800"/>
        <function-ref name="get" scoped="" ref="0x7f85d82c8990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82c8b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82c8cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d82c8e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82c7020"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d82c71b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d82c7340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d82c74d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f85d82c27a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f85d82c27a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82c2b20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d82c2cb0"/>
        <function-ref name="captured" scoped="" ref="0x7f85d82c2e40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82c1020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82c11b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d82c1340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f85d82c46d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f85d82c46d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d82c4a50"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d82c4be0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82c4d70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d82c3020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d82c31b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82c3340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d82c34d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d82c3660"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d82c37f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f85d82c0c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f85d82c0c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82bf020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f85d82c3ac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f85d82c3ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82c3e40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d82c2020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d82c21b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d82c2340"/>
        <function-ref name="fired" scoped="" ref="0x7f85d82c24d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f85d82c1610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB3"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d82c1610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d82c1990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d82c1b20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82c1cb0"/>
        <function-ref name="get" scoped="" ref="0x7f85d82c1e40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82c0020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82c01b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d82c0340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82c04d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d82c0660"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d82c07f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d82c0980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f85d82bbcb0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f85d82bbcb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82b90a0"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d82b9230"/>
        <function-ref name="captured" scoped="" ref="0x7f85d82b93c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82b9550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82b96e0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d82b9870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f85d82bdb30" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f85d82bdb30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d82bc020"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d82bc1b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82bc340"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d82bc4d0"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d82bc660"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82bc7f0"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d82bc980"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d82bcb10"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d82bcca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f85d82b72f0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f85d82b72f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82b7670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f85d82bb020" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f85d82bb020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82bb3a0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d82bb530"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d82bb6c0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d82bb850"/>
        <function-ref name="fired" scoped="" ref="0x7f85d82bb9e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f85d82b9b40" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB4"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d82b9b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d82b8020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d82b81b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82b8340"/>
        <function-ref name="get" scoped="" ref="0x7f85d82b84d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82b8660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82b87f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d82b8980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82b8b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d82b8ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d82b8e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d82b7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f85d82b22f0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f85d82b22f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82b2670"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d82b2800"/>
        <function-ref name="captured" scoped="" ref="0x7f85d82b2990"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82b2b20"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82b2cb0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d82b2e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f85d82b4220" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f85d82b4220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d82b45a0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d82b4730"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82b48c0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d82b4a50"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d82b4be0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82b4d70"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d82b3020"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d82b31b0"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d82b3340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f85d82b07a0" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f85d82b07a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82b0b20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f85d82b3610" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f85d82b3610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82b3990"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d82b3b20"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d82b3cb0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d82b3e40"/>
        <function-ref name="fired" scoped="" ref="0x7f85d82b2020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f85d82b1160" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB5"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d82b1160"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d82b14e0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d82b1670"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82b1800"/>
        <function-ref name="get" scoped="" ref="0x7f85d82b1990"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82b1b20"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82b1cb0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d82b1e40"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82b0020"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d82b01b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d82b0340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d82b04d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f85d82ab7a0" loc="48:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f85d82ab7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82abb20"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d82abcb0"/>
        <function-ref name="captured" scoped="" ref="0x7f85d82abe40"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82aa020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82aa1b0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d82aa340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Control" ref="0x7f85d82ad6d0" loc="46:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Control" scoped="" ref="0x7f85d82ad6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d82ada50"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d82adbe0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82add70"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d82ac020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d82ac1b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82ac340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d82ac4d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d82ac660"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d82ac7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Event" ref="0x7f85d82a8c50" loc="50:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Event" scoped="" ref="0x7f85d82a8c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82a7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x7f85d82acac0" loc="47:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Compare" scoped="" ref="0x7f85d82acac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d82ace40"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d82ab020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d82ab1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d82ab340"/>
        <function-ref name="fired" scoped="" ref="0x7f85d82ab4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x7f85d82aa610" loc="49:../../../tos/chips/msp430/timer/Msp430TimerCapComP.nc">
      <component-ref qname="Msp430TimerC.Msp430TimerB6"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d82aa610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d82aa990"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d82aab20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d82aacb0"/>
        <function-ref name="get" scoped="" ref="0x7f85d82aae40"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d82a8020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82a81b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d82a8340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d82a84d0"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d82a8660"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d82a87f0"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d82a8980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB1" ref="0x7f85d82a2bc0" loc="7:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB1" scoped="" ref="0x7f85d82a2bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82a1020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA0" ref="0x7f85d82a33f0" loc="4:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA0" scoped="" ref="0x7f85d82a33f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82a3770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerA1" ref="0x7f85d82a3b80" loc="5:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerA1" scoped="" ref="0x7f85d82a3b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82a2020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VectorTimerB0" ref="0x7f85d82a2430" loc="6:../../../tos/chips/msp430/x1x2/timer/Msp430TimerCommonP.nc">
      <component-ref qname="Msp430TimerCommonP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VectorTimerB0" scoped="" ref="0x7f85d82a2430"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerEvent"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d82a27b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f85d6cde0c0" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d6cde0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d6cde440"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d6cde5d0"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d6cde760"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d6cde8f0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d6cdea80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f85d6cf2710" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d6cf2710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d6cf2a90"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d6cf2c20"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d6cf2db0"/>
        <function-ref name="get" scoped="" ref="0x7f85d6cf1020"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d6cf11b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d6cf1340"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d6cf14d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d6cf1660"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d6cf17f0"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d6cf1980"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d6cf1b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f85d6cf65b0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f85d6cf65b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d6cf3df0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d6cf5df0"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d6cf37a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d6cf32e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d6cf22e0"/>
        <function-ref name="start" scoped="" ref="0x7f85d6cf5420"/>
        <function-ref name="stop" scoped="" ref="0x7f85d6cf5930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d6cf7ca0" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d6cf7ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d6cf60a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f85d6cf1da0" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.AlarmC.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d6cf1da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d6cf0180"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d6cf0310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d6cf04a0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d6cf0630"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d6cf07c0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d6cf0950"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d6cf0ae0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d6cf0c70"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d6cf0e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f85d82198c0" loc="43:../../../tos/chips/msp430/timer/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f85d82198c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d821d700"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82180d0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d821dbc0"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d8218590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Counter32khz" ref="0x7f85d82178e0" loc="43:../../../tos/chips/msp430/x1x2/timer/Msp430Counter32khzC.nc">
      <component-ref qname="Msp430Counter32khzC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Counter32khz" scoped="" ref="0x7f85d82178e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d8214780"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d8213150"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d8214c40"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d8213610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f85d8202c50" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d8202c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8201020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d82011b0"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d8201340"/>
        <function-ref name="get" scoped="" ref="0x7f85d82014d0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d8201660"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d82017f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d8201980"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d8201b10"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d8201ca0"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d8201e30"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d8200020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f85d8210b80" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430Counter32khzC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f85d8210b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d820f9b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d8202360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d820fe70"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d8202820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f85d81de0f0" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f85d81de0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d81dd020"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d81dd9a0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d81dd4e0"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d81dde60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f85d81fccf0" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f85d81fccf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d81e1b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d81e0550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d81e0090"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d81e0a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f85d6d0c020" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f85d6d0c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d6d09870"/>
        <function-ref name="fired" scoped="" ref="0x7f85d6d0a840"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d6d09220"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d6d0ad00"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d6d09d30"/>
        <function-ref name="start" scoped="" ref="0x7f85d6d0ce30"/>
        <function-ref name="stop" scoped="" ref="0x7f85d6d0a380"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f85d6d06780" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f85d6d06780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d6d02020"/>
        <function-ref name="fired" scoped="" ref="0x7f85d6d03020"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d6d039a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d6d034e0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d6d024e0"/>
        <function-ref name="start" scoped="" ref="0x7f85d6d045d0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d6d04ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f85d6d083d0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="AlarmMultiplexC.Alarm.Alarm32khz32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f85d6d083d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d6d07240"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d6d07bc0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d6d07700"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d6d060d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFO" ref="0x7f85d81929c0" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f85d81929c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8192d40"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8191020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d81911b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8191340"/>
        <function-ref name="get" scoped="" ref="0x7f85d81914d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8191660"/>
        <function-ref name="set" scoped="" ref="0x7f85d81917f0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8191980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FIFOP" ref="0x7f85d8191cf0" loc="45:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f85d8191cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d81900a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8190230"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d81903c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8190550"/>
        <function-ref name="get" scoped="" ref="0x7f85d81906e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8190870"/>
        <function-ref name="set" scoped="" ref="0x7f85d8190a00"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8190b90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSTN" ref="0x7f85d818f020" loc="46:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSTN" scoped="" ref="0x7f85d818f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d818f3a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d818f530"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d818f6c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d818f850"/>
        <function-ref name="get" scoped="" ref="0x7f85d818f9e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d818fb70"/>
        <function-ref name="set" scoped="" ref="0x7f85d818fd00"/>
        <function-ref name="clr" scoped="" ref="0x7f85d818e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CSN" ref="0x7f85d8193690" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f85d8193690"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8193a10"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8193ba0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8193d30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8192020"/>
        <function-ref name="get" scoped="" ref="0x7f85d81921b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8192340"/>
        <function-ref name="set" scoped="" ref="0x7f85d81924d0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8192660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="VREN" ref="0x7f85d818d6a0" loc="48:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="VREN" scoped="" ref="0x7f85d818d6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d818da20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d818dbb0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d818dd40"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d818c020"/>
        <function-ref name="get" scoped="" ref="0x7f85d818c1b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d818c340"/>
        <function-ref name="set" scoped="" ref="0x7f85d818c4d0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d818c660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CCA" ref="0x7f85d81943e0" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f85d81943e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8194760"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d81948f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8194a80"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8194c10"/>
        <function-ref name="get" scoped="" ref="0x7f85d8194da0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8193020"/>
        <function-ref name="set" scoped="" ref="0x7f85d81931b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8193340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFD" ref="0x7f85d818e370" loc="47:../../../tos/platforms/telosa/chips/cc2420/HplCC2420PinsC.nc">
      <component-ref qname="HplCC2420PinsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f85d818e370"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d818e6f0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d818e880"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d818ea10"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d818eba0"/>
        <function-ref name="get" scoped="" ref="0x7f85d818ed30"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d818d020"/>
        <function-ref name="set" scoped="" ref="0x7f85d818d1b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d818d340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f85d818ac50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d818ac50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8189020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d81891b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8189340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8187020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8189660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d81897f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8189980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8189b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8189ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8189e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8188020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d81881b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8188340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d81885d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8188760"/>
        <function-ref name="set" scoped="" ref="0x7f85d81888f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8188a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8188c10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d81894d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8188da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f85d818ba20" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CCAM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f85d818ba20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d818bda0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d818a020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d818a1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d818a340"/>
        <function-ref name="get" scoped="" ref="0x7f85d818a4d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d818a660"/>
        <function-ref name="set" scoped="" ref="0x7f85d818a7f0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d818a980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f85d81842f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d81842f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8184670"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8184800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8184990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8182660"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8184cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8184e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8183020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d81831b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8183340"/>
        <function-ref name="get" scoped="" ref="0x7f85d81834d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8183660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d81837f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8183980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8183c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8183da0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8182020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d81821b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8182340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8184b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d81824d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f85d8185020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.CSNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f85d8185020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d81853a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8185530"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d81856c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8185850"/>
        <function-ref name="get" scoped="" ref="0x7f85d81859e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8185b70"/>
        <function-ref name="set" scoped="" ref="0x7f85d8185d00"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8184020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f85d817f7a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d817f7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d817fb20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d817fcb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d817fe40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d817da80"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d817e1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d817e340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d817e4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d817e660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d817e7f0"/>
        <function-ref name="get" scoped="" ref="0x7f85d817e980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d817eb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d817eca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d817ee30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d817d120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d817d2b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d817d440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d817d5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d817d760"/>
        <function-ref name="clr" scoped="" ref="0x7f85d817e020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d817d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f85d8180630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f85d8180630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d81809b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8180b40"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8180cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8180e60"/>
        <function-ref name="get" scoped="" ref="0x7f85d817f020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d817f1b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d817f340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d817f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f85d8179c60" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d8179c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8178020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d81781b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8178340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8176020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8178660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d81787f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8178980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8178b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8178ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8178e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8177020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d81771b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8177340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d81775d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8177760"/>
        <function-ref name="set" scoped="" ref="0x7f85d81778f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8177a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8177c10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d81784d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8177da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f85d817ab00" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.FIFOPM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f85d817ab00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d817ae80"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8179030"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d81791c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8179350"/>
        <function-ref name="get" scoped="" ref="0x7f85d81794e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8179670"/>
        <function-ref name="set" scoped="" ref="0x7f85d8179800"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8179990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f85d81732f0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d81732f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8173670"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8173800"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8173990"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8171660"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8173cb0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8173e40"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8172020"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d81721b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8172340"/>
        <function-ref name="get" scoped="" ref="0x7f85d81724d0"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8172660"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d81727f0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8172980"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d8172c10"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8172da0"/>
        <function-ref name="set" scoped="" ref="0x7f85d8171020"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d81711b0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8171340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8173b20"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d81714d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f85d8174020" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.RSTNM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f85d8174020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d81743a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8174530"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d81746c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8174850"/>
        <function-ref name="get" scoped="" ref="0x7f85d81749e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8174b70"/>
        <function-ref name="set" scoped="" ref="0x7f85d8174d00"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8173020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f85d816e7a0" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d816e7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d816eb20"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d816ecb0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d816ee40"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d816ca80"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d816d1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d816d340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d816d4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d816d660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d816d7f0"/>
        <function-ref name="get" scoped="" ref="0x7f85d816d980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d816db10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d816dca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d816de30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d816c120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d816c2b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d816c440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d816c5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d816c760"/>
        <function-ref name="clr" scoped="" ref="0x7f85d816d020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d816c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f85d816f630" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.SFDM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f85d816f630"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d816f9b0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d816fb40"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d816fcd0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d816fe60"/>
        <function-ref name="get" scoped="" ref="0x7f85d816e020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d816e1b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d816e340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d816e4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f85d8169c60" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d8169c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d8168020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d81681b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d8168340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d8166020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d8168660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d81687f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d8168980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d8168b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8168ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d8168e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d8167020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d81671b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d8167340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d81675d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d8167760"/>
        <function-ref name="set" scoped="" ref="0x7f85d81678f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d8167a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d8167c10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d81684d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d8167da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f85d816ab00" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplCC2420PinsC.VRENM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f85d816ab00"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d816ae80"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d8169030"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d81691c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d8169350"/>
        <function-ref name="get" scoped="" ref="0x7f85d81694e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d8169670"/>
        <function-ref name="set" scoped="" ref="0x7f85d8169800"/>
        <function-ref name="clr" scoped="" ref="0x7f85d8169990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CaptureSFD" ref="0x7f85d8147700" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f85d8147700"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f85d8147a80"/>
        <function-ref name="disable" scoped="" ref="0x7f85d8147c10"/>
        <function-ref name="captured" scoped="" ref="0x7f85d8147da0"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f85d814b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptCCA" ref="0x7f85d814b400" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptCCA" scoped="" ref="0x7f85d814b400"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d814b780"/>
        <function-ref name="disable" scoped="" ref="0x7f85d814b910"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f85d814baa0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f85d814bc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="InterruptFIFOP" ref="0x7f85d814a060" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420InterruptsC.nc">
      <component-ref qname="HplCC2420InterruptsC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f85d814a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d814a3e0"/>
        <function-ref name="disable" scoped="" ref="0x7f85d814a570"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f85d814a700"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f85d814a890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Capture" ref="0x7f85d8130a80" loc="50:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Capture" scoped="" ref="0x7f85d8130a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Capture"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d8130e00"/>
        <function-ref name="setSynchronous" scoped="" ref="0x7f85d812f020"/>
        <function-ref name="captured" scoped="" ref="0x7f85d812f1b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d812f340"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d812f4d0"/>
        <function-ref name="setEdge" scoped="" ref="0x7f85d812f660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x7f85d8144c20" loc="48:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Capture" scoped="" ref="0x7f85d8144c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f85d8131020"/>
        <function-ref name="disable" scoped="" ref="0x7f85d81311b0"/>
        <function-ref name="captured" scoped="" ref="0x7f85d8131340"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f85d81314d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f85d8131760" loc="49:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d8131760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d8131ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d8131c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d8131e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d8130020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d81301b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d8130340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d81304d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d8130660"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d81307f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="GeneralIO" ref="0x7f85d812f930" loc="51:../../../tos/chips/msp430/timer/GpioCaptureC.nc">
      <component-ref qname="HplCC2420InterruptsC.CaptureSFDC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f85d812f930"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d812fcb0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d812fe40"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d812e020"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d812dc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d812e340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d812e4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d812e660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d812e7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d812e980"/>
        <function-ref name="get" scoped="" ref="0x7f85d812eb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d812eca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d812ee30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d812d020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d812d2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d812d440"/>
        <function-ref name="set" scoped="" ref="0x7f85d812d5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d812d760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d812d8f0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d812e1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d812da80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f85d811c020" loc="46:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f85d811c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d811c3a0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d811c530"/>
        <function-ref name="disable" scoped="" ref="0x7f85d811c6c0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d811c850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d811c9e0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d811cb70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d811cd00"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d811b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f85d81103f0" loc="58:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f85d81103f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8110770"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8110900"/>
        <function-ref name="disable" scoped="" ref="0x7f85d8110a90"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8110c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d8110db0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d810e020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d810e1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d810e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f85d8119a30" loc="49:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f85d8119a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8119db0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8118020"/>
        <function-ref name="disable" scoped="" ref="0x7f85d81181b0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8118340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d81184d0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8118660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d81187f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8118980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f85d8116020" loc="53:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f85d8116020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d81163a0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8116530"/>
        <function-ref name="disable" scoped="" ref="0x7f85d81166c0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8116850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d81169e0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8116b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d8116d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8115020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f85d8125a30" loc="44:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f85d8125a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8125db0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d811e020"/>
        <function-ref name="disable" scoped="" ref="0x7f85d811e1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d811e340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d811e4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d811e660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d811e7f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d811e980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f85d8113a30" loc="56:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f85d8113a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8112020"/>
        <function-ref name="fired" scoped="" ref="0x7f85d81121b0"/>
        <function-ref name="disable" scoped="" ref="0x7f85d8112340"/>
        <function-ref name="edge" scoped="" ref="0x7f85d81124d0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d8112660"/>
        <function-ref name="enable" scoped="" ref="0x7f85d81127f0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d8112980"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8112b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f85d811b3f0" loc="47:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f85d811b3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d811b770"/>
        <function-ref name="fired" scoped="" ref="0x7f85d811b900"/>
        <function-ref name="disable" scoped="" ref="0x7f85d811ba90"/>
        <function-ref name="edge" scoped="" ref="0x7f85d811bc20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d811bdb0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d811a020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d811a1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d811a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f85d810e710" loc="59:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f85d810e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d810ea90"/>
        <function-ref name="fired" scoped="" ref="0x7f85d810ec20"/>
        <function-ref name="disable" scoped="" ref="0x7f85d810edb0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d810d020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d810d1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d810d340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d810d4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d810d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f85d811f3d0" loc="42:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f85d811f3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d811f750"/>
        <function-ref name="fired" scoped="" ref="0x7f85d811f8e0"/>
        <function-ref name="disable" scoped="" ref="0x7f85d811fa70"/>
        <function-ref name="edge" scoped="" ref="0x7f85d811fc00"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d811fd90"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8126020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d81261b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8126340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f85d81153f0" loc="54:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f85d81153f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8115770"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8115900"/>
        <function-ref name="disable" scoped="" ref="0x7f85d8115a90"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8115c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d8115db0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8114020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d81141b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8114340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f85d811ed50" loc="45:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f85d811ed50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d811d100"/>
        <function-ref name="fired" scoped="" ref="0x7f85d811d290"/>
        <function-ref name="disable" scoped="" ref="0x7f85d811d420"/>
        <function-ref name="edge" scoped="" ref="0x7f85d811d5b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d811d740"/>
        <function-ref name="enable" scoped="" ref="0x7f85d811d8d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d811da60"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d811dbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f85d8111020" loc="57:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f85d8111020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d81113a0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8111530"/>
        <function-ref name="disable" scoped="" ref="0x7f85d81116c0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8111850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d81119e0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8111b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d8111d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8110020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f85d811a710" loc="48:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f85d811a710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d811aa90"/>
        <function-ref name="fired" scoped="" ref="0x7f85d811ac20"/>
        <function-ref name="disable" scoped="" ref="0x7f85d811adb0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8119020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d81191b0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8119340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d81194d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8119660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f85d8118d50" loc="52:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f85d8118d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8117100"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8117290"/>
        <function-ref name="disable" scoped="" ref="0x7f85d8117420"/>
        <function-ref name="edge" scoped="" ref="0x7f85d81175b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d8117740"/>
        <function-ref name="enable" scoped="" ref="0x7f85d81178d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d8117a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8117bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f85d8126710" loc="43:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f85d8126710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8126a90"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8126c20"/>
        <function-ref name="disable" scoped="" ref="0x7f85d8126db0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8125020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d81251b0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8125340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d81254d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8125660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f85d8114710" loc="55:../../../tos/chips/msp430/pins/HplMsp430InterruptC.nc">
      <component-ref qname="HplMsp430InterruptC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f85d8114710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8114a90"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8114c20"/>
        <function-ref name="disable" scoped="" ref="0x7f85d8114db0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8113020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d81131b0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8113340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d81134d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8113660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port14" ref="0x7f85d81053f0" loc="58:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port14" scoped="" ref="0x7f85d81053f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8105770"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8105900"/>
        <function-ref name="disable" scoped="" ref="0x7f85d8105a90"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8105c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d8105db0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8104020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d81041b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8104340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port26" ref="0x7f85d80f93f0" loc="70:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port26" scoped="" ref="0x7f85d80f93f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d80f9770"/>
        <function-ref name="fired" scoped="" ref="0x7f85d80f9900"/>
        <function-ref name="disable" scoped="" ref="0x7f85d80f9a90"/>
        <function-ref name="edge" scoped="" ref="0x7f85d80f9c20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d80f9db0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d80f8020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d80f81b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d80f8340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port17" ref="0x7f85d8102d50" loc="61:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port17" scoped="" ref="0x7f85d8102d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8101100"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8101290"/>
        <function-ref name="disable" scoped="" ref="0x7f85d8101420"/>
        <function-ref name="edge" scoped="" ref="0x7f85d81015b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d8101740"/>
        <function-ref name="enable" scoped="" ref="0x7f85d81018d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d8101a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8101bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port21" ref="0x7f85d80ff3f0" loc="65:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port21" scoped="" ref="0x7f85d80ff3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d80ff770"/>
        <function-ref name="fired" scoped="" ref="0x7f85d80ff900"/>
        <function-ref name="disable" scoped="" ref="0x7f85d80ffa90"/>
        <function-ref name="edge" scoped="" ref="0x7f85d80ffc20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d80ffdb0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d80fe020"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d80fe1b0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d80fe340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port12" ref="0x7f85d8108d50" loc="56:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port12" scoped="" ref="0x7f85d8108d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8107100"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8107290"/>
        <function-ref name="disable" scoped="" ref="0x7f85d8107420"/>
        <function-ref name="edge" scoped="" ref="0x7f85d81075b0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d8107740"/>
        <function-ref name="enable" scoped="" ref="0x7f85d81078d0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d8107a60"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8107bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port24" ref="0x7f85d80fcd50" loc="68:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port24" scoped="" ref="0x7f85d80fcd50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d80fb210"/>
        <function-ref name="fired" scoped="" ref="0x7f85d80fb3a0"/>
        <function-ref name="disable" scoped="" ref="0x7f85d80fb530"/>
        <function-ref name="edge" scoped="" ref="0x7f85d80fb6c0"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d80fb850"/>
        <function-ref name="enable" scoped="" ref="0x7f85d80fb9e0"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d80fbb70"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d80fbd00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port15" ref="0x7f85d8104710" loc="59:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port15" scoped="" ref="0x7f85d8104710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8104a90"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8104c20"/>
        <function-ref name="disable" scoped="" ref="0x7f85d8104db0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8103020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d81031b0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8103340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d81034d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8103660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port27" ref="0x7f85d80f8710" loc="71:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port27" scoped="" ref="0x7f85d80f8710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d80f8a90"/>
        <function-ref name="fired" scoped="" ref="0x7f85d80f8c20"/>
        <function-ref name="disable" scoped="" ref="0x7f85d80f8db0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d80f7020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d80f71b0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d80f7340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d80f74d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d80f7660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port10" ref="0x7f85d810c7a0" loc="54:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port10" scoped="" ref="0x7f85d810c7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d810cb20"/>
        <function-ref name="fired" scoped="" ref="0x7f85d810ccb0"/>
        <function-ref name="disable" scoped="" ref="0x7f85d810ce40"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8109020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d81091b0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8109340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d81094d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8109660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port22" ref="0x7f85d80fe710" loc="66:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port22" scoped="" ref="0x7f85d80fe710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d80fea90"/>
        <function-ref name="fired" scoped="" ref="0x7f85d80fec20"/>
        <function-ref name="disable" scoped="" ref="0x7f85d80fedb0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d80fd020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d80fd1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d80fd340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d80fd4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d80fd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port13" ref="0x7f85d8106020" loc="57:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port13" scoped="" ref="0x7f85d8106020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d81063a0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8106530"/>
        <function-ref name="disable" scoped="" ref="0x7f85d81066c0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8106850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d81069e0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8106b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d8106d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8105020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port25" ref="0x7f85d80fa100" loc="69:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port25" scoped="" ref="0x7f85d80fa100"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d80fa480"/>
        <function-ref name="fired" scoped="" ref="0x7f85d80fa610"/>
        <function-ref name="disable" scoped="" ref="0x7f85d80fa7a0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d80fa930"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d80faac0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d80fac50"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d80fade0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d80f9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port16" ref="0x7f85d8103a30" loc="60:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port16" scoped="" ref="0x7f85d8103a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8103db0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8102020"/>
        <function-ref name="disable" scoped="" ref="0x7f85d81021b0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8102340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d81024d0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8102660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d81027f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8102980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port20" ref="0x7f85d8100020" loc="64:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port20" scoped="" ref="0x7f85d8100020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d81003a0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8100530"/>
        <function-ref name="disable" scoped="" ref="0x7f85d81006c0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8100850"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d81009e0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8100b70"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d8100d00"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d80ff020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port11" ref="0x7f85d8109a30" loc="55:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port11" scoped="" ref="0x7f85d8109a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d8109db0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d8108020"/>
        <function-ref name="disable" scoped="" ref="0x7f85d81081b0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d8108340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d81084d0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d8108660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d81087f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d8108980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Port23" ref="0x7f85d80fda30" loc="67:../../../tos/chips/msp430/x1x2/pins/HplMsp430InterruptP.nc">
      <component-ref qname="HplMsp430InterruptP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Port23" scoped="" ref="0x7f85d80fda30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d80fddb0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d80fc020"/>
        <function-ref name="disable" scoped="" ref="0x7f85d80fc1b0"/>
        <function-ref name="edge" scoped="" ref="0x7f85d80fc340"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d80fc4d0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d80fc660"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d80fc7f0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d80fc980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f85d7fed2f0" loc="52:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f85d7fed2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d7fed670"/>
        <function-ref name="fired" scoped="" ref="0x7f85d7fed800"/>
        <function-ref name="disable" scoped="" ref="0x7f85d7fed990"/>
        <function-ref name="edge" scoped="" ref="0x7f85d7fedb20"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d7fedcb0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d7fede40"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d7fe0020"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d7fe01b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f85d7fee680" loc="51:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptCCAC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f85d7fee680"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d7feea00"/>
        <function-ref name="disable" scoped="" ref="0x7f85d7feeb90"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f85d7feed20"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f85d7fed020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplInterrupt" ref="0x7f85d7fde7a0" loc="52:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplInterrupt" scoped="" ref="0x7f85d7fde7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d7fdeb20"/>
        <function-ref name="fired" scoped="" ref="0x7f85d7fdecb0"/>
        <function-ref name="disable" scoped="" ref="0x7f85d7fdee40"/>
        <function-ref name="edge" scoped="" ref="0x7f85d7fdd020"/>
        <function-ref name="edgeFalling" scoped="" ref="0x7f85d7fdd1b0"/>
        <function-ref name="enable" scoped="" ref="0x7f85d7fdd340"/>
        <function-ref name="edgeRising" scoped="" ref="0x7f85d7fdd4d0"/>
        <function-ref name="getValue" scoped="" ref="0x7f85d7fdd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupt" ref="0x7f85d7fdfb70" loc="51:../../../tos/chips/msp430/x1x2/pins/Msp430InterruptC.nc">
      <component-ref qname="HplCC2420InterruptsC.InterruptFIFOPC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupt" scoped="" ref="0x7f85d7fdfb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d7fde020"/>
        <function-ref name="disable" scoped="" ref="0x7f85d7fde1b0"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f85d7fde340"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f85d7fde4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f85d7b7ae50" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f85d7b7ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b79410"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b795a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f85d7b84160" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f85d7b84160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b844e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f85d7b7ee50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f85d7b7ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b7c210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b7c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f85d7b78880" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d7b78880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b78c00"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b78d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f85d7b6f0a0" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f85d7b6f0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b6f420"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b6f5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f85d7b760a0" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f85d7b760a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b76420"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b765b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f85d7b64500" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f85d7b64500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b64880"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b64a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f85d7b66500" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f85d7b66500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b66880"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b66a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f85d7b82490" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f85d7b82490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b82810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f85d7b6c880" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f85d7b6c880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b6cc00"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b6cd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f85d7b67500" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f85d7b67500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b67880"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b67a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f85d7b7ce50" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f85d7b7ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b7b210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b7b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f85d7b7be50" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f85d7b7be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b7a210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b7a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f85d7b72880" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f85d7b72880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b72c00"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b72d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f85d7b730a0" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f85d7b730a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b73420"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b735b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f85d7b76880" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f85d7b76880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b76c00"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b76d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f85d7b86a90" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7b86a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f85d7b86e10"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f85d7b85020"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f85d7b851b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f85d7b81e00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f85d7b81e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b801c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f85d7b80490" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f85d7b80490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b80910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f85d7b6bc80" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f85d7b6bc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b6a0a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b6a230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f85d7b80be0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f85d7b80be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b7f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f85d7b67ce0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f85d7b67ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b660a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b66230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f85d7b81160" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f85d7b81160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b814e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f85d7b6c0a0" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f85d7b6c0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b6c420"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b6c5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f85d7b7b670" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f85d7b7b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b7b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b7bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f85d7b7c670" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7b7c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b7c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b7cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f85d7b85ad0" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f85d7b85ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b85e50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f85d7b6d0a0" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f85d7b6d0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b6d420"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b6d5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f85d7b6f880" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f85d7b6f880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b6fc00"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b6fd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f85d7b6d880" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f85d7b6d880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b6dc00"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b6dd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f85d7b65ce0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f85d7b65ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b640a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b64230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f85d7b66ce0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f85d7b66ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b650a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b65230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f85d7b73880" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f85d7b73880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b73c00"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b73d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f85d7b6e0a0" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f85d7b6e0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b6e420"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b6e5b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f85d7b68ce0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f85d7b68ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b670a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b67230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f85d7b75880" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f85d7b75880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b75c00"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b75d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f85d7b64ce0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f85d7b64ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d7b630a0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d7b63230"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b633c0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d7b63550"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d7b636e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f85d7b85480" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f85d7b85480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b85800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f85d7b7e670" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f85d7b7e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b7e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b7eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f85d7b7a670" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f85d7b7a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b7a9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b7ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f85d7b710a0" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f85d7b710a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b71420"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b715b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f85d7b750a0" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f85d7b750a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b75420"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b755b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f85d7b71880" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f85d7b71880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b71c00"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b71d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f85d7b79870" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f85d7b79870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b79bf0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b79d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f85d7b847b0" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f85d7b847b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b84b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f85d7b780a0" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7b780a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b78420"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b785b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7b87e20" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7b87e20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7b861c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7b86350"/>
        <function-ref name="request" scoped="" ref="0x7f85d7b864e0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7b86670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7b86800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f85d7b7f2f0" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f85d7b7f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b7f670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f85d7b7e020" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f85d7b7e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b7e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f85d7b68500" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f85d7b68500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b68880"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b68a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f85d7b6ace0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f85d7b6ace0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b680a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b68230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f85d7b817b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f85d7b817b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b81b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f85d7b6a500" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f85d7b6a500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b6a880"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b6aa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f85d7b65500" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f85d7b65500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b65880"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b65a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f85d7b720a0" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f85d7b720a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b72420"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b725b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f85d7b6e880" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f85d7b6e880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b6ec00"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b6ed90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f85d7b84e00" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f85d7b84e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b821c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f85d7b82ae0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f85d7b82ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b82e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f85d7b740a0" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f85d7b740a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b74420"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b745b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f85d7b7f940" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f85d7b7f940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b7fcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f85d7b74880" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f85d7b74880"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b74c00"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b74d90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f85d7b6b0a0" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f85d7b6b0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b6b820"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b6b9b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f85d7b639b0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f85d7b639b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d7b63d30"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d7b61020"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b611b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d7b61340"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d7b614d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f85d7f982c0" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f85d7f982c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d7f98640"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d7f987d0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7f98960"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d7f98af0"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d7f98c80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f85d7f99350" loc="40:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7f99350"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f85d7f996d0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f85d7f99860"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f85d7f999f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f85d7f97540" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f85d7f97540"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7f978c0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7f97a50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f85d7f96370" loc="43:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f85d7f96370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7f966f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7f96880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7f9a4d0" loc="39:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7f9a4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7f9a850"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7f9a9e0"/>
        <function-ref name="request" scoped="" ref="0x7f85d7f9ab70"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7f9ad00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7f99020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f85d7f941d0" loc="44:../../../tos/chips/cc2420/spi/CC2420SpiWireC.nc">
      <component-ref qname="CC2420SpiWireC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f85d7f941d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7f94550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiPacket" ref="0x7f85d7f7f2e0" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f85d7f7f2e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7f7f660"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d7f7f7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Fifo" ref="0x7f85d7f8f890" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Fifo" scoped="" ref="0x7f85d7f8f890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d7f8fc10"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d7f8fda0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7f8e020"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d7f8e1b0"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d7f8e340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f85d7f91660" loc="44:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7f91660"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f85d7f919e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f85d7f91b70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f85d7f91d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiByte" ref="0x7f85d7f87c70" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f85d7f87c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f85d7f89020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WorkingState" ref="0x7f85d7f7fb40" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="WorkingState" scoped="" ref="0x7f85d7f7fb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f85d7f88020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f85d7f881b0"/>
        <function-ref name="isState" scoped="" ref="0x7f85d7f88340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f85d7f884d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f85d7f88660"/>
        <function-ref name="forceState" scoped="" ref="0x7f85d7f887f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f85d7f8a060" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f85d7f8a060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7f8a3e0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7f8a570"/>
        <function-ref name="request" scoped="" ref="0x7f85d7f8a700"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7f8a890"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7f8aa20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Ram" ref="0x7f85d7f8eba0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Ram" scoped="" ref="0x7f85d7f8eba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7f8d020"/>
        <function-ref name="write" scoped="" ref="0x7f85d7f8d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Reg" ref="0x7f85d7f8da30" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Reg" scoped="" ref="0x7f85d7f8da30"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7f8ddb0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7f8b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d7f88a70" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d7f88a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d7f88df0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d7f86020"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d7f861b0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d7f86340"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d7f864d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7f86660"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d7f867f0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d7f86e30"/>
        <function-ref name="set" scoped="" ref="0x7f85d7f86980"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d7f86b10"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d7f86ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7f90510" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7f90510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7f90890"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7f90a20"/>
        <function-ref name="request" scoped="" ref="0x7f85d7f90bb0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7f90d40"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7f8f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grant" ref="0x7f85d7f7bbd0" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grant" scoped="" ref="0x7f85d7f7bbd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d7f7a020"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d7f7a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Strobe" ref="0x7f85d7f8b8b0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiP.nc">
      <component-ref qname="CC2420SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Strobe" scoped="" ref="0x7f85d7f8b8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7f8bc30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f85d7f20770" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="CC2420SpiWireC.WorkingStateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f85d7f20770"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f85d7f20af0"/>
        <function-ref name="toIdle" scoped="" ref="0x7f85d7f20c80"/>
        <function-ref name="isState" scoped="" ref="0x7f85d7f20e10"/>
        <function-ref name="isIdle" scoped="" ref="0x7f85d7f1c020"/>
        <function-ref name="requestState" scoped="" ref="0x7f85d7f1c1b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f85d7f1c340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f85d7f1b1d0" loc="66:../../../tos/system/StateImplC.nc">
      <component-ref qname="StateImplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f85d7f1b1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f85d7f1b550"/>
        <function-ref name="toIdle" scoped="" ref="0x7f85d7f1b6e0"/>
        <function-ref name="isState" scoped="" ref="0x7f85d7f1b870"/>
        <function-ref name="isIdle" scoped="" ref="0x7f85d7f1ba00"/>
        <function-ref name="requestState" scoped="" ref="0x7f85d7f1bb90"/>
        <function-ref name="forceState" scoped="" ref="0x7f85d7f1bd20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d7f17020" loc="66:../../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d7f17020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d7f173a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f85d7f17b70" loc="67:../../../tos/system/StateImplP.nc">
      <component-ref qname="StateImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f85d7f17b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f85d7f15020"/>
        <function-ref name="toIdle" scoped="" ref="0x7f85d7f151b0"/>
        <function-ref name="isState" scoped="" ref="0x7f85d7f15340"/>
        <function-ref name="isIdle" scoped="" ref="0x7f85d7f154d0"/>
        <function-ref name="requestState" scoped="" ref="0x7f85d7f15660"/>
        <function-ref name="forceState" scoped="" ref="0x7f85d7f157f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f85d7baf020" loc="44:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f85d7baf020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7baf3a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d7baf530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f85d7efd8f0" loc="43:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f85d7efd8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f85d7efdc70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7efec40" loc="42:../../../tos/platforms/telosa/chips/cc2420/HplCC2420SpiC.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7efec40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7efd020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7efd1b0"/>
        <function-ref name="request" scoped="" ref="0x7f85d7efd340"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7efd4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7efd660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f85d6a92760" loc="82:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d6a92760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f85d6a92ae0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d6a92c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f85d6a90120" loc="87:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f85d6a90120"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d6a904a0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d6a90630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f85d6a908c0" loc="89:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f85d6a908c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f85d6a90c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f85d6a91020" loc="83:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f85d6a91020"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f85d6a913a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d6a93a00" loc="81:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d6a93a00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d6a93d80"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d6a92020"/>
        <function-ref name="request" scoped="" ref="0x7f85d6a921b0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d6a92340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d6a924d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f85d6a91630" loc="85:../../../tos/chips/msp430/usart/Msp430Spi0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f85d6a91630"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f85d6a919b0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f85d6a91b40"/>
        <function-ref name="splitRead" scoped="" ref="0x7f85d6a91cd0"/>
        <function-ref name="write" scoped="" ref="0x7f85d6a91e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f85d7e958e0" loc="74:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7e958e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f85d7e95c60"/>
        <function-ref name="configure" scoped="" ref="0x7f85d7e95df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f85d7e94850" loc="77:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f85d7e94850"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7e94bd0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d7e94d60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f85d7e92a40" loc="80:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f85d7e92a40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f85d7e92dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f85d7e97110" loc="75:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f85d7e97110"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f85d7e97490"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f85d7e93690" loc="79:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f85d7e93690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7e93a10"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7e93ba0"/>
        <function-ref name="request" scoped="" ref="0x7f85d7e93d30"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7e92020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7e921b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7e9dd80" loc="73:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7e9dd80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7e99180"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7e99310"/>
        <function-ref name="request" scoped="" ref="0x7f85d7e994a0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7e99630"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7e997c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f85d7e97790" loc="76:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f85d7e97790"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f85d7e97b10"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f85d7e97ca0"/>
        <function-ref name="splitRead" scoped="" ref="0x7f85d7e97e30"/>
        <function-ref name="write" scoped="" ref="0x7f85d7e94020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f85d7e8eb40" loc="81:../../../tos/chips/msp430/usart/Msp430SpiNoDma0P.nc">
      <component-ref qname="Msp430SpiNoDma0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f85d7e8eb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d7e90020"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d7e901b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f85d7e1c250" loc="76:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7e1c250"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f85d7e1c5f0"/>
        <function-ref name="configure" scoped="" ref="0x7f85d7e1c780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiPacket" ref="0x7f85d7e1bc50" loc="79:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiPacket" scoped="" ref="0x7f85d7e1bc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiPacket"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7e19020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d7e191b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430SpiConfigure" ref="0x7f85d7e183e0" loc="82:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430SpiConfigure" scoped="" ref="0x7f85d7e183e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430SpiConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f85d7e18780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SpiByte" ref="0x7f85d7e1ca10" loc="77:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiByte" scoped="" ref="0x7f85d7e1ca10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="write" scoped="" ref="0x7f85d7e1cd90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f85d7e18a50" loc="83:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f85d7e18a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f85d7e18dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f85d7e17020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f85d7e171b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f85d7e17340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f85d7e174d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f85d7e17660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f85d7e177f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f85d7e17980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f85d7e17b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f85d7e17ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f85d7e17e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f85d7e16020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f85d7e161b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f85d7e16440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f85d7e165d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f85d7e16760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f85d7e168f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f85d7e16a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f85d7e16c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f85d7e16da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f85d7e15020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f85d7e151b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f85d7e15340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f85d7e154d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d7e15660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f85d7e159f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f85d7e15b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f85d7e15d10"/>
        <function-ref name="tx" scoped="" ref="0x7f85d7e14020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f85d7e141b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f85d7e14340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f85d7e144d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f85d7e14660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f85d7e147f0"/>
        <function-ref name="rx" scoped="" ref="0x7f85d7e14980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f85d7e14b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f85d7e14ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f85d7e14e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f85d7e13020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f85d7e131b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d7e13c20" loc="85:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d7e13c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d7e12020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d7e121b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d7e12340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d7e124d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d7e12660"/>
        <function-ref name="get" scoped="" ref="0x7f85d7e127f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d7e12980"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d7e11020"/>
        <function-ref name="set" scoped="" ref="0x7f85d7e12ca0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d7e12b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d7e12e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f85d7e195b0" loc="81:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f85d7e195b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7e19950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7e19ae0"/>
        <function-ref name="request" scoped="" ref="0x7f85d7e19c70"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7e19e00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7e18020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7e1d470" loc="75:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7e1d470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7e1d810"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7e1d9a0"/>
        <function-ref name="request" scoped="" ref="0x7f85d7e1db30"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7e1dcc0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7e1de50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FastSpiByte" ref="0x7f85d7e1b060" loc="78:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FastSpiByte" scoped="" ref="0x7f85d7e1b060"/></type-interface>
      <instance>
        <interfacedef-ref qname="FastSpiByte"/>
      </instance>
      <interface-functions>
        <function-ref name="splitWrite" scoped="" ref="0x7f85d7e1b3e0"/>
        <function-ref name="splitReadWrite" scoped="" ref="0x7f85d7e1b570"/>
        <function-ref name="splitRead" scoped="" ref="0x7f85d7e1b700"/>
        <function-ref name="write" scoped="" ref="0x7f85d7e1b890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f85d7e13480" loc="84:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f85d7e13480"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d7e13800"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d7e13990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalDone_task" ref="0x7f85d7e112f0" loc="102:../../../tos/chips/msp430/usart/Msp430SpiNoDmaP.nc">
      <component-ref qname="Msp430SpiNoDma0P.SpiP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalDone_task" scoped="" ref="0x7f85d7e112f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d7e11670"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d7e11800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f85d7e012c0" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f85d7e012c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d7e01640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f85d7e05d10" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f85d7e05d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d7e040e0"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d7e04270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f85d7e09020" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart0C.nc">
      <component-ref qname="HplMsp430Usart0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f85d7e09020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f85d7e093a0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f85d7e09530"/>
        <function-ref name="setUctl" scoped="" ref="0x7f85d7e096c0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f85d7e09850"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f85d7e099e0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f85d7e09b70"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f85d7e09d00"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f85d7e08020"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f85d7e081b0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f85d7e08340"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f85d7e084d0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f85d7e08660"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f85d7e087f0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f85d7e08a80"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f85d7e08c10"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f85d7e08da0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f85d7e07020"/>
        <function-ref name="isUart" scoped="" ref="0x7f85d7e071b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f85d7e07340"/>
        <function-ref name="isSpi" scoped="" ref="0x7f85d7e074d0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f85d7e07660"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f85d7e077f0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f85d7e07980"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f85d7e07b10"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d7e07ca0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f85d7e06220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f85d7e063b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f85d7e06540"/>
        <function-ref name="tx" scoped="" ref="0x7f85d7e066d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f85d7e06860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f85d7e069f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f85d7e06b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f85d7e06d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f85d7e05020"/>
        <function-ref name="rx" scoped="" ref="0x7f85d7e051b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f85d7e05340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f85d7e054d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f85d7e05660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f85d7e057f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f85d7e05980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f85d7dc6bb0" loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f85d7dc6bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7dc5020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7dc51b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d7dc5340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7dc3020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7dc5660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7dc57f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d7dc5980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d7dc5b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7dc5ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7dc5e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d7dc4020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d7dc41b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d7dc4340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d7dc45d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d7dc4760"/>
        <function-ref name="set" scoped="" ref="0x7f85d7dc48f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d7dc4a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d7dc54d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d7dc4c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d7dc4da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f85d7dfa2d0" loc="56:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f85d7dfa2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d7dfa650"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d7dfa7e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f85d7dc33e0" loc="63:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f85d7dc33e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7dc3760"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7dc38f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d7dc3a80"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7dc17f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7dc3da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7dc2020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d7dc21b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d7dc2340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7dc24d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7dc2660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d7dc27f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d7dc2980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d7dc2b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d7dc2da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d7dc1020"/>
        <function-ref name="set" scoped="" ref="0x7f85d7dc11b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d7dc1340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d7dc3c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d7dc14d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d7dc1660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f85d7dc1bb0" loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f85d7dc1bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7dc0020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7dc01b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d7dc0340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7dbe020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7dc0660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7dc07f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d7dc0980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d7dc0b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7dc0ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7dc0e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d7dbf020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d7dbf1b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d7dbf340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d7dbf5d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d7dbf760"/>
        <function-ref name="set" scoped="" ref="0x7f85d7dbf8f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d7dbfa80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d7dc04d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d7dbfc10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d7dbfda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f85d7dff700" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f85d7dff700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f85d7dffa80"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f85d7dffc10"/>
        <function-ref name="setUctl" scoped="" ref="0x7f85d7dffda0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f85d7dfe020"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f85d7dfe1b0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f85d7dfe340"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f85d7dfe4d0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f85d7dfe660"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f85d7dfe7f0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f85d7dfe980"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f85d7dfeb10"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f85d7dfeca0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f85d7dfee30"/>
        <function-ref name="getUbr" scoped="" ref="0x7f85d7dfd120"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f85d7dfd2b0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f85d7dfd440"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f85d7dfd5d0"/>
        <function-ref name="isUart" scoped="" ref="0x7f85d7dfd760"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f85d7dfd8f0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f85d7dfda80"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f85d7dfdc10"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f85d7dfdda0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f85d7dfc020"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f85d7dfc1b0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d7dfc340"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f85d7dfc6d0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f85d7dfc860"/>
        <function-ref name="setUbr" scoped="" ref="0x7f85d7dfc9f0"/>
        <function-ref name="tx" scoped="" ref="0x7f85d7dfcb80"/>
        <function-ref name="getUctl" scoped="" ref="0x7f85d7dfcd10"/>
        <function-ref name="disableUart" scoped="" ref="0x7f85d7dfb020"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f85d7dfb1b0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f85d7dfb340"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f85d7dfb4d0"/>
        <function-ref name="rx" scoped="" ref="0x7f85d7dfb660"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f85d7dfb7f0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f85d7dfb980"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f85d7dfbb10"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f85d7dfbca0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f85d7dfbe30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplI2C" ref="0x7f85d7dd1d10" loc="59:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f85d7dd1d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f85d7df70e0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f85d7df7270"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f85d7df7400"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f85d7df7590"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f85d7df7720"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f85d7df78b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f85d7df7a40"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f85d7df7bd0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d7df7d60"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f85d7df6020"/>
        <function-ref name="getData" scoped="" ref="0x7f85d7df61b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f85d7df6340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f85d7df64d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f85d7df6760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f85d7df68f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f85d7df6a80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f85d7df6c10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f85d7df6da0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f85d7dcf020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f85d7dcf1b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f85d7dcf340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f85d7dcf4d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f85d7dcf660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f85d7dcf7f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f85d7dcf980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f85d7dcfd10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f85d7dce020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f85d7dce1b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f85d7dce340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f85d7dce4d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f85d7dce660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f85d7dce7f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f85d7dce980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f85d7dceb10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f85d7dceca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f85d7dcee30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f85d7dcd020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f85d7dcd1b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f85d7dcd340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f85d7dcd4d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f85d7dcd660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f85d7dcd7f0"/>
        <function-ref name="setData" scoped="" ref="0x7f85d7dcd980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f85d7dcdb10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f85d7dcdca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f85d7dcde30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f85d7dcc020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f85d7dcc1b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f85d7dcc340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f85d7dcc8d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f85d7dcca60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f85d7dccbf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f85d7dccd80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f85d7dcb020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f85d7dcb1b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f85d7dcb340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f85d7dcb4d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f85d7dcb660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f85d7dcb7f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f85d7dc83e0" loc="61:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f85d7dc83e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7dc8760"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7dc88f0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d7dc8a80"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7dc67f0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7dc8da0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7dc7020"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d7dc71b0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d7dc7340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7dc74d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7dc7660"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d7dc77f0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d7dc7980"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d7dc7b10"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d7dc7da0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d7dc6020"/>
        <function-ref name="set" scoped="" ref="0x7f85d7dc61b0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d7dc6340"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d7dc8c10"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d7dc64d0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d7dc6660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f85d7dfac20" loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f85d7dfac20"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d7df9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f85d7dcbbb0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart0P.nc">
      <component-ref qname="HplMsp430Usart0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f85d7dcbbb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7dca020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7dca1b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d7dca340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7dc8020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7dca660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7dca7f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d7dca980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d7dcab10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7dcaca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7dcae30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d7dc9020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d7dc91b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d7dc9340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d7dc95d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d7dc9760"/>
        <function-ref name="set" scoped="" ref="0x7f85d7dc98f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d7dc9a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d7dca4d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d7dc9c10"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d7dc9da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f85d6a872c0" loc="42:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d6a872c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f85d6a87640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d6a877d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2CInterrupts" ref="0x7f85d6a81440" loc="46:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2CInterrupts" scoped="" ref="0x7f85d6a81440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d6a817c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f85d6a78760" loc="51:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d6a78760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f85d6a78ae0"/>
        <function-ref name="configure" scoped="" ref="0x7f85d6a78c70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f85d6a81a50" loc="48:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f85d6a81a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f85d6a81dd0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f85d6a80020"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f85d6a801b0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f85d6a80340"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f85d6a804d0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f85d6a80660"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f85d6a807f0"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f85d6a80980"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d6a80b10"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f85d6a80ca0"/>
        <function-ref name="getData" scoped="" ref="0x7f85d6a80e30"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f85d6a7f020"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f85d6a7f1b0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f85d6a7f440"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f85d6a7f5d0"/>
        <function-ref name="getIV" scoped="" ref="0x7f85d6a7f760"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f85d6a7f8f0"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f85d6a7fa80"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f85d6a7fc10"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f85d6a7fda0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f85d6a7e020"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f85d6a7e1b0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f85d6a7e340"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f85d6a7e4d0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f85d6a7e660"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f85d6a7e9f0"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f85d6a7eb80"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f85d6a7ed10"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f85d6a7d020"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f85d6a7d1b0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f85d6a7d340"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f85d6a7d4d0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f85d6a7d660"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f85d6a7d7f0"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f85d6a7d980"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f85d6a7db10"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f85d6a7dca0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f85d6a7de30"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f85d6a7c020"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f85d6a7c1b0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f85d6a7c340"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f85d6a7c4d0"/>
        <function-ref name="setData" scoped="" ref="0x7f85d6a7c660"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f85d6a7c7f0"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f85d6a7c980"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f85d6a7cb10"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f85d6a7cca0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f85d6a7ce30"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f85d6a7b020"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f85d6a7b5b0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f85d6a7b740"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f85d6a7b8d0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f85d6a7ba60"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f85d6a7bbf0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f85d6a7bd80"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f85d6a78020"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f85d6a781b0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f85d6a78340"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f85d6a784d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f85d6a82c10" loc="45:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f85d6a82c10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d6a81020"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d6a811b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d6a89640" loc="41:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d6a89640"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d6a899c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d6a89b50"/>
        <function-ref name="request" scoped="" ref="0x7f85d6a89ce0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d6a89e70"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d6a87030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f85d6a862b0" loc="44:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f85d6a862b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f85d6a86630"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f85d6a867c0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f85d6a86950"/>
        <function-ref name="enableUart" scoped="" ref="0x7f85d6a86ae0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f85d6a86c70"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f85d6a86e00"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f85d6a85020"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f85d6a851b0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f85d6a85340"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f85d6a854d0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f85d6a85660"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f85d6a857f0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f85d6a85980"/>
        <function-ref name="getUbr" scoped="" ref="0x7f85d6a85c10"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f85d6a85da0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f85d6a84020"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f85d6a841b0"/>
        <function-ref name="isUart" scoped="" ref="0x7f85d6a84340"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f85d6a844d0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f85d6a84660"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f85d6a847f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f85d6a84980"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f85d6a84b10"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f85d6a84ca0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d6a84e30"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f85d6a83220"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f85d6a833b0"/>
        <function-ref name="setUbr" scoped="" ref="0x7f85d6a83540"/>
        <function-ref name="tx" scoped="" ref="0x7f85d6a836d0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f85d6a83860"/>
        <function-ref name="disableUart" scoped="" ref="0x7f85d6a839f0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f85d6a83b80"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f85d6a83d10"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f85d6a82020"/>
        <function-ref name="rx" scoped="" ref="0x7f85d6a821b0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f85d6a82340"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f85d6a824d0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f85d6a82660"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f85d6a827f0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f85d6a82980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f85d6a87a60" loc="43:../../../tos/chips/msp430/usart/Msp430Usart0C.nc">
      <component-ref qname="CC2420SpiWireC.HplCC2420SpiC.SpiC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d6a87a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d6a87de0"/>
        <function-ref name="userId" scoped="" ref="0x7f85d6a86020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f85d7d182c0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d7d182c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f85d7d18640"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d7d187d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f85d7d178a0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7d178a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f85d7d17c20"/>
        <function-ref name="configure" scoped="" ref="0x7f85d7d17db0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f85d7d1b4d0" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f85d7d1b4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d7d1b850"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d7d1b9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7d19020" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7d19020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7d193a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7d19530"/>
        <function-ref name="request" scoped="" ref="0x7f85d7d196c0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7d19850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7d199e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f85d7d1a3f0" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f85d7d1a3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d7d1a770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f85d7d18ad0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare0P.nc">
      <component-ref qname="Msp430UsartShare0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7d18ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d7d18e50"/>
        <function-ref name="userId" scoped="" ref="0x7f85d7d17020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f85d7d02bf0" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7d02bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d7d00020"/>
        <function-ref name="userId" scoped="" ref="0x7f85d7d001b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f85d7d14d60" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f85d7d14d60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d7d13180"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d7d13310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f85d7d025e0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f85d7d025e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d7d02960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f85d7d13710" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f85d7d13710"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d7d13ab0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f85d7d13d80" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare0P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f85d7d13d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d7d02180"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d7d02310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f85d7c82a60" loc="59:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d7c82a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f85d7c82e00"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d7c81020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f85d7c80790" loc="64:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7c80790"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f85d7c80b30"/>
        <function-ref name="configure" scoped="" ref="0x7f85d7c80cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f85d7c81270" loc="60:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d7c81270"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7c815f0"/>
        <function-ref name="requested" scoped="" ref="0x7f85d7c81780"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7c81910"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7c81aa0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d7c81c30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7c83ca0" loc="58:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7c83ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7c820a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7c82230"/>
        <function-ref name="request" scoped="" ref="0x7f85d7c823c0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7c82550"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7c826e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f85d7c7f020" loc="65:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f85d7c7f020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d7c7f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f85d7c81e80" loc="61:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7c81e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d7c80220"/>
        <function-ref name="userId" scoped="" ref="0x7f85d7c803b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d6a12020" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d6a12020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d6a123a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f85d6a12630" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f85d6a12630"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f85d6a129b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f85d6a12b40"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f85d6a12cd0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f85d6a12e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f85d6a0e6c0" loc="99:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d6a0e6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f85d6a0ea60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d6a0ebf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f85d6a0c9d0" loc="105:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d6a0c9d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f85d6a0cd70"/>
        <function-ref name="configure" scoped="" ref="0x7f85d6a0b020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f85d6a0b2b0" loc="106:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f85d6a0b2b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f85d6a0b630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f85d6a0b7c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f85d6a0b950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f85d6a0bae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f85d6a0ee40" loc="100:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d6a0ee40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d6a0d1e0"/>
        <function-ref name="requested" scoped="" ref="0x7f85d6a0d370"/>
        <function-ref name="granted" scoped="" ref="0x7f85d6a0d500"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d6a0d690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d6a0d820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d6a0bd30" loc="107:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d6a0bd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d6a090e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d6a09270"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d6a09400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d6a09590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d6a09720"/>
        <function-ref name="get" scoped="" ref="0x7f85d6a098b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d6a09a40"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d6a081b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d6a09d60"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d6a09bd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d6a08020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d6a0f850" loc="98:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d6a0f850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d6a0fbf0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d6a0fd80"/>
        <function-ref name="request" scoped="" ref="0x7f85d6a0e020"/>
        <function-ref name="granted" scoped="" ref="0x7f85d6a0e1b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d6a0e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f85d6a0c2d0" loc="104:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f85d6a0c2d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d6a0c650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f85d6a0da70" loc="101:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d6a0da70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d6a0ddf0"/>
        <function-ref name="userId" scoped="" ref="0x7f85d6a0c020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f85d6a08480" loc="155:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare0P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f85d6a08480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d6a08800"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d6a08990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430I2C" ref="0x7f85d7c75020" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C0C.nc">
      <component-ref qname="HplMsp430I2C0C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430I2C" scoped="" ref="0x7f85d7c75020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f85d7c753a0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f85d7c75530"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f85d7c756c0"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f85d7c75850"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f85d7c759e0"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f85d7c75b70"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f85d7c75d00"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f85d7c74020"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d7c741b0"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f85d7c74340"/>
        <function-ref name="getData" scoped="" ref="0x7f85d7c744d0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f85d7c74660"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f85d7c747f0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f85d7c74a80"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f85d7c74c10"/>
        <function-ref name="getIV" scoped="" ref="0x7f85d7c74da0"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f85d7c73020"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f85d7c731b0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f85d7c73340"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f85d7c734d0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f85d7c73660"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f85d7c737f0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f85d7c73980"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f85d7c73b10"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f85d7c73ca0"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f85d7c72220"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f85d7c723b0"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f85d7c72540"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f85d7c726d0"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f85d7c72860"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f85d7c729f0"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f85d7c72b80"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f85d7c72d10"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f85d7c71020"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f85d7c711b0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f85d7c71340"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f85d7c714d0"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f85d7c71660"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f85d7c717f0"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f85d7c71980"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f85d7c71b10"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f85d7c71ca0"/>
        <function-ref name="setData" scoped="" ref="0x7f85d7c71e30"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f85d7c70020"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f85d7c701b0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f85d7c70340"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f85d7c704d0"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f85d7c70660"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f85d7c707f0"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f85d7c70d80"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f85d7c6f020"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f85d7c6f1b0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f85d7c6f340"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f85d7c6f4d0"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f85d7c6f660"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f85d7c6f7f0"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f85d7c6f980"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f85d7c6fb10"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f85d7c6fca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUsart" ref="0x7f85d7c65bb0" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplUsart" scoped="" ref="0x7f85d7c65bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f85d7c64020"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f85d7c641b0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f85d7c64340"/>
        <function-ref name="enableUart" scoped="" ref="0x7f85d7c644d0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f85d7c64660"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f85d7c647f0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f85d7c64980"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f85d7c64b10"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f85d7c64ca0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f85d7c64e30"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f85d7c63020"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f85d7c631b0"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f85d7c63340"/>
        <function-ref name="getUbr" scoped="" ref="0x7f85d7c635d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f85d7c63760"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f85d7c638f0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f85d7c63a80"/>
        <function-ref name="isUart" scoped="" ref="0x7f85d7c63c10"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f85d7c63da0"/>
        <function-ref name="isSpi" scoped="" ref="0x7f85d7c62020"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f85d7c621b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f85d7c62340"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f85d7c624d0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f85d7c62660"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d7c627f0"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f85d7c62b80"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f85d7c62d10"/>
        <function-ref name="setUbr" scoped="" ref="0x7f85d7c61020"/>
        <function-ref name="tx" scoped="" ref="0x7f85d7c611b0"/>
        <function-ref name="getUctl" scoped="" ref="0x7f85d7c61340"/>
        <function-ref name="disableUart" scoped="" ref="0x7f85d7c614d0"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f85d7c61660"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f85d7c617f0"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f85d7c61980"/>
        <function-ref name="rx" scoped="" ref="0x7f85d7c61b10"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f85d7c61ca0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f85d7c61e30"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f85d7c60020"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f85d7c601b0"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f85d7c60340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f85d7c5ee40" loc="52:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f85d7c5ee40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7c5d1e0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7c5d370"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d7c5d500"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7c5b1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7c5d820"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7c5d9b0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d7c5db40"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d7c5dcd0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7c5de60"/>
        <function-ref name="get" scoped="" ref="0x7f85d7c5c020"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d7c5c1b0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d7c5c340"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d7c5c4d0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d7c5c760"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d7c5c8f0"/>
        <function-ref name="set" scoped="" ref="0x7f85d7c5ca80"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d7c5cc10"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d7c5d690"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d7c5cda0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d7c5b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplI2C" ref="0x7f85d7c6ed40" loc="48:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplI2C" scoped="" ref="0x7f85d7c6ed40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2C"/>
      </instance>
      <interface-functions>
        <function-ref name="disableOwnAddress" scoped="" ref="0x7f85d7c6b0e0"/>
        <function-ref name="getStartByte" scoped="" ref="0x7f85d7c6b270"/>
        <function-ref name="setSlaveAddress" scoped="" ref="0x7f85d7c6b400"/>
        <function-ref name="setMasterMode" scoped="" ref="0x7f85d7c6b590"/>
        <function-ref name="disableTransmitReady" scoped="" ref="0x7f85d7c6b720"/>
        <function-ref name="getClockPrescaler" scoped="" ref="0x7f85d7c6b8b0"/>
        <function-ref name="setTransmitMode" scoped="" ref="0x7f85d7c6ba40"/>
        <function-ref name="getStopBit" scoped="" ref="0x7f85d7c6bbd0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d7c6bd60"/>
        <function-ref name="getRepeatMode" scoped="" ref="0x7f85d7c6a020"/>
        <function-ref name="getData" scoped="" ref="0x7f85d7c6a1b0"/>
        <function-ref name="enableStartDetect" scoped="" ref="0x7f85d7c6a340"/>
        <function-ref name="enableAccessReady" scoped="" ref="0x7f85d7c6a4d0"/>
        <function-ref name="getSlaveAddress" scoped="" ref="0x7f85d7c6a760"/>
        <function-ref name="isGeneralCallPending" scoped="" ref="0x7f85d7c6a8f0"/>
        <function-ref name="getIV" scoped="" ref="0x7f85d7c6aa80"/>
        <function-ref name="enableI2C" scoped="" ref="0x7f85d7c6ac10"/>
        <function-ref name="setStartBit" scoped="" ref="0x7f85d7c6ada0"/>
        <function-ref name="getTransferByteCount" scoped="" ref="0x7f85d7c69020"/>
        <function-ref name="getTransmitReceiveMode" scoped="" ref="0x7f85d7c691b0"/>
        <function-ref name="clearModeI2C" scoped="" ref="0x7f85d7c69340"/>
        <function-ref name="setOwnAddress" scoped="" ref="0x7f85d7c694d0"/>
        <function-ref name="isI2C" scoped="" ref="0x7f85d7c69660"/>
        <function-ref name="enableGeneralCall" scoped="" ref="0x7f85d7c697f0"/>
        <function-ref name="enableOwnAddress" scoped="" ref="0x7f85d7c69980"/>
        <function-ref name="isAccessReadyPending" scoped="" ref="0x7f85d7c69d10"/>
        <function-ref name="isArbitrationLostPending" scoped="" ref="0x7f85d7c68020"/>
        <function-ref name="disableReceiveReady" scoped="" ref="0x7f85d7c681b0"/>
        <function-ref name="disableNoAck" scoped="" ref="0x7f85d7c68340"/>
        <function-ref name="disableStartDetect" scoped="" ref="0x7f85d7c684d0"/>
        <function-ref name="enableArbitrationLost" scoped="" ref="0x7f85d7c68660"/>
        <function-ref name="disableI2C" scoped="" ref="0x7f85d7c687f0"/>
        <function-ref name="getShiftClock" scoped="" ref="0x7f85d7c68980"/>
        <function-ref name="disableArbitrationLost" scoped="" ref="0x7f85d7c68b10"/>
        <function-ref name="disableAccessReady" scoped="" ref="0x7f85d7c68ca0"/>
        <function-ref name="setTransferByteCount" scoped="" ref="0x7f85d7c68e30"/>
        <function-ref name="isOwnAddressPending" scoped="" ref="0x7f85d7c67020"/>
        <function-ref name="getOwnAddress" scoped="" ref="0x7f85d7c671b0"/>
        <function-ref name="enableTransmitReady" scoped="" ref="0x7f85d7c67340"/>
        <function-ref name="setModeI2C" scoped="" ref="0x7f85d7c674d0"/>
        <function-ref name="getStartBit" scoped="" ref="0x7f85d7c67660"/>
        <function-ref name="setWordMode" scoped="" ref="0x7f85d7c677f0"/>
        <function-ref name="setData" scoped="" ref="0x7f85d7c67980"/>
        <function-ref name="isStartDetectPending" scoped="" ref="0x7f85d7c67b10"/>
        <function-ref name="getClockSource" scoped="" ref="0x7f85d7c67ca0"/>
        <function-ref name="getWordMode" scoped="" ref="0x7f85d7c67e30"/>
        <function-ref name="setShiftClock" scoped="" ref="0x7f85d7c66020"/>
        <function-ref name="setSlaveMode" scoped="" ref="0x7f85d7c661b0"/>
        <function-ref name="enableNoAck" scoped="" ref="0x7f85d7c66340"/>
        <function-ref name="enableReceiveReady" scoped="" ref="0x7f85d7c668d0"/>
        <function-ref name="disableGeneralCall" scoped="" ref="0x7f85d7c66a60"/>
        <function-ref name="setClockPrescaler" scoped="" ref="0x7f85d7c66bf0"/>
        <function-ref name="setStopBit" scoped="" ref="0x7f85d7c66d80"/>
        <function-ref name="setReceiveMode" scoped="" ref="0x7f85d7c65020"/>
        <function-ref name="isNoAckPending" scoped="" ref="0x7f85d7c651b0"/>
        <function-ref name="setRepeatMode" scoped="" ref="0x7f85d7c65340"/>
        <function-ref name="isTransmitReadyPending" scoped="" ref="0x7f85d7c654d0"/>
        <function-ref name="setStartByte" scoped="" ref="0x7f85d7c65660"/>
        <function-ref name="isReceiveReadyPending" scoped="" ref="0x7f85d7c657f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f85d7c60700" loc="51:../../../tos/chips/msp430/usart/HplMsp430I2C0P.nc">
      <component-ref qname="HplMsp430I2C0P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f85d7c60700"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7c60a80"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7c60c10"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d7c60da0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7c5ea80"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7c5f1b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7c5f340"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d7c5f4d0"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d7c5f660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7c5f7f0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7c5f980"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d7c5fb10"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d7c5fca0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d7c5fe30"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d7c5e120"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d7c5e2b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d7c5e440"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d7c5e5d0"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d7c5f020"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d7c5e760"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d7c5e8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f85d7b49c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f85d7b49c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b48210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b483a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f85d7b54da0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f85d7b54da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b53180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f85d7b4db50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f85d7b4db50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b4c020"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b4c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f85d7b47670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d7b47670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b479f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b47b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f85d7b40e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f85d7b40e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b3f210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b3f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f85d7b47e50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f85d7b47e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b46210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b463a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f85d7b332f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f85d7b332f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b33670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b33800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f85d7b362f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f85d7b362f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b36670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b36800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f85d7b52120" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f85d7b52120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b524a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f85d7b3b670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f85d7b3b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b3b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b3bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f85d7b372f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f85d7b372f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b37670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b37800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f85d7b4cc60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f85d7b4cc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b4b020"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b4b1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f85d7b4bc60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f85d7b4bc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b49020"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b491b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f85d7b41670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f85d7b41670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b419f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b41b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f85d7b44e50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f85d7b44e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b42210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b423a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f85d7b46670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f85d7b46670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b469f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b46b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f85d7b55760" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7b55760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f85d7b55ae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f85d7b55c70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f85d7b55e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f85d7b51aa0" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f85d7b51aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b51e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f85d7b4f120" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f85d7b4f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b4f5a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f85d7b3aa70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f85d7b3aa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b3adf0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b39020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f85d7b4f870" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f85d7b4f870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b4fbf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f85d7b37ad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f85d7b37ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b37e50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b36020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f85d7b52dc0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f85d7b52dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b51180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f85d7b3ce50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f85d7b3ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b3b210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b3b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f85d7b4b480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f85d7b4b480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b4b800"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b4b990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f85d7b4c480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7b4c480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b4c800"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b4c990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f85d7b54750" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f85d7b54750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b54ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f85d7b3ee50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f85d7b3ee50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b3c210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b3c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f85d7b3f670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f85d7b3f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b3f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b3fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f85d7b3c670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f85d7b3c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b3c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b3cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f85d7b34ad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f85d7b34ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b34e50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b33020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f85d7b36ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f85d7b36ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b36e50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b34020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f85d7b42670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f85d7b42670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b429f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b42b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f85d7b3fe50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f85d7b3fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b3e210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b3e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f85d7b38ad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f85d7b38ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b38e50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b37020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f85d7b45670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f85d7b45670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b459f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b45b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f85d7b33ad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f85d7b33ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d7b33e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d7b32020"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b321b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d7b32340"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d7b324d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f85d7b54100" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f85d7b54100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b54480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f85d7b4d370" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f85d7b4d370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b4d6f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b4d880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f85d7b49480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f85d7b49480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b49800"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b49990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f85d7b41e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f85d7b41e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b40210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b403a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f85d7b46e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f85d7b46e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b45210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b453a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f85d7b40670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f85d7b40670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b409f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b40b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f85d7b48670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f85d7b48670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b489f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b48b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f85d7b53450" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f85d7b53450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b537d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f85d7b48e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7b48e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b47210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b473a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7b56a80" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7b56a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7b56e00"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7b55020"/>
        <function-ref name="request" scoped="" ref="0x7f85d7b551b0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7b55340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7b554d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f85d7b4e020" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f85d7b4e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b4e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f85d7b4ecc0" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f85d7b4ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b4d0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f85d7b382f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f85d7b382f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b38670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b38800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f85d7b39ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f85d7b39ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b39e50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b38020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f85d7b51450" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f85d7b51450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b517d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f85d7b392f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f85d7b392f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b39670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b39800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f85d7b342f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f85d7b342f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b34670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b34800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f85d7b42e50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f85d7b42e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b41210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b413a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f85d7b3e670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f85d7b3e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b3e9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b3eb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f85d7b53aa0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f85d7b53aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b53e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f85d7b52770" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f85d7b52770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b52af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f85d7b45e50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f85d7b45e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b44210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b443a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f85d7b4e670" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f85d7b4e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b4e9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f85d7b44670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f85d7b44670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b449f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b44b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f85d7b3be50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f85d7b3be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b3a610"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b3a7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f85d7b327a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.SyncSpiC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f85d7b327a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d7b32b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d7b32cb0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b32e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d7b31020"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d7b311b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f85d7b1dc60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f85d7b1dc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b1c210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b1c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f85d7b28da0" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f85d7b28da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b26180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f85d7b20b50" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f85d7b20b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b1f020"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b1f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f85d7b1b670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d7b1b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b1b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b1bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f85d7b13e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f85d7b13e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b12210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b123a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f85d7b1be50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f85d7b1be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b19210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b193a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f85d7b072f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f85d7b072f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b07670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b07800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f85d7b092f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f85d7b092f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b09670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b09800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f85d7b25120" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f85d7b25120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b254a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f85d7b0f670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f85d7b0f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b0f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b0fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f85d7b0a2f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f85d7b0a2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b0a670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b0a800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f85d7b1fc60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f85d7b1fc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b1e020"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b1e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f85d7b1ec60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f85d7b1ec60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b1d020"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b1d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f85d7b15670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f85d7b15670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b159f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b15b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f85d7b17e50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f85d7b17e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b16210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b163a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f85d7b19670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f85d7b19670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b199f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b19b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f85d7b29760" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7b29760"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f85d7b29ae0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f85d7b29c70"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f85d7b29e00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f85d7b24aa0" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f85d7b24aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b24e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f85d7b23120" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f85d7b23120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b235a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f85d7b0ea70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f85d7b0ea70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b0edf0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b0d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f85d7b23870" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f85d7b23870"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b23bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f85d7b0aad0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f85d7b0aad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b0ae50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b09020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f85d7b25dc0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f85d7b25dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b24180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f85d7b10e50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f85d7b10e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b0f210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b0f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f85d7b1e480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f85d7b1e480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b1e800"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b1e990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f85d7b1f480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7b1f480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b1f800"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b1f990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f85d7b28750" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f85d7b28750"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b28ad0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f85d7b11e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f85d7b11e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b10210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b103a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f85d7b12670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f85d7b12670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b129f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b12b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f85d7b10670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f85d7b10670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b109f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b10b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f85d7b08ad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f85d7b08ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b08e50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b07020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f85d7b09ad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f85d7b09ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b09e50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b08020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f85d7b16670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f85d7b16670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b169f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b16b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f85d7b12e50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f85d7b12e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b11210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b113a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f85d7b0bad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f85d7b0bad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b0be50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b0a020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f85d7b18670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f85d7b18670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b189f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b18b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f85d7b07ad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f85d7b07ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d7b07e50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d7b05020"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b051b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d7b05340"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d7b054d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f85d7b28100" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f85d7b28100"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b28480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f85d7b20370" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f85d7b20370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b206f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b20880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f85d7b1d480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f85d7b1d480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b1d800"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b1d990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f85d7b15e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f85d7b15e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b13210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b133a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f85d7b19e50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f85d7b19e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b18210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b183a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f85d7b13670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f85d7b13670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b139f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b13b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f85d7b1c670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f85d7b1c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b1c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b1cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f85d7b26450" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f85d7b26450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b267d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f85d7b1ce50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7b1ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b1b210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b1b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7b2a9e0" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7b2a9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7b2ad60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7b29020"/>
        <function-ref name="request" scoped="" ref="0x7f85d7b291b0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7b29340"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7b294d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f85d7b22020" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f85d7b22020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b223a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f85d7b22cc0" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f85d7b22cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b200a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f85d7b0b2f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f85d7b0b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b0b670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b0b800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f85d7b0dad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f85d7b0dad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b0de50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b0b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f85d7b24450" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f85d7b24450"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b247d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f85d7b0d2f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f85d7b0d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b0d670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b0d800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f85d7b082f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f85d7b082f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b08670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b08800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f85d7b16e50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f85d7b16e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b15210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b153a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f85d7b11670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f85d7b11670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b119f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b11b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f85d7b26aa0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f85d7b26aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b26e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f85d7b25770" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f85d7b25770"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b25af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f85d7b18e50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f85d7b18e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b17210"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b173a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f85d7b22670" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f85d7b22670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7b229f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f85d7b17670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f85d7b17670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b179f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b17b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f85d7b0fe50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f85d7b0fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7b0e610"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b0e7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f85d7b057a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ControlC.RssiResource"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f85d7b057a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d7b05b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d7b05cb0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7b05e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d7b04020"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d7b041b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x7f85d7afdb20" loc="54:../../../tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f85d7afdb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f85d7afa020"/>
        <function-ref name="changed" scoped="" ref="0x7f85d7afa1b0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f85d7afa340"/>
        <function-ref name="setAddress" scoped="" ref="0x7f85d7afa4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f85d7afcd20" loc="13:../../../tos/chips/ds2411/LocalIeeeEui64C.nc">
      <component-ref qname="LocalIeeeEui64C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f85d7afcd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f85d7ae60e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalIeeeEui64" ref="0x7f85d7ae2310" loc="5:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalIeeeEui64" scoped="" ref="0x7f85d7ae2310"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalIeeeEui64"/>
      </instance>
      <interface-functions>
        <function-ref name="getId" scoped="" ref="0x7f85d7ae2690"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReadId48" ref="0x7f85d7adf880" loc="8:../../../tos/chips/ds2411/LocalIeeeEui64P.nc">
      <component-ref qname="LocalIeeeEui64P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f85d7adf880"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7adfc00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f85d7ad4020" loc="8:../../../tos/chips/ds2411/Ds2411C.nc">
      <component-ref qname="Ds2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f85d7ad4020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7ad43a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="OneWire" ref="0x7f85d7acabd0" loc="14:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f85d7acabd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7ace020"/>
        <function-ref name="write" scoped="" ref="0x7f85d7ace1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerControl" ref="0x7f85d7ace530" loc="15:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerControl" scoped="" ref="0x7f85d7ace530"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d7ace8b0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d7acea40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadId48" ref="0x7f85d7acf140" loc="11:../../../tos/chips/ds2411/Ds2411P.nc">
      <component-ref qname="Ds2411P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReadId48" scoped="" ref="0x7f85d7acf140"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadId48"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7acf4c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f85d7ad3c50" loc="8:../../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f85d7ad3c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7aba020"/>
        <function-ref name="write" scoped="" ref="0x7f85d7aba1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f85d7aba540" loc="11:../../../tos/lib/onewire/OneWireMasterC.nc">
      <component-ref qname="OneWireMasterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f85d7aba540"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7aba8c0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7abaa50"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7ababe0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7abad70"/>
        <function-ref name="get" scoped="" ref="0x7f85d7ab9020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7ab91b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d7ab9340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7ab94d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x7f85d7ab1950" loc="15:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f85d7ab1950"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8918460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f85d89187d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f85d7ab4780"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="OneWire" ref="0x7f85d7ab6150" loc="11:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="OneWire" scoped="" ref="0x7f85d7ab6150"/></type-interface>
      <instance>
        <interfacedef-ref qname="OneWireReadWrite"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7ab64d0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7ab6660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Pin" ref="0x7f85d7ab69f0" loc="14:../../../tos/lib/onewire/OneWireMasterP.nc">
      <component-ref qname="OneWireMasterP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Pin" scoped="" ref="0x7f85d7ab69f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7ab6d70"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7ab5020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7ab51b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7ab5340"/>
        <function-ref name="get" scoped="" ref="0x7f85d7ab54d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7ab5660"/>
        <function-ref name="set" scoped="" ref="0x7f85d7ab57f0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7ab5980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f85d7ab8ca0" loc="41:../../../tos/chips/msp430/timer/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f85d7ab8ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8918460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f85d89187d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f85d7a90ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x7f85d7a8ea90" loc="54:../../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BusyWait" scoped="" ref="0x7f85d7a8ea90"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8918460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f85d89187d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x7f85d7a8c8d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f85d7a7d020" loc="55:../../../tos/lib/timer/BusyWaitCounterC.nc">
      <component-ref qname="BusyWaitMicroC.BusyWaitCounterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f85d7a7d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8918460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f85d89187d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d7a7de30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d7a7b800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d7a7b340"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d7a7bcc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430CounterMicro" ref="0x7f85d7a77530" loc="46:../../../tos/chips/msp430/x1x2/timer/Msp430CounterMicroC.nc">
      <component-ref qname="Msp430CounterMicroC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430CounterMicro" scoped="" ref="0x7f85d7a77530"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8918460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f85d89187d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d7a763d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d7a76d50"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d7a76890"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d7a75260"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f85d7a70020" loc="45:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d7a70020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d7a703a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d7a70530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d7a706c0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7a70850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d7a709e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d7a70b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d7a70d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d7a6f020"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d7a6f1b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d7a6f340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d7a6f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f85d7a73e50" loc="44:../../../tos/chips/msp430/timer/Msp430CounterC.nc">
      <component-ref qname="Msp430CounterMicroC.Counter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f85d7a73e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8918460"/>
            <typename><typedef-ref name="TMicro" ref="0x7f85d89187d0"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d7a72ca0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d7a71670"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d7a711b0"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d7a71b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Gpio" ref="0x7f85d7abb590" loc="3:../../../tos/platforms/epic/chips/ds2411/HplDs2411C.nc">
      <component-ref qname="HplDs2411C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Gpio" scoped="" ref="0x7f85d7abb590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7abb910"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7abbaa0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7abbc30"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7abbdc0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7a6a020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7a6a1b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d7a6a340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7a6a4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplGeneralIO" ref="0x7f85d7a68c50" loc="44:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplGeneralIO" scoped="" ref="0x7f85d7a68c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7a67020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7a671b0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d7a67340"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d7a65020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7a67660"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7a677f0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d7a67980"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d7a67b10"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7a67ca0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7a67e30"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d7a66020"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d7a661b0"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d7a66340"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d7a665d0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d7a66760"/>
        <function-ref name="set" scoped="" ref="0x7f85d7a668f0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d7a66a80"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d7a66c10"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7a674d0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d7a66da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="GeneralIO" ref="0x7f85d7a699e0" loc="43:../../../tos/chips/msp430/pins/Msp430GpioC.nc">
      <component-ref qname="HplDs2411C.MspGpio"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="GeneralIO" scoped="" ref="0x7f85d7a699e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7a69d60"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7a68020"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7a681b0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7a68340"/>
        <function-ref name="get" scoped="" ref="0x7f85d7a684d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7a68660"/>
        <function-ref name="set" scoped="" ref="0x7f85d7a687f0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7a68980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f85d7a601b0" loc="14:../../../tos/chips/ds2411/Ds2411PowerControlC.nc">
      <component-ref qname="Ds2411PowerControlC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f85d7a601b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d7a60530"/>
        <function-ref name="stop" scoped="" ref="0x7f85d7a606c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f85d7a51cb0" loc="46:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d7a51cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f85d7a500a0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f85d7a50230"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f85d7a503c0"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f85d7a50550"/>
        <function-ref name="setCca" scoped="" ref="0x7f85d7a506e0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f85d7a50870"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f85d7a4d990" loc="47:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f85d7a4d990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f85d7a4dd10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Transmit" ref="0x7f85d7a51020" loc="45:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Transmit" scoped="" ref="0x7f85d7a51020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7a513a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d7a51530"/>
        <function-ref name="modify" scoped="" ref="0x7f85d7a516c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d7a51850"/>
        <function-ref name="resend" scoped="" ref="0x7f85d7a519e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f85d7a546c0" loc="44:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f85d7a546c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d7a54a40"/>
        <function-ref name="stop" scoped="" ref="0x7f85d7a54bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f85d7a4f150" loc="48:../../../tos/chips/cc2420/transmit/CC2420TransmitC.nc">
      <component-ref qname="CC2420TransmitC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f85d7a4f150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f85d7a4f4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f85d7a41970" loc="51:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d7a41970"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f85d7a41cf0"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f85d7a41e80"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f85d7a40030"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f85d7a401c0"/>
        <function-ref name="setCca" scoped="" ref="0x7f85d7a40350"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f85d7a404e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f85d7a39950" loc="58:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f85d7a39950"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f85d7a37020"/>
        <function-ref name="clear" scoped="" ref="0x7f85d7a37750"/>
        <function-ref name="isValid" scoped="" ref="0x7f85d7a38780"/>
        <function-ref name="set" scoped="" ref="0x7f85d7a37e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f85d7a22020" loc="78:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d7a22020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7a223a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7a22530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f85d7a22890" loc="79:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f85d7a22890"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7a22c10"/>
        <function-ref name="write" scoped="" ref="0x7f85d7a22da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="EnergyIndicator" ref="0x7f85d7a40900" loc="52:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="EnergyIndicator" scoped="" ref="0x7f85d7a40900"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f85d7a40c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXONCCA" ref="0x7f85d7a25530" loc="72:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f85d7a25530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7a258b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CaptureSFD" ref="0x7f85d7a34880" loc="60:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CaptureSFD" scoped="" ref="0x7f85d7a34880"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioCapture"/>
      </instance>
      <interface-functions>
        <function-ref name="captureFallingEdge" scoped="" ref="0x7f85d7a34c00"/>
        <function-ref name="disable" scoped="" ref="0x7f85d7a34d90"/>
        <function-ref name="captured" scoped="" ref="0x7f85d7a33020"/>
        <function-ref name="captureRisingEdge" scoped="" ref="0x7f85d7a331b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BackoffTimer" ref="0x7f85d7a3fae0" loc="55:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BackoffTimer" scoped="" ref="0x7f85d7a3fae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d7a3b390"/>
        <function-ref name="fired" scoped="" ref="0x7f85d7a3d360"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d7a3dce0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d7a3d820"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d7a3b850"/>
        <function-ref name="start" scoped="" ref="0x7f85d7a3e970"/>
        <function-ref name="stop" scoped="" ref="0x7f85d7a3ee80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f85d7a3bd00" loc="56:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d7a3bd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f85d7a3a0a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f85d7a3a230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f85d7a3a3c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f85d7a3a550"/>
        <function-ref name="getPower" scoped="" ref="0x7f85d7a3a6e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f85d7a3a870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO_RAM" ref="0x7f85d7a27550" loc="68:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f85d7a27550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7a278d0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7a27a60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXCTRL" ref="0x7f85d7a27e00" loc="69:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f85d7a27e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7a261c0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7a26350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Receive" ref="0x7f85d7a1bd40" loc="83:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f85d7a1bd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d7a1e0e0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f85d7a1e270"/>
        <function-ref name="sfd" scoped="" ref="0x7f85d7a1e400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f85d7a42bc0" loc="50:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f85d7a42bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Transmit"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7a41020"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d7a411b0"/>
        <function-ref name="modify" scoped="" ref="0x7f85d7a41340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d7a414d0"/>
        <function-ref name="resend" scoped="" ref="0x7f85d7a41660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ChipSpiResource" ref="0x7f85d7a29d10" loc="66:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7a29d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f85d7a280e0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f85d7a28270"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f85d7a28400"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHTX" ref="0x7f85d7a25c60" loc="73:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f85d7a25c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7a24020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f85d7a2d820" loc="62:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f85d7a2d820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7a2dba0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7a2dd30"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7a2b020"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7a2b1b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7a2b340"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7a2b4d0"/>
        <function-ref name="set" scoped="" ref="0x7f85d7a2b660"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7a2b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d7a44c60" loc="48:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d7a44c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d7a42020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f85d7a3abb0" loc="57:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d7a3abb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f85d7a39020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f85d7a391b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f85d7a39340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeSyncOffset" ref="0x7f85d7a2ebe0" loc="59:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f85d7a2ebe0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d7a34020"/>
        <function-ref name="isSet" scoped="" ref="0x7f85d7a341b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d7a34340"/>
        <function-ref name="set" scoped="" ref="0x7f85d7a344d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MDMCTRL1" ref="0x7f85d7a243e0" loc="74:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7a243e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7a24960"/>
        <function-ref name="write" scoped="" ref="0x7f85d7a24af0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f85d7a29020" loc="65:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f85d7a29020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7a293a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7a29530"/>
        <function-ref name="request" scoped="" ref="0x7f85d7a296c0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7a29850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7a299e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CCA" ref="0x7f85d7a33500" loc="61:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CCA" scoped="" ref="0x7f85d7a33500"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7a33980"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7a33b10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7a33ca0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7a33e30"/>
        <function-ref name="get" scoped="" ref="0x7f85d7a2d020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7a2d1b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d7a2d340"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7a2d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f85d7a21130" loc="80:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f85d7a21130"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7a214b0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7a21640"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXNONCE" ref="0x7f85d7a219c0" loc="81:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f85d7a219c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7a21d40"/>
        <function-ref name="write" scoped="" ref="0x7f85d7a1f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f85d7a266d0" loc="70:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f85d7a266d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7a26a50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFD" ref="0x7f85d7a2bb40" loc="63:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFD" scoped="" ref="0x7f85d7a2bb40"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7a2a020"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7a2a1b0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7a2a340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7a2a4d0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7a2a660"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7a2a7f0"/>
        <function-ref name="set" scoped="" ref="0x7f85d7a2a980"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7a2ab10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d7a1e6c0" loc="84:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d7a1e6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d7a1ea40"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d7a1ebd0"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d7a1ed60"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d7a1d020"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d7a1d1b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7a1d340"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d7a1d4d0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d7a1db10"/>
        <function-ref name="set" scoped="" ref="0x7f85d7a1d660"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d7a1d7f0"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d7a1d980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f85d7a235e0" loc="77:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7a235e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7a23960"/>
        <function-ref name="write" scoped="" ref="0x7f85d7a23af0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f85d7a42320" loc="49:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f85d7a42320"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d7a426a0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d7a42830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TXFIFO" ref="0x7f85d7a28780" loc="67:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f85d7a28780"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d7a28b00"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d7a28c90"/>
        <function-ref name="write" scoped="" ref="0x7f85d7a28e20"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d7a27020"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d7a271b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXON" ref="0x7f85d7a26de0" loc="71:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f85d7a26de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7a25180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="STXENC" ref="0x7f85d7a24e80" loc="76:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f85d7a24e80"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7a23220"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteIndicator" ref="0x7f85d7a3f0f0" loc="53:../../../tos/chips/cc2420/transmit/CC2420TransmitP.nc">
      <component-ref qname="CC2420TransmitP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ByteIndicator" scoped="" ref="0x7f85d7a3f0f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f85d7a3f470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f85d7981c60" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f85d7981c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7980210"/>
        <function-ref name="write" scoped="" ref="0x7f85d79803a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f85d798b020" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f85d798b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d798b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f85d7984c70" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f85d7984c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7983020"/>
        <function-ref name="write" scoped="" ref="0x7f85d79831b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f85d797f670" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d797f670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d797f9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d797fb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f85d7977e50" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f85d7977e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7976210"/>
        <function-ref name="write" scoped="" ref="0x7f85d79763a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f85d797fe50" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f85d797fe50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d797d210"/>
        <function-ref name="write" scoped="" ref="0x7f85d797d3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f85d796b2f0" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f85d796b2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d796b670"/>
        <function-ref name="write" scoped="" ref="0x7f85d796b800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f85d796d2f0" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f85d796d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d796d670"/>
        <function-ref name="write" scoped="" ref="0x7f85d796d800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f85d7989370" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f85d7989370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d79896f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f85d7973670" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f85d7973670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d79739f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7973b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f85d796e2f0" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f85d796e2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d796e670"/>
        <function-ref name="write" scoped="" ref="0x7f85d796e800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f85d7983c60" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f85d7983c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7982020"/>
        <function-ref name="write" scoped="" ref="0x7f85d79821b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f85d7982c60" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f85d7982c60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7981020"/>
        <function-ref name="write" scoped="" ref="0x7f85d79811b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f85d7979670" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f85d7979670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d79799f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7979b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f85d797be50" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f85d797be50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d797a210"/>
        <function-ref name="write" scoped="" ref="0x7f85d797a3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f85d797d670" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f85d797d670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d797d9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d797db80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f85d798d8f0" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d798d8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f85d798dc70"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f85d798de00"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f85d798c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f85d7988d00" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f85d7988d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d79870a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f85d7987370" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f85d7987370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d79877f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f85d7972a70" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f85d7972a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7972df0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7971020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f85d7987ac0" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f85d7987ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7987e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f85d796ead0" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f85d796ead0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d796ee50"/>
        <function-ref name="write" scoped="" ref="0x7f85d796d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f85d7988060" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f85d7988060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d79883e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f85d7974e50" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f85d7974e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7973210"/>
        <function-ref name="write" scoped="" ref="0x7f85d79733a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f85d7982480" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f85d7982480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7982800"/>
        <function-ref name="write" scoped="" ref="0x7f85d7982990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f85d7983480" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7983480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7983800"/>
        <function-ref name="write" scoped="" ref="0x7f85d7983990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f85d798c940" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f85d798c940"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d798ccc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f85d7975e50" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f85d7975e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7974210"/>
        <function-ref name="write" scoped="" ref="0x7f85d79743a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f85d7976670" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f85d7976670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d79769f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7976b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f85d7974670" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f85d7974670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d79749f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7974b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f85d796cad0" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f85d796cad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d796ce50"/>
        <function-ref name="write" scoped="" ref="0x7f85d796b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f85d796dad0" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f85d796dad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d796de50"/>
        <function-ref name="write" scoped="" ref="0x7f85d796c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f85d797a670" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f85d797a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d797a9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d797ab80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f85d7976e50" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f85d7976e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7975210"/>
        <function-ref name="write" scoped="" ref="0x7f85d79753a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f85d796fad0" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f85d796fad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d796fe50"/>
        <function-ref name="write" scoped="" ref="0x7f85d796e020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f85d797c670" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f85d797c670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d797c9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d797cb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f85d796bad0" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f85d796bad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d796be50"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d7969020"/>
        <function-ref name="write" scoped="" ref="0x7f85d79691b0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d7969340"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d79694d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f85d798c2f0" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f85d798c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d798c670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f85d7984490" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f85d7984490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7984810"/>
        <function-ref name="write" scoped="" ref="0x7f85d79849a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f85d7981480" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f85d7981480"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7981800"/>
        <function-ref name="write" scoped="" ref="0x7f85d7981990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f85d7979e50" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f85d7979e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7977210"/>
        <function-ref name="write" scoped="" ref="0x7f85d79773a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f85d797de50" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f85d797de50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d797c210"/>
        <function-ref name="write" scoped="" ref="0x7f85d797c3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f85d7977670" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f85d7977670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d79779f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7977b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f85d7980670" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f85d7980670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d79809f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7980b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f85d798b670" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f85d798b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d798b9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f85d7980e50" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7980e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d797f210"/>
        <function-ref name="write" scoped="" ref="0x7f85d797f3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d798ec30" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d798ec30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d798d020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d798d1b0"/>
        <function-ref name="request" scoped="" ref="0x7f85d798d340"/>
        <function-ref name="granted" scoped="" ref="0x7f85d798d4d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d798d660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f85d7986160" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f85d7986160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d79864e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f85d7986e00" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f85d7986e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d79841c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f85d796f2f0" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f85d796f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d796f670"/>
        <function-ref name="write" scoped="" ref="0x7f85d796f800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f85d7971ad0" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f85d7971ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7971e50"/>
        <function-ref name="write" scoped="" ref="0x7f85d796f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f85d79886b0" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f85d79886b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7988a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f85d79712f0" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f85d79712f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7971670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7971800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f85d796c2f0" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f85d796c2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d796c670"/>
        <function-ref name="write" scoped="" ref="0x7f85d796c800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f85d797ae50" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f85d797ae50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7979210"/>
        <function-ref name="write" scoped="" ref="0x7f85d79793a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f85d7975670" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f85d7975670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d79759f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7975b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f85d798bcc0" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f85d798bcc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d79890a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f85d79899c0" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f85d79899c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7989d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f85d797ce50" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f85d797ce50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d797b210"/>
        <function-ref name="write" scoped="" ref="0x7f85d797b3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f85d79867b0" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f85d79867b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7986b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f85d797b670" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f85d797b670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d797b9f0"/>
        <function-ref name="write" scoped="" ref="0x7f85d797bb80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f85d7973e50" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f85d7973e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7972610"/>
        <function-ref name="write" scoped="" ref="0x7f85d79727a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f85d79697a0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420TransmitC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f85d79697a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d7969b20"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d7969cb0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7969e40"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d7968020"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d79681b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f85d795ddf0" loc="42:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f85d795ddf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d795a1c0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f85d795a350"/>
        <function-ref name="sfd" scoped="" ref="0x7f85d795a4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d795a7c0" loc="43:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d795a7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d795ab40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f85d7959020" loc="44:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f85d7959020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f85d79593a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f85d795d5c0" loc="41:../../../tos/chips/cc2420/receive/CC2420ReceiveC.nc">
      <component-ref qname="CC2420ReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f85d795d5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d795d940"/>
        <function-ref name="stop" scoped="" ref="0x7f85d795dad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFO" ref="0x7f85d7952380" loc="54:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFO" scoped="" ref="0x7f85d7952380"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7952700"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7952890"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7952a20"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7952bb0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7952d40"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7951020"/>
        <function-ref name="set" scoped="" ref="0x7f85d79511b0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7951340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f85d794bb90" loc="64:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f85d794bb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f85d7949020"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f85d79491b0"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f85d7949340"/>
        <function-ref name="syncDone" scoped="" ref="0x7f85d79494d0"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f85d7949660"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f85d79497f0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f85d7949980"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f85d7949b10"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f85d7949ca0"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f85d7949e30"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f85d7948020"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f85d79481b0"/>
        <function-ref name="sync" scoped="" ref="0x7f85d7948340"/>
        <function-ref name="getChannel" scoped="" ref="0x7f85d79485d0"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f85d7948760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveDone_task" ref="0x7f85d79339d0" loc="148:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveDone_task" scoped="" ref="0x7f85d79339d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d7933d50"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d7932020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketTimeStamp" ref="0x7f85d7948d70" loc="65:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp" scoped="" ref="0x7f85d7948d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f85d7946330"/>
        <function-ref name="clear" scoped="" ref="0x7f85d7946a60"/>
        <function-ref name="isValid" scoped="" ref="0x7f85d7947ba0"/>
        <function-ref name="set" scoped="" ref="0x7f85d7945210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="FIFOP" ref="0x7f85d79516b0" loc="55:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FIFOP" scoped="" ref="0x7f85d79516b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d7951a30"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7951bc0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d7951d50"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7950020"/>
        <function-ref name="get" scoped="" ref="0x7f85d79501b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7950340"/>
        <function-ref name="set" scoped="" ref="0x7f85d79504d0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7950660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL1" ref="0x7f85d7943cb0" loc="69:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d7943cb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d79420a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7942230"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY0" ref="0x7f85d7942590" loc="70:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f85d7942590"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7942910"/>
        <function-ref name="write" scoped="" ref="0x7f85d7942aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXNONCE" ref="0x7f85d79416d0" loc="72:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f85d79416d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7941a50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7941be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f85d794c330" loc="62:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d794c330"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f85d794c6b0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f85d794c840"/>
        <function-ref name="getRssi" scoped="" ref="0x7f85d794c9d0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f85d794cb60"/>
        <function-ref name="getPower" scoped="" ref="0x7f85d794ccf0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f85d794ce80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Receive" ref="0x7f85d7955550" loc="49:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Receive" scoped="" ref="0x7f85d7955550"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d79558d0"/>
        <function-ref name="sfd_dropped" scoped="" ref="0x7f85d7955a60"/>
        <function-ref name="sfd" scoped="" ref="0x7f85d7955bf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SACK" ref="0x7f85d794d3a0" loc="60:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f85d794d3a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d794d720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CSN" ref="0x7f85d7953020" loc="53:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CSN" scoped="" ref="0x7f85d7953020"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d79533a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d7953530"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d79536c0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d7953850"/>
        <function-ref name="get" scoped="" ref="0x7f85d79539e0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d7953b70"/>
        <function-ref name="set" scoped="" ref="0x7f85d7953d00"/>
        <function-ref name="clr" scoped="" ref="0x7f85d7952020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO_RAM" ref="0x7f85d7940020" loc="73:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f85d7940020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d79403a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7940530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d7956620" loc="47:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d7956620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d79569a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f85d794b1e0" loc="63:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d794b1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f85d794b560"/>
        <function-ref name="getHeader" scoped="" ref="0x7f85d794b6f0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f85d794b880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d7954020" loc="50:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d7954020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d79543a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiResource" ref="0x7f85d794f6e0" loc="58:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SpiResource" scoped="" ref="0x7f85d794f6e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d794fa60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d794fbf0"/>
        <function-ref name="request" scoped="" ref="0x7f85d794fd80"/>
        <function-ref name="granted" scoped="" ref="0x7f85d794e020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d794e1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="KEY1" ref="0x7f85d7942e00" loc="71:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f85d7942e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d79411c0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7941350"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RXFIFO" ref="0x7f85d794e530" loc="59:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f85d794e530"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d794e8b0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d794ea40"/>
        <function-ref name="write" scoped="" ref="0x7f85d794ebd0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d794ed60"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d794d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SNOP" ref="0x7f85d79408b0" loc="74:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f85d79408b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7940e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketIndicator" ref="0x7f85d79547c0" loc="51:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketIndicator" scoped="" ref="0x7f85d79547c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveIndicator"/>
      </instance>
      <interface-functions>
        <function-ref name="isReceiving" scoped="" ref="0x7f85d7954b40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d793f150" loc="76:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d793f150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d793f4d0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d793f660"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d793f7f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d793f980"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d793fb10"/>
        <function-ref name="get" scoped="" ref="0x7f85d793fca0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d793fe30"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d793e4d0"/>
        <function-ref name="set" scoped="" ref="0x7f85d793e020"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d793e1b0"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d793e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SECCTRL0" ref="0x7f85d79433e0" loc="68:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d79433e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7943760"/>
        <function-ref name="write" scoped="" ref="0x7f85d79438f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SRXDEC" ref="0x7f85d7945b10" loc="67:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f85d7945b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7943020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="InterruptFIFOP" ref="0x7f85d7950a50" loc="56:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="InterruptFIFOP" scoped="" ref="0x7f85d7950a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="GpioInterrupt"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d7950dd0"/>
        <function-ref name="disable" scoped="" ref="0x7f85d794f020"/>
        <function-ref name="enableFallingEdge" scoped="" ref="0x7f85d794f1b0"/>
        <function-ref name="enableRisingEdge" scoped="" ref="0x7f85d794f340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SFLUSHRX" ref="0x7f85d794dad0" loc="61:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f85d794dad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d794c020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f85d7956ca0" loc="48:../../../tos/chips/cc2420/receive/CC2420ReceiveP.nc">
      <component-ref qname="CC2420ReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f85d7956ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d79550a0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d7955230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f85d78d3a70" loc="44:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f85d78d3a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f85d78d3df0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f85d78d7670" loc="41:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d78d7670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f85d78d79f0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f85d78d7b80"/>
        <function-ref name="getRssi" scoped="" ref="0x7f85d78d7d10"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f85d78d4020"/>
        <function-ref name="getPower" scoped="" ref="0x7f85d78d41b0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f85d78d4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f85d78d2550" loc="46:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f85d78d2550"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f85d78d0b00"/>
        <function-ref name="clear" scoped="" ref="0x7f85d78cf2a0"/>
        <function-ref name="isValid" scoped="" ref="0x7f85d78d03d0"/>
        <function-ref name="set" scoped="" ref="0x7f85d78cf9d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f85d78d30c0" loc="43:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d78d30c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f85d78d3440"/>
        <function-ref name="getHeader" scoped="" ref="0x7f85d78d35d0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f85d78d3760"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f85d78ca480" loc="48:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f85d78ca480"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d78ca800"/>
        <function-ref name="isSet" scoped="" ref="0x7f85d78ca990"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d78cab20"/>
        <function-ref name="set" scoped="" ref="0x7f85d78cacb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f85d78ce660" loc="47:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f85d78ce660"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f85d78ccce0"/>
        <function-ref name="clear" scoped="" ref="0x7f85d78cb460"/>
        <function-ref name="isValid" scoped="" ref="0x7f85d78cc5b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d78cbb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f85d78d46e0" loc="42:../../../tos/chips/cc2420/packet/CC2420PacketC.nc">
      <component-ref qname="CC2420PacketC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f85d78d46e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f85d78d4a60"/>
        <function-ref name="noAck" scoped="" ref="0x7f85d78d4bf0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f85d78d4d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x7f85d78c3020" loc="49:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x7f85d78c3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x7f85d78c33a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420Packet" ref="0x7f85d78c9d20" loc="46:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d78c9d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f85d78c50e0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f85d78c5270"/>
        <function-ref name="getRssi" scoped="" ref="0x7f85d78c5400"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f85d78c5590"/>
        <function-ref name="getPower" scoped="" ref="0x7f85d78c5720"/>
        <function-ref name="getLqi" scoped="" ref="0x7f85d78c58b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f85d78ba4a0" loc="56:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f85d78ba4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d78ba820"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d78ba9b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d78bab40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d78bacd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d78bae60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x7f85d78c3a80" loc="51:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x7f85d78c3a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f85d78c1020"/>
        <function-ref name="clear" scoped="" ref="0x7f85d78c1750"/>
        <function-ref name="isValid" scoped="" ref="0x7f85d78c28d0"/>
        <function-ref name="set" scoped="" ref="0x7f85d78c1e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC2420PacketBody" ref="0x7f85d78c4640" loc="48:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d78c4640"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f85d78c49c0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f85d78c4b50"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f85d78c4ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x7f85d78bc8b0" loc="53:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x7f85d78bc8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d78bcc30"/>
        <function-ref name="isSet" scoped="" ref="0x7f85d78bcdc0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d78ba020"/>
        <function-ref name="set" scoped="" ref="0x7f85d78ba1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime32khz" ref="0x7f85d78b6820" loc="57:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime32khz" scoped="" ref="0x7f85d78b6820"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d78b84c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x7f85d78b8b80" loc="58:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTimeMilli" scoped="" ref="0x7f85d78b8b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d78b77d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x7f85d78c0af0" loc="52:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x7f85d78c0af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x7f85d78bd0d0"/>
        <function-ref name="clear" scoped="" ref="0x7f85d78bd800"/>
        <function-ref name="isValid" scoped="" ref="0x7f85d78be970"/>
        <function-ref name="set" scoped="" ref="0x7f85d78bc020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f85d78c5c50" loc="47:../../../tos/chips/cc2420/packet/CC2420PacketP.nc">
      <component-ref qname="CC2420PacketP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f85d78c5c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f85d78c4020"/>
        <function-ref name="noAck" scoped="" ref="0x7f85d78c41b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f85d78c4340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f85d7866790" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f85d7866790"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d78653f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f85d7865a60" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC2420PacketC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f85d7865a60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d785b890"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d785a260"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d785bd50"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d785a720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f85d78541d0" loc="46:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f85d78541d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d7851630"/>
        <function-ref name="fired" scoped="" ref="0x7f85d7853c30"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f85d78529d0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f85d7852550"/>
        <function-ref name="getdt" scoped="" ref="0x7f85d784f020"/>
        <function-ref name="gett0" scoped="" ref="0x7f85d7851ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d78520d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f85d7854dc0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f85d7851020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f85d78532e0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d78537b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f85d784f610" loc="47:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f85d784f610"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d784e3d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d78563a0" loc="45:../../../tos/chips/msp430/timer/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d78563a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d7856720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f85d7820870" loc="44:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f85d7820870"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d781c090"/>
        <function-ref name="fired" scoped="" ref="0x7f85d781d090"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d781da10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d781d550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d781c550"/>
        <function-ref name="start" scoped="" ref="0x7f85d781e6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d781ebb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d7820020" loc="43:../../../tos/chips/msp430/timer/AlarmMilli32C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d7820020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d78203a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f85d68d8260" loc="44:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f85d68d8260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d68d6b30"/>
        <function-ref name="fired" scoped="" ref="0x7f85d68d7a60"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d68d64e0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d68d6020"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d68d4020"/>
        <function-ref name="start" scoped="" ref="0x7f85d68d7090"/>
        <function-ref name="stop" scoped="" ref="0x7f85d68d75a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d68d99d0" loc="43:../../../tos/chips/msp430/timer/Alarm32khz16C.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d68d99d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d68d9d50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Compare" ref="0x7f85d68c0a80" loc="41:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d68c0a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d68c0e00"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d68be020"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d68be1b0"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d68be340"/>
        <function-ref name="fired" scoped="" ref="0x7f85d68be4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430Timer" ref="0x7f85d68c2020" loc="39:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d68c2020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d68c23a0"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d68c2530"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d68c26c0"/>
        <function-ref name="get" scoped="" ref="0x7f85d68c2850"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d68c29e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d68c2b70"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d68c2d00"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d68c1020"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d68c11b0"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d68c1340"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d68c14d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430TimerControl" ref="0x7f85d68c1760" loc="40:../../../tos/chips/msp430/timer/Msp430Timer32khzC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Timer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d68c1760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d68c1ae0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d68c1c70"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d68c1e00"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d68c0020"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d68c01b0"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d68c0340"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d68c04d0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d68c0660"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d68c07f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Compare" ref="0x7f85d68b3760" loc="49:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Compare" scoped="" ref="0x7f85d68b3760"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Compare"/>
      </instance>
      <interface-functions>
        <function-ref name="getEvent" scoped="" ref="0x7f85d68b3ae0"/>
        <function-ref name="setEvent" scoped="" ref="0x7f85d68b3c70"/>
        <function-ref name="setEventFromPrev" scoped="" ref="0x7f85d68b3e00"/>
        <function-ref name="setEventFromNow" scoped="" ref="0x7f85d68b2020"/>
        <function-ref name="fired" scoped="" ref="0x7f85d68b21b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430Timer" ref="0x7f85d68b7dd0" loc="47:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430Timer" scoped="" ref="0x7f85d68b7dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430Timer"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d68b6180"/>
        <function-ref name="setClockSource" scoped="" ref="0x7f85d68b6310"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d68b64a0"/>
        <function-ref name="get" scoped="" ref="0x7f85d68b6630"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d68b67c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d68b6950"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d68b6ae0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d68b6c70"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d68b6e00"/>
        <function-ref name="setMode" scoped="" ref="0x7f85d68b5020"/>
        <function-ref name="setInputDivider" scoped="" ref="0x7f85d68b51b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f85d68bcbf0" loc="46:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f85d68bcbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d68b74e0"/>
        <function-ref name="fired" scoped="" ref="0x7f85d68b84e0"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d68b8e60"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d68b89a0"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d68b79a0"/>
        <function-ref name="start" scoped="" ref="0x7f85d68b9a80"/>
        <function-ref name="stop" scoped="" ref="0x7f85d68b8020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d68bc360" loc="45:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d68bc360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d68bc6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430TimerControl" ref="0x7f85d68b5440" loc="48:../../../tos/chips/msp430/timer/Msp430AlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.AlarmFrom.Msp430Alarm"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430TimerControl" scoped="" ref="0x7f85d68b5440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430TimerControl"/>
      </instance>
      <interface-functions>
        <function-ref name="setControlAsCapture" scoped="" ref="0x7f85d68b57c0"/>
        <function-ref name="getControl" scoped="" ref="0x7f85d68b5950"/>
        <function-ref name="enableEvents" scoped="" ref="0x7f85d68b5ae0"/>
        <function-ref name="areEventsEnabled" scoped="" ref="0x7f85d68b5c70"/>
        <function-ref name="setControlAsCompare" scoped="" ref="0x7f85d68b5e00"/>
        <function-ref name="disableEvents" scoped="" ref="0x7f85d68b3020"/>
        <function-ref name="isInterruptPending" scoped="" ref="0x7f85d68b31b0"/>
        <function-ref name="clearPendingInterrupt" scoped="" ref="0x7f85d68b3340"/>
        <function-ref name="setControl" scoped="" ref="0x7f85d68b34d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f85d783fb70" loc="43:../../../tos/chips/msp430/timer/CounterMilli32C.nc">
      <component-ref qname="CounterMilli32C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f85d783fb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d783c9b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d783a360"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d783ce70"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d783a820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x7f85d7834b90" loc="63:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CounterFrom" scoped="" ref="0x7f85d7834b90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d78339d0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d78314e0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d7831020"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d78319a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f85d7837610" loc="62:../../../tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f85d7837610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d78355b0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d7834020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d7835a70"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d78344e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x7f85d68d25f0" loc="61:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f85d68d25f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d68d0e50"/>
        <function-ref name="fired" scoped="" ref="0x7f85d68d1e00"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d68d0800"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d68d0340"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d68cf340"/>
        <function-ref name="start" scoped="" ref="0x7f85d68d1430"/>
        <function-ref name="stop" scoped="" ref="0x7f85d68d1940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AlarmFrom" ref="0x7f85d68ccd20" loc="73:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AlarmFrom" scoped="" ref="0x7f85d68ccd20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d68c9670"/>
        <function-ref name="fired" scoped="" ref="0x7f85d68ca550"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d68c9020"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d68caa10"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d68c9b30"/>
        <function-ref name="start" scoped="" ref="0x7f85d68cbb60"/>
        <function-ref name="stop" scoped="" ref="0x7f85d68ca090"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f85d68cf9b0" loc="68:../../../tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="HilTimerMilliC.AlarmMilli32C.Transform"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f85d68cf9b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d68cd7e0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d68cc1b0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d68cdca0"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d68cc670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x7f85d77ea9c0" loc="74:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="fired" scoped="" ref="0x7f85d77ea9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d77ead40"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d77e9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x7f85d77ee850" loc="49:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Alarm" scoped="" ref="0x7f85d77ee850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d77ea090"/>
        <function-ref name="fired" scoped="" ref="0x7f85d77ec090"/>
        <function-ref name="startAt" scoped="" ref="0x7f85d77eca10"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d77ec550"/>
        <function-ref name="getAlarm" scoped="" ref="0x7f85d77ea550"/>
        <function-ref name="start" scoped="" ref="0x7f85d77ed6a0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d77edbb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f85d77f32f0" loc="48:../../../tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d77f32f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d77ef870"/>
        <function-ref name="fired" scoped="" ref="0x7f85d77f2e40"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f85d77f1c00"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f85d77f1780"/>
        <function-ref name="getdt" scoped="" ref="0x7f85d77ee1e0"/>
        <function-ref name="gett0" scoped="" ref="0x7f85d77efcf0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d77f1300"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f85d77f2020"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f85d77ef260"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f85d77f24f0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d77f29c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f85d776b020" loc="58:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f85d776b020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d7768630"/>
        <function-ref name="fired" scoped="" ref="0x7f85d776aa60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f85d7769920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f85d77694a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f85d7766020"/>
        <function-ref name="gett0" scoped="" ref="0x7f85d7768ab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d7769020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f85d776bc10"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f85d7768020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f85d776a110"/>
        <function-ref name="stop" scoped="" ref="0x7f85d776a5e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f85d7766450" loc="59:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f85d7766450"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f85d77667d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f85d77738e0" loc="57:../../../tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d77738e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d776d020"/>
        <function-ref name="fired" scoped="" ref="0x7f85d77704c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f85d776e300"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f85d7770e00"/>
        <function-ref name="getdt" scoped="" ref="0x7f85d776d960"/>
        <function-ref name="gett0" scoped="" ref="0x7f85d776d4c0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d7770960"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f85d7772560"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f85d776e930"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f85d7772a50"/>
        <function-ref name="stop" scoped="" ref="0x7f85d7770020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x7f85d685a020" loc="153:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="updateFromTimer" scoped="" ref="0x7f85d685a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d685a3a0"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d685a530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x7f85d6861180" loc="65:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerFrom" scoped="" ref="0x7f85d6861180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d685d630"/>
        <function-ref name="fired" scoped="" ref="0x7f85d6860bf0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f85d685f990"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f85d685f510"/>
        <function-ref name="getdt" scoped="" ref="0x7f85d685c020"/>
        <function-ref name="gett0" scoped="" ref="0x7f85d685dab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d685f090"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f85d6861d70"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f85d685d020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f85d68602a0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d6860770"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimeSkew" ref="0x7f85d685b8b0" loc="67:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimeSkew" scoped="" ref="0x7f85d685b8b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TimeSkew"/>
      </instance>
      <interface-functions>
        <function-ref name="skew" scoped="" ref="0x7f85d685bc30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Platform" ref="0x7f85d685c410" loc="66:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Platform" scoped="" ref="0x7f85d685c410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Platform"/>
      </instance>
      <interface-functions>
        <function-ref name="localTime" scoped="" ref="0x7f85d685b4d0"/>
        <function-ref name="usecsExpired" scoped="" ref="0x7f85d685b660"/>
        <function-ref name="usecsRawSize" scoped="" ref="0x7f85d685cab0"/>
        <function-ref name="usecsRaw" scoped="" ref="0x7f85d685cc40"/>
        <function-ref name="jiffiesExpired" scoped="" ref="0x7f85d685cdd0"/>
        <function-ref name="getIntPriority" scoped="" ref="0x7f85d685b020"/>
        <function-ref name="set_unaligned_traps" scoped="" ref="0x7f85d685b1b0"/>
        <function-ref name="jiffiesRaw" scoped="" ref="0x7f85d685b340"/>
        <function-ref name="jiffiesRawSize" scoped="" ref="0x7f85d685c790"/>
        <function-ref name="node_id" scoped="" ref="0x7f85d685c920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f85d6868bc0" loc="63:../../../tos/lib/timer/VirtualizeTimerImplP.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC.VT"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d6868bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d6863220"/>
        <function-ref name="fired" scoped="" ref="0x7f85d6866740"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f85d6864570"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f85d68640d0"/>
        <function-ref name="getdt" scoped="" ref="0x7f85d6863b60"/>
        <function-ref name="gett0" scoped="" ref="0x7f85d68636c0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d6866be0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f85d6867860"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f85d6864ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f85d6867d50"/>
        <function-ref name="stop" scoped="" ref="0x7f85d68662a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x7f85d7764a20" loc="48:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LocalTime" scoped="" ref="0x7f85d7764a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d77636b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f85d7763d20" loc="49:../../../tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f85d7763d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d7762b60"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d7761550"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d7761090"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d7761a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f85d775ace0" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="CC2420PacketC.DummyTimer"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d775ace0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d7745220"/>
        <function-ref name="fired" scoped="" ref="0x7f85d77487c0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f85d7746590"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f85d7746110"/>
        <function-ref name="getdt" scoped="" ref="0x7f85d7745b20"/>
        <function-ref name="gett0" scoped="" ref="0x7f85d77456a0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d7748c40"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f85d7749940"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f85d7746ba0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f85d7749e10"/>
        <function-ref name="stop" scoped="" ref="0x7f85d7748340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x7f85d7751610" loc="49:../../../tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TimerMilli" scoped="" ref="0x7f85d7751610"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d774dc40"/>
        <function-ref name="fired" scoped="" ref="0x7f85d774f1e0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f85d774d020"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f85d774fae0"/>
        <function-ref name="getdt" scoped="" ref="0x7f85d774c590"/>
        <function-ref name="gett0" scoped="" ref="0x7f85d774c110"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d774f660"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f85d7750390"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f85d774d630"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f85d7750860"/>
        <function-ref name="stop" scoped="" ref="0x7f85d7750d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL1" ref="0x7f85d77342f0" loc="69:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL1" scoped="" ref="0x7f85d77342f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7734870"/>
        <function-ref name="write" scoped="" ref="0x7f85d7734a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXCAL" ref="0x7f85d773e670" loc="47:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXCAL" scoped="" ref="0x7f85d773e670"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d773e9f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL0" ref="0x7f85d77372f0" loc="63:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL0" scoped="" ref="0x7f85d77372f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7737670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7737800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL1" ref="0x7f85d7732ce0" loc="72:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL1" scoped="" ref="0x7f85d7732ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d77310a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7731230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST0" ref="0x7f85d772a500" loc="86:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST0" scoped="" ref="0x7f85d772a500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d772a880"/>
        <function-ref name="write" scoped="" ref="0x7f85d772aa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BATTMON" ref="0x7f85d7731500" loc="73:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BATTMON" scoped="" ref="0x7f85d7731500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7731880"/>
        <function-ref name="write" scoped="" ref="0x7f85d7731a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXNONCE" ref="0x7f85d771f900" loc="108:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXNONCE" scoped="" ref="0x7f85d771f900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d771fc80"/>
        <function-ref name="write" scoped="" ref="0x7f85d771fe10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY0" ref="0x7f85d7721900" loc="104:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY0" scoped="" ref="0x7f85d7721900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7721c80"/>
        <function-ref name="write" scoped="" ref="0x7f85d7721e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXONCCA" ref="0x7f85d773d9c0" loc="50:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXONCCA" scoped="" ref="0x7f85d773d9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d773dd40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DACTST" ref="0x7f85d7727ce0" loc="93:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DACTST" scoped="" ref="0x7f85d7727ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d77260a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7726230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_RAM" ref="0x7f85d7722900" loc="102:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_RAM" scoped="" ref="0x7f85d7722900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7722c80"/>
        <function-ref name="write" scoped="" ref="0x7f85d7722e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RSSI" ref="0x7f85d77362f0" loc="65:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RSSI" scoped="" ref="0x7f85d77362f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7736670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7736800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXCTRL" ref="0x7f85d77352f0" loc="67:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXCTRL" scoped="" ref="0x7f85d77352f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7735670"/>
        <function-ref name="write" scoped="" ref="0x7f85d7735800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST0" ref="0x7f85d772dce0" loc="83:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST0" scoped="" ref="0x7f85d772dce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d772b0a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d772b230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANAND" ref="0x7f85d772e500" loc="79:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANAND" scoped="" ref="0x7f85d772e500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d772e880"/>
        <function-ref name="write" scoped="" ref="0x7f85d772ea10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG0" ref="0x7f85d7731ce0" loc="74:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG0" scoped="" ref="0x7f85d7731ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d77300a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7730230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ChipSpiResource" ref="0x7f85d7740020" loc="42:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ChipSpiResource" scoped="" ref="0x7f85d7740020"/></type-interface>
      <instance>
        <interfacedef-ref qname="ChipSpiResource"/>
      </instance>
      <interface-functions>
        <function-ref name="releasing" scoped="" ref="0x7f85d77403a0"/>
        <function-ref name="abortRelease" scoped="" ref="0x7f85d7740530"/>
        <function-ref name="attemptRelease" scoped="" ref="0x7f85d77406c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHTX" ref="0x7f85d773b370" loc="54:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHTX" scoped="" ref="0x7f85d773b370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d773b6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACK" ref="0x7f85d773b9c0" loc="55:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACK" scoped="" ref="0x7f85d773b9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d773be40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO_REGISTER" ref="0x7f85d7724120" loc="95:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO_REGISTER" scoped="" ref="0x7f85d7724120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d77244a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7724630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SACKPEND" ref="0x7f85d773a160" loc="56:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SACKPEND" scoped="" ref="0x7f85d773a160"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d773a4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_RAM" ref="0x7f85d7721120" loc="103:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_RAM" scoped="" ref="0x7f85d7721120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d77214a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7721630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCOFF" ref="0x7f85d773c6b0" loc="52:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCOFF" scoped="" ref="0x7f85d773c6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d773ca30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ADCTST" ref="0x7f85d7727500" loc="92:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ADCTST" scoped="" ref="0x7f85d7727500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7727880"/>
        <function-ref name="write" scoped="" ref="0x7f85d7727a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SYNCWORD" ref="0x7f85d7736ad0" loc="66:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SYNCWORD" scoped="" ref="0x7f85d7736ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7736e50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7735020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MDMCTRL1" ref="0x7f85d7737ad0" loc="64:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MDMCTRL1" scoped="" ref="0x7f85d7737ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7737e50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7736020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SXOSCON" ref="0x7f85d773e020" loc="46:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SXOSCON" scoped="" ref="0x7f85d773e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d773e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXBPFTST" ref="0x7f85d7728500" loc="90:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXBPFTST" scoped="" ref="0x7f85d7728500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7728880"/>
        <function-ref name="write" scoped="" ref="0x7f85d7728a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST1" ref="0x7f85d772ace0" loc="87:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST1" scoped="" ref="0x7f85d772ace0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d77290a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7729230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMSTATE" ref="0x7f85d7728ce0" loc="91:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMSTATE" scoped="" ref="0x7f85d7728ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d77270a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7727230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXNONCE" ref="0x7f85d771f120" loc="107:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXNONCE" scoped="" ref="0x7f85d771f120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d771f4a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d771f630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="KEY1" ref="0x7f85d7720120" loc="105:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="KEY1" scoped="" ref="0x7f85d7720120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d77204a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7720630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANOR" ref="0x7f85d772ece0" loc="80:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANOR" scoped="" ref="0x7f85d772ece0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d772d0a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d772d230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST2" ref="0x7f85d7729500" loc="88:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST2" scoped="" ref="0x7f85d7729500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7729880"/>
        <function-ref name="write" scoped="" ref="0x7f85d7729a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SHORTADR" ref="0x7f85d7722120" loc="101:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SHORTADR" scoped="" ref="0x7f85d7722120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d77224a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7722630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDL" ref="0x7f85d7730ce0" loc="76:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDL" scoped="" ref="0x7f85d7730ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d772f0a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d772f230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO" ref="0x7f85d771d120" loc="111:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO" scoped="" ref="0x7f85d771d120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d771d4a0"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d771d630"/>
        <function-ref name="write" scoped="" ref="0x7f85d771d7c0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d771d950"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d771dae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SNOP" ref="0x7f85d7740990" loc="45:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SNOP" scoped="" ref="0x7f85d7740990"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7740d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MAIN" ref="0x7f85d7738ae0" loc="62:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MAIN" scoped="" ref="0x7f85d7738ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7738e60"/>
        <function-ref name="write" scoped="" ref="0x7f85d7737020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXCTRL0" ref="0x7f85d7735ad0" loc="68:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXCTRL0" scoped="" ref="0x7f85d7735ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7735e50"/>
        <function-ref name="write" scoped="" ref="0x7f85d7734020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST1" ref="0x7f85d772b500" loc="84:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST1" scoped="" ref="0x7f85d772b500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d772b880"/>
        <function-ref name="write" scoped="" ref="0x7f85d772ba10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IOCFG1" ref="0x7f85d7730500" loc="75:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IOCFG1" scoped="" ref="0x7f85d7730500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7730880"/>
        <function-ref name="write" scoped="" ref="0x7f85d7730a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCTST2" ref="0x7f85d772bce0" loc="85:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCTST2" scoped="" ref="0x7f85d772bce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d772a0a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d772a230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSCTRL" ref="0x7f85d7734cd0" loc="70:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSCTRL" scoped="" ref="0x7f85d7734cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d77320a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7732230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXON" ref="0x7f85d773ecc0" loc="48:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXON" scoped="" ref="0x7f85d773ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d773d0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SECCTRL0" ref="0x7f85d7732500" loc="71:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SECCTRL0" scoped="" ref="0x7f85d7732500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7732880"/>
        <function-ref name="write" scoped="" ref="0x7f85d7732a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7741250" loc="41:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7741250"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d77415d0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7741760"/>
        <function-ref name="request" scoped="" ref="0x7f85d77418f0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7741a80"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7741c10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRXDEC" ref="0x7f85d773a7b0" loc="57:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRXDEC" scoped="" ref="0x7f85d773a7b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d773ab30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SAES" ref="0x7f85d7738490" loc="59:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SAES" scoped="" ref="0x7f85d7738490"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d7738810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PANID" ref="0x7f85d7723900" loc="100:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PANID" scoped="" ref="0x7f85d7723900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7723c80"/>
        <function-ref name="write" scoped="" ref="0x7f85d7723e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IEEEADR" ref="0x7f85d7723120" loc="99:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="IEEEADR" scoped="" ref="0x7f85d7723120"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d77234a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7723630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SFLUSHRX" ref="0x7f85d773cd00" loc="53:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SFLUSHRX" scoped="" ref="0x7f85d773cd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d773b0a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RXFIFO_REGISTER" ref="0x7f85d7724900" loc="96:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RXFIFO_REGISTER" scoped="" ref="0x7f85d7724900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7724c80"/>
        <function-ref name="write" scoped="" ref="0x7f85d7724e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SABUF" ref="0x7f85d7720900" loc="106:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SABUF" scoped="" ref="0x7f85d7720900"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Ram"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7720c80"/>
        <function-ref name="write" scoped="" ref="0x7f85d7720e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AGCCTRL" ref="0x7f85d772d500" loc="81:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AGCCTRL" scoped="" ref="0x7f85d772d500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d772d880"/>
        <function-ref name="write" scoped="" ref="0x7f85d772da10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSTST3" ref="0x7f85d7729ce0" loc="89:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSTST3" scoped="" ref="0x7f85d7729ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d77280a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d7728230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXON" ref="0x7f85d773d370" loc="49:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXON" scoped="" ref="0x7f85d773d370"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d773d6f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SRFOFF" ref="0x7f85d773c060" loc="51:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SRFOFF" scoped="" ref="0x7f85d773c060"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d773c3e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="MANFIDH" ref="0x7f85d772f500" loc="77:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="MANFIDH" scoped="" ref="0x7f85d772f500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d772f880"/>
        <function-ref name="write" scoped="" ref="0x7f85d772fa10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="STXENC" ref="0x7f85d773ae00" loc="58:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="STXENC" scoped="" ref="0x7f85d773ae00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Strobe"/>
      </instance>
      <interface-functions>
        <function-ref name="strobe" scoped="" ref="0x7f85d77381c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FSMTC" ref="0x7f85d772fce0" loc="78:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FSMTC" scoped="" ref="0x7f85d772fce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d772e0a0"/>
        <function-ref name="write" scoped="" ref="0x7f85d772e230"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TOPTST" ref="0x7f85d7726500" loc="94:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TOPTST" scoped="" ref="0x7f85d7726500"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Register"/>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x7f85d7726c80"/>
        <function-ref name="write" scoped="" ref="0x7f85d7726e10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TXFIFO" ref="0x7f85d771ddb0" loc="112:../../../tos/chips/cc2420/spi/CC2420SpiC.nc">
      <component-ref qname="CC2420ReceiveC.Spi"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="TXFIFO" scoped="" ref="0x7f85d771ddb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Fifo"/>
      </instance>
      <interface-functions>
        <function-ref name="continueRead" scoped="" ref="0x7f85d771c180"/>
        <function-ref name="writeDone" scoped="" ref="0x7f85d771c310"/>
        <function-ref name="write" scoped="" ref="0x7f85d771c4a0"/>
        <function-ref name="beginRead" scoped="" ref="0x7f85d771c630"/>
        <function-ref name="readDone" scoped="" ref="0x7f85d771c7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f85d76f2a20" loc="46:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f85d76f2a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f85d76f2da0"/>
        <function-ref name="rand32" scoped="" ref="0x7f85d76f0020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f85d76f1920" loc="45:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f85d76f1920"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d76f2560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d76f7990" loc="44:../../../tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d76f7990"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d76f7d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x7f85d76e8a20" loc="48:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f85d76e8a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f85d76e8da0"/>
        <function-ref name="rand32" scoped="" ref="0x7f85d76e7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x7f85d76e9940" loc="47:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SeedInit" scoped="" ref="0x7f85d76e9940"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d76e8560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d76e9080" loc="46:../../../tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d76e9080"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d76e9400"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f85d76f5aa0" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="CC2420CsmaC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f85d76f5aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f85d76f5e20"/>
        <function-ref name="toIdle" scoped="" ref="0x7f85d76ee020"/>
        <function-ref name="isState" scoped="" ref="0x7f85d76ee1b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f85d76ee340"/>
        <function-ref name="requestState" scoped="" ref="0x7f85d76ee4d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f85d76ee660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f85d76d0020" loc="44:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f85d76d0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d76d03a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d76d0530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d76d06c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d76d0850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d76d09e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f85d76d2220" loc="40:../../../tos/chips/cc2420/unique/UniqueSendC.nc">
      <component-ref qname="UniqueSendC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f85d76d2220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d76d25a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d76d2730"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d76d28c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d76d2a50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d76d2be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f85d76cce60" loc="45:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f85d76cce60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d76cb210"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d76cb3a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d76cb530"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d76cb6c0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d76cb850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f85d76cfa10" loc="40:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f85d76cfa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d76cfd90"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d76cc020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d76cc1b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d76cc340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d76cc4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x7f85d76ca8f0" loc="47:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Random" scoped="" ref="0x7f85d76ca8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x7f85d76cac70"/>
        <function-ref name="rand32" scoped="" ref="0x7f85d76cae00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d76cc750" loc="41:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d76cc750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d76ccad0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f85d76c9170" loc="48:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d76c9170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f85d76c94f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f85d76c9680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f85d76c9810"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="State" ref="0x7f85d76cbae0" loc="46:../../../tos/chips/cc2420/unique/UniqueSendP.nc">
      <component-ref qname="UniqueSendP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f85d76cbae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f85d76cbe60"/>
        <function-ref name="toIdle" scoped="" ref="0x7f85d76ca020"/>
        <function-ref name="isState" scoped="" ref="0x7f85d76ca1b0"/>
        <function-ref name="isIdle" scoped="" ref="0x7f85d76ca340"/>
        <function-ref name="requestState" scoped="" ref="0x7f85d76ca4d0"/>
        <function-ref name="forceState" scoped="" ref="0x7f85d76ca660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f85d76cd690" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="UniqueSendC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f85d76cd690"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f85d76cda10"/>
        <function-ref name="toIdle" scoped="" ref="0x7f85d76cdba0"/>
        <function-ref name="isState" scoped="" ref="0x7f85d76cdd30"/>
        <function-ref name="isIdle" scoped="" ref="0x7f85d76b8020"/>
        <function-ref name="requestState" scoped="" ref="0x7f85d76b81b0"/>
        <function-ref name="forceState" scoped="" ref="0x7f85d76b8340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f85d76b2950" loc="47:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f85d76b2950"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d76b2cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d76b5aa0" loc="42:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d76b5aa0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d76b5e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f85d76b2200" loc="43:../../../tos/chips/cc2420/unique/UniqueReceiveC.nc">
      <component-ref qname="UniqueReceiveC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f85d76b2200"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d76b2580"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f85d76ad3f0" loc="49:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f85d76ad3f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d76ad770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d76aeb70" loc="45:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d76aeb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d76ad020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d76b1e30" loc="43:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d76b1e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d76ae1e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f85d76ada70" loc="50:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d76ada70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f85d76addf0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f85d76ac020"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f85d76ac1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="DuplicateReceive" ref="0x7f85d76ae570" loc="44:../../../tos/chips/cc2420/unique/UniqueReceiveP.nc">
      <component-ref qname="UniqueReceiveP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="DuplicateReceive" scoped="" ref="0x7f85d76ae570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d76ae8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f85d767e020" loc="75:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f85d767e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d767e3a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f85d767e6b0" loc="76:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f85d767e6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d767ea30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d767ebc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d767ed50"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d767d020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d767d1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f85d76838e0" loc="65:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f85d76838e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7683c60"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d7683df0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d7681020"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d76811b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d7681340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f85d7681c90" loc="68:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f85d7681c90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d76800a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d7680230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d76803c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d7680550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d76806e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d76815e0" loc="66:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d76815e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d7681960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7684be0" loc="64:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7684be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7683020"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d76831b0"/>
        <function-ref name="request" scoped="" ref="0x7f85d7683340"/>
        <function-ref name="granted" scoped="" ref="0x7f85d76834d0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7683660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f85d7680a50" loc="69:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f85d7680a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d7680dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f85d767f170" loc="71:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkC.nc">
      <component-ref qname="CC2420TinyosNetworkC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f85d767f170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d767f4f0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d767f680"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d767f810"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d767f9a0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d767fb30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f85d7674d70" loc="58:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f85d7674d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7673180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d7673310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d76734a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d7673630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d76737c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f85d7673b10" loc="59:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f85d7673b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d7672020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantTask" ref="0x7f85d7645db0" loc="184:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantTask" scoped="" ref="0x7f85d7645db0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d7644180"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d7644310"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f85d76722f0" loc="60:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d76722f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f85d7672670"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f85d7672800"/>
        <function-ref name="getRssi" scoped="" ref="0x7f85d7672990"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f85d7672b20"/>
        <function-ref name="getPower" scoped="" ref="0x7f85d7672cb0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f85d7672e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveSend" ref="0x7f85d7677a20" loc="51:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveSend" scoped="" ref="0x7f85d7677a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7677da0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d7675020"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d76751b0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d7675340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d76754d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f85d7671b70" loc="62:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f85d7671b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f85d7670020"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f85d76701b0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f85d7670340"/>
        <function-ref name="dequeue" scoped="" ref="0x7f85d76704d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f85d7671170" loc="61:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d7671170"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f85d76714f0"/>
        <function-ref name="getHeader" scoped="" ref="0x7f85d7671680"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f85d7671810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareReceive" ref="0x7f85d7677370" loc="49:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareReceive" scoped="" ref="0x7f85d7677370"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d76776f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d76797b0" loc="46:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d76797b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7679b30"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7679cc0"/>
        <function-ref name="request" scoped="" ref="0x7f85d7679e50"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7678020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d76781b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BareSend" ref="0x7f85d76784d0" loc="48:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BareSend" scoped="" ref="0x7f85d76784d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7678850"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d76789e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d7678b70"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d7678d00"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d7677020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveReceive" ref="0x7f85d7675840" loc="52:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveReceive" scoped="" ref="0x7f85d7675840"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d7675bc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BarePacket" ref="0x7f85d7674020" loc="54:../../../tos/chips/cc2420/lowpan/CC2420TinyosNetworkP.nc">
      <component-ref qname="CC2420TinyosNetworkP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="BarePacket" scoped="" ref="0x7f85d7674020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d76743a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d7674530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d76746c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d7674850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d76749e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d7625dd0" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d7625dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d7624180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f85d7624410" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="CC2420TinyosNetworkC.FcfsResourceQueueC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f85d7624410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f85d7624790"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f85d7624920"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f85d7624ab0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f85d7624c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f85d7618b80" loc="46:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f85d7618b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f85d7617020"/>
        <function-ref name="stopDone" scoped="" ref="0x7f85d76171b0"/>
        <function-ref name="start" scoped="" ref="0x7f85d7617340"/>
        <function-ref name="stop" scoped="" ref="0x7f85d76174d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f85d7616860" loc="51:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f85d7616860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7616be0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d7616d70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d7615020"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d76151b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d7615340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f85d7615690" loc="52:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f85d7615690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d7615a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f85d761dce0" loc="43:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f85d761dce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d761a0a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d761a230"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d761a3c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d761a550"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d761a6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f85d7618080" loc="45:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f85d7618080"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f85d7618400"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f85d7618590"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f85d7618720"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f85d76188b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendState" ref="0x7f85d7617800" loc="47:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendState" scoped="" ref="0x7f85d7617800"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f85d7617b80"/>
        <function-ref name="toIdle" scoped="" ref="0x7f85d7617d10"/>
        <function-ref name="isState" scoped="" ref="0x7f85d7616020"/>
        <function-ref name="isIdle" scoped="" ref="0x7f85d76161b0"/>
        <function-ref name="requestState" scoped="" ref="0x7f85d7616340"/>
        <function-ref name="forceState" scoped="" ref="0x7f85d76164d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubControl" ref="0x7f85d7615d90" loc="53:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubControl" scoped="" ref="0x7f85d7615d90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f85d7614180"/>
        <function-ref name="stopDone" scoped="" ref="0x7f85d7614310"/>
        <function-ref name="start" scoped="" ref="0x7f85d76144a0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d7614630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d761a980" loc="44:../../../tos/chips/cc2420/lpl/DummyLplC.nc">
      <component-ref qname="DummyLplC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d761a980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d761ad00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x7f85d76112d0" loc="41:../../../tos/chips/cc2420/lpl/DummyLplP.nc">
      <component-ref qname="DummyLplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="LowPowerListening" scoped="" ref="0x7f85d76112d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x7f85d7611650"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x7f85d76117e0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x7f85d7611970"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x7f85d7611b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="State" ref="0x7f85d7613580" loc="67:../../../tos/system/StateC.nc">
      <component-ref qname="DummyLplC.StateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="State" scoped="" ref="0x7f85d7613580"/></type-interface>
      <instance>
        <interfacedef-ref qname="State"/>
      </instance>
      <interface-functions>
        <function-ref name="getState" scoped="" ref="0x7f85d7613900"/>
        <function-ref name="toIdle" scoped="" ref="0x7f85d7613a90"/>
        <function-ref name="isState" scoped="" ref="0x7f85d7613c20"/>
        <function-ref name="isIdle" scoped="" ref="0x7f85d7613db0"/>
        <function-ref name="requestState" scoped="" ref="0x7f85d7612020"/>
        <function-ref name="forceState" scoped="" ref="0x7f85d76121b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f85d7604d70" loc="45:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f85d7604d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7603180"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d7603310"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d76034a0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d7603630"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d76037c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f85d7607350" loc="40:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f85d7607350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d76076d0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d7607860"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d76079f0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d7607b80"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d7607d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f85d7604020" loc="41:../../../tos/chips/cc2420/link/PacketLinkDummyC.nc">
      <component-ref qname="PacketLinkDummyC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f85d7604020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f85d76043a0"/>
        <function-ref name="setRetries" scoped="" ref="0x7f85d7604530"/>
        <function-ref name="getRetries" scoped="" ref="0x7f85d76046c0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f85d7604850"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f85d76049e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x7f85d75ff1c0" loc="44:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d75ff1c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f85d75ff540"/>
        <function-ref name="noAck" scoped="" ref="0x7f85d75ff6d0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f85d75ff860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketLink" ref="0x7f85d7602410" loc="40:../../../tos/chips/cc2420/link/PacketLinkDummyP.nc">
      <component-ref qname="PacketLinkDummyP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketLink" scoped="" ref="0x7f85d7602410"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketLink"/>
      </instance>
      <interface-functions>
        <function-ref name="getRetryDelay" scoped="" ref="0x7f85d7602790"/>
        <function-ref name="setRetries" scoped="" ref="0x7f85d7602920"/>
        <function-ref name="getRetries" scoped="" ref="0x7f85d7602ab0"/>
        <function-ref name="setRetryDelay" scoped="" ref="0x7f85d7602c40"/>
        <function-ref name="wasDelivered" scoped="" ref="0x7f85d7602dd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f85d75df690" loc="59:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f85d75df690"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d75dfa10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f85d75e0860" loc="58:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f85d75e0860"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d75e0be0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d75e0d70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d75df020"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d75df1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d75df340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Config" ref="0x7f85d75dd610" loc="62:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Config" scoped="" ref="0x7f85d75dd610"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Config"/>
      </instance>
      <interface-functions>
        <function-ref name="setAutoAck" scoped="" ref="0x7f85d75dd990"/>
        <function-ref name="isAddressRecognitionEnabled" scoped="" ref="0x7f85d75ddb20"/>
        <function-ref name="setAddressRecognition" scoped="" ref="0x7f85d75ddcb0"/>
        <function-ref name="syncDone" scoped="" ref="0x7f85d75dde40"/>
        <function-ref name="isHwAddressRecognitionDefault" scoped="" ref="0x7f85d75dc020"/>
        <function-ref name="setShortAddr" scoped="" ref="0x7f85d75dc1b0"/>
        <function-ref name="setChannel" scoped="" ref="0x7f85d75dc340"/>
        <function-ref name="isAutoAckEnabled" scoped="" ref="0x7f85d75dc4d0"/>
        <function-ref name="setPanAddr" scoped="" ref="0x7f85d75dc660"/>
        <function-ref name="isHwAutoAckDefault" scoped="" ref="0x7f85d75dc7f0"/>
        <function-ref name="getExtAddr" scoped="" ref="0x7f85d75dc980"/>
        <function-ref name="getShortAddr" scoped="" ref="0x7f85d75dcb10"/>
        <function-ref name="sync" scoped="" ref="0x7f85d75dcca0"/>
        <function-ref name="getChannel" scoped="" ref="0x7f85d75db020"/>
        <function-ref name="getPanAddr" scoped="" ref="0x7f85d75db1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioBackoff" ref="0x7f85d75e18b0" loc="54:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioBackoff" scoped="" ref="0x7f85d75e18b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f85d75e1c30"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f85d75e1dc0"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f85d75e0020"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f85d75e01b0"/>
        <function-ref name="setCca" scoped="" ref="0x7f85d75e0340"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f85d75e04d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendNotifier" ref="0x7f85d75e3ce0" loc="53:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendNotifier" scoped="" ref="0x7f85d75e3ce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendNotifier"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="aboutToSend" scoped="" ref="0x7f85d75e10a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubBackoff" ref="0x7f85d75da1f0" loc="64:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubBackoff" scoped="" ref="0x7f85d75da1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="requestCca" scoped="" ref="0x7f85d75da570"/>
        <function-ref name="requestInitialBackoff" scoped="" ref="0x7f85d75da700"/>
        <function-ref name="setCongestionBackoff" scoped="" ref="0x7f85d75da890"/>
        <function-ref name="setInitialBackoff" scoped="" ref="0x7f85d75daa20"/>
        <function-ref name="setCca" scoped="" ref="0x7f85d75dabb0"/>
        <function-ref name="requestCongestionBackoff" scoped="" ref="0x7f85d75dad40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f85d75e4a80" loc="52:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f85d75e4a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d75e4e00"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d75e3020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d75e31b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d75e3340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d75e34d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f85d75e7020" loc="48:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f85d75e7020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d75e73a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d75e7530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d75e76c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d75e7850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d75e79e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x7f85d75e6df0" loc="50:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Snoop" scoped="" ref="0x7f85d75e6df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d75e51c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420Packet" ref="0x7f85d75dfce0" loc="60:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420Packet" scoped="" ref="0x7f85d75dfce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="setPower" scoped="" ref="0x7f85d75de0a0"/>
        <function-ref name="setNetwork" scoped="" ref="0x7f85d75de230"/>
        <function-ref name="getRssi" scoped="" ref="0x7f85d75de3c0"/>
        <function-ref name="getNetwork" scoped="" ref="0x7f85d75de550"/>
        <function-ref name="getPower" scoped="" ref="0x7f85d75de6e0"/>
        <function-ref name="getLqi" scoped="" ref="0x7f85d75de870"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x7f85d75db4d0" loc="63:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x7f85d75db4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x7f85d75db950"/>
        <function-ref name="changed" scoped="" ref="0x7f85d75dbae0"/>
        <function-ref name="amGroup" scoped="" ref="0x7f85d75dbc70"/>
        <function-ref name="setAddress" scoped="" ref="0x7f85d75dbe00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC2420PacketBody" ref="0x7f85d75deb70" loc="61:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CC2420PacketBody" scoped="" ref="0x7f85d75deb70"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC2420PacketBody"/>
      </instance>
      <interface-functions>
        <function-ref name="getPayload" scoped="" ref="0x7f85d75dd020"/>
        <function-ref name="getHeader" scoped="" ref="0x7f85d75dd1b0"/>
        <function-ref name="getMetadata" scoped="" ref="0x7f85d75dd340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d75e6210" loc="49:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d75e6210"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d75e6590"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d75d9d30" loc="67:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d75d9d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d75d80e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d75d8270"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d75d8400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d75d8590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d75d8720"/>
        <function-ref name="get" scoped="" ref="0x7f85d75d88b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d75d8a40"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d75d71b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d75d8bd0"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d75d8d60"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d75d7020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f85d75e5470" loc="51:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f85d75e5470"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f85d75e57f0"/>
        <function-ref name="source" scoped="" ref="0x7f85d75e5980"/>
        <function-ref name="address" scoped="" ref="0x7f85d75e5b10"/>
        <function-ref name="destination" scoped="" ref="0x7f85d75e5ca0"/>
        <function-ref name="setSource" scoped="" ref="0x7f85d75e5e30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f85d75e4020"/>
        <function-ref name="type" scoped="" ref="0x7f85d75e41b0"/>
        <function-ref name="setType" scoped="" ref="0x7f85d75e4340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f85d75e44d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f85d75e4660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f85d75e47f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioResource" ref="0x7f85d75d90f0" loc="66:../../../tos/chips/cc2420/CC2420ActiveMessageP.nc">
      <component-ref qname="CC2420ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RadioResource" scoped="" ref="0x7f85d75d90f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d75d9470"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d75d9600"/>
        <function-ref name="request" scoped="" ref="0x7f85d75d9790"/>
        <function-ref name="granted" scoped="" ref="0x7f85d75d9920"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d75d9ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f85d754f5c0" loc="46:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f85d754f5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f85d754f940"/>
        <function-ref name="stopDone" scoped="" ref="0x7f85d754fad0"/>
        <function-ref name="start" scoped="" ref="0x7f85d754fc60"/>
        <function-ref name="stop" scoped="" ref="0x7f85d754fdf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f85d754c600" loc="47:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f85d754c600"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d754c980"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d754cb10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d754cca0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d754ce30"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d754b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f85d754be10" loc="49:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f85d754be10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d75491c0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d7549350"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d75494e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d7549670"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d7549800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d754b800" loc="48:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d754b800"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d754bb80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d7547b20" loc="53:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d7547b20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d7546020"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d75461b0"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d7546340"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d75464d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d7546660"/>
        <function-ref name="get" scoped="" ref="0x7f85d75467f0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d7546980"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d7545020"/>
        <function-ref name="set" scoped="" ref="0x7f85d7546b10"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d7546ca0"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d7546e30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f85d75471a0" loc="51:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d75471a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f85d7547520"/>
        <function-ref name="noAck" scoped="" ref="0x7f85d75476b0"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f85d7547840"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f85d7549ab0" loc="50:../../../tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f85d7549ab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f85d7549e30"/>
        <function-ref name="source" scoped="" ref="0x7f85d7548020"/>
        <function-ref name="address" scoped="" ref="0x7f85d75481b0"/>
        <function-ref name="destination" scoped="" ref="0x7f85d7548340"/>
        <function-ref name="setSource" scoped="" ref="0x7f85d75484d0"/>
        <function-ref name="setDestination" scoped="" ref="0x7f85d7548660"/>
        <function-ref name="type" scoped="" ref="0x7f85d75487f0"/>
        <function-ref name="setType" scoped="" ref="0x7f85d7548980"/>
        <function-ref name="isForMe" scoped="" ref="0x7f85d7548b10"/>
        <function-ref name="setGroup" scoped="" ref="0x7f85d7548ca0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f85d7548e30"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x7f85d74e8120" loc="54:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubSend" scoped="" ref="0x7f85d74e8120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d74e84a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d74e8630"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d74e87c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d74e8950"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d74e8ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x7f85d74e8d70" loc="55:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SubReceive" scoped="" ref="0x7f85d74e8d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d74e7180"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f85d74ec110" loc="47:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f85d74ec110"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d74ec4b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d74ec640"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d74ec7d0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d74ec960"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d74ecaf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f85d74eaa40" loc="50:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f85d74eaa40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d74eadc0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d74e9020"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d74e91b0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d74e9340"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d74e94d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d74ece70" loc="48:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d74ece70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d74eb240"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x7f85d74e9720" loc="51:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x7f85d74e9720"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f85d74e9aa0"/>
        <function-ref name="noAck" scoped="" ref="0x7f85d74e9c30"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f85d74e9dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f85d74eb490" loc="49:../../../tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f85d74eb490"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f85d74eb810"/>
        <function-ref name="source" scoped="" ref="0x7f85d74eb9a0"/>
        <function-ref name="address" scoped="" ref="0x7f85d74ebb30"/>
        <function-ref name="destination" scoped="" ref="0x7f85d74ebcc0"/>
        <function-ref name="setSource" scoped="" ref="0x7f85d74ebe50"/>
        <function-ref name="setDestination" scoped="" ref="0x7f85d74ea020"/>
        <function-ref name="type" scoped="" ref="0x7f85d74ea1b0"/>
        <function-ref name="setType" scoped="" ref="0x7f85d74ea340"/>
        <function-ref name="isForMe" scoped="" ref="0x7f85d74ea4d0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f85d74ea660"/>
        <function-ref name="localGroup" scoped="" ref="0x7f85d74ea7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f85d74e38d0" loc="50:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f85d74e38d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f85d74e3c50"/>
        <function-ref name="stopDone" scoped="" ref="0x7f85d74e3de0"/>
        <function-ref name="start" scoped="" ref="0x7f85d74e1020"/>
        <function-ref name="stop" scoped="" ref="0x7f85d74e11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f85d74e0480" loc="52:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f85d74e0480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f85d899c4b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d74e0800"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d74e0990"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d74e0b20"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d74e0cb0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d74e0e40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d74e3280" loc="49:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d74e3280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d74e3600"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d74e1940" loc="51:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d74e1940"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f85d899c4b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d74e1cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d74dedc0" loc="56:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d74dedc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d74dd180"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d74dd310"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d74dd4a0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d74dd630"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d74dd7c0"/>
        <function-ref name="get" scoped="" ref="0x7f85d74dd950"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d74ddae0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d74d91b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d74ddc70"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d74dde00"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d74d9020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x7f85d74de4a0" loc="55:../../../tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialPacketInfo" scoped="" ref="0x7f85d74de4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f85d899c4b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f85d74de820"/>
        <function-ref name="offset" scoped="" ref="0x7f85d74de9b0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f85d74deb40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x7f85d74d62f0" loc="66:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SplitControl" scoped="" ref="0x7f85d74d62f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x7f85d74d6670"/>
        <function-ref name="stopDone" scoped="" ref="0x7f85d74d6800"/>
        <function-ref name="start" scoped="" ref="0x7f85d74d6990"/>
        <function-ref name="stop" scoped="" ref="0x7f85d74d6b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x7f85d746fe40" loc="332:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="stopDoneTask" scoped="" ref="0x7f85d746fe40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d746e1e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d746e370"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x7f85d74c5060" loc="74:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialControl" scoped="" ref="0x7f85d74c5060"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d74c53e0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d74c5570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x7f85d74a6d10" loc="191:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RunTx" scoped="" ref="0x7f85d74a6d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d74a50e0"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d74a5270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d74d9c70" loc="65:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d74d9c70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d74d6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x7f85d74c2c50" loc="75:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFlush" scoped="" ref="0x7f85d74c2c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x7f85d74c4020"/>
        <function-ref name="flush" scoped="" ref="0x7f85d74c41b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x7f85d7471400" loc="322:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="startDoneTask" scoped="" ref="0x7f85d7471400"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d7471780"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d7471910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x7f85d74c68e0" loc="72:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f85d74c68e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f85d74c6c60"/>
        <function-ref name="resetSend" scoped="" ref="0x7f85d74c6df0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f85d74d3020"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f85d74d31b0"/>
        <function-ref name="putData" scoped="" ref="0x7f85d74d3340"/>
        <function-ref name="putDone" scoped="" ref="0x7f85d74d34d0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f85d74d3660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d74d38e0" loc="73:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d74d38e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d74d3c60"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d74d3df0"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d74cb020"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d74cb1b0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d74cb340"/>
        <function-ref name="get" scoped="" ref="0x7f85d74cb4d0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d74cb660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d74cbca0"/>
        <function-ref name="set" scoped="" ref="0x7f85d74cb7f0"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d74cb980"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d74cbb10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x7f85d746a0c0" loc="341:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x7f85d746a0c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d746a440"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d746a5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x7f85d74cf130" loc="67:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f85d74cf130"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f85d74cf4b0"/>
        <function-ref name="nextByte" scoped="" ref="0x7f85d74cf640"/>
        <function-ref name="startSend" scoped="" ref="0x7f85d74cf7d0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f85d74cf960"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x7f85d74cc5c0" loc="68:../../../tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f85d74cc5c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f85d74cc940"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f85d74ccad0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f85d74ccc60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x7f85d73a0c50" loc="275:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="receiveTask" scoped="" ref="0x7f85d73a0c50"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d739f020"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d739f1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f85d73a5830" loc="51:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f85d73a5830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f85d899c4b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d73a5bd0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d73a5d60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d73a4020"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d73a41b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d73a4340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x7f85d739f480" loc="158:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="signalSendDone" scoped="" ref="0x7f85d739f480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d739f800"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d739f990"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d73a5110" loc="50:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d73a5110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f85d899c4b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d73a54b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x7f85d73a4760" loc="54:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PacketInfo" scoped="" ref="0x7f85d73a4760"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x7f85d899c4b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f85d73a4b00"/>
        <function-ref name="offset" scoped="" ref="0x7f85d73a4c90"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f85d73a4e20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d73a1590" loc="57:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d73a1590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d73a1910"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d73a1aa0"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d73a1c30"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d73a1dc0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d73a0020"/>
        <function-ref name="get" scoped="" ref="0x7f85d73a01b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d73a0340"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d73a0980"/>
        <function-ref name="set" scoped="" ref="0x7f85d73a0660"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d73a04d0"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d73a07f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x7f85d73a39d0" loc="56:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBytePacket" scoped="" ref="0x7f85d73a39d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x7f85d73a3d50"/>
        <function-ref name="nextByte" scoped="" ref="0x7f85d73a1020"/>
        <function-ref name="startSend" scoped="" ref="0x7f85d73a11b0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x7f85d73a1340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x7f85d73a30e0" loc="55:../../../tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x7f85d73a30e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x7f85d73a3460"/>
        <function-ref name="byteReceived" scoped="" ref="0x7f85d73a35f0"/>
        <function-ref name="endPacket" scoped="" ref="0x7f85d73a3780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x7f85d7390d20" loc="50:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f85d7390d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d73990e0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f85d7399270"/>
        <function-ref name="receive" scoped="" ref="0x7f85d7399400"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f85d7399590"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f85d7399720"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f85d73998b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d7399a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x7f85d739db60" loc="48:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SerialFrameComm" scoped="" ref="0x7f85d739db60"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x7f85d739a020"/>
        <function-ref name="resetSend" scoped="" ref="0x7f85d739a1b0"/>
        <function-ref name="dataReceived" scoped="" ref="0x7f85d739a340"/>
        <function-ref name="resetReceive" scoped="" ref="0x7f85d739a4d0"/>
        <function-ref name="putData" scoped="" ref="0x7f85d739a660"/>
        <function-ref name="putDone" scoped="" ref="0x7f85d739a7f0"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x7f85d739a980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d7399cc0" loc="51:../../../tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d7399cc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d73980a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d7398230"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d73983c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d7398550"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d73986e0"/>
        <function-ref name="get" scoped="" ref="0x7f85d7398870"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d7398a00"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d738d1b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d7398b90"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d7398d20"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d738d020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f85d7371020" loc="6:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f85d7371020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d73713a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f85d7371530"/>
        <function-ref name="receive" scoped="" ref="0x7f85d73716c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f85d7371850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f85d7373890" loc="5:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f85d7373890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7373c10"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f85d7373da0"/>
        <function-ref name="receive" scoped="" ref="0x7f85d7372020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f85d73721b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f85d7372340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f85d73724d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d7372660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f85d7373080" loc="4:../../../tos/platforms/telosa/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f85d7373080"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d7373400"/>
        <function-ref name="stop" scoped="" ref="0x7f85d7373590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f85d71dec70" loc="45:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d71dec70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f85d71dd020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d71dd1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f85d71dc440" loc="47:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f85d71dc440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d71dc7c0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f85d71dc950"/>
        <function-ref name="receive" scoped="" ref="0x7f85d71dcae0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f85d71dcc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f85d71db020" loc="49:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f85d71db020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f85d71db3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f85d71dd440" loc="46:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f85d71dd440"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d71dd7c0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f85d71dd950"/>
        <function-ref name="receive" scoped="" ref="0x7f85d71ddae0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f85d71ddc70"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f85d71dde00"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f85d71dc020"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d71dc1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d71de020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart1C.nc">
      <component-ref qname="PlatformSerialC.UartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d71de020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d71de3a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d71de530"/>
        <function-ref name="request" scoped="" ref="0x7f85d71de6c0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d71de850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d71de9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f85d7360a30" loc="42:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7360a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f85d7360db0"/>
        <function-ref name="configure" scoped="" ref="0x7f85d735f020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f85d735c020" loc="44:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f85d735c020"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d735c3a0"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f85d735c530"/>
        <function-ref name="receive" scoped="" ref="0x7f85d735c6c0"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f85d735c850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f85d735a450" loc="47:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f85d735a450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f85d735a7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f85d735f860" loc="43:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f85d735f860"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d735fbe0"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f85d735fd70"/>
        <function-ref name="receive" scoped="" ref="0x7f85d735e020"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f85d735e1b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f85d735e340"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f85d735e4d0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d735e660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f85d735b1d0" loc="46:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f85d735b1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d735b550"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d735b6e0"/>
        <function-ref name="request" scoped="" ref="0x7f85d735b870"/>
        <function-ref name="granted" scoped="" ref="0x7f85d735ba00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d735bb90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d73617a0" loc="41:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d73617a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7361b20"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7361cb0"/>
        <function-ref name="request" scoped="" ref="0x7f85d7361e40"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7360020"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d73601b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f85d73591d0" loc="48:../../../tos/chips/msp430/usart/Msp430Uart1P.nc">
      <component-ref qname="Msp430Uart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f85d73591d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d7359550"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d73596e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceConfigure" ref="0x7f85d72eedc0" loc="47:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d72eedc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f85d72ec180"/>
        <function-ref name="configure" scoped="" ref="0x7f85d72ec310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x7f85d72eb890" loc="49:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartByte" scoped="" ref="0x7f85d72eb890"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d72ebc30"/>
        <function-ref name="sendAvail" scoped="" ref="0x7f85d72ebdc0"/>
        <function-ref name="receive" scoped="" ref="0x7f85d72ea020"/>
        <function-ref name="receiveAvail" scoped="" ref="0x7f85d72ea1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Msp430UartConfigure" ref="0x7f85d72e93e0" loc="52:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f85d72e93e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f85d72e9780"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Usart" ref="0x7f85d72e9a50" loc="53:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f85d72e9a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f85d72e9dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f85d72e8020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f85d72e81b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f85d72e8340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f85d72e84d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f85d72e8660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f85d72e87f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f85d72e8980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f85d72e8b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f85d72e8ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f85d72e8e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f85d72e7020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f85d72e71b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f85d72e7440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f85d72e75d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f85d72e7760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f85d72e78f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f85d72e7a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f85d72e7c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f85d72e7da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f85d72e6020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f85d72e61b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f85d72e6340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f85d72e64d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d72e6660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f85d72e69f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f85d72e6b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f85d72e6d10"/>
        <function-ref name="tx" scoped="" ref="0x7f85d72e5020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f85d72e51b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f85d72e5340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f85d72e54d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f85d72e5660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f85d72e57f0"/>
        <function-ref name="rx" scoped="" ref="0x7f85d72e5980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f85d72e5b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f85d72e5ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f85d72e5e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f85d72e4020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f85d72e41b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x7f85d72ec6d0" loc="48:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UartStream" scoped="" ref="0x7f85d72ec6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d72eca70"/>
        <function-ref name="receivedByte" scoped="" ref="0x7f85d72ecc00"/>
        <function-ref name="receive" scoped="" ref="0x7f85d72ecd90"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x7f85d72eb020"/>
        <function-ref name="receiveDone" scoped="" ref="0x7f85d72eb1b0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x7f85d72eb340"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d72eb4d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x7f85d72e3020" loc="55:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f85d72e3020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d72e3e30"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d72e2800"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d72e2340"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d72e2cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartResource" ref="0x7f85d72ea5b0" loc="51:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartResource" scoped="" ref="0x7f85d72ea5b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d72ea950"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d72eaae0"/>
        <function-ref name="request" scoped="" ref="0x7f85d72eac70"/>
        <function-ref name="granted" scoped="" ref="0x7f85d72eae00"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d72e9020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d72ee020" loc="46:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d72ee020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d72ee3c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d72ee550"/>
        <function-ref name="request" scoped="" ref="0x7f85d72ee6e0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d72ee870"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d72eea00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UsartInterrupts" ref="0x7f85d72e45b0" loc="54:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UsartInterrupts" scoped="" ref="0x7f85d72e45b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d72e4950"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d72e4ae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d72e0120" loc="56:../../../tos/chips/msp430/usart/Msp430UartP.nc">
      <component-ref qname="Msp430Uart1P.UartP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d72e0120"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d72e04a0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d72e0630"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d72e07c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d72e0950"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d72e0ae0"/>
        <function-ref name="get" scoped="" ref="0x7f85d72e0c70"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d72e0e00"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d72df4d0"/>
        <function-ref name="set" scoped="" ref="0x7f85d72df1b0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d72df020"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d72df340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f85d72d1860" loc="78:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f85d72d1860"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d72d1be0"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d72d1d70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f85d72d4500" loc="76:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f85d72d4500"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d72d4880"/>
        <function-ref name="stop" scoped="" ref="0x7f85d72d4a10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f85d72d4d30" loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart1C.nc">
      <component-ref qname="HplMsp430Usart1C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f85d72d4d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f85d72d70e0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f85d72d7270"/>
        <function-ref name="setUctl" scoped="" ref="0x7f85d72d7400"/>
        <function-ref name="enableUart" scoped="" ref="0x7f85d72d7590"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f85d72d7720"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f85d72d78b0"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f85d72d7a40"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f85d72d7bd0"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f85d72d7d60"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f85d72d6020"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f85d72d61b0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f85d72d6340"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f85d72d64d0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f85d72d6760"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f85d72d68f0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f85d72d6a80"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f85d72d6c10"/>
        <function-ref name="isUart" scoped="" ref="0x7f85d72d6da0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f85d72d3020"/>
        <function-ref name="isSpi" scoped="" ref="0x7f85d72d31b0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f85d72d3340"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f85d72d34d0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f85d72d3660"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f85d72d37f0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d72d3980"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f85d72d3d10"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f85d72d2020"/>
        <function-ref name="setUbr" scoped="" ref="0x7f85d72d21b0"/>
        <function-ref name="tx" scoped="" ref="0x7f85d72d2340"/>
        <function-ref name="getUctl" scoped="" ref="0x7f85d72d24d0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f85d72d2660"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f85d72d27f0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f85d72d2980"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f85d72d2b10"/>
        <function-ref name="rx" scoped="" ref="0x7f85d72d2ca0"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f85d72d2e30"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f85d72d1020"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f85d72d11b0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f85d72d1340"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f85d72d14d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UCLK" ref="0x7f85d72c3890" loc="66:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UCLK" scoped="" ref="0x7f85d72c3890"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d72c3c10"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d72c3da0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d72c2020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d72c1c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d72c2340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d72c24d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d72c2660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d72c27f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d72c2980"/>
        <function-ref name="get" scoped="" ref="0x7f85d72c2b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d72c2ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d72c2e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d72c1020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d72c12b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d72c1440"/>
        <function-ref name="set" scoped="" ref="0x7f85d72c15d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d72c1760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d72c21b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d72c18f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d72c1a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f85d72c8020" loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f85d72c8020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d72c83a0"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d72c8530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="URXD" ref="0x7f85d72c0020" loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="URXD" scoped="" ref="0x7f85d72c0020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d72c03a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d72c0530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d72c06c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d72be4d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d72c09e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d72c0b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d72c0d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d72bf020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d72bf1b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d72bf340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d72bf4d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d72bf660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d72bf7f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d72bfa80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d72bfc10"/>
        <function-ref name="set" scoped="" ref="0x7f85d72bfda0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d72be020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d72c0850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d72be1b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d72be340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UTXD" ref="0x7f85d72be890" loc="68:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="UTXD" scoped="" ref="0x7f85d72be890"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d72bec10"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d72beda0"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d72bd020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d72bcc10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d72bd340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d72bd4d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d72bd660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d72bd7f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d72bd980"/>
        <function-ref name="get" scoped="" ref="0x7f85d72bdb10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d72bdca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d72bde30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d72bc020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d72bc2b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d72bc440"/>
        <function-ref name="set" scoped="" ref="0x7f85d72bc5d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d72bc760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d72bd1b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d72bc8f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d72bca80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Usart" ref="0x7f85d72cd3c0" loc="61:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Usart" scoped="" ref="0x7f85d72cd3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f85d72cd740"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f85d72cd8d0"/>
        <function-ref name="setUctl" scoped="" ref="0x7f85d72cda60"/>
        <function-ref name="enableUart" scoped="" ref="0x7f85d72cdbf0"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f85d72cdd80"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f85d72cc020"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f85d72cc1b0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f85d72cc340"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f85d72cc4d0"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f85d72cc660"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f85d72cc7f0"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f85d72cc980"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f85d72ccb10"/>
        <function-ref name="getUbr" scoped="" ref="0x7f85d72ccda0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f85d72cb020"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f85d72cb1b0"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f85d72cb340"/>
        <function-ref name="isUart" scoped="" ref="0x7f85d72cb4d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f85d72cb660"/>
        <function-ref name="isSpi" scoped="" ref="0x7f85d72cb7f0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f85d72cb980"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f85d72cbb10"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f85d72cbca0"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f85d72cbe30"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d72ca020"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f85d72ca3b0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f85d72ca540"/>
        <function-ref name="setUbr" scoped="" ref="0x7f85d72ca6d0"/>
        <function-ref name="tx" scoped="" ref="0x7f85d72ca860"/>
        <function-ref name="getUctl" scoped="" ref="0x7f85d72ca9f0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f85d72cab80"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f85d72cad10"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f85d72c9020"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f85d72c91b0"/>
        <function-ref name="rx" scoped="" ref="0x7f85d72c9340"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f85d72c94d0"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f85d72c9660"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f85d72c97f0"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f85d72c9980"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f85d72c9b10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x7f85d72d09c0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f85d72d09c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d72d0d40"/>
        <function-ref name="stop" scoped="" ref="0x7f85d72cd020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SOMI" ref="0x7f85d72c5020" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SOMI" scoped="" ref="0x7f85d72c5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d72c53a0"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d72c5530"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d72c56c0"/>
        <function-ref name="clr" scoped="" ref="0x7f85d72c34d0"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d72c59e0"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d72c5b70"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d72c5d00"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d72c4020"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d72c41b0"/>
        <function-ref name="get" scoped="" ref="0x7f85d72c4340"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d72c44d0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d72c4660"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d72c47f0"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d72c4a80"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d72c4c10"/>
        <function-ref name="set" scoped="" ref="0x7f85d72c4da0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d72c3020"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d72c5850"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d72c31b0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d72c3340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SIMO" ref="0x7f85d72c88f0" loc="64:../../../tos/chips/msp430/usart/HplMsp430Usart1P.nc">
      <component-ref qname="HplMsp430Usart1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SIMO" scoped="" ref="0x7f85d72c88f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x7f85d72c8c70"/>
        <function-ref name="isInput" scoped="" ref="0x7f85d72c8e00"/>
        <function-ref name="setResistor" scoped="" ref="0x7f85d72c7020"/>
        <function-ref name="clr" scoped="" ref="0x7f85d72c6c10"/>
        <function-ref name="toggle" scoped="" ref="0x7f85d72c7340"/>
        <function-ref name="isOutput" scoped="" ref="0x7f85d72c74d0"/>
        <function-ref name="getResistor" scoped="" ref="0x7f85d72c7660"/>
        <function-ref name="setDriveStrength" scoped="" ref="0x7f85d72c77f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x7f85d72c7980"/>
        <function-ref name="get" scoped="" ref="0x7f85d72c7b10"/>
        <function-ref name="getDriveStrength" scoped="" ref="0x7f85d72c7ca0"/>
        <function-ref name="selectIOFunc" scoped="" ref="0x7f85d72c7e30"/>
        <function-ref name="resistorPullDown" scoped="" ref="0x7f85d72c6020"/>
        <function-ref name="getRaw" scoped="" ref="0x7f85d72c62b0"/>
        <function-ref name="resistorOff" scoped="" ref="0x7f85d72c6440"/>
        <function-ref name="set" scoped="" ref="0x7f85d72c65d0"/>
        <function-ref name="selectModuleFunc" scoped="" ref="0x7f85d72c6760"/>
        <function-ref name="resistorPullUp" scoped="" ref="0x7f85d72c71b0"/>
        <function-ref name="isIOFunc" scoped="" ref="0x7f85d72c68f0"/>
        <function-ref name="isModuleFunc" scoped="" ref="0x7f85d72c6a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x7f85d723e7c0" loc="43:../../../tos/chips/msp430/timer/Counter32khz16C.nc">
      <component-ref qname="Counter32khz16C"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Counter" scoped="" ref="0x7f85d723e7c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d8919c80"/>
            <typename><typedef-ref name="T32khz" ref="0x7f85d8918020"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x7f85d723b620"/>
        <function-ref name="clearOverflow" scoped="" ref="0x7f85d723a020"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x7f85d723bae0"/>
        <function-ref name="overflow" scoped="" ref="0x7f85d723a4e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f85d675aa90" loc="43:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d675aa90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f85d675ae10"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d6759020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f85d6754be0" loc="48:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d6754be0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f85d6752020"/>
        <function-ref name="configure" scoped="" ref="0x7f85d67521b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430UsartInterrupts" ref="0x7f85d6754440" loc="46:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430UsartInterrupts" scoped="" ref="0x7f85d6754440"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d67547c0"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d6754950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d675be00" loc="42:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d675be00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d675a1c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d675a350"/>
        <function-ref name="request" scoped="" ref="0x7f85d675a4e0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d675a670"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d675a800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplMsp430Usart" ref="0x7f85d6759a50" loc="45:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="HplMsp430Usart" scoped="" ref="0x7f85d6759a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430Usart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x7f85d6759dd0"/>
        <function-ref name="enableUartRx" scoped="" ref="0x7f85d6758020"/>
        <function-ref name="setUctl" scoped="" ref="0x7f85d67581b0"/>
        <function-ref name="enableUart" scoped="" ref="0x7f85d6758340"/>
        <function-ref name="setUrctl" scoped="" ref="0x7f85d67584d0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x7f85d6758660"/>
        <function-ref name="clrRxIntr" scoped="" ref="0x7f85d67587f0"/>
        <function-ref name="getUtctl" scoped="" ref="0x7f85d6758980"/>
        <function-ref name="getUrctl" scoped="" ref="0x7f85d6758b10"/>
        <function-ref name="resetUsart" scoped="" ref="0x7f85d6758ca0"/>
        <function-ref name="getUmctl" scoped="" ref="0x7f85d6758e30"/>
        <function-ref name="disableIntr" scoped="" ref="0x7f85d6757020"/>
        <function-ref name="setUtctl" scoped="" ref="0x7f85d67571b0"/>
        <function-ref name="getUbr" scoped="" ref="0x7f85d6757440"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x7f85d67575d0"/>
        <function-ref name="setUmctl" scoped="" ref="0x7f85d6757760"/>
        <function-ref name="isUartRx" scoped="" ref="0x7f85d67578f0"/>
        <function-ref name="isUart" scoped="" ref="0x7f85d6757a80"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x7f85d6757c10"/>
        <function-ref name="isSpi" scoped="" ref="0x7f85d6757da0"/>
        <function-ref name="enableUartTx" scoped="" ref="0x7f85d6756020"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x7f85d67561b0"/>
        <function-ref name="disableUartRx" scoped="" ref="0x7f85d6756340"/>
        <function-ref name="enableIntr" scoped="" ref="0x7f85d67564d0"/>
        <function-ref name="getMode" scoped="" ref="0x7f85d6756660"/>
        <function-ref name="isTxIntrPending" scoped="" ref="0x7f85d67569f0"/>
        <function-ref name="clrIntr" scoped="" ref="0x7f85d6756b80"/>
        <function-ref name="setUbr" scoped="" ref="0x7f85d6756d10"/>
        <function-ref name="tx" scoped="" ref="0x7f85d6755020"/>
        <function-ref name="getUctl" scoped="" ref="0x7f85d67551b0"/>
        <function-ref name="disableUart" scoped="" ref="0x7f85d6755340"/>
        <function-ref name="enableSpi" scoped="" ref="0x7f85d67554d0"/>
        <function-ref name="setModeUart" scoped="" ref="0x7f85d6755660"/>
        <function-ref name="setModeSpi" scoped="" ref="0x7f85d67557f0"/>
        <function-ref name="rx" scoped="" ref="0x7f85d6755980"/>
        <function-ref name="isRxIntrPending" scoped="" ref="0x7f85d6755b10"/>
        <function-ref name="isUartTx" scoped="" ref="0x7f85d6755ca0"/>
        <function-ref name="clrTxIntr" scoped="" ref="0x7f85d6755e30"/>
        <function-ref name="disableSpi" scoped="" ref="0x7f85d6754020"/>
        <function-ref name="disableUartTx" scoped="" ref="0x7f85d67541b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f85d67592b0" loc="44:../../../tos/chips/msp430/usart/Msp430Usart1C.nc">
      <component-ref qname="PlatformSerialC.UartC.UsartC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d67592b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d6759630"/>
        <function-ref name="userId" scoped="" ref="0x7f85d67597c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f85d7221510" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d7221510"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f85d7221890"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d7221a20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f85d7220af0" loc="45:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7220af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f85d7220e70"/>
        <function-ref name="configure" scoped="" ref="0x7f85d721f030"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f85d7224510" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f85d7224510"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d7224890"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d7224a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7222280" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7222280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7222600"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d7222790"/>
        <function-ref name="request" scoped="" ref="0x7f85d7222920"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7222ab0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7222c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f85d7221d20" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShare1P.nc">
      <component-ref qname="Msp430UsartShare1P"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7221d20"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d72200e0"/>
        <function-ref name="userId" scoped="" ref="0x7f85d7220270"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f85d721b120" loc="43:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d721b120"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d721b4a0"/>
        <function-ref name="userId" scoped="" ref="0x7f85d721b630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Interrupts" ref="0x7f85d721e230" loc="39:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Interrupts" scoped="" ref="0x7f85d721e230"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d721e5d0"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d721e760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawI2CInterrupts" ref="0x7f85d721dad0" loc="42:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawI2CInterrupts" scoped="" ref="0x7f85d721dad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d721de50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="I2CInterrupts" ref="0x7f85d721eb60" loc="40:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="I2CInterrupts" scoped="" ref="0x7f85d721eb60"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fired" scoped="" ref="0x7f85d721d020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RawInterrupts" ref="0x7f85d721d2f0" loc="41:../../../tos/chips/msp430/usart/Msp430UsartShareP.nc">
      <component-ref qname="Msp430UsartShare1P.UsartShareP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="RawInterrupts" scoped="" ref="0x7f85d721d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
      </instance>
      <interface-functions>
        <function-ref name="rxDone" scoped="" ref="0x7f85d721d670"/>
        <function-ref name="txDone" scoped="" ref="0x7f85d721d800"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f85d7216bd0" loc="59:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d7216bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f85d7215020"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d72151b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f85d7214950" loc="64:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d7214950"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f85d7214cf0"/>
        <function-ref name="configure" scoped="" ref="0x7f85d7214e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f85d7215400" loc="60:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d7215400"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7215780"/>
        <function-ref name="requested" scoped="" ref="0x7f85d7215910"/>
        <function-ref name="granted" scoped="" ref="0x7f85d7215aa0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7215c30"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d7215dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d7217e30" loc="58:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d7217e30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d7216210"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d72163a0"/>
        <function-ref name="request" scoped="" ref="0x7f85d7216530"/>
        <function-ref name="granted" scoped="" ref="0x7f85d72166c0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d7216850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f85d72130f0" loc="65:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f85d72130f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d7213470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f85d7214060" loc="61:../../../tos/system/FcfsArbiterC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d7214060"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d72143e0"/>
        <function-ref name="userId" scoped="" ref="0x7f85d7214570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x7f85d66ee020" loc="44:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Init" scoped="" ref="0x7f85d66ee020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x7f85d66ee3a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="FcfsQueue" ref="0x7f85d66ee630" loc="45:../../../tos/system/FcfsResourceQueueC.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Queue"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="FcfsQueue" scoped="" ref="0x7f85d66ee630"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f85d66ee9b0"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f85d66eeb40"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f85d66eecd0"/>
        <function-ref name="dequeue" scoped="" ref="0x7f85d66eee60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x7f85d66ea6c0" loc="99:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceRequested" scoped="" ref="0x7f85d66ea6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x7f85d66eaa60"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d66eabf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x7f85d66e89d0" loc="105:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceConfigure" scoped="" ref="0x7f85d66e89d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x7f85d66e8d70"/>
        <function-ref name="configure" scoped="" ref="0x7f85d66e7020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x7f85d66e72b0" loc="106:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Queue" scoped="" ref="0x7f85d66e72b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x7f85d66e7630"/>
        <function-ref name="isEmpty" scoped="" ref="0x7f85d66e77c0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x7f85d66e7950"/>
        <function-ref name="dequeue" scoped="" ref="0x7f85d66e7ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x7f85d66eae40" loc="100:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d66eae40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d66e91e0"/>
        <function-ref name="requested" scoped="" ref="0x7f85d66e9370"/>
        <function-ref name="granted" scoped="" ref="0x7f85d66e9500"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d66e9690"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d66e9820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x7f85d66e7d30" loc="107:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Leds" scoped="" ref="0x7f85d66e7d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x7f85d66e60e0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x7f85d66e6270"/>
        <function-ref name="led1On" scoped="" ref="0x7f85d66e6400"/>
        <function-ref name="led1Toggle" scoped="" ref="0x7f85d66e6590"/>
        <function-ref name="led2Toggle" scoped="" ref="0x7f85d66e6720"/>
        <function-ref name="get" scoped="" ref="0x7f85d66e68b0"/>
        <function-ref name="led1Off" scoped="" ref="0x7f85d66e6a40"/>
        <function-ref name="led0On" scoped="" ref="0x7f85d66e51b0"/>
        <function-ref name="set" scoped="" ref="0x7f85d66e6d60"/>
        <function-ref name="led2On" scoped="" ref="0x7f85d66e6bd0"/>
        <function-ref name="led2Off" scoped="" ref="0x7f85d66e5020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x7f85d66eb850" loc="98:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d66eb850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d66ebbf0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d66ebd80"/>
        <function-ref name="request" scoped="" ref="0x7f85d66ea020"/>
        <function-ref name="granted" scoped="" ref="0x7f85d66ea1b0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d66ea340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwnerInfo" ref="0x7f85d66e82d0" loc="104:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwnerInfo" scoped="" ref="0x7f85d66e82d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d66e8650"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x7f85d66e9a70" loc="101:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d66e9a70"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d66e9df0"/>
        <function-ref name="userId" scoped="" ref="0x7f85d66e8020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x7f85d66e5480" loc="155:../../../tos/system/ArbiterP.nc">
      <component-ref qname="Msp430UsartShare1P.ArbiterC.Arbiter"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="grantedTask" scoped="" ref="0x7f85d66e5480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d66e5800"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d66e5990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f85d720e780" loc="72:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f85d720e780"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f85d720eb00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f85d720ed50" loc="73:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d720ed50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d71f7100"/>
        <function-ref name="requested" scoped="" ref="0x7f85d71f7290"/>
        <function-ref name="granted" scoped="" ref="0x7f85d71f7420"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d71f75b0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d71f7740"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f85d720e020" loc="70:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f85d720e020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d720e3a0"/>
        <function-ref name="stop" scoped="" ref="0x7f85d720e530"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f85d71f7990" loc="74:../../../tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d71f7990"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d71f7d10"/>
        <function-ref name="userId" scoped="" ref="0x7f85d71f6020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x7f85d66b0e00" loc="62:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="PowerDownCleanup" scoped="" ref="0x7f85d66b0e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x7f85d66af1c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x7f85d66af410" loc="63:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x7f85d66af410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d66af790"/>
        <function-ref name="requested" scoped="" ref="0x7f85d66af920"/>
        <function-ref name="granted" scoped="" ref="0x7f85d66afab0"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d66afc40"/>
        <function-ref name="immediateRequested" scoped="" ref="0x7f85d66afdd0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x7f85d66b06a0" loc="60:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AsyncStdControl" scoped="" ref="0x7f85d66b06a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d66b0a20"/>
        <function-ref name="stop" scoped="" ref="0x7f85d66b0bb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x7f85d66ae060" loc="64:../../../tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Msp430UsartShare1P.PowerManagerC.PowerManager"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="ArbiterInfo" scoped="" ref="0x7f85d66ae060"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x7f85d66ae3e0"/>
        <function-ref name="userId" scoped="" ref="0x7f85d66ae570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Msp430UartConfigure" ref="0x7f85d71d78e0" loc="3:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Msp430UartConfigure" scoped="" ref="0x7f85d71d78e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Msp430UartConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="getConfig" scoped="" ref="0x7f85d71d7c60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x7f85d71d5020" loc="4:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Resource" scoped="" ref="0x7f85d71d5020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x7f85d71d53a0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x7f85d71d5530"/>
        <function-ref name="request" scoped="" ref="0x7f85d71d56c0"/>
        <function-ref name="granted" scoped="" ref="0x7f85d71d5850"/>
        <function-ref name="isOwner" scoped="" ref="0x7f85d71d59e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x7f85d71d7080" loc="2:../../../tos/platforms/telosa/TelosSerialP.nc">
      <component-ref qname="TelosSerialP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="StdControl" scoped="" ref="0x7f85d71d7080"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x7f85d71d7400"/>
        <function-ref name="stop" scoped="" ref="0x7f85d71d7590"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x7f85d71c4a30" loc="47:../../../tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Info" scoped="" ref="0x7f85d71c4a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x7f85d71c4db0"/>
        <function-ref name="offset" scoped="" ref="0x7f85d71c1020"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x7f85d71c11b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f85d71b3060" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="MaestroApp.TimerTramaTDMA"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d71b3060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d71af630"/>
        <function-ref name="fired" scoped="" ref="0x7f85d71b2ac0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f85d71b0920"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f85d71b04a0"/>
        <function-ref name="getdt" scoped="" ref="0x7f85d71ae020"/>
        <function-ref name="gett0" scoped="" ref="0x7f85d71afab0"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d71b0020"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f85d71b3c50"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f85d71af020"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f85d71b2170"/>
        <function-ref name="stop" scoped="" ref="0x7f85d71b2640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x7f85d71adb00" loc="45:../../../tos/system/TimerMilliC.nc">
      <component-ref qname="MaestroApp.TimerLeds"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Timer" scoped="" ref="0x7f85d71adb00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:2"><struct-ref ref="0x7f85d89194d0"/>
            <typename><typedef-ref name="TMilli" ref="0x7f85d8919840"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x7f85d71a8110"/>
        <function-ref name="fired" scoped="" ref="0x7f85d71aa5b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x7f85d71a94a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x7f85d71a9020"/>
        <function-ref name="getdt" scoped="" ref="0x7f85d71a8a10"/>
        <function-ref name="gett0" scoped="" ref="0x7f85d71a8590"/>
        <function-ref name="isRunning" scoped="" ref="0x7f85d71aaa30"/>
        <function-ref name="startPeriodic" scoped="" ref="0x7f85d71ac750"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x7f85d71a9ab0"/>
        <function-ref name="startOneShot" scoped="" ref="0x7f85d71acc20"/>
        <function-ref name="stop" scoped="" ref="0x7f85d71aa130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f85d711a020" loc="49:../../../tos/system/AMSenderC.nc">
      <component-ref qname="MaestroApp.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f85d711a020"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d711a3a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d711a530"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d711a6c0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d711a850"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d711a9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f85d711ac30" loc="50:../../../tos/system/AMSenderC.nc">
      <component-ref qname="MaestroApp.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f85d711ac30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d7119020"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d71191b0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d7119340"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d71194d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d7119660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f85d71198b0" loc="51:../../../tos/system/AMSenderC.nc">
      <component-ref qname="MaestroApp.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f85d71198b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f85d7119c30"/>
        <function-ref name="source" scoped="" ref="0x7f85d7119dc0"/>
        <function-ref name="address" scoped="" ref="0x7f85d7118020"/>
        <function-ref name="destination" scoped="" ref="0x7f85d71181b0"/>
        <function-ref name="setSource" scoped="" ref="0x7f85d7118340"/>
        <function-ref name="setDestination" scoped="" ref="0x7f85d71184d0"/>
        <function-ref name="type" scoped="" ref="0x7f85d7118660"/>
        <function-ref name="setType" scoped="" ref="0x7f85d71187f0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f85d7118980"/>
        <function-ref name="setGroup" scoped="" ref="0x7f85d7118b10"/>
        <function-ref name="localGroup" scoped="" ref="0x7f85d7118ca0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f85d7117020" loc="52:../../../tos/system/AMSenderC.nc">
      <component-ref qname="MaestroApp.AMSenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f85d7117020"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f85d71173a0"/>
        <function-ref name="noAck" scoped="" ref="0x7f85d7117530"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f85d71176c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f85d669b920" loc="49:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="MaestroApp.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f85d669b920"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d669bca0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d669be30"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d669a020"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d669a1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d669a340"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f85d669a590" loc="50:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="MaestroApp.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f85d669a590"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d669a910"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d669aaa0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d669ac30"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d669adc0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d6699020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f85d6699270" loc="51:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="MaestroApp.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f85d6699270"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f85d66995f0"/>
        <function-ref name="source" scoped="" ref="0x7f85d6699780"/>
        <function-ref name="address" scoped="" ref="0x7f85d6699910"/>
        <function-ref name="destination" scoped="" ref="0x7f85d6699aa0"/>
        <function-ref name="setSource" scoped="" ref="0x7f85d6699c30"/>
        <function-ref name="setDestination" scoped="" ref="0x7f85d6699dc0"/>
        <function-ref name="type" scoped="" ref="0x7f85d6698020"/>
        <function-ref name="setType" scoped="" ref="0x7f85d66981b0"/>
        <function-ref name="isForMe" scoped="" ref="0x7f85d6698340"/>
        <function-ref name="setGroup" scoped="" ref="0x7f85d66984d0"/>
        <function-ref name="localGroup" scoped="" ref="0x7f85d6698660"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x7f85d66988f0" loc="52:../../../tos/system/DirectAMSenderC.nc">
      <component-ref qname="MaestroApp.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Acks" scoped="" ref="0x7f85d66988f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x7f85d6698c70"/>
        <function-ref name="noAck" scoped="" ref="0x7f85d6698e00"/>
        <function-ref name="wasAcked" scoped="" ref="0x7f85d6697020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x7f85d668e390" loc="44:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MaestroApp.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f85d668e390"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d668e710"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d668e8a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d668ea30"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d668ebc0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d668ed50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x7f85d668d060" loc="46:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MaestroApp.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f85d668d060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d668d3e0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d668d570"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d668d700"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d668d890"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d668da20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f85d668dc70" loc="47:../../../tos/system/AMQueueEntryP.nc">
      <component-ref qname="MaestroApp.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f85d668dc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f85d668c020"/>
        <function-ref name="source" scoped="" ref="0x7f85d668c1b0"/>
        <function-ref name="address" scoped="" ref="0x7f85d668c340"/>
        <function-ref name="destination" scoped="" ref="0x7f85d668c4d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f85d668c660"/>
        <function-ref name="setDestination" scoped="" ref="0x7f85d668c7f0"/>
        <function-ref name="type" scoped="" ref="0x7f85d668c980"/>
        <function-ref name="setType" scoped="" ref="0x7f85d668cb10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f85d668cca0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f85d668ce30"/>
        <function-ref name="localGroup" scoped="" ref="0x7f85d668b020"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f85d7181930" loc="43:../../../tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f85d7181930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d7181cb0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d7181e40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d717e020"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d717e1b0"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d717e340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x7f85d712f400" loc="51:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMSend" scoped="" ref="0x7f85d712f400"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d712f7a0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d712f930"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d712fac0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d712fc50"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d712fde0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x7f85d7131df0" loc="47:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Send" scoped="" ref="0x7f85d7131df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x7f85d71301c0"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d7130350"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d71304e0"/>
        <function-ref name="cancel" scoped="" ref="0x7f85d7130670"/>
        <function-ref name="sendDone" scoped="" ref="0x7f85d7130800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x7f85d712d720" loc="53:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f85d712d720"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d712daa0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d712dc30"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d712ddc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d712c020"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d712c1b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBusy" ref="0x7f85d7130b80" loc="48:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="SendBusy" scoped="" ref="0x7f85d7130b80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBusy"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="busy" scoped="" ref="0x7f85d712f020"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x7f85d712c480" loc="184:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="errorTask" scoped="" ref="0x7f85d712c480"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d712c800"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d712c990"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x7f85d712cc60" loc="140:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="CancelTask" scoped="" ref="0x7f85d712cc60"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x7f85d712a020"/>
        <function-ref name="runTask" scoped="" ref="0x7f85d712a1b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x7f85d712e060" loc="52:../../../tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f85d712e060"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f85d712e3e0"/>
        <function-ref name="source" scoped="" ref="0x7f85d712e570"/>
        <function-ref name="address" scoped="" ref="0x7f85d712e700"/>
        <function-ref name="destination" scoped="" ref="0x7f85d712e890"/>
        <function-ref name="setSource" scoped="" ref="0x7f85d712ea20"/>
        <function-ref name="setDestination" scoped="" ref="0x7f85d712ebb0"/>
        <function-ref name="type" scoped="" ref="0x7f85d712ed40"/>
        <function-ref name="setType" scoped="" ref="0x7f85d712d020"/>
        <function-ref name="isForMe" scoped="" ref="0x7f85d712d1b0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f85d712d340"/>
        <function-ref name="localGroup" scoped="" ref="0x7f85d712d4d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x7f85d710d020" loc="46:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="MaestroApp.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Packet" scoped="" ref="0x7f85d710d020"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x7f85d710d3a0"/>
        <function-ref name="payloadLength" scoped="" ref="0x7f85d710d530"/>
        <function-ref name="getPayload" scoped="" ref="0x7f85d710d6c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x7f85d710d850"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x7f85d710d9e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x7f85d710e910" loc="45:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="MaestroApp.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="Receive" scoped="" ref="0x7f85d710e910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x7f85d710ec90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x7f85d710dc30" loc="47:../../../tos/system/AMReceiverC.nc">
      <component-ref qname="MaestroApp.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:2"><interface-ref name="AMPacket" scoped="" ref="0x7f85d710dc30"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x7f85d710c020"/>
        <function-ref name="source" scoped="" ref="0x7f85d710c1b0"/>
        <function-ref name="address" scoped="" ref="0x7f85d710c340"/>
        <function-ref name="destination" scoped="" ref="0x7f85d710c4d0"/>
        <function-ref name="setSource" scoped="" ref="0x7f85d710c660"/>
        <function-ref name="setDestination" scoped="" ref="0x7f85d710c7f0"/>
        <function-ref name="type" scoped="" ref="0x7f85d710c980"/>
        <function-ref name="setType" scoped="" ref="0x7f85d710cb10"/>
        <function-ref name="isForMe" scoped="" ref="0x7f85d710cca0"/>
        <function-ref name="setGroup" scoped="" ref="0x7f85d710ce30"/>
        <function-ref name="localGroup" scoped="" ref="0x7f85d710b020"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Init" loc="51:../../../tos/interfaces/Init.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f85d8a46560" loc="62:../../../tos/interfaces/Init.nc">
        <documentation loc="53:../../../tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:../../../tos/interfaces/Boot.nc">
      <documentation loc="42:../../../tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f85d8a48190" loc="60:../../../tos/interfaces/Boot.nc">
        <documentation loc="51:../../../tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Platform" loc="51:../../../tos/interfaces/Platform.nc">
      <function command="" provided="0" name="jiffiesRawSize" ref="0x7f85d8a3e7c0" loc="109:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="node_id" ref="0x7f85d8a3a660" loc="182:../../../tos/interfaces/Platform.nc">
        <documentation loc="164:../../../tos/interfaces/Platform.nc">
          <short>&#10; Platform dependent node id.</short>
          <long>&#10; Platform dependent node id.&#10;&#10; Get a Platform defined node id.  This will typically be a serial number&#10; or mac address.&#10;&#10; Platform define PLATFORM_SERIAL_NUM_SIZE determines the&#10; size.  If not defined defaults to 4 bytes (uint32_t).  But platforms&#10; really should define it to be clear.  (see platform.h)&#10;&#10; input:  *lenp      pointer where to place the length of the number.&#10;&#10; output: *lenp      length filled in if non-null.&#10; return: *uint8_t   pointer to the serial_num or NULL.&#10;&#10; a Node Id is assumed to be a sequence of bytes starting with the&#10; msb first.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="lenp" ref="0x7f85d8a3a3a0" loc="182:../../../tos/interfaces/Platform.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2"></type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRawSize" ref="0x7f85d8a41920" loc="79:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsRaw" ref="0x7f85d8a41190" loc="78:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesExpired" ref="0x7f85d8a3d610" loc="126:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f85d8a3d020" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f85d8a3d380" loc="126:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getIntPriority" ref="0x7f85d8a3ca60" loc="162:../../../tos/interfaces/Platform.nc">
        <documentation loc="153:../../../tos/interfaces/Platform.nc">
          <short>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.</short>
          <long>**********************************************************************&#10;&#10; Platform configuration&#10;&#10; o Interrupt priority assignment.&#10;   modern computer hardware allows the assignment of different priorities&#10;   to interrupt sources.  This is inherently a platform thing.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="irq_number" ref="0x7f85d8a3c7e0" loc="162:../../../tos/interfaces/Platform.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set_unaligned_traps" ref="0x7f85d8a3c0b0" loc="150:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="on_off" ref="0x7f85d8a3ddc0" loc="150:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="jiffiesRaw" ref="0x7f85d8a3e020" loc="108:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="localTime" ref="0x7f85d8a449c0" loc="64:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="usecsExpired" ref="0x7f85d8a40700" loc="95:../../../tos/interfaces/Platform.nc">
        <interfacedef-ref qname="Platform"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t_base" ref="0x7f85d8a40110" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </variable>
          <variable name="limit" ref="0x7f85d8a40470" loc="95:../../../tos/interfaces/Platform.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430ClockInit" loc="38:../../../tos/chips/msp430/Msp430ClockInit.nc">
      <documentation loc="33:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="defaultInitTimerB" ref="0x7f85d89fd5b0" loc="48:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerB" ref="0x7f85d89ff870" loc="43:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitTimerA" ref="0x7f85d89fee60" loc="47:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initTimerA" ref="0x7f85d89ff190" loc="42:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultSetupDcoCalibrate" ref="0x7f85d89fe020" loc="45:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="setupDcoCalibrate" ref="0x7f85d8a01350" loc="40:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="initClocks" ref="0x7f85d8a01a30" loc="41:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="defaultInitClocks" ref="0x7f85d89fe740" loc="46:../../../tos/chips/msp430/Msp430ClockInit.nc">
        <interfacedef-ref qname="Msp430ClockInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:../../../tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x7f85d8b6d7e0" loc="62:../../../tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:../../../tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x7f85d8e35700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="77:../../../tos/interfaces/McuSleep.nc">
      <documentation loc="65:../../../tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10; @date   Oct 25, 2016&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="irq_preamble" ref="0x7f85d8a93a80" loc="85:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="irq_postamble" ref="0x7f85d8a911f0" loc="86:../../../tos/interfaces/McuSleep.nc">
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sleep" ref="0x7f85d8a932b0" loc="79:../../../tos/interfaces/McuSleep.nc">
        <documentation loc="78:../../../tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:../../../tos/interfaces/McuPowerState.nc">
      <documentation loc="35:../../../tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x7f85d8c0b020" loc="52:../../../tos/interfaces/McuPowerState.nc">
        <documentation loc="47:../../../tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:../../../tos/interfaces/Scheduler.nc">
      <documentation loc="42:../../../tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f85d95abe80" loc="57:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="54:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f85d8ef3e20" loc="72:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="67:../../../tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f85d8ef3610" loc="65:../../../tos/interfaces/Scheduler.nc">
        <documentation loc="59:../../../tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:../../../tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f85d8ee7770" loc="67:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="57:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event.&#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f85d8ee5020" loc="75:../../../tos/interfaces/TaskBasic.nc">
        <documentation loc="69:../../../tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:../../../tos/interfaces/SplitControl.nc">
      <documentation loc="72:../../../tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f85d898e110" loc="113:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="106:../../../tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f85d898fe40" loc="113:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f85d898c600" loc="138:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="132:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f85d898c380" loc="138:../../../tos/interfaces/SplitControl.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f85d898f460" loc="104:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="89:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f85d898e960" loc="130:../../../tos/interfaces/SplitControl.nc">
        <documentation loc="115:../../../tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:../../../tos/interfaces/Receive.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f85d893ccd0" loc="78:../../../tos/interfaces/Receive.nc">
        <documentation loc="58:../../../tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
              <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d893c370" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f85d893c6c0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d893c9f0" loc="78:../../../tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:../../../tos/interfaces/Packet.nc">
      <documentation loc="42:../../../tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f85d8937020" loc="65:../../../tos/interfaces/Packet.nc">
        <documentation loc="58:../../../tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d893fc60" loc="65:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f85d8936110" loc="78:../../../tos/interfaces/Packet.nc">
        <documentation loc="67:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8937e10" loc="78:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f85d8932490" loc="126:../../../tos/interfaces/Packet.nc">
        <documentation loc="109:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8933e50" loc="126:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d89321c0" loc="126:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f85d8933560" loc="106:../../../tos/interfaces/Packet.nc">
        <documentation loc="96:../../../tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f85d89355e0" loc="94:../../../tos/interfaces/Packet.nc">
        <documentation loc="80:../../../tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8935020" loc="94:../../../tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d8935350" loc="94:../../../tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:../../../tos/interfaces/AMSend.nc">
      <function command="" provided="0" name="send" ref="0x7f85d8947d90" loc="80:../../../tos/interfaces/AMSend.nc">
        <documentation loc="60:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f85d8947440" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f85d89477c0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d8947af0" loc="80:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f85d8942620" loc="135:../../../tos/interfaces/AMSend.nc">
        <documentation loc="126:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8942020" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d8942350" loc="135:../../../tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f85d89416d0" loc="123:../../../tos/interfaces/AMSend.nc">
        <documentation loc="113:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f85d89442a0" loc="96:../../../tos/interfaces/AMSend.nc">
        <documentation loc="82:../../../tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8944020" loc="96:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f85d89437f0" loc="110:../../../tos/interfaces/AMSend.nc">
        <documentation loc="98:../../../tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8943210" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f85d8943560" loc="110:../../../tos/interfaces/AMSend.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:../../../tos/lib/timer/Timer.nc">
      <documentation loc="36:../../../tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f85d8918dd0" loc="53:../../../tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f85d8918dd0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f85d8910c10" loc="136:../../../tos/lib/timer/Timer.nc">
        <documentation loc="132:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f85d8914420" loc="83:../../../tos/lib/timer/Timer.nc">
        <documentation loc="80:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x7f85d89112b0" loc="114:../../../tos/lib/timer/Timer.nc">
        <documentation loc="100:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f85d8913bd0" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f85d8911020" loc="114:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x7f85d8913420" loc="98:../../../tos/lib/timer/Timer.nc">
        <documentation loc="94:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x7f85d890fc60" loc="151:../../../tos/lib/timer/Timer.nc">
        <documentation loc="146:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x7f85d890f3e0" loc="144:../../../tos/lib/timer/Timer.nc">
        <documentation loc="138:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f85d8914c00" loc="92:../../../tos/lib/timer/Timer.nc">
        <documentation loc="86:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x7f85d8916970" loc="64:../../../tos/lib/timer/Timer.nc">
        <documentation loc="56:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f85d89166f0" loc="64:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x7f85d89102b0" loc="129:../../../tos/lib/timer/Timer.nc">
        <documentation loc="116:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f85d8911c50" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x7f85d8910020" loc="129:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x7f85d89154d0" loc="73:../../../tos/lib/timer/Timer.nc">
        <documentation loc="66:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f85d8915250" loc="73:../../../tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f85d8915cd0" loc="78:../../../tos/lib/timer/Timer.nc">
        <documentation loc="75:../../../tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:../../../tos/interfaces/Leds.nc">
      <documentation loc="33:../../../tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f85d88ff570" loc="61:../../../tos/interfaces/Leds.nc">
        <documentation loc="58:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f85d88ffd20" loc="67:../../../tos/interfaces/Leds.nc">
        <documentation loc="63:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f85d88fe540" loc="72:../../../tos/interfaces/Leds.nc">
        <documentation loc="69:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f85d88fd4d0" loc="83:../../../tos/interfaces/Leds.nc">
        <documentation loc="79:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f85d88fcc20" loc="100:../../../tos/interfaces/Leds.nc">
        <documentation loc="96:../../../tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f85d88fa480" loc="117:../../../tos/interfaces/Leds.nc">
        <documentation loc="103:../../../tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f85d88fecd0" loc="77:../../../tos/interfaces/Leds.nc">
        <documentation loc="74:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f85d88f9020" loc="134:../../../tos/interfaces/Leds.nc">
        <documentation loc="120:../../../tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f85d88fad70" loc="134:../../../tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f85d8900db0" loc="56:../../../tos/interfaces/Leds.nc">
        <documentation loc="53:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f85d88fdcb0" loc="89:../../../tos/interfaces/Leds.nc">
        <documentation loc="86:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f85d88fc470" loc="94:../../../tos/interfaces/Leds.nc">
        <documentation loc="91:../../../tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:../../../tos/interfaces/AMPacket.nc">
      <documentation loc="42:../../../tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f85d8922040" loc="177:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="164:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f85d899fc40"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f85d8923d90" loc="177:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f85d892cbc0" loc="88:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="80:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f85d892c940" loc="88:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f85d892e020" loc="68:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="63:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f85d892eae0" loc="78:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="70:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f85d892e860" loc="78:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f85d8929600" loc="121:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="105:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f85d8929020" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f85d8929370" loc="121:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f85d892b020" loc="103:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="90:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f85d892a9e0" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f85d892ad30" loc="103:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f85d8925ae0" loc="147:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="138:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f85d8925860" loc="147:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f85d8924e60" loc="162:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="149:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f85d89248b0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f85d8924bd0" loc="162:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f85d899f860"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f85d8927890" loc="136:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="123:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f85d8927610" loc="136:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f85d8921600" loc="187:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="179:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f85d899fc40"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f85d8921020" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f85d8921370" loc="187:../../../tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f85d899fc40"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f85d8920490" loc="195:../../../tos/interfaces/AMPacket.nc">
        <documentation loc="189:../../../tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f85d899fc40"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:../../../tos/interfaces/GeneralIO.nc">
      <documentation loc="34:../../../tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f85d8868e30" loc="44:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f85d88665c0" loc="45:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f85d8868020" loc="42:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f85d8865480" loc="47:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f85d8868720" loc="43:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f85d8866ce0" loc="46:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f85d8869120" loc="40:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f85d88697f0" loc="41:../../../tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430GeneralIO" loc="45:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f85d883b020" loc="79:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="76:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to input.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f85d883b770" loc="80:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setResistor" ref="0x7f85d88362e0" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="100:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin pullup / pull down resistor mode.</short>
          <long>&#10; Set pin pullup / pull down resistor mode.&#10; @param mode One of the MSP430_PORT_RESISTOR_* values&#10; @return EINVAL if invalid mode or pin does not support resistor configuration;&#10; FAIL if pin is not an input;&#10; SUCCESS if pin supports resistor configuration, is an input, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f85d8836060" loc="107:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullUp" ref="0x7f85d8835d30" loc="126:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f85d883e770" loc="59:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Toggle pin status.</short>
          <long>&#10; Toggle pin status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f85d883a780" loc="86:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getResistor" ref="0x7f85d8834520" loc="134:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="129:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the pin pullup / pulldown resistor mode.</short>
          <long>&#10; Get the pin pullup / pulldown resistor mode.&#10;&#10; @return one of the MSP430_PORT_RESISTOR_* values&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setDriveStrength" ref="0x7f85d8833020" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="136:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short> &#10; Set port drive strength.</short>
          <long> &#10; Set port drive strength.&#10; @param mode: MSP430_PORT_DRIVE_STRENGTH_*&#10; @return EINVAL if invalid mode or pin doesn't support drive&#10;     strength config.&#10; FAIL if pin is not an output&#10; SUCCESS if pin supports it, is an output, and mode is valid&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f85d8834d70" loc="144:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f85d883a020" loc="85:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin direction to output.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f85d883d820" loc="74:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Read pin value.</short>
          <long>&#10; Read pin value.&#10;&#10; @return TRUE if pin is high, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getDriveStrength" ref="0x7f85d8833910" loc="150:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="146:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get drive strength.</short>
          <long>&#10; Get drive strength.&#10; @return MSP430_PORT_DRIVE_STRENGTH_*&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectIOFunc" ref="0x7f85d8838020" loc="97:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="94:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for I/O functionality.</short>
          <long>&#10; Set pin for I/O functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorPullDown" ref="0x7f85d88355f0" loc="125:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRaw" ref="0x7f85d883d020" loc="67:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="61:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Get the port status that contains the pin.</short>
          <long>&#10; Get the port status that contains the pin.&#10;&#10; @return Status of the port that contains the given pin. The x'th&#10; pin on the port will be represented in the x'th bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resistorOff" ref="0x7f85d8836b80" loc="124:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="109:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; set resistor mode directly.</short>
          <long>&#10; set resistor mode directly.&#10;&#10; You have to know what you are doing when you use these.  These routines&#10; assume that the port is set for input (PxDIR).  The routines explicitly&#10; change the value of the bits setting in PxOUT.&#10;&#10; The advantage of using these routines is efficiency because there is no&#10; mode checking.  In addition, no error check is done to make sure that the&#10; port is in input mode.  The thing is, first, this is something that you&#10; get right once and then it doesn't change so why check and, second no&#10; one actually checks the error return because there really isn't any&#10; point to doing the check because this isn't something you actually need&#10; to check the return code for.  So why have one.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f85d8841850" loc="49:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to high.</short>
          <long>&#10; Set pin to high.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="selectModuleFunc" ref="0x7f85d8839020" loc="91:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="88:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin for module specific functionality.</short>
          <long>&#10; Set pin for module specific functionality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isIOFunc" ref="0x7f85d88387c0" loc="98:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isModuleFunc" ref="0x7f85d88397e0" loc="92:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f85d883e020" loc="54:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430GeneralIO.nc">
          <short>&#10; Set pin to low.</short>
          <long>&#10; Set pin to low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x7f85d858c020" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f85d858c020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f85d858c260" loc="35:../../../tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d858c260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x7f85d858a0b0" loc="63:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d858c260"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d858be00" loc="63:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x7f85d85892a0" loc="70:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8589020" loc="70:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x7f85d858ce20" loc="49:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d858cba0" loc="49:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f85d8587610" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:../../../tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d858c260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8587020" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x7f85d8587380" loc="78:../../../tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d858c260"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:../../../tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:../../../tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x7f85d857a680" loc="65:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d857a060" loc="65:../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x7f85d857a3f0" loc="65:../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x7f85d8579850" loc="71:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d85795d0" loc="71:../../../tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x7f85d857b810" loc="57:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x7f85d8580d60" loc="52:../../../tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:../../../tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x7f85d8580ae0" loc="52:../../../tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:../../../tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:../../../tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f85d85912e0" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8591060" loc="59:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f85d8590510" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8590290" loc="71:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f85d858f680" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:../../../tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d858f400" loc="85:../../../tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioBackoff" loc="54:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <short>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.</short>
        <long>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.  &#10; &#10; This is because of fan-out issues with multiple components wanting to&#10; affect backoffs for whatever they're interested in:&#10; If you signal out an *event* to request an initial backoff and&#10; several components happen to be listening, then those components&#10; would be required to return a backoff value.  We don't want that&#10; behavior.&#10; With this strategy, components can listen for the requests and then&#10; decide if they want to affect the behavior.  If the component wants to&#10; affect the behavior, it calls back using the setXYZBackoff(..) command.&#10; If several components call back, then the last component to get its &#10; word in has the final say. &#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="requestCca" ref="0x7f85d8551520" loc="95:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="90:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on whether or not to use CCA on the outbound packet.</short>
          <long>&#10; Request for input on whether or not to use CCA on the outbound packet.&#10; Replies should come in the form of setCca(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d85512a0" loc="95:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestInitialBackoff" ref="0x7f85d8554780" loc="81:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="76:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; </short>
          <long>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8554500" loc="81:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCongestionBackoff" ref="0x7f85d8557e70" loc="66:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="62:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestCongestionBackoff event&#10; </short>
          <long>&#10; Must be called within a requestCongestionBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f85d8557bf0" loc="66:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInitialBackoff" ref="0x7f85d8557350" loc="60:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="56:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestInitialBackoff event&#10; </short>
          <long>&#10; Must be called within a requestInitialBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f85d85570d0" loc="60:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCca" ref="0x7f85d85558d0" loc="73:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="68:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Enable CCA for the outbound packet.</short>
          <long>&#10; Enable CCA for the outbound packet.  Must be called within a requestCca&#10; event&#10; @param ccaOn TRUE to enable CCA, which is the default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ccaOn" ref="0x7f85d8555650" loc="73:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestCongestionBackoff" ref="0x7f85d8553690" loc="88:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="83:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; </short>
          <long>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8553410" loc="88:../../../tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendNotifier" loc="50:../../../tos/interfaces/SendNotifier.nc">
      <documentation loc="32:../../../tos/interfaces/SendNotifier.nc">
        <short> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.</short>
        <long> &#10; The radio stack notifies the entire system that it is about to send&#10; a packet.  Other modules in the system can call back within this event&#10; to modify the packet's metadata. For example, we can setup a module&#10; in the system to make every CTP data packet send with low power listening&#10; enabled:&#10;&#10;   event void SendNotifier.aboutToSend[AM_COLLECTION_DATA](uint8_t dest,&#10;       message_t *msg) {&#10;     call LowPowerListening.setRxSleepInterval(msg, 512);&#10;   }&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="aboutToSend" ref="0x7f85d8546e60" loc="59:../../../tos/interfaces/SendNotifier.nc">
        <documentation loc="52:../../../tos/interfaces/SendNotifier.nc">
          <short>&#10; The system is about to send this message.</short>
          <long>&#10; The system is about to send this message. Fill in any last modifications&#10; and the message will be sent.&#10; &#10; @param dest The destination address of the messsage&#10; @param 'message_t* ONE msg' The message about to be transmitted&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendNotifier"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7f85d8546850" loc="59:../../../tos/interfaces/SendNotifier.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f85d8546bd0" loc="59:../../../tos/interfaces/SendNotifier.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Packet" loc="40:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author David Moss&#10; @author Chad Metcalf&#10;</long>
      </documentation>
      <function command="" provided="0" name="setPower" ref="0x7f85d8560120" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="49:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Set transmission power for a given packet.</short>
          <long>&#10; Set transmission power for a given packet. Valid ranges are&#10; between 0 and 31.&#10;&#10; @param p_msg the message.&#10; @param power transmission power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f85d8562ae0" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="power" ref="0x7f85d8562e30" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setNetwork" ref="0x7f85d855c710" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f85d855c110" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="networkId" ref="0x7f85d855c480" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRssi" ref="0x7f85d8560c00" loc="64:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="58:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get rssi value for a given packet.</short>
          <long>&#10; Get rssi value for a given packet. For received packets, it is&#10; the received signal strength when receiving that packet. For sent&#10; packets, it is the received signal strength of the ack if an ack&#10; was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="signed char" size="I:1" alignment="I:1">
            <typename><typedef-ref name="int8_t" ref="0x7f85d959f110"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f85d8560980" loc="64:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNetwork" ref="0x7f85d855e620" loc="75:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f85d855e3a0" loc="75:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPower" ref="0x7f85d85622e0" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="42:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get transmission power setting for current packet.</short>
          <long>&#10; Get transmission power setting for current packet.&#10;&#10; @param the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f85d8562060" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLqi" ref="0x7f85d855f760" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
        <documentation loc="66:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
          <short>&#10; Get lqi value for a given packet.</short>
          <long>&#10; Get lqi value for a given packet. For received packets, it is the&#10; link quality indicator value when receiving that packet. For sent&#10; packets, it is the link quality indicator value of the ack if an&#10; ack was received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f85d855f4e0" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Packet.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketLink" loc="37:../../../tos/interfaces/PacketLink.nc">
      <documentation loc="32:../../../tos/interfaces/PacketLink.nc">
        <short>&#10; </short>
        <long>&#10; @author David Moss&#10; @author Jon Wyant&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRetryDelay" ref="0x7f85d854a6c0" loc="65:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="61:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the delay between retry attempts in ms for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d854a440" loc="65:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetries" ref="0x7f85d854e790" loc="46:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="39:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; </short>
          <long>&#10; Set the maximum number of times attempt message delivery&#10; Default is 0&#10; @param 'message_t* ONE msg'&#10; @param maxRetries the maximum number of attempts to deliver&#10;     the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d854e170" loc="46:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="maxRetries" ref="0x7f85d854e500" loc="46:../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRetries" ref="0x7f85d854b680" loc="59:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="55:../../../tos/interfaces/PacketLink.nc">
          <short> &#10; </short>
          <long> &#10; @param 'message_t* ONE msg'&#10; @return the maximum number of retry attempts for this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d854b400" loc="59:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRetryDelay" ref="0x7f85d854db90" loc="53:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="48:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; Set a delay between each retry attempt&#10; </short>
          <long>&#10; Set a delay between each retry attempt&#10; @param msg&#10; @param retryDelay the delay betweeen retry attempts, in milliseconds&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d854d570" loc="53:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="retryDelay" ref="0x7f85d854d900" loc="53:../../../tos/interfaces/PacketLink.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasDelivered" ref="0x7f85d85496c0" loc="71:../../../tos/interfaces/PacketLink.nc">
        <documentation loc="67:../../../tos/interfaces/PacketLink.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return TRUE if the message was delivered.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketLink"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8549440" loc="71:../../../tos/interfaces/PacketLink.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:../../../tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:../../../tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x7f85d85592a0" loc="47:../../../tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:../../../tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8559020" loc="47:../../../tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:../../../tos/interfaces/Send.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f85d85382b0" loc="75:../../../tos/interfaces/Send.nc">
        <documentation loc="57:../../../tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d853bc40" loc="75:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d8538020" loc="75:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f85d8534890" loc="125:../../../tos/interfaces/Send.nc">
        <documentation loc="115:../../../tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8534290" loc="125:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d85345c0" loc="125:../../../tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f85d85339b0" loc="112:../../../tos/interfaces/Send.nc">
        <documentation loc="102:../../../tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f85d85375f0" loc="89:../../../tos/interfaces/Send.nc">
        <documentation loc="77:../../../tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8537370" loc="89:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f85d8536ac0" loc="100:../../../tos/interfaces/Send.nc">
        <documentation loc="91:../../../tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d85364e0" loc="100:../../../tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f85d8536830" loc="100:../../../tos/interfaces/Send.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:../../../tos/interfaces/Resource.nc">
      <documentation loc="63:../../../tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f85d853c120" loc="120:../../../tos/interfaces/Resource.nc">
        <documentation loc="104:../../../tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.&#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource&#10;&#10; @note This command should never be called between putting in a request&#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event,&#10;       we have opted to keep thing simple and warn you about the potential&#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x7f85d853d120" loc="97:../../../tos/interfaces/Resource.nc">
        <documentation loc="90:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x7f85d853e770" loc="88:../../../tos/interfaces/Resource.nc">
        <documentation loc="78:../../../tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f85d853d910" loc="102:../../../tos/interfaces/Resource.nc">
        <documentation loc="99:../../../tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f85d853cb70" loc="128:../../../tos/interfaces/Resource.nc">
        <documentation loc="122:../../../tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Transmit" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <short>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction for the transmit path implementaiton of the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f85d85132b0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send a message&#10;&#10; </short>
          <long>&#10; Send a message&#10;&#10; @param p_msg message to send.&#10; @param useCca TRUE if this Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f85d851dc50" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="useCca" ref="0x7f85d8513020" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f85d85115b0" loc="65:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="60:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Cancel sending of the message.</short>
          <long>&#10; Cancel sending of the message.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="modify" ref="0x7f85d850fe30" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="75:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Modify the contents of a packet.</short>
          <long>&#10; Modify the contents of a packet. This command can only be used&#10; when an SFD capture event for the sending packet is signalled.&#10;&#10; @param offset in the message to start modifying.&#10; @param buf to data to write&#10; @param len of bytes to write&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f85d850f020" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f85d850f860" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d850fb90" loc="84:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f85d8510770" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="67:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Signal that a message has been sent&#10;&#10; </short>
          <long>&#10; Signal that a message has been sent&#10;&#10; @param p_msg message to send.&#10; @param error notifaction of how the operation went.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="p_msg" ref="0x7f85d8510190" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f85d85104e0" loc="73:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resend" ref="0x7f85d8513d40" loc="58:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
          <short>&#10; Send the previous message again&#10; </short>
          <long>&#10; Send the previous message again&#10; @param useCca TRUE if this re-Tx should use clear channel assessments&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Transmit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="useCca" ref="0x7f85d8513ac0" loc="58:../../../tos/chips/cc2420/interfaces/CC2420Transmit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:../../../tos/interfaces/Random.nc">
      <documentation loc="34:../../../tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7f85d850a070" loc="52:../../../tos/interfaces/Random.nc">
        <documentation loc="48:../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 16-bit pseudorandom number.</short>
          <long> &#10; Produces a 16-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7f85d850d830" loc="46:../../../tos/interfaces/Random.nc">
        <documentation loc="42:../../../tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:../../../tos/interfaces/StdControl.nc">
      <documentation loc="72:../../../tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f85d85168e0" loc="95:../../../tos/interfaces/StdControl.nc">
        <documentation loc="88:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f85d8515120" loc="105:../../../tos/interfaces/StdControl.nc">
        <documentation loc="97:../../../tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420PacketBody" loc="37:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <short>&#10; Internal interface for the CC2420 to get portions of a packet.</short>
        <long>&#10; Internal interface for the CC2420 to get portions of a packet.&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="getPayload" ref="0x7f85d85042e0" loc="49:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="45:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the payload region of the message, after any headers&#10;    works with extended addressing mode&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8504020" loc="49:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getHeader" ref="0x7f85d8505710" loc="42:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="39:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_header_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_header" ref="0x7f85d8988950"/>
              <typename><typedef-ref name="cc2420_header_t" ref="0x7f85d8985390"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8505410" loc="42:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMetadata" ref="0x7f85d8502620" loc="53:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
        <documentation loc="50:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_metadata_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-tag size="I:12" alignment="I:1"><nx_struct-ref name="cc2420_metadata" ref="0x7f85d8985e50"/>
              <typename><typedef-ref name="cc2420_metadata_t" ref="0x7f85d89837e0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d8502320" loc="53:../../../tos/chips/cc2420/interfaces/CC2420PacketBody.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Power" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio power operations (e.g. voltage&#10; regulator, oscillator, etc). However, it does not include&#10; transmission power, see the CC2420Config interface.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.1 $ $Date: 2007-07-04 00:37:14 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="startOscillator" ref="0x7f85d851b6e0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="65:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the oscillator.</short>
          <long>&#10; Start the oscillator. On SUCCESS, &#60;code>startOscillator&#60;/code>&#10; will be signalled when the oscillator has been started.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rfOff" ref="0x7f85d85187f0" loc="97:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="92:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Disable RX.</short>
          <long>&#10; Disable RX.&#10;&#10; @return SUCCESS if receive mode has been disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxOn" ref="0x7f85d8518020" loc="90:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="85:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Enable RX.</short>
          <long>&#10; Enable RX.&#10;&#10; @return SUCCESS if receive mode has been enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startVReg" ref="0x7f85d851fe20" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Start the voltage regulator on the CC2420.</short>
          <long>&#10; Start the voltage regulator on the CC2420. On SUCCESS,&#10; &#60;code>startVReg()&#60;/code> will be signalled when the voltage&#10; regulator is fully on.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopVReg" ref="0x7f85d851ce80" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="58:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the voltage regulator immediately.</short>
          <long>&#10; Stop the voltage regulator immediately.&#10;&#10; @return SUCCESS always&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startOscillatorDone" ref="0x7f85d851a020" loc="76:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="73:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the oscillator has been started.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stopOscillator" ref="0x7f85d851a800" loc="83:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="78:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Stop the oscillator.</short>
          <long>&#10; Stop the oscillator.&#10;&#10; @return SUCCESS if the oscillator was stopped, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="startVRegDone" ref="0x7f85d851c6c0" loc="56:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Power.nc">
          <short>&#10; Signals that the voltage regulator has been started.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Power"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="State" loc="38:../../../tos/interfaces/State.nc">
      <documentation loc="33:../../../tos/interfaces/State.nc">
        <short>&#10; State machine interface&#10; </short>
        <long>&#10; State machine interface&#10; @author David Moss - dmm@rincon.com&#10;</long>
      </documentation>
      <function command="" provided="0" name="getState" ref="0x7f85d84fdbf0" loc="71:../../../tos/interfaces/State.nc">
        <documentation loc="68:../../../tos/interfaces/State.nc">
          <short>&#10; Get the current state&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toIdle" ref="0x7f85d84ff270" loc="56:../../../tos/interfaces/State.nc">
        <documentation loc="53:../../../tos/interfaces/State.nc">
          <short>&#10; Set the current state back to S_IDLE&#10;</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isState" ref="0x7f85d84fd420" loc="66:../../../tos/interfaces/State.nc">
        <documentation loc="63:../../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in the given state&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="myState" ref="0x7f85d84fd1a0" loc="66:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isIdle" ref="0x7f85d84ff9e0" loc="61:../../../tos/interfaces/State.nc">
        <documentation loc="58:../../../tos/interfaces/State.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the state machine is in S_IDLE&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="requestState" ref="0x7f85d8500020" loc="45:../../../tos/interfaces/State.nc">
        <documentation loc="40:../../../tos/interfaces/State.nc">
          <short>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.</short>
          <long>&#10; This will allow a state change so long as the current&#10; state is S_IDLE.&#10; @return SUCCESS if the state is change, FAIL if it isn't&#10;</long>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f85d8508c90" loc="45:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="forceState" ref="0x7f85d8500ad0" loc="51:../../../tos/interfaces/State.nc">
        <documentation loc="47:../../../tos/interfaces/State.nc">
          <short>&#10; Force the state machine to go into a certain state,&#10; regardless of the current state it's in.</short>
        </documentation>
        <interfacedef-ref qname="State"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reqState" ref="0x7f85d8500850" loc="51:../../../tos/interfaces/State.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Config" loc="46:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio configurations. All get() and set()&#10; commands are single-phase. After setting some values, a call to&#10; sync() is required for the changes to propagate to the cc2420&#10; hardware chip. This interface allows setting multiple parameters&#10; before calling sync().&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.3 $ $Date: 2008/06/16 15:33:32 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setAutoAck" ref="0x7f85d84a2640" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="100:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync must be called for acknowledgement changes to take effect&#10; </short>
          <long>&#10; Sync must be called for acknowledgement changes to take effect&#10; @param enableAutoAck TRUE to enable auto acknowledgements&#10; @param hwAutoAck TRUE to default to hardware auto acks, FALSE to&#10;     default to software auto acknowledgements&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAutoAck" ref="0x7f85d84a2060" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </variable>
          <variable name="hwAutoAck" ref="0x7f85d84a23b0" loc="106:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAddressRecognitionEnabled" ref="0x7f85d84a3020" loc="93:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="90:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddressRecognition" ref="0x7f85d84a4690" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="81:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @param enableAddressRecognition TRUE to turn address recognition on&#10; @param useHwAddressRecognition TRUE to perform address recognition first&#10;     in hardware. This doesn't affect software address recognition. The&#10;     driver must sync with the chip after changing this value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAddressRecognition" ref="0x7f85d84a4020" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </variable>
          <variable name="useHwAddressRecognition" ref="0x7f85d84a4400" loc="87:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="syncDone" ref="0x7f85d84aba40" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f85d84ab7c0" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAddressRecognitionDefault" ref="0x7f85d84a38a0" loc="98:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="95:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is performed first in hardware.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShortAddr" ref="0x7f85d84a7540" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f85d84a72c0" loc="72:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f85d84aab90" loc="61:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f85d84aa910" loc="61:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAutoAckEnabled" ref="0x7f85d84a18a0" loc="117:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="114:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if auto acks are enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPanAddr" ref="0x7f85d84a66b0" loc="78:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f85d84a6430" loc="78:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAutoAckDefault" ref="0x7f85d84a1070" loc="112:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="108:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if hardware auto acks are the default, FALSE if software&#10;     acks are the default&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getExtAddr" ref="0x7f85d84a8350" loc="66:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="63:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Get the long address of the radio: set in hardware&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f85d857fac0"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f85d8575240"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShortAddr" ref="0x7f85d84a8b40" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="68:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the short address of the radio.</short>
          <long>&#10; Change the short address of the radio.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sync" ref="0x7f85d84ab020" loc="54:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="48:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync configuration changes with the radio hardware.</short>
          <long>&#10; Sync configuration changes with the radio hardware. This only&#10; applies to set commands below.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f85d84aa1f0" loc="60:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the channel of the radio, between 11 and 26&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPanAddr" ref="0x7f85d84a7ce0" loc="77:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="74:../../../tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the PAN address of the radio.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:../../../tos/interfaces/Read.nc">
      <documentation loc="33:../../../tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10;&#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f85d849c2b0" loc="49:../../../tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f85d849c2b0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f85d849cb70" loc="55:../../../tos/interfaces/Read.nc">
        <documentation loc="50:../../../tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10;&#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f85d849b8f0" loc="63:../../../tos/interfaces/Read.nc">
        <documentation loc="57:../../../tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f85d849c2b0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f85d849b340" loc="63:../../../tos/interfaces/Read.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
          <variable name="val" ref="0x7f85d849b660" loc="63:../../../tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f85d849c2b0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Register" loc="47:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
      <documentation loc="33:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <short>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio.</short>
        <long>&#10; Interface representing one of the Read/Write registers on the&#10; CC2420 radio. The return values (when appropriate) refer to the&#10; status byte returned on the CC2420 SO pin. A full list of RW&#10; registers can be found on page 61 of the CC2420 datasheet (rev&#10; 1.2). Page 25 of the same document describes the protocol for&#10; interacting with these registers over the CC2420 SPI bus.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f85d8472c10" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="49:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Read a 16-bit data word from the register.</short>
          <long>&#10; Read a 16-bit data word from the register.&#10;&#10; @param data pointer to place the register value.&#10; @return status byte from the read.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f85d8990a70"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d8472990" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
                <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f85d8470710" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
          <short>&#10; Write a 16-bit data word to the register.</short>
          <long>&#10; Write a 16-bit data word to the register.&#10; &#10; @param data value to write to register.&#10; @return status byte from the write.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Register"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f85d8990a70"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d8470490" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Register.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalIeeeEui64" loc="43:../../../tos/interfaces/LocalIeeeEui64.nc">
      <documentation loc="39:../../../tos/interfaces/LocalIeeeEui64.nc">
        <short>&#10; Interface to read the 64-bit IEEE EUI.</short>
        <long>&#10; Interface to read the 64-bit IEEE EUI.&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="getId" ref="0x7f85d8491c50" loc="48:../../../tos/interfaces/LocalIeeeEui64.nc">
        <documentation loc="44:../../../tos/interfaces/LocalIeeeEui64.nc">
          <short>&#10; Get the 64-bit IEEE EUI.</short>
          <long>&#10; Get the 64-bit IEEE EUI.&#10; @returns the 64-bit IEEE EUI type, defined in tos/types/IeeeEui64.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalIeeeEui64"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:8" alignment="I:1"><struct-ref name="ieee_eui64" ref="0x7f85d857fac0"/>
            <typename><typedef-ref name="ieee_eui64_t" ref="0x7f85d8575240"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:../../../tos/lib/timer/Alarm.nc">
      <documentation loc="36:../../../tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f85d848d020" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f85d848d020"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f85d848d260" loc="56:../../../tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d848d260"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f85d8489e00" loc="109:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="105:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d848d260"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f85d848ce40" loc="78:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="75:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f85d8489460" loc="103:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="90:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d848d260"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d848d260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f85d848ae60" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d848d260"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f85d84891d0" loc="103:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d848d260"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f85d848a640" loc="88:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="81:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f85d8488620" loc="116:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="111:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d848d260"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f85d848ddc0" loc="66:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="59:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d848d260"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f85d848db40" loc="66:../../../tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d848d260"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f85d848c680" loc="73:../../../tos/lib/timer/Alarm.nc">
        <documentation loc="68:../../../tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:../../../tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:../../../tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x7f85d847a560" loc="50:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x7f85d84794f0" loc="60:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x7f85d847ad40" loc="55:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f85d899fc40"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x7f85d847bcd0" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:../../../tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f85d899fc40"/></typename>
            </type-int>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x7f85d847b6f0" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f85d899fc40"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x7f85d847ba40" loc="45:../../../tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f85d899d090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Strobe" loc="44:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
      <documentation loc="33:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <short>&#10; Interface representing one of the CC2420 command strobe registers.</short>
        <long>&#10; Interface representing one of the CC2420 command strobe registers.&#10; Writing to one of these registers enacts a command on the CC2420,&#10; such as power-up, transmission, or clear a FIFO.&#10;&#10; @author Philip Levis&#10; @version $Revision: 1.3 $ $Date: 2010-06-29 22:07:44 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="strobe" ref="0x7f85d846de40" loc="53:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
        <documentation loc="46:../../../tos/chips/cc2420/interfaces/CC2420Strobe.nc">
          <short>&#10; Send a command strobe to the register.</short>
          <long>&#10; Send a command strobe to the register. The return value is the&#10; CC2420 status register. Table 5 on page 27 of the CC2420&#10; datasheet (v1.2) describes the contents of this register.&#10; &#10; @return Status byte from the CC2420.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Strobe"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f85d8990a70"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Ram" loc="41:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <short>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing theRAM of a ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f85d8476e80" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="43:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Read data from a RAM.</short>
          <long>&#10; Read data from a RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f85d8990a70"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f85d8476020" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f85d8476890" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f85d8476be0" loc="52:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f85d8474610" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
        <documentation loc="54:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
          <short>&#10; Write data to RAM.</short>
          <long>&#10; Write data to RAM. This operation is sychronous.&#10;&#10; @param offset within the field.&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Ram"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f85d8990a70"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="offset" ref="0x7f85d8475770" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x7f85d8474020" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f85d8474370" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Ram.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioInterrupt" loc="43:../../../tos/interfaces/GpioInterrupt.nc">
      <documentation loc="34:../../../tos/interfaces/GpioInterrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; Revision:  $Revision: 1.5 $&#10;&#10; Provides a microcontroller-independent presentation of interrupts&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f85d847dc30" loc="68:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="63:../../../tos/interfaces/GpioInterrupt.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; NOTE: Interrupts keep running until &#34;disable()&#34; is called&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f85d847d470" loc="61:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="56:../../../tos/interfaces/GpioInterrupt.nc">
          <short>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; </short>
          <long>  &#10; Diables an edge interrupt or capture interrupt&#10; &#10; @return SUCCESS if the interrupt has been disabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableFallingEdge" ref="0x7f85d847fce0" loc="54:../../../tos/interfaces/GpioInterrupt.nc">
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRisingEdge" ref="0x7f85d847f420" loc="53:../../../tos/interfaces/GpioInterrupt.nc">
        <documentation loc="45:../../../tos/interfaces/GpioInterrupt.nc">
          <short> &#10; Enable an edge based interrupt.</short>
          <long> &#10; Enable an edge based interrupt. Calls to these functions are&#10; not cumulative: only the transition type of the last called function&#10; will be monitored for.&#10;&#10;&#10; @return SUCCESS if the interrupt has been enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioInterrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Compare" loc="40:../../../tos/chips/msp430/timer/Msp430Compare.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f85d83b2560" loc="41:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEvent" ref="0x7f85d83b1020" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f85d83b2c60" loc="42:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromPrev" ref="0x7f85d83b1a00" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f85d83b1780" loc="43:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEventFromNow" ref="0x7f85d83af410" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="delta" ref="0x7f85d83af190" loc="44:../../../tos/chips/msp430/timer/Msp430Compare.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f85d83afb00" loc="46:../../../tos/chips/msp430/timer/Msp430Compare.nc">
        <interfacedef-ref qname="Msp430Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Timer" loc="43:../../../tos/chips/msp430/timer/Msp430Timer.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f85d83c03e0" loc="52:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f85d83bfc60" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="clockSource" ref="0x7f85d83bf9e0" loc="55:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f85d83c0b10" loc="53:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f85d83c4650" loc="45:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f85d83bf270" loc="54:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f85d83c3570" loc="47:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f85d83c1cc0" loc="51:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f85d83c4de0" loc="46:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f85d83c3c80" loc="48:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setMode" ref="0x7f85d83c15c0" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f85d83c1340" loc="50:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="int" size="I:2" alignment="I:2"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInputDivider" ref="0x7f85d83bd6a0" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
        <interfacedef-ref qname="Msp430Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="inputDivider" ref="0x7f85d83bd420" loc="56:../../../tos/chips/msp430/timer/Msp430Timer.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerControl" loc="40:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="setControlAsCapture" ref="0x7f85d83b7bc0" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="58:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short> &#10; Sets the timer in capture mode.</short>
          <long> &#10; Sets the timer in capture mode.&#10;&#10; It has a predefined idea of what mode that capture should occur in.&#10; If that doesn't work for you, use setControl.&#10;&#10; @param cm configures the capture to occur on none, rising, falling or rising_and_falling edges&#10; @param ccis configures which input channel to use.&#10;&#10; Msp430Timer.h has convenience definitions:&#10;&#10;     MSP430TIMER_CM_NONE,            MSP430TIMER_CCI_A&#10;     MSP430TIMER_CM_RISING,          MSP430TIMER_CCI_B&#10;     MSP430TIMER_CM_FALLING,         MSP430TIMER_CCI_GND&#10;     MSP430TIMER_CM_BOTH             MSP430TIMER_CCI_VCC&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f85d83b75f0" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
          <variable name="ccis" ref="0x7f85d83b7930" loc="74:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getControl" ref="0x7f85d83c5b60" loc="41:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f85d89f4e70"/>
            <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f85d89f38e0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableEvents" ref="0x7f85d83b65c0" loc="76:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="areEventsEnabled" ref="0x7f85d83b54d0" loc="78:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControlAsCompare" ref="0x7f85d83b9d30" loc="56:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
          <short>&#10; Sets the time in compare mode.</short>
          <long>&#10; Sets the time in compare mode.&#10;&#10; setControlAsCompare has a predefined, hardcoded idea of&#10; how the control register should be set for doing a compare.&#10;&#10; Your mileage may vary and this may not work for you.   In&#10; which case you set use setControl.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableEvents" ref="0x7f85d83b6d00" loc="77:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInterruptPending" ref="0x7f85d83ba350" loc="42:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearPendingInterrupt" ref="0x7f85d83baae0" loc="43:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x7f85d83b95a0" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
        <interfacedef-ref qname="Msp430TimerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f85d89f4e70"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f85d89f38e0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f85d83b9320" loc="45:../../../tos/chips/msp430/timer/Msp430TimerControl.nc">
            <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x7f85d89f4e70"/>
              <typename><typedef-ref name="msp430_compare_control_t" ref="0x7f85d89f38e0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430Capture" loc="41:../../../tos/chips/msp430/timer/Msp430Capture.nc">
      <documentation loc="34:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getEvent" ref="0x7f85d839d020" loc="45:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="42:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Reads the value of the last capture event in TxCCRx&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSynchronous" ref="0x7f85d839b6a0" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="76:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set whether the capture should occur synchronously or asynchronously.</short>
          <long>&#10; Set whether the capture should occur synchronously or asynchronously.&#10; TinyOS default is synchronous captures.&#10; WARNING: if the capture signal is asynchronous to the timer clock,&#10;          it could case a race condition (see Timer documentation&#10;          in MSP430F1xx user guide)&#10; @param synchronous TRUE to synchronize the timer capture with the&#10;        next timer clock instead of occurring asynchronously.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="synchronous" ref="0x7f85d839b420" loc="85:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f85d839a2a0" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="87:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Signalled when an event is captured.</short>
          <long>&#10; Signalled when an event is captured.&#10;&#10; @param time The time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f85d839a020" loc="92:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f85d839cc10" loc="74:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="71:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Clear the capture overflow flag for when multiple captures occur&#10;</short>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f85d839c350" loc="69:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="59:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Determine if a capture overflow is pending.</short>
          <long>&#10; Determine if a capture overflow is pending.&#10;&#10; TI calls this overflow but it is actually an overrun.&#10; If COV is set it says that another capture has occurred&#10; prior to reading a previous capture.  The previous value&#10; of a capture has been lost.&#10;&#10; @return TRUE if the capture register has overflowed&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setEdge" ref="0x7f85d839d9d0" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
        <documentation loc="47:../../../tos/chips/msp430/timer/Msp430Capture.nc">
          <short>&#10; Set the edge that the capture should occur&#10;&#10; </short>
          <long>&#10; Set the edge that the capture should occur&#10;&#10; @param cm Capture Mode for edge capture.&#10; enums exist for:&#10;   MSP430TIMER_CM_NONE is no capture.&#10;   MSP430TIMER_CM_RISING is rising edge capture.&#10;   MSP430TIMER_CM_FALLING is a falling edge capture.&#10;   MSP430TIMER_CM_BOTH captures on both rising and falling edges.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Msp430Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cm" ref="0x7f85d839d750" loc="57:../../../tos/chips/msp430/timer/Msp430Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430TimerEvent" loc="37:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
      <documentation loc="33:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <short>&#10; </short>
        <long>&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f85d83701f0" loc="39:../../../tos/chips/msp430/timer/Msp430TimerEvent.nc">
        <interfacedef-ref qname="Msp430TimerEvent"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:../../../tos/lib/timer/Counter.nc">
      <documentation loc="36:../../../tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f85d8220e10" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f85d8220e10"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f85d821b070" loc="57:../../../tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d821b070"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f85d821b990" loc="64:../../../tos/lib/timer/Counter.nc">
        <documentation loc="59:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return counter value.</short>
          <long>&#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d821b070"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f85d821aad0" loc="76:../../../tos/lib/timer/Counter.nc">
        <documentation loc="73:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f85d821a270" loc="71:../../../tos/lib/timer/Counter.nc">
        <documentation loc="66:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long>&#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f85d8219270" loc="82:../../../tos/lib/timer/Counter.nc">
        <documentation loc="78:../../../tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GpioCapture" loc="46:../../../tos/interfaces/GpioCapture.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="captureFallingEdge" ref="0x7f85d8148190" loc="54:../../../tos/interfaces/GpioCapture.nc">
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f85d8147350" loc="66:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="63:../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Disable further captures.</short>
          <long>&#10; Disable further captures.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x7f85d8148b30" loc="61:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="56:../../../tos/interfaces/GpioCapture.nc">
          <short>&#10; Fired when an edge interrupt occurs.</short>
          <long>&#10; Fired when an edge interrupt occurs.&#10;&#10; @param val The value of the 32kHz timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f85d81488b0" loc="61:../../../tos/interfaces/GpioCapture.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="captureRisingEdge" ref="0x7f85d81518f0" loc="53:../../../tos/interfaces/GpioCapture.nc">
        <documentation loc="48:../../../tos/interfaces/GpioCapture.nc">
          <short> &#10; Enable an edge based timer capture event.</short>
          <long> &#10; Enable an edge based timer capture event.&#10;&#10; @return Whether the timer capture has been enabled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="GpioCapture"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Interrupt" loc="39:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
      <documentation loc="34:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f85d81235a0" loc="54:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="51:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.</short>
          <long> &#10; Clears the MSP430 Interrupt Pending Flag for a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f85d811f020" loc="85:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="82:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Signalled when an interrupt occurs on a port.</short>
          <long>&#10; Signalled when an interrupt occurs on a port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disable" ref="0x7f85d8124dc0" loc="49:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="46:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Disables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Disables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edge" ref="0x7f85d81206d0" loc="80:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="69:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets whether the edge should be high to low or low to high.</short>
          <long>&#10; Sets whether the edge should be high to low or low to high.&#10;&#10; @param TRUE if the interrupt should be triggered on a low to high&#10;        edge transition, false for interrupts on a high to low transition.&#10;&#10; DEPRECATED.&#10;&#10; The if generates extra code that doesn't need to be there.   Replaced&#10; by edge{Rising,Falling}();&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="low_to_high" ref="0x7f85d8120450" loc="80:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeFalling" ref="0x7f85d8122d30" loc="67:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enable" ref="0x7f85d8124620" loc="44:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="41:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Enables MSP430 hardware interrupt on a particular port.</short>
          <long> &#10; Enables MSP430 hardware interrupt on a particular port.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="edgeRising" ref="0x7f85d81225d0" loc="66:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="63:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short>&#10; Sets rising or falling edge for the interrupt generation&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x7f85d8123da0" loc="61:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
        <documentation loc="56:../../../tos/chips/msp430/pins/HplMsp430Interrupt.nc">
          <short> &#10; Gets the current input value of a port.</short>
          <long> &#10; Gets the current input value of a port.&#10;&#10; @return TRUE if the pin is set high, FALSE if it is set low.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Interrupt"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ChipSpiResource" loc="17:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
      <documentation loc="2:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <short>&#10; Interface for the SPI resource for an entire chip.</short>
        <long>&#10; Interface for the SPI resource for an entire chip.  The chip accesses&#10; the platform SPI resource one time, but can have multiple clients &#10; using the SPI bus on top.  When all of the clients are released, the&#10; chip will normally try to release itself from the platforms SPI bus.&#10; In some cases, this isn't desirable - so even though upper components&#10; aren't actively using the SPI bus, they can tell the chip to hold onto&#10; it so they can have immediate access when they need. &#10;&#10; Any component that aborts a release MUST attempt the release at a later&#10; time if they don't acquire and release the SPI bus naturally after the&#10; abort.&#10; &#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="releasing" ref="0x7f85d7fcd810" loc="24:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="19:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; The SPI bus is about to be automatically released.</short>
          <long>&#10; The SPI bus is about to be automatically released.  Modules that aren't&#10; using the SPI bus but still want the SPI bus to stick around must call&#10; abortRelease() within the event.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="abortRelease" ref="0x7f85d7fcc0e0" loc="31:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="27:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Abort the release of the SPI bus.</short>
          <long>&#10; Abort the release of the SPI bus.  This must be called only with the&#10; releasing() event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="attemptRelease" ref="0x7f85d7fcc920" loc="39:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <documentation loc="33:../../../tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>&#10; Release the SPI bus if there are no objections&#10; </short>
          <long>&#10; Release the SPI bus if there are no objections&#10; @return SUCCESS if the SPI bus is released from the chip.&#10;      FAIL if the SPI bus is already in use.&#10;      EBUSY if some component aborted the release.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChipSpiResource"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Fifo" loc="40:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <short>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.</short>
        <long>&#10; HAL abstraction for accessing the FIFO registers of a ChipCon&#10; CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.2 $ $Date: 2008-06-03 04:43:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="continueRead" ref="0x7f85d7fa5420" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="53:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Continue reading from the FIFO without having to send the address&#10; byte again.</short>
          <long>&#10; Continue reading from the FIFO without having to send the address&#10; byte again. The &#60;code>readDone&#60;/code> event will be signalled&#10; upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return SUCCESS always.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d7fa6e10" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f85d7fa5190" loc="62:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="writeDone" ref="0x7f85d7fa0700" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="84:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a write operation.</short>
          <long>&#10; Signals the completion of a write operation.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes written.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d7fa1d90" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f85d7fa0110" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f85d7fa0460" loc="91:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f85d7fa1020" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="73:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start writing the FIFO.</short>
          <long>&#10; Start writing the FIFO. The &#60;code>writeDone&#60;/code> event will be&#10; signalled upon completion.&#10;&#10; @param data a pointer to the send buffer.&#10; @param length number of bytes to write.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f85d8990a70"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d7fa2970" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f85d7fa2cc0" loc="82:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="beginRead" ref="0x7f85d7fa6020" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="42:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Start reading from the FIFO.</short>
          <long>&#10; Start reading from the FIFO. The &#60;code>readDone&#60;/code> event will&#10; be signalled upon completion.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes to read.&#10; @return status byte returned when sending the last address byte&#10; of the SPI transaction.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="cc2420_status_t" ref="0x7f85d8990a70"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d7fa79d0" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f85d7fa7d20" loc="51:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f85d7fa4b90" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
        <documentation loc="64:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
          <short>&#10; Signals the completion of a read operation.</short>
          <long>&#10; Signals the completion of a read operation.&#10;&#10; @param data a pointer to the receive buffer.&#10; @param length number of bytes read.&#10; @param error notification of how the operation went&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Fifo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d7fa4250" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="length" ref="0x7f85d7fa45a0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f85d7fa48f0" loc="71:../../../tos/chips/cc2420/interfaces/CC2420Fifo.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiPacket" loc="60:../../../tos/interfaces/SpiPacket.nc">
      <documentation loc="34:../../../tos/interfaces/SpiPacket.nc">
        <short>&#10; SPI Packet/buffer interface for sending data over an SPI bus.</short>
        <long>&#10; SPI Packet/buffer interface for sending data over an SPI bus.  This&#10; interface provides a split-phase send command which can be used for&#10; sending, receiving or both.&#10;&#10; The SPI bus both sends and receives at the same time.  So this interface&#10; can be used to send, receive, or both.  The send call allows NULL&#10; parameters for receive or send only operations. This interface is&#10; for buffer based transfers where the microcontroller is the master&#10; (clocking) device.&#10;&#10; This is split phase and typically is implemented using interrupts.  However&#10; as the SPI clock is increased the interrupt overhead become more onerous&#10; wrt each byte time being transfered.  See SpiBLock for a single phase&#10; transfer mechanism that doesn't have interrupt overhead issues.&#10;&#10; Often, an SPI bus must first be acquired using a Resource interface&#10; before sending commands with SPIPacket. In the case of multiple&#10; devices attached to a single SPI bus, chip select pins are often also&#10; used.&#10;&#10; @author Philip Levis&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10; @author Eric B. Decker&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f85d7f85a40" loc="76:../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="62:../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Send a message over the SPI bus.</short>
          <long>&#10; Send a message over the SPI bus.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' A pointer to the buffer to send over the bus. If this&#10;              parameter is NULL, then the SPI will send zeroes.&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' A pointer to the buffer where received data should&#10;              be stored. If this parameter is NULL, then the SPI will&#10;              discard incoming bytes.&#10; @param len   Length of the message.  Note that non-NULL rxBuf and txBuf&#10;              parameters must be AT LEAST as large as len, or the SPI&#10;              will overflow a buffer.&#10;&#10; @return SUCCESS if the request was accepted for transfer&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f85d7f850d0" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f85d7f85460" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d7f857a0" loc="76:../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f85d7f81020" loc="88:../../../tos/interfaces/SpiPacket.nc">
        <documentation loc="78:../../../tos/interfaces/SpiPacket.nc">
          <short>&#10; Notification that the send command has completed.</short>
          <long>&#10; Notification that the send command has completed.&#10;&#10; @param 'uint8_t* COUNT_NOK(len) txBuf' The buffer used for transmission&#10; @param 'uint8_t* COUNT_NOK(len) rxBuf' The buffer used for reception&#10; @param len    The request length of the transfer, but not necessarily&#10;               the number of bytes that were actually transferred&#10; @param error  SUCCESS if the operation completed successfully, FAIL&#10;               otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="txBuf" ref="0x7f85d7f832a0" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="rxBuf" ref="0x7f85d7f83630" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d7f83970" loc="88:../../../tos/interfaces/SpiPacket.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f85d7f83ce0" loc="89:../../../tos/interfaces/SpiPacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SpiByte" loc="38:../../../tos/interfaces/SpiByte.nc">
      <documentation loc="34:../../../tos/interfaces/SpiByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="write" ref="0x7f85d7f878f0" loc="45:../../../tos/interfaces/SpiByte.nc">
        <documentation loc="40:../../../tos/interfaces/SpiByte.nc">
          <short>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; </short>
          <long>&#10; Synchronous transmit and receive (can be in interrupt context)&#10; @param tx Byte to transmit&#10; @param rx Received byte is stored here.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="tx" ref="0x7f85d7f87670" loc="45:../../../tos/interfaces/SpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:../../../tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x7f85d7ea7b70" loc="53:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f85d7ea34e0" loc="61:../../../tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430SpiConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <short>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; </short>
        <long>&#10; Interface used by Msp430Spi clients to reconfigure the SPI before use&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f85d7ea2aa0" loc="39:../../../tos/chips/msp430/usart/Msp430SpiConfigure.nc">
        <interfacedef-ref qname="Msp430SpiConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f85d7ed82b0"/></typename>
              <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f85d7ed9e00"/></type-tag>
            </type-qualified>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FastSpiByte" loc="55:../../../tos/interfaces/FastSpiByte.nc">
      <documentation loc="35:../../../tos/interfaces/FastSpiByte.nc">
        <short>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface.</short>
        <long>&#10; This is a natural extension of the SpiByte interface which allows fast &#10; data transfers comparable to the SpiStream interface. You may want to&#10; use the following code sequence to write a buffer as fast as possible&#10;&#10;&#9;uint8_t *data;&#10;&#9;uint8_t *response;&#10;&#10;&#9;// start the first byte&#10;&#9;call FastSpiByte.splitWrite(data[0]);&#10;&#9;for(i = 1; i &#60; length; ++i) {&#10;&#9;   // finish the previous one and write the next one&#10;&#9;  response[i-1] = call FastSpiByte.splitReadWrite(data[i]);&#10;&#9;}&#10;&#9;// finish the last byte&#10;&#9;response[length-1] = call FastSpiByte.splitRead();&#10;&#10; You can also do some useful computation (like calculate a CRC) while the&#10; hardware is sending the byte.&#10;</long>
      </documentation>
      <function command="" provided="0" name="splitWrite" ref="0x7f85d7ea16f0" loc="62:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="57:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Starts a split-phase SPI data transfer with the given data.</short>
          <long>&#10; Starts a split-phase SPI data transfer with the given data.&#10; A splitRead/splitReadWrite command must follow this command even &#10; if the result is unimportant.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d7ea1470" loc="62:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitReadWrite" ref="0x7f85d7ea0b30" loc="74:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="70:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns.</short>
          <long>&#10; This command first reads the SPI register and then writes&#10; there the new data, then returns. &#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d7ea08b0" loc="74:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="splitRead" ref="0x7f85d7ea0020" loc="68:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="64:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.</short>
          <long>&#10; Finishes the split-phase SPI data transfer by waiting till &#10; the write command comletes and returning the received data.&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f85d7e9f5f0" loc="81:../../../tos/interfaces/FastSpiByte.nc">
        <documentation loc="76:../../../tos/interfaces/FastSpiByte.nc">
          <short>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.</short>
          <long>&#10; This is the standard SpiByte.write command but a little&#10; faster as we should not need to adjust the power state there.&#10; (To be consistent, this command could have be named splitWriteRead).&#10;</long>
        </documentation>
        <interfacedef-ref qname="FastSpiByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d7e9f370" loc="81:../../../tos/interfaces/FastSpiByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:../../../tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:../../../tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x7f85d7e95020" loc="65:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x7f85d7e96750" loc="59:../../../tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430UsartInterrupts" loc="43:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART. &#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information.&#10;&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="rxDone" ref="0x7f85d7e8e740" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="51:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data has been received.</short>
          <long>&#10; A byte of data has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d7e8e4c0" loc="54:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x7f85d7e91cd0" loc="49:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
        <documentation loc="45:../../../tos/chips/msp430/usart/HplMsp430UsartInterrupts.nc">
          <short>&#10; A byte of data is about to be transmitted, ie.</short>
          <long>&#10; A byte of data is about to be transmitted, ie. the TXBuffer is&#10; empty and ready to accept next byte.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430UsartInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430Usart" loc="45:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <short>&#10; Byte-level interface to control a USART.</short>
        <long>&#10; Byte-level interface to control a USART.&#10; &#60;p>The USART can be switched to SPI- or UART-mode. The interface follows&#10; the convention of being stateless, thus a higher layer has to maintain&#10; state information. I.e. calling &#60;code>tx&#60;/done> will transmit a byte of&#10; data in the mode (SPI or UART) the USART has been set to before.&#10;&#10; @author Vlado Handziski (handzisk@tkn.tu-berlin.de)&#10; @author Jan Hauer (hauer@tkn.tu-berlin.de)&#10; @author Joe Polastre&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x7f85d7e697c0" loc="213:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="209:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; SUCCESS if the TX buffer is empty and all of the bits have been&#10; shifted out&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartRx" ref="0x7f85d7e742d0" loc="143:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="140:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart RX functionality of the USART module.</short>
          <long>&#10; Enables the Uart RX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUctl" ref="0x7f85d7e81020" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="47:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f85d7ef4020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f85d7ef4860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f85d7e84cf0" loc="50:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f85d7ef4020"/>
              <typename><typedef-ref name="msp430_uctl_t" ref="0x7f85d7ef4860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUart" ref="0x7f85d7e773b0" loc="123:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="120:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables both the Rx and the Tx Uart modules.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUrctl" ref="0x7f85d7e7f530" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="67:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f85d7ef0020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f85d7ef0860"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f85d7e7f2b0" loc="70:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f85d7ef0020"/>
              <typename><typedef-ref name="msp430_urctl_t" ref="0x7f85d7ef0860"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x7f85d7e6e9e0" loc="180:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrRxIntr" ref="0x7f85d7e6a020" loc="197:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="194:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears RX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUtctl" ref="0x7f85d7e80a90" loc="65:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="62:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f85d7ef3ec0"/>
            <typename><typedef-ref name="msp430_utctl_t" ref="0x7f85d7ef2680"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getUrctl" ref="0x7f85d7e7fd20" loc="75:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="72:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxRCTL Receive Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f85d7ef0020"/>
            <typename><typedef-ref name="msp430_urctl_t" ref="0x7f85d7ef0860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetUsart" ref="0x7f85d7e7bb90" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="reset" ref="0x7f85d7e7b910" loc="97:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUmctl" ref="0x7f85d7e7b1f0" loc="95:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="92:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x7f85d7e6e2b0" loc="179:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUtctl" ref="0x7f85d7e802a0" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="57:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxTCTL Transmit Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f85d7ef3ec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f85d7ef2680"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x7f85d7e80020" loc="60:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f85d7ef3ec0"/>
              <typename><typedef-ref name="msp430_utctl_t" ref="0x7f85d7ef2680"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUbr" ref="0x7f85d7e7c020" loc="85:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="82:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x7f85d7e6d190" loc="181:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUmctl" ref="0x7f85d7e7ca00" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="87:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxMCTL Modulation Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="umctl" ref="0x7f85d7e7c780" loc="90:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartRx" ref="0x7f85d7e78480" loc="113:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="110:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart RX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUart" ref="0x7f85d7e78c00" loc="118:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="115:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Uart mode (both RX and TX)&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x7f85d7e6f420" loc="177:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isSpi" ref="0x7f85d7e72190" loc="163:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="160:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART is set to Spi mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableUartTx" ref="0x7f85d7e76350" loc="133:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="130:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the Uart TX functionality of the USART module.</short>
          <long>&#10; Enables the Uart TX functionality of the USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x7f85d7e6fb60" loc="178:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartRx" ref="0x7f85d7e74ab0" loc="148:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="145:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart RX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x7f85d7e6d8b0" loc="182:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getMode" ref="0x7f85d7e7a390" loc="103:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="99:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.</short>
          <long>&#10; Returns an enum value corresponding to the current mode of the&#10; USART module.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref ref="0x7f85d7efbd80"/>
            <typename><typedef-ref name="msp430_usartmode_t" ref="0x7f85d7ef74d0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isTxIntrPending" ref="0x7f85d7e6c070" loc="187:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="184:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if TX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrIntr" ref="0x7f85d7e69020" loc="207:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="204:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears both TX and RX interrupt pending flags&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setUbr" ref="0x7f85d7e7d700" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="77:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Sets the UxBR0 and UxBR1 Baud Rate Control Registers&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ubr" ref="0x7f85d7e7d480" loc="80:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x7f85d7e682a0" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="215:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Transmit a byte of data.</short>
          <long>&#10; Transmit a byte of data. When the transmission is completed,&#10; &#60;code>txDone&#60;/done> is generated. Only then a new byte may be&#10; transmitted, otherwise the previous byte will be overwritten.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d7e68020" loc="220:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getUctl" ref="0x7f85d7e81800" loc="55:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="52:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Reads the UxCTL Control Register&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f85d7ef4020"/>
            <typename><typedef-ref name="msp430_uctl_t" ref="0x7f85d7ef4860"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUart" ref="0x7f85d7e77b20" loc="128:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="125:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables both the Rx and the Tx Uart modules.</short>
          <long>&#10; Disables both the Rx and the Tx Uart modules.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableSpi" ref="0x7f85d7e73270" loc="153:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="150:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Enables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeUart" ref="0x7f85d7e71ba0" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="170:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.</short>
          <long>&#10; Switches USART to Uart mode (RX and TX enabled)&#10; Interrupts disabled by default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f85d7ec3b50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f85d7ec3730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f85d7e71920" loc="174:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f85d7ec3b50"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f85d7ec3730"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeSpi" ref="0x7f85d7e72ca0" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="165:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Switches USART to Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f85d7ed82b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f85d7ed9e00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f85d7e72a20" loc="168:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_spi_union_config_t" ref="0x7f85d7ed82b0"/></typename>
                <type-tag size="I:4" alignment="I:2"><union-ref ref="0x7f85d7ed9e00"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x7f85d7e68ac0" loc="227:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="222:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Get current value from RX-buffer.</short>
          <long>&#10; Get current value from RX-buffer.&#10;&#10; @return byte received&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxIntrPending" ref="0x7f85d7e6c860" loc="192:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="189:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; TRUE if RX interrupt pending, flag must be cleared explicitly&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isUartTx" ref="0x7f85d7e7aba0" loc="108:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="105:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Returns TRUE if the USART has Uart TX mode enabled&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clrTxIntr" ref="0x7f85d7e6a780" loc="202:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="199:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Clears TX interrupt pending flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableSpi" ref="0x7f85d7e739e0" loc="158:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="155:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the USART when in Spi mode.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableUartTx" ref="0x7f85d7e76b30" loc="138:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
        <documentation loc="135:../../../tos/chips/msp430/usart/HplMsp430Usart.nc">
          <short>&#10; Disables the Uart TX module.</short>
        </documentation>
        <interfacedef-ref qname="HplMsp430Usart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2CInterrupts" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
      <documentation loc="32:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="fired" ref="0x7f85d7e01020" loc="39:../../../tos/chips/msp430/usart/HplMsp430I2CInterrupts.nc">
        <interfacedef-ref qname="HplMsp430I2CInterrupts"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplMsp430I2C" loc="4:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
      <function command="" provided="0" name="disableOwnAddress" ref="0x7f85d7dd99d0" loc="80:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartByte" ref="0x7f85d7deb020" loc="31:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveAddress" ref="0x7f85d7de0620" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f85d7de03a0" loc="62:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setMasterMode" ref="0x7f85d7df45b0" loc="11:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTransmitReady" ref="0x7f85d7dddc50" loc="71:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockPrescaler" ref="0x7f85d7de55e0" loc="49:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransmitMode" ref="0x7f85d7dec070" loc="28:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStopBit" ref="0x7f85d7dea020" loc="34:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockSource" ref="0x7f85d7dee020" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="src" ref="0x7f85d7defd30" loc="25:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRepeatMode" ref="0x7f85d7df04b0" loc="21:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getData" ref="0x7f85d7de7020" loc="41:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableStartDetect" ref="0x7f85d7dde550" loc="66:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAccessReady" ref="0x7f85d7dd9270" loc="78:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlaveAddress" ref="0x7f85d7de1c30" loc="61:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isGeneralCallPending" ref="0x7f85d7dd4350" loc="91:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getIV" ref="0x7f85d7dd19d0" loc="100:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableI2C" ref="0x7f85d7df3420" loc="14:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartBit" ref="0x7f85d7de9740" loc="38:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransferByteCount" ref="0x7f85d7de61f0" loc="45:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTransmitReceiveMode" ref="0x7f85d7dee8e0" loc="27:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearModeI2C" ref="0x7f85d7df5350" loc="7:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setOwnAddress" ref="0x7f85d7de1460" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f85d7de11e0" loc="58:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isI2C" ref="0x7f85d7df9c00" loc="6:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableGeneralCall" ref="0x7f85d7ddd4d0" loc="69:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableOwnAddress" ref="0x7f85d7dd8190" loc="81:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isAccessReadyPending" ref="0x7f85d7dd3b00" loc="94:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isArbitrationLostPending" ref="0x7f85d7dd1270" loc="97:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveReady" ref="0x7f85d7ddcb90" loc="74:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableNoAck" ref="0x7f85d7dd88c0" loc="83:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableStartDetect" ref="0x7f85d7de0db0" loc="65:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableArbitrationLost" ref="0x7f85d7dd6390" loc="87:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableI2C" ref="0x7f85d7df3b40" loc="15:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShiftClock" ref="0x7f85d7de37e0" loc="53:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableArbitrationLost" ref="0x7f85d7dd77b0" loc="86:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAccessReady" ref="0x7f85d7ddbac0" loc="77:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTransferByteCount" ref="0x7f85d7de6de0" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="count" ref="0x7f85d7de6b60" loc="46:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwnAddressPending" ref="0x7f85d7dd22d0" loc="95:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getOwnAddress" ref="0x7f85d7de2a60" loc="57:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTransmitReady" ref="0x7f85d7ddc420" loc="72:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setModeI2C" ref="0x7f85d7df5e10" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f85d7eb04a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f85d7eb0080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="config" ref="0x7f85d7df5b90" loc="8:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="msp430_i2c_union_config_t" ref="0x7f85d7eb04a0"/></typename>
                <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f85d7eb0080"/></type-tag>
              </type-qualified>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartBit" ref="0x7f85d7de9020" loc="37:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setWordMode" ref="0x7f85d7df1cb0" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f85d7df1a30" loc="19:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setData" ref="0x7f85d7de7980" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d7de7700" loc="42:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isStartDetectPending" ref="0x7f85d7dd6b60" loc="90:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getClockSource" ref="0x7f85d7def620" loc="24:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getWordMode" ref="0x7f85d7df1350" loc="18:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShiftClock" ref="0x7f85d7de22a0" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="shift" ref="0x7f85d7de2020" loc="54:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlaveMode" ref="0x7f85d7df4ce0" loc="12:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableNoAck" ref="0x7f85d7dd7020" loc="84:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveReady" ref="0x7f85d7ddb350" loc="75:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableGeneralCall" ref="0x7f85d7ddecc0" loc="68:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClockPrescaler" ref="0x7f85d7de3020" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scaler" ref="0x7f85d7de5d30" loc="50:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setStopBit" ref="0x7f85d7dea740" loc="35:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setReceiveMode" ref="0x7f85d7dec7b0" loc="29:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isNoAckPending" ref="0x7f85d7dd2a40" loc="96:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRepeatMode" ref="0x7f85d7df0e30" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mode" ref="0x7f85d7df0bb0" loc="22:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isTransmitReadyPending" ref="0x7f85d7dd4b10" loc="92:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setStartByte" ref="0x7f85d7deb750" loc="32:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isReceiveReadyPending" ref="0x7f85d7dd3350" loc="93:../../../tos/chips/msp430/usart/HplMsp430I2C.nc">
        <interfacedef-ref qname="HplMsp430I2C"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:../../../tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:../../../tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x7f85d7d2c020" loc="90:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x7f85d7d2c880" loc="98:../../../tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:../../../tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="38:../../../tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x7f85d7cf7dc0" loc="54:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="46:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x7f85d7cf4020" loc="71:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="65:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x7f85d7cf7530" loc="44:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="39:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x7f85d7cf56d0" loc="63:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="56:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;&#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x7f85d7cf4950" loc="79:../../../tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="73:../../../tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwnerInfo" loc="2:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
      <function command="" provided="0" name="inUse" ref="0x7f85d7cf3b20" loc="9:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
        <documentation loc="3:../../../tos/interfaces/ResourceDefaultOwnerInfo.nc">
          <short>&#10; Check whether a DefaultOwner has an active client.</short>
          <long>&#10; Check whether a DefaultOwner has an active client.&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwnerInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:../../../tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:../../../tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x7f85d7ce84c0" loc="79:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f85d7cf1490"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f85d7ce8240" loc="79:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f85d7cf1490"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x7f85d7cea420" loc="53:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x7f85d7ce9020" loc="62:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f85d7cf1490"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f85d7ceaca0" loc="62:../../../tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x7f85d7cf1490"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x7f85d7ce9930" loc="70:../../../tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:../../../tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x7f85d7cf1490"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadId48" loc="8:../../../tos/chips/ds2411/ReadId48.nc">
      <documentation loc="4:../../../tos/chips/ds2411/ReadId48.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f85d7adf5e0" loc="13:../../../tos/chips/ds2411/ReadId48.nc">
        <interfacedef-ref qname="ReadId48"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x7f85d7adf360" loc="13:../../../tos/chips/ds2411/ReadId48.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="OneWireReadWrite" loc="9:../../../tos/lib/onewire/OneWireReadWrite.nc">
      <documentation loc="5:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <short>&#10; </short>
        <long>&#10; @author: Andreas Koepke (koepke@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <function command="" provided="0" name="read" ref="0x7f85d7accb00" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="cmd" ref="0x7f85d7acc1c0" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
          <variable name="buf" ref="0x7f85d7acc530" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d7acc860" loc="10:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x7f85d7aca880" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
        <interfacedef-ref qname="OneWireReadWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f85d7aca2c0" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-qualified const="">
                  <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
                <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d7aca5f0" loc="11:../../../tos/lib/onewire/OneWireReadWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:../../../tos/lib/timer/BusyWait.nc">
      <documentation loc="36:../../../tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f85d7ab2530" loc="59:../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f85d7ab2530"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f85d7ab2770" loc="59:../../../tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d7ab2770"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x7f85d7ab12e0" loc="66:../../../tos/lib/timer/BusyWait.nc">
        <documentation loc="61:../../../tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d7ab2770"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f85d7ab1060" loc="66:../../../tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f85d7ab2770"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveIndicator" loc="37:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <short>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; </short>
        <long>&#10; Interface to obtain energy, byte, and packet receive check readings&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="isReceiving" ref="0x7f85d7a4d580" loc="43:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
        <documentation loc="39:../../../tos/chips/cc2420/interfaces/ReceiveIndicator.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if the indicator is showing we are actively receiving at this&#10; level&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveIndicator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420Receive" loc="42:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
      <documentation loc="32:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <short>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.</short>
        <long>&#10; Low-level abstraction of the receive path implementation for the&#10; ChipCon CC2420 radio.&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2008-06-17 07:28:24 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f85d7a1b9e0" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="57:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Signals that a message has been received.</short>
          <long>&#10; Signals that a message has been received.&#10;&#10; @param type of the message received.&#10; @param message pointer to message received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0x7f85d7a1b020" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
          <variable name="message" ref="0x7f85d7a1b750" loc="63:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd_dropped" ref="0x7f85d7a1c7f0" loc="55:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="51:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that the packet has been dropped by the radio&#10; (e.g.</short>
          <long>&#10; Notification that the packet has been dropped by the radio&#10; (e.g. due to address rejection).&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sfd" ref="0x7f85d7a1c020" loc="49:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
        <documentation loc="44:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
          <short>&#10; Notification that an SFD capture has occured.</short>
          <long>&#10; Notification that an SFD capture has occured.&#10;&#10; @param time at which the capture happened.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x7f85d7a1fd30" loc="49:../../../tos/chips/cc2420/interfaces/CC2420Receive.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
              <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeSyncOffset" loc="43:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
      <function command="" provided="0" name="get" ref="0x7f85d7a313d0" loc="58:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="52:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns the offset of where the timesync timestamp is sotred in a&#10; CC2420 packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d7a31150" loc="58:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x7f85d7a323d0" loc="50:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="45:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns TRUE if the current message should be timestamped.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d7a32150" loc="50:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f85d7a2e350" loc="72:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="67:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10; Cancels any pending requests to timestamp the message in MAC.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d7a2e0d0" loc="72:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f85d7a2f390" loc="65:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
        <documentation loc="60:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10;  Sets the current message to be timestamped in the MAC layer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d7a2f110" loc="65:../../../tos/chips/cc2420/interfaces/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:../../../tos/lib/timer/LocalTime.nc">
      <documentation loc="36:../../../tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f85d78b9910" loc="53:../../../tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f85d78b9910"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f85d78b6270" loc="61:../../../tos/lib/timer/LocalTime.nc">
        <documentation loc="55:../../../tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:2">
            <typename><typedef-ref name="uint32_t" ref="0x7f85d959e920"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TimeSkew" loc="51:../../../tos/lib/timer/TimeSkew.nc">
      <documentation loc="35:../../../tos/lib/timer/TimeSkew.nc">
        <short>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.</short>
        <long>&#10; The TinyOS timing system is based on various layers, ultimately&#10; tying to the underlying timing h/w.  Under various circumstances&#10; adjustments may be made by this underlying timing that can result&#10; in time skew.&#10;&#10; Typically this can occur when the RTC (Real Time Clock) subsystem&#10; has had its time adjusted for example via a GPS providing synchronized&#10; time.  If this skew is below a reasonable threshold (platform dependent)&#10; TimeSkew.skew(skew_val) will be signalled.  Beyond that threshold&#10; it might be better to reboot and reestablish reasonable time via&#10; those mechanisms.&#10;&#10; @author Eric B.Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function event="" provided="0" name="skew" ref="0x7f85d77d8e80" loc="62:../../../tos/lib/timer/TimeSkew.nc">
        <documentation loc="52:../../../tos/lib/timer/TimeSkew.nc">
          <short>&#10; Signaled when the underlying timing system has detected timing&#10; skew.</short>
          <long>&#10; Signaled when the underlying timing system has detected timing&#10; skew.&#10;&#10; @param skew    estimated skew computed.  in millisecs (units platform&#10;                dependent, typically binary millisecs).&#10;                > 0, time has been moved into the future (we were slow).&#10;                &#60; 0, time has been shifted backwards, (we were fast).&#10;                = 0, skew is beyond platform limits.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TimeSkew"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f85d959f930"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="skew" ref="0x7f85d77d8c00" loc="62:../../../tos/lib/timer/TimeSkew.nc">
            <type-int cname="long" size="I:4" alignment="I:2">
              <typename><typedef-ref name="int32_t" ref="0x7f85d959f930"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:../../../tos/interfaces/ParameterInit.nc">
      <documentation loc="34:../../../tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7f85d76f45e0" loc="53:../../../tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f85d76f45e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7f85d76f12a0" loc="64:../../../tos/interfaces/ParameterInit.nc">
        <documentation loc="55:../../../tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f85d76f45e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7f85d76f1020" loc="64:../../../tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f85d76f45e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:../../../tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:../../../tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x7f85d74dbb00" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d74db4f0" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x7f85d74db870" loc="31:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x7f85d74dfc70" loc="15:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x7f85d74dcb60" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:../../../tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f85d74dc560" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-tag size="I:52" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f85d894a5e0"/>
                <typename><typedef-ref name="message_t" ref="0x7f85d8948c50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x7f85d74dc8d0" loc="23:../../../tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:../../../tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x7f85d74c2960" loc="54:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x7f85d74c21f0" loc="49:../../../tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:../../../tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:../../../tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:../../../tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x7f85d74d4c20" loc="56:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x7f85d74c80e0" loc="72:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x7f85d74c7d00" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d74c7a80" loc="94:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x7f85d74c8960" loc="79:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x7f85d74ca7e0" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d74ca560" loc="65:../../../tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x7f85d74c65b0" loc="100:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x7f85d74c7270" loc="85:../../../tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:../../../tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:../../../tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x7f85d74d2780" loc="71:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x7f85d74d10e0" loc="81:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x7f85d74d5d80" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x7f85d74d5b00" loc="62:../../../tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x7f85d74d1c60" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:../../../tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f85d74d19e0" loc="91:../../../tos/lib/serial/SendBytePacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:../../../tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x7f85d74ce8f0" loc="62:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x7f85d74cd5b0" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x7f85d74cd330" loc="69:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x7f85d74cc0b0" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:../../../tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f85d74cde00" loc="80:../../../tos/lib/serial/ReceiveBytePacket.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:../../../tos/interfaces/UartStream.nc">
      <documentation loc="32:../../../tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f85d7397c40" loc="48:../../../tos/interfaces/UartStream.nc">
        <documentation loc="39:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f85d7397670" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d73979b0" loc="48:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x7f85d7392a70" loc="79:../../../tos/interfaces/UartStream.nc">
        <documentation loc="74:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f85d73927f0" loc="79:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f85d7391890" loc="90:../../../tos/interfaces/UartStream.nc">
        <documentation loc="81:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f85d73912c0" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d7391600" loc="90:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x7f85d7393610" loc="65:../../../tos/interfaces/UartStream.nc">
        <documentation loc="59:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x7f85d73902c0" loc="99:../../../tos/interfaces/UartStream.nc">
        <documentation loc="92:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f85d738e820" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d738eb60" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f85d7390020" loc="99:../../../tos/interfaces/UartStream.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x7f85d7392020" loc="72:../../../tos/interfaces/UartStream.nc">
        <documentation loc="67:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f85d7396610" loc="57:../../../tos/interfaces/UartStream.nc">
        <documentation loc="50:../../../tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x7f85d7395bd0" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f85d7396020" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f85d959e520"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x7f85d7396370" loc="57:../../../tos/interfaces/UartStream.nc">
            <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
              <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="41:../../../tos/interfaces/UartByte.nc">
      <documentation loc="36:../../../tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @author Eric B. Decker &#60;cire831@gmail.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f85d736f5b0" loc="50:../../../tos/interfaces/UartByte.nc">
        <documentation loc="43:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f85d736f330" loc="50:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sendAvail" ref="0x7f85d736fdf0" loc="59:../../../tos/interfaces/UartByte.nc">
        <documentation loc="52:../../../tos/interfaces/UartByte.nc">
          <short>&#10; sendAvail: is space available for another TX byte.</short>
          <long>&#10; sendAvail: is space available for another TX byte.&#10;&#10; @return TRUE&#9;the TX subsystem can take another byte.  ie.&#10;&#9;&#9;&#9;UartByte.send() would not block if called.&#10;&#9;     FALSE&#9;TX pipeline is full, UartByte.send() would block.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x7f85d736dcf0" loc="69:../../../tos/interfaces/UartByte.nc">
        <documentation loc="61:../../../tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received or the timeout occurs.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x7f85d736d700" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:2">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x7f85d736da60" loc="69:../../../tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f85d959e160"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receiveAvail" ref="0x7f85d736bb50" loc="79:../../../tos/interfaces/UartByte.nc">
        <documentation loc="71:../../../tos/interfaces/UartByte.nc">
          <short>&#10; receiveAvail: incoming has another byte available.</short>
          <long>&#10; receiveAvail: incoming has another byte available.&#10;&#10; @return TRUE&#9;the RX subsystem has another byte to receive.  ie.&#10;&#9;&#9;&#9;UartByte.receive() would not block if called.&#10;&#9;     FALSE&#9;RX pipeline is empty, UartByte.receive() would block&#10;&#9;&#9;&#9;waiting for a byte and/or the timeout.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Msp430UartConfigure" loc="38:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
      <documentation loc="30:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <short>&#10; Interface used by Msp430Uart clients to reconfigure the UART before use&#10; </short>
        <long>&#10; Interface used by Msp430Uart clients to reconfigure the UART before use&#10; @author Vlado Handziski &#60;handzisk@tkn.tu-berlin.de>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:11 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getConfig" ref="0x7f85d73644c0" loc="39:../../../tos/chips/msp430/usart/Msp430UartConfigure.nc">
        <interfacedef-ref qname="Msp430UartConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:2">
            <type-qualified const="">
                <typename><typedef-ref name="msp430_uart_union_config_t" ref="0x7f85d7ec3b50"/></typename>
              <type-tag size="I:8" alignment="I:2"><union-ref ref="0x7f85d7ec3730"/></type-tag>
            </type-qualified>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:../../../tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:../../../tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f85d72d5860" loc="95:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f85d72d40e0" loc="105:../../../tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:../../../tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:2" alignment="I:2"><enum-ref name="__nesc_unnamed4242" ref="0x7f85d8ef1020"/>
            <typename><typedef-ref name="error_t" ref="0x7f85d8eec1b0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:../../../tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:../../../tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x7f85d720cce0" loc="62:../../../tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:../../../tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBusy" loc="2:../../../tos/interfaces/SendBusy.nc">
      <function command="" provided="0" name="busy" ref="0x7f85d71761f0" loc="9:../../../tos/interfaces/SendBusy.nc">
        <documentation loc="3:../../../tos/interfaces/SendBusy.nc">
          <short>&#10; Check whether send queue entry is in use&#10;&#10; </short>
          <long>&#10; Check whether send queue entry is in use&#10;&#10; @return TRUE If client is active.&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBusy"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f85d8ef7090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
